// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_crate_operation_accept_reserved_instances_exchange_quote(
    input: &crate::input::AcceptReservedInstancesExchangeQuoteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AcceptReservedInstancesExchangeQuote",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("DryRun");
    if let Some(var_2) = &input.dry_run {
        scope_1.boolean(*var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("ReservedInstanceId");
    if let Some(var_4) = &input.reserved_instance_ids {
        let mut list_6 = scope_3.start_list(true, Some("ReservedInstanceId"));
        for item_5 in var_4 {
            #[allow(unused_mut)]
            let mut entry_7 = list_6.entry();
            entry_7.string(item_5);
        }
        list_6.finish();
    }
    #[allow(unused_mut)]
    let mut scope_8 = writer.prefix("TargetConfiguration");
    if let Some(var_9) = &input.target_configurations {
        let mut list_11 = scope_8.start_list(true, Some("TargetConfigurationRequest"));
        for item_10 in var_9 {
            #[allow(unused_mut)]
            let mut entry_12 = list_11.entry();
            crate::query_ser::serialize_structure_crate_model_target_configuration_request(
                entry_12, item_10,
            )?;
        }
        list_11.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_transit_gateway_multicast_domain_associations(
    input: &crate::input::AcceptTransitGatewayMulticastDomainAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AcceptTransitGatewayMulticastDomainAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_14) = &input.transit_gateway_multicast_domain_id {
        scope_13.string(var_14);
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_16) = &input.transit_gateway_attachment_id {
        scope_15.string(var_16);
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("SubnetIds");
    if let Some(var_18) = &input.subnet_ids {
        let mut list_20 = scope_17.start_list(true, Some("item"));
        for item_19 in var_18 {
            #[allow(unused_mut)]
            let mut entry_21 = list_20.entry();
            entry_21.string(item_19);
        }
        list_20.finish();
    }
    #[allow(unused_mut)]
    let mut scope_22 = writer.prefix("DryRun");
    if let Some(var_23) = &input.dry_run {
        scope_22.boolean(*var_23);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_transit_gateway_peering_attachment(
    input: &crate::input::AcceptTransitGatewayPeeringAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AcceptTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_24 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_25) = &input.transit_gateway_attachment_id {
        scope_24.string(var_25);
    }
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("DryRun");
    if let Some(var_27) = &input.dry_run {
        scope_26.boolean(*var_27);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_transit_gateway_vpc_attachment(
    input: &crate::input::AcceptTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AcceptTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_28 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_29) = &input.transit_gateway_attachment_id {
        scope_28.string(var_29);
    }
    #[allow(unused_mut)]
    let mut scope_30 = writer.prefix("DryRun");
    if let Some(var_31) = &input.dry_run {
        scope_30.boolean(*var_31);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_vpc_endpoint_connections(
    input: &crate::input::AcceptVpcEndpointConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AcceptVpcEndpointConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_32 = writer.prefix("DryRun");
    if let Some(var_33) = &input.dry_run {
        scope_32.boolean(*var_33);
    }
    #[allow(unused_mut)]
    let mut scope_34 = writer.prefix("ServiceId");
    if let Some(var_35) = &input.service_id {
        scope_34.string(var_35);
    }
    #[allow(unused_mut)]
    let mut scope_36 = writer.prefix("VpcEndpointId");
    if let Some(var_37) = &input.vpc_endpoint_ids {
        let mut list_39 = scope_36.start_list(true, Some("item"));
        for item_38 in var_37 {
            #[allow(unused_mut)]
            let mut entry_40 = list_39.entry();
            entry_40.string(item_38);
        }
        list_39.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_vpc_peering_connection(
    input: &crate::input::AcceptVpcPeeringConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AcceptVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_41 = writer.prefix("DryRun");
    if let Some(var_42) = &input.dry_run {
        scope_41.boolean(*var_42);
    }
    #[allow(unused_mut)]
    let mut scope_43 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_44) = &input.vpc_peering_connection_id {
        scope_43.string(var_44);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_advertise_byoip_cidr(
    input: &crate::input::AdvertiseByoipCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AdvertiseByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_45 = writer.prefix("Cidr");
    if let Some(var_46) = &input.cidr {
        scope_45.string(var_46);
    }
    #[allow(unused_mut)]
    let mut scope_47 = writer.prefix("DryRun");
    if let Some(var_48) = &input.dry_run {
        scope_47.boolean(*var_48);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_allocate_address(
    input: &crate::input::AllocateAddressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AllocateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_49 = writer.prefix("Domain");
    if let Some(var_50) = &input.domain {
        scope_49.string(var_50.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_51 = writer.prefix("Address");
    if let Some(var_52) = &input.address {
        scope_51.string(var_52);
    }
    #[allow(unused_mut)]
    let mut scope_53 = writer.prefix("PublicIpv4Pool");
    if let Some(var_54) = &input.public_ipv4_pool {
        scope_53.string(var_54);
    }
    #[allow(unused_mut)]
    let mut scope_55 = writer.prefix("NetworkBorderGroup");
    if let Some(var_56) = &input.network_border_group {
        scope_55.string(var_56);
    }
    #[allow(unused_mut)]
    let mut scope_57 = writer.prefix("CustomerOwnedIpv4Pool");
    if let Some(var_58) = &input.customer_owned_ipv4_pool {
        scope_57.string(var_58);
    }
    #[allow(unused_mut)]
    let mut scope_59 = writer.prefix("DryRun");
    if let Some(var_60) = &input.dry_run {
        scope_59.boolean(*var_60);
    }
    #[allow(unused_mut)]
    let mut scope_61 = writer.prefix("TagSpecification");
    if let Some(var_62) = &input.tag_specifications {
        let mut list_64 = scope_61.start_list(true, Some("item"));
        for item_63 in var_62 {
            #[allow(unused_mut)]
            let mut entry_65 = list_64.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_65, item_63)?;
        }
        list_64.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_allocate_hosts(
    input: &crate::input::AllocateHostsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AllocateHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_66 = writer.prefix("AutoPlacement");
    if let Some(var_67) = &input.auto_placement {
        scope_66.string(var_67.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_68 = writer.prefix("AvailabilityZone");
    if let Some(var_69) = &input.availability_zone {
        scope_68.string(var_69);
    }
    #[allow(unused_mut)]
    let mut scope_70 = writer.prefix("ClientToken");
    if let Some(var_71) = &input.client_token {
        scope_70.string(var_71);
    }
    #[allow(unused_mut)]
    let mut scope_72 = writer.prefix("InstanceType");
    if let Some(var_73) = &input.instance_type {
        scope_72.string(var_73);
    }
    #[allow(unused_mut)]
    let mut scope_74 = writer.prefix("InstanceFamily");
    if let Some(var_75) = &input.instance_family {
        scope_74.string(var_75);
    }
    #[allow(unused_mut)]
    let mut scope_76 = writer.prefix("Quantity");
    if let Some(var_77) = &input.quantity {
        scope_76.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_77).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_78 = writer.prefix("TagSpecification");
    if let Some(var_79) = &input.tag_specifications {
        let mut list_81 = scope_78.start_list(true, Some("item"));
        for item_80 in var_79 {
            #[allow(unused_mut)]
            let mut entry_82 = list_81.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_82, item_80)?;
        }
        list_81.finish();
    }
    #[allow(unused_mut)]
    let mut scope_83 = writer.prefix("HostRecovery");
    if let Some(var_84) = &input.host_recovery {
        scope_83.string(var_84.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_85 = writer.prefix("OutpostArn");
    if let Some(var_86) = &input.outpost_arn {
        scope_85.string(var_86);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_allocate_ipam_pool_cidr(
    input: &crate::input::AllocateIpamPoolCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AllocateIpamPoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_87 = writer.prefix("DryRun");
    if let Some(var_88) = &input.dry_run {
        scope_87.boolean(*var_88);
    }
    #[allow(unused_mut)]
    let mut scope_89 = writer.prefix("IpamPoolId");
    if let Some(var_90) = &input.ipam_pool_id {
        scope_89.string(var_90);
    }
    #[allow(unused_mut)]
    let mut scope_91 = writer.prefix("Cidr");
    if let Some(var_92) = &input.cidr {
        scope_91.string(var_92);
    }
    #[allow(unused_mut)]
    let mut scope_93 = writer.prefix("NetmaskLength");
    if let Some(var_94) = &input.netmask_length {
        scope_93.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_94).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_95 = writer.prefix("ClientToken");
    if let Some(var_96) = &input.client_token {
        scope_95.string(var_96);
    }
    #[allow(unused_mut)]
    let mut scope_97 = writer.prefix("Description");
    if let Some(var_98) = &input.description {
        scope_97.string(var_98);
    }
    #[allow(unused_mut)]
    let mut scope_99 = writer.prefix("PreviewNextCidr");
    if let Some(var_100) = &input.preview_next_cidr {
        scope_99.boolean(*var_100);
    }
    #[allow(unused_mut)]
    let mut scope_101 = writer.prefix("DisallowedCidr");
    if let Some(var_102) = &input.disallowed_cidrs {
        let mut list_104 = scope_101.start_list(true, Some("item"));
        for item_103 in var_102 {
            #[allow(unused_mut)]
            let mut entry_105 = list_104.entry();
            entry_105.string(item_103);
        }
        list_104.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_apply_security_groups_to_client_vpn_target_network(
    input: &crate::input::ApplySecurityGroupsToClientVpnTargetNetworkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ApplySecurityGroupsToClientVpnTargetNetwork",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_106 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_107) = &input.client_vpn_endpoint_id {
        scope_106.string(var_107);
    }
    #[allow(unused_mut)]
    let mut scope_108 = writer.prefix("VpcId");
    if let Some(var_109) = &input.vpc_id {
        scope_108.string(var_109);
    }
    #[allow(unused_mut)]
    let mut scope_110 = writer.prefix("SecurityGroupId");
    if let Some(var_111) = &input.security_group_ids {
        let mut list_113 = scope_110.start_list(true, Some("item"));
        for item_112 in var_111 {
            #[allow(unused_mut)]
            let mut entry_114 = list_113.entry();
            entry_114.string(item_112);
        }
        list_113.finish();
    }
    #[allow(unused_mut)]
    let mut scope_115 = writer.prefix("DryRun");
    if let Some(var_116) = &input.dry_run {
        scope_115.boolean(*var_116);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_assign_ipv6_addresses(
    input: &crate::input::AssignIpv6AddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssignIpv6Addresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_117 = writer.prefix("Ipv6AddressCount");
    if let Some(var_118) = &input.ipv6_address_count {
        scope_117.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_118).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_119 = writer.prefix("Ipv6Addresses");
    if let Some(var_120) = &input.ipv6_addresses {
        let mut list_122 = scope_119.start_list(true, Some("item"));
        for item_121 in var_120 {
            #[allow(unused_mut)]
            let mut entry_123 = list_122.entry();
            entry_123.string(item_121);
        }
        list_122.finish();
    }
    #[allow(unused_mut)]
    let mut scope_124 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_125) = &input.ipv6_prefix_count {
        scope_124.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_125).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_126 = writer.prefix("Ipv6Prefix");
    if let Some(var_127) = &input.ipv6_prefixes {
        let mut list_129 = scope_126.start_list(true, Some("item"));
        for item_128 in var_127 {
            #[allow(unused_mut)]
            let mut entry_130 = list_129.entry();
            entry_130.string(item_128);
        }
        list_129.finish();
    }
    #[allow(unused_mut)]
    let mut scope_131 = writer.prefix("NetworkInterfaceId");
    if let Some(var_132) = &input.network_interface_id {
        scope_131.string(var_132);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_assign_private_ip_addresses(
    input: &crate::input::AssignPrivateIpAddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssignPrivateIpAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_133 = writer.prefix("AllowReassignment");
    if let Some(var_134) = &input.allow_reassignment {
        scope_133.boolean(*var_134);
    }
    #[allow(unused_mut)]
    let mut scope_135 = writer.prefix("NetworkInterfaceId");
    if let Some(var_136) = &input.network_interface_id {
        scope_135.string(var_136);
    }
    #[allow(unused_mut)]
    let mut scope_137 = writer.prefix("PrivateIpAddress");
    if let Some(var_138) = &input.private_ip_addresses {
        let mut list_140 = scope_137.start_list(true, Some("PrivateIpAddress"));
        for item_139 in var_138 {
            #[allow(unused_mut)]
            let mut entry_141 = list_140.entry();
            entry_141.string(item_139);
        }
        list_140.finish();
    }
    #[allow(unused_mut)]
    let mut scope_142 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_143) = &input.secondary_private_ip_address_count {
        scope_142.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_143).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_144 = writer.prefix("Ipv4Prefix");
    if let Some(var_145) = &input.ipv4_prefixes {
        let mut list_147 = scope_144.start_list(true, Some("item"));
        for item_146 in var_145 {
            #[allow(unused_mut)]
            let mut entry_148 = list_147.entry();
            entry_148.string(item_146);
        }
        list_147.finish();
    }
    #[allow(unused_mut)]
    let mut scope_149 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_150) = &input.ipv4_prefix_count {
        scope_149.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_150).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_address(
    input: &crate::input::AssociateAddressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AssociateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_151 = writer.prefix("AllocationId");
    if let Some(var_152) = &input.allocation_id {
        scope_151.string(var_152);
    }
    #[allow(unused_mut)]
    let mut scope_153 = writer.prefix("InstanceId");
    if let Some(var_154) = &input.instance_id {
        scope_153.string(var_154);
    }
    #[allow(unused_mut)]
    let mut scope_155 = writer.prefix("PublicIp");
    if let Some(var_156) = &input.public_ip {
        scope_155.string(var_156);
    }
    #[allow(unused_mut)]
    let mut scope_157 = writer.prefix("AllowReassociation");
    if let Some(var_158) = &input.allow_reassociation {
        scope_157.boolean(*var_158);
    }
    #[allow(unused_mut)]
    let mut scope_159 = writer.prefix("DryRun");
    if let Some(var_160) = &input.dry_run {
        scope_159.boolean(*var_160);
    }
    #[allow(unused_mut)]
    let mut scope_161 = writer.prefix("NetworkInterfaceId");
    if let Some(var_162) = &input.network_interface_id {
        scope_161.string(var_162);
    }
    #[allow(unused_mut)]
    let mut scope_163 = writer.prefix("PrivateIpAddress");
    if let Some(var_164) = &input.private_ip_address {
        scope_163.string(var_164);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_client_vpn_target_network(
    input: &crate::input::AssociateClientVpnTargetNetworkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateClientVpnTargetNetwork",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_165 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_166) = &input.client_vpn_endpoint_id {
        scope_165.string(var_166);
    }
    #[allow(unused_mut)]
    let mut scope_167 = writer.prefix("SubnetId");
    if let Some(var_168) = &input.subnet_id {
        scope_167.string(var_168);
    }
    #[allow(unused_mut)]
    let mut scope_169 = writer.prefix("ClientToken");
    if let Some(var_170) = &input.client_token {
        scope_169.string(var_170);
    }
    #[allow(unused_mut)]
    let mut scope_171 = writer.prefix("DryRun");
    if let Some(var_172) = &input.dry_run {
        scope_171.boolean(*var_172);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_dhcp_options(
    input: &crate::input::AssociateDhcpOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_173 = writer.prefix("DhcpOptionsId");
    if let Some(var_174) = &input.dhcp_options_id {
        scope_173.string(var_174);
    }
    #[allow(unused_mut)]
    let mut scope_175 = writer.prefix("VpcId");
    if let Some(var_176) = &input.vpc_id {
        scope_175.string(var_176);
    }
    #[allow(unused_mut)]
    let mut scope_177 = writer.prefix("DryRun");
    if let Some(var_178) = &input.dry_run {
        scope_177.boolean(*var_178);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_enclave_certificate_iam_role(
    input: &crate::input::AssociateEnclaveCertificateIamRoleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateEnclaveCertificateIamRole",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_179 = writer.prefix("CertificateArn");
    if let Some(var_180) = &input.certificate_arn {
        scope_179.string(var_180);
    }
    #[allow(unused_mut)]
    let mut scope_181 = writer.prefix("RoleArn");
    if let Some(var_182) = &input.role_arn {
        scope_181.string(var_182);
    }
    #[allow(unused_mut)]
    let mut scope_183 = writer.prefix("DryRun");
    if let Some(var_184) = &input.dry_run {
        scope_183.boolean(*var_184);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_iam_instance_profile(
    input: &crate::input::AssociateIamInstanceProfileInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateIamInstanceProfile", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_185 = writer.prefix("IamInstanceProfile");
    if let Some(var_186) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_185, var_186,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_187 = writer.prefix("InstanceId");
    if let Some(var_188) = &input.instance_id {
        scope_187.string(var_188);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_instance_event_window(
    input: &crate::input::AssociateInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_189 = writer.prefix("DryRun");
    if let Some(var_190) = &input.dry_run {
        scope_189.boolean(*var_190);
    }
    #[allow(unused_mut)]
    let mut scope_191 = writer.prefix("InstanceEventWindowId");
    if let Some(var_192) = &input.instance_event_window_id {
        scope_191.string(var_192);
    }
    #[allow(unused_mut)]
    let mut scope_193 = writer.prefix("AssociationTarget");
    if let Some(var_194) = &input.association_target {
        crate::query_ser::serialize_structure_crate_model_instance_event_window_association_request(scope_193, var_194)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_route_table(
    input: &crate::input::AssociateRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_195 = writer.prefix("DryRun");
    if let Some(var_196) = &input.dry_run {
        scope_195.boolean(*var_196);
    }
    #[allow(unused_mut)]
    let mut scope_197 = writer.prefix("RouteTableId");
    if let Some(var_198) = &input.route_table_id {
        scope_197.string(var_198);
    }
    #[allow(unused_mut)]
    let mut scope_199 = writer.prefix("SubnetId");
    if let Some(var_200) = &input.subnet_id {
        scope_199.string(var_200);
    }
    #[allow(unused_mut)]
    let mut scope_201 = writer.prefix("GatewayId");
    if let Some(var_202) = &input.gateway_id {
        scope_201.string(var_202);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_subnet_cidr_block(
    input: &crate::input::AssociateSubnetCidrBlockInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateSubnetCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_203 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_204) = &input.ipv6_cidr_block {
        scope_203.string(var_204);
    }
    #[allow(unused_mut)]
    let mut scope_205 = writer.prefix("SubnetId");
    if let Some(var_206) = &input.subnet_id {
        scope_205.string(var_206);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_transit_gateway_multicast_domain(
    input: &crate::input::AssociateTransitGatewayMulticastDomainInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_207 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_208) = &input.transit_gateway_multicast_domain_id {
        scope_207.string(var_208);
    }
    #[allow(unused_mut)]
    let mut scope_209 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_210) = &input.transit_gateway_attachment_id {
        scope_209.string(var_210);
    }
    #[allow(unused_mut)]
    let mut scope_211 = writer.prefix("SubnetIds");
    if let Some(var_212) = &input.subnet_ids {
        let mut list_214 = scope_211.start_list(true, Some("item"));
        for item_213 in var_212 {
            #[allow(unused_mut)]
            let mut entry_215 = list_214.entry();
            entry_215.string(item_213);
        }
        list_214.finish();
    }
    #[allow(unused_mut)]
    let mut scope_216 = writer.prefix("DryRun");
    if let Some(var_217) = &input.dry_run {
        scope_216.boolean(*var_217);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_transit_gateway_route_table(
    input: &crate::input::AssociateTransitGatewayRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_218 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_219) = &input.transit_gateway_route_table_id {
        scope_218.string(var_219);
    }
    #[allow(unused_mut)]
    let mut scope_220 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_221) = &input.transit_gateway_attachment_id {
        scope_220.string(var_221);
    }
    #[allow(unused_mut)]
    let mut scope_222 = writer.prefix("DryRun");
    if let Some(var_223) = &input.dry_run {
        scope_222.boolean(*var_223);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_trunk_interface(
    input: &crate::input::AssociateTrunkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateTrunkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_224 = writer.prefix("BranchInterfaceId");
    if let Some(var_225) = &input.branch_interface_id {
        scope_224.string(var_225);
    }
    #[allow(unused_mut)]
    let mut scope_226 = writer.prefix("TrunkInterfaceId");
    if let Some(var_227) = &input.trunk_interface_id {
        scope_226.string(var_227);
    }
    #[allow(unused_mut)]
    let mut scope_228 = writer.prefix("VlanId");
    if let Some(var_229) = &input.vlan_id {
        scope_228.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_229).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_230 = writer.prefix("GreKey");
    if let Some(var_231) = &input.gre_key {
        scope_230.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_231).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_232 = writer.prefix("ClientToken");
    if let Some(var_233) = &input.client_token {
        scope_232.string(var_233);
    }
    #[allow(unused_mut)]
    let mut scope_234 = writer.prefix("DryRun");
    if let Some(var_235) = &input.dry_run {
        scope_234.boolean(*var_235);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_vpc_cidr_block(
    input: &crate::input::AssociateVpcCidrBlockInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateVpcCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_236 = writer.prefix("AmazonProvidedIpv6CidrBlock");
    if let Some(var_237) = &input.amazon_provided_ipv6_cidr_block {
        scope_236.boolean(*var_237);
    }
    #[allow(unused_mut)]
    let mut scope_238 = writer.prefix("CidrBlock");
    if let Some(var_239) = &input.cidr_block {
        scope_238.string(var_239);
    }
    #[allow(unused_mut)]
    let mut scope_240 = writer.prefix("VpcId");
    if let Some(var_241) = &input.vpc_id {
        scope_240.string(var_241);
    }
    #[allow(unused_mut)]
    let mut scope_242 = writer.prefix("Ipv6CidrBlockNetworkBorderGroup");
    if let Some(var_243) = &input.ipv6_cidr_block_network_border_group {
        scope_242.string(var_243);
    }
    #[allow(unused_mut)]
    let mut scope_244 = writer.prefix("Ipv6Pool");
    if let Some(var_245) = &input.ipv6_pool {
        scope_244.string(var_245);
    }
    #[allow(unused_mut)]
    let mut scope_246 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_247) = &input.ipv6_cidr_block {
        scope_246.string(var_247);
    }
    #[allow(unused_mut)]
    let mut scope_248 = writer.prefix("Ipv4IpamPoolId");
    if let Some(var_249) = &input.ipv4_ipam_pool_id {
        scope_248.string(var_249);
    }
    #[allow(unused_mut)]
    let mut scope_250 = writer.prefix("Ipv4NetmaskLength");
    if let Some(var_251) = &input.ipv4_netmask_length {
        scope_250.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_251).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_252 = writer.prefix("Ipv6IpamPoolId");
    if let Some(var_253) = &input.ipv6_ipam_pool_id {
        scope_252.string(var_253);
    }
    #[allow(unused_mut)]
    let mut scope_254 = writer.prefix("Ipv6NetmaskLength");
    if let Some(var_255) = &input.ipv6_netmask_length {
        scope_254.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_255).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_classic_link_vpc(
    input: &crate::input::AttachClassicLinkVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AttachClassicLinkVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_256 = writer.prefix("DryRun");
    if let Some(var_257) = &input.dry_run {
        scope_256.boolean(*var_257);
    }
    #[allow(unused_mut)]
    let mut scope_258 = writer.prefix("SecurityGroupId");
    if let Some(var_259) = &input.groups {
        let mut list_261 = scope_258.start_list(true, Some("groupId"));
        for item_260 in var_259 {
            #[allow(unused_mut)]
            let mut entry_262 = list_261.entry();
            entry_262.string(item_260);
        }
        list_261.finish();
    }
    #[allow(unused_mut)]
    let mut scope_263 = writer.prefix("InstanceId");
    if let Some(var_264) = &input.instance_id {
        scope_263.string(var_264);
    }
    #[allow(unused_mut)]
    let mut scope_265 = writer.prefix("VpcId");
    if let Some(var_266) = &input.vpc_id {
        scope_265.string(var_266);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_internet_gateway(
    input: &crate::input::AttachInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AttachInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_267 = writer.prefix("DryRun");
    if let Some(var_268) = &input.dry_run {
        scope_267.boolean(*var_268);
    }
    #[allow(unused_mut)]
    let mut scope_269 = writer.prefix("InternetGatewayId");
    if let Some(var_270) = &input.internet_gateway_id {
        scope_269.string(var_270);
    }
    #[allow(unused_mut)]
    let mut scope_271 = writer.prefix("VpcId");
    if let Some(var_272) = &input.vpc_id {
        scope_271.string(var_272);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_network_interface(
    input: &crate::input::AttachNetworkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AttachNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_273 = writer.prefix("DeviceIndex");
    if let Some(var_274) = &input.device_index {
        scope_273.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_274).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_275 = writer.prefix("DryRun");
    if let Some(var_276) = &input.dry_run {
        scope_275.boolean(*var_276);
    }
    #[allow(unused_mut)]
    let mut scope_277 = writer.prefix("InstanceId");
    if let Some(var_278) = &input.instance_id {
        scope_277.string(var_278);
    }
    #[allow(unused_mut)]
    let mut scope_279 = writer.prefix("NetworkInterfaceId");
    if let Some(var_280) = &input.network_interface_id {
        scope_279.string(var_280);
    }
    #[allow(unused_mut)]
    let mut scope_281 = writer.prefix("NetworkCardIndex");
    if let Some(var_282) = &input.network_card_index {
        scope_281.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_282).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_volume(
    input: &crate::input::AttachVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AttachVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_283 = writer.prefix("Device");
    if let Some(var_284) = &input.device {
        scope_283.string(var_284);
    }
    #[allow(unused_mut)]
    let mut scope_285 = writer.prefix("InstanceId");
    if let Some(var_286) = &input.instance_id {
        scope_285.string(var_286);
    }
    #[allow(unused_mut)]
    let mut scope_287 = writer.prefix("VolumeId");
    if let Some(var_288) = &input.volume_id {
        scope_287.string(var_288);
    }
    #[allow(unused_mut)]
    let mut scope_289 = writer.prefix("DryRun");
    if let Some(var_290) = &input.dry_run {
        scope_289.boolean(*var_290);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_vpn_gateway(
    input: &crate::input::AttachVpnGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AttachVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_291 = writer.prefix("VpcId");
    if let Some(var_292) = &input.vpc_id {
        scope_291.string(var_292);
    }
    #[allow(unused_mut)]
    let mut scope_293 = writer.prefix("VpnGatewayId");
    if let Some(var_294) = &input.vpn_gateway_id {
        scope_293.string(var_294);
    }
    #[allow(unused_mut)]
    let mut scope_295 = writer.prefix("DryRun");
    if let Some(var_296) = &input.dry_run {
        scope_295.boolean(*var_296);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_client_vpn_ingress(
    input: &crate::input::AuthorizeClientVpnIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeClientVpnIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_297 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_298) = &input.client_vpn_endpoint_id {
        scope_297.string(var_298);
    }
    #[allow(unused_mut)]
    let mut scope_299 = writer.prefix("TargetNetworkCidr");
    if let Some(var_300) = &input.target_network_cidr {
        scope_299.string(var_300);
    }
    #[allow(unused_mut)]
    let mut scope_301 = writer.prefix("AccessGroupId");
    if let Some(var_302) = &input.access_group_id {
        scope_301.string(var_302);
    }
    #[allow(unused_mut)]
    let mut scope_303 = writer.prefix("AuthorizeAllGroups");
    if let Some(var_304) = &input.authorize_all_groups {
        scope_303.boolean(*var_304);
    }
    #[allow(unused_mut)]
    let mut scope_305 = writer.prefix("Description");
    if let Some(var_306) = &input.description {
        scope_305.string(var_306);
    }
    #[allow(unused_mut)]
    let mut scope_307 = writer.prefix("ClientToken");
    if let Some(var_308) = &input.client_token {
        scope_307.string(var_308);
    }
    #[allow(unused_mut)]
    let mut scope_309 = writer.prefix("DryRun");
    if let Some(var_310) = &input.dry_run {
        scope_309.boolean(*var_310);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_security_group_egress(
    input: &crate::input::AuthorizeSecurityGroupEgressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeSecurityGroupEgress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_311 = writer.prefix("DryRun");
    if let Some(var_312) = &input.dry_run {
        scope_311.boolean(*var_312);
    }
    #[allow(unused_mut)]
    let mut scope_313 = writer.prefix("GroupId");
    if let Some(var_314) = &input.group_id {
        scope_313.string(var_314);
    }
    #[allow(unused_mut)]
    let mut scope_315 = writer.prefix("IpPermissions");
    if let Some(var_316) = &input.ip_permissions {
        let mut list_318 = scope_315.start_list(true, Some("item"));
        for item_317 in var_316 {
            #[allow(unused_mut)]
            let mut entry_319 = list_318.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_319, item_317)?;
        }
        list_318.finish();
    }
    #[allow(unused_mut)]
    let mut scope_320 = writer.prefix("TagSpecification");
    if let Some(var_321) = &input.tag_specifications {
        let mut list_323 = scope_320.start_list(true, Some("item"));
        for item_322 in var_321 {
            #[allow(unused_mut)]
            let mut entry_324 = list_323.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_324, item_322,
            )?;
        }
        list_323.finish();
    }
    #[allow(unused_mut)]
    let mut scope_325 = writer.prefix("CidrIp");
    if let Some(var_326) = &input.cidr_ip {
        scope_325.string(var_326);
    }
    #[allow(unused_mut)]
    let mut scope_327 = writer.prefix("FromPort");
    if let Some(var_328) = &input.from_port {
        scope_327.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_328).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_329 = writer.prefix("IpProtocol");
    if let Some(var_330) = &input.ip_protocol {
        scope_329.string(var_330);
    }
    #[allow(unused_mut)]
    let mut scope_331 = writer.prefix("ToPort");
    if let Some(var_332) = &input.to_port {
        scope_331.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_332).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_333 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_334) = &input.source_security_group_name {
        scope_333.string(var_334);
    }
    #[allow(unused_mut)]
    let mut scope_335 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_336) = &input.source_security_group_owner_id {
        scope_335.string(var_336);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_security_group_ingress(
    input: &crate::input::AuthorizeSecurityGroupIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeSecurityGroupIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_337 = writer.prefix("CidrIp");
    if let Some(var_338) = &input.cidr_ip {
        scope_337.string(var_338);
    }
    #[allow(unused_mut)]
    let mut scope_339 = writer.prefix("FromPort");
    if let Some(var_340) = &input.from_port {
        scope_339.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_340).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_341 = writer.prefix("GroupId");
    if let Some(var_342) = &input.group_id {
        scope_341.string(var_342);
    }
    #[allow(unused_mut)]
    let mut scope_343 = writer.prefix("GroupName");
    if let Some(var_344) = &input.group_name {
        scope_343.string(var_344);
    }
    #[allow(unused_mut)]
    let mut scope_345 = writer.prefix("IpPermissions");
    if let Some(var_346) = &input.ip_permissions {
        let mut list_348 = scope_345.start_list(true, Some("item"));
        for item_347 in var_346 {
            #[allow(unused_mut)]
            let mut entry_349 = list_348.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_349, item_347)?;
        }
        list_348.finish();
    }
    #[allow(unused_mut)]
    let mut scope_350 = writer.prefix("IpProtocol");
    if let Some(var_351) = &input.ip_protocol {
        scope_350.string(var_351);
    }
    #[allow(unused_mut)]
    let mut scope_352 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_353) = &input.source_security_group_name {
        scope_352.string(var_353);
    }
    #[allow(unused_mut)]
    let mut scope_354 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_355) = &input.source_security_group_owner_id {
        scope_354.string(var_355);
    }
    #[allow(unused_mut)]
    let mut scope_356 = writer.prefix("ToPort");
    if let Some(var_357) = &input.to_port {
        scope_356.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_357).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_358 = writer.prefix("DryRun");
    if let Some(var_359) = &input.dry_run {
        scope_358.boolean(*var_359);
    }
    #[allow(unused_mut)]
    let mut scope_360 = writer.prefix("TagSpecification");
    if let Some(var_361) = &input.tag_specifications {
        let mut list_363 = scope_360.start_list(true, Some("item"));
        for item_362 in var_361 {
            #[allow(unused_mut)]
            let mut entry_364 = list_363.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_364, item_362,
            )?;
        }
        list_363.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_bundle_instance(
    input: &crate::input::BundleInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "BundleInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_365 = writer.prefix("InstanceId");
    if let Some(var_366) = &input.instance_id {
        scope_365.string(var_366);
    }
    #[allow(unused_mut)]
    let mut scope_367 = writer.prefix("Storage");
    if let Some(var_368) = &input.storage {
        crate::query_ser::serialize_structure_crate_model_storage(scope_367, var_368)?;
    }
    #[allow(unused_mut)]
    let mut scope_369 = writer.prefix("DryRun");
    if let Some(var_370) = &input.dry_run {
        scope_369.boolean(*var_370);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_bundle_task(
    input: &crate::input::CancelBundleTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelBundleTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_371 = writer.prefix("BundleId");
    if let Some(var_372) = &input.bundle_id {
        scope_371.string(var_372);
    }
    #[allow(unused_mut)]
    let mut scope_373 = writer.prefix("DryRun");
    if let Some(var_374) = &input.dry_run {
        scope_373.boolean(*var_374);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_capacity_reservation(
    input: &crate::input::CancelCapacityReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CancelCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_375 = writer.prefix("CapacityReservationId");
    if let Some(var_376) = &input.capacity_reservation_id {
        scope_375.string(var_376);
    }
    #[allow(unused_mut)]
    let mut scope_377 = writer.prefix("DryRun");
    if let Some(var_378) = &input.dry_run {
        scope_377.boolean(*var_378);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_capacity_reservation_fleets(
    input: &crate::input::CancelCapacityReservationFleetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CancelCapacityReservationFleets",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_379 = writer.prefix("DryRun");
    if let Some(var_380) = &input.dry_run {
        scope_379.boolean(*var_380);
    }
    #[allow(unused_mut)]
    let mut scope_381 = writer.prefix("CapacityReservationFleetId");
    if let Some(var_382) = &input.capacity_reservation_fleet_ids {
        let mut list_384 = scope_381.start_list(true, Some("item"));
        for item_383 in var_382 {
            #[allow(unused_mut)]
            let mut entry_385 = list_384.entry();
            entry_385.string(item_383);
        }
        list_384.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_conversion_task(
    input: &crate::input::CancelConversionTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CancelConversionTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_386 = writer.prefix("ConversionTaskId");
    if let Some(var_387) = &input.conversion_task_id {
        scope_386.string(var_387);
    }
    #[allow(unused_mut)]
    let mut scope_388 = writer.prefix("DryRun");
    if let Some(var_389) = &input.dry_run {
        scope_388.boolean(*var_389);
    }
    #[allow(unused_mut)]
    let mut scope_390 = writer.prefix("ReasonMessage");
    if let Some(var_391) = &input.reason_message {
        scope_390.string(var_391);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_export_task(
    input: &crate::input::CancelExportTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelExportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_392 = writer.prefix("ExportTaskId");
    if let Some(var_393) = &input.export_task_id {
        scope_392.string(var_393);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_import_task(
    input: &crate::input::CancelImportTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelImportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_394 = writer.prefix("CancelReason");
    if let Some(var_395) = &input.cancel_reason {
        scope_394.string(var_395);
    }
    #[allow(unused_mut)]
    let mut scope_396 = writer.prefix("DryRun");
    if let Some(var_397) = &input.dry_run {
        scope_396.boolean(*var_397);
    }
    #[allow(unused_mut)]
    let mut scope_398 = writer.prefix("ImportTaskId");
    if let Some(var_399) = &input.import_task_id {
        scope_398.string(var_399);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_reserved_instances_listing(
    input: &crate::input::CancelReservedInstancesListingInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CancelReservedInstancesListing",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_400 = writer.prefix("ReservedInstancesListingId");
    if let Some(var_401) = &input.reserved_instances_listing_id {
        scope_400.string(var_401);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_spot_fleet_requests(
    input: &crate::input::CancelSpotFleetRequestsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CancelSpotFleetRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_402 = writer.prefix("DryRun");
    if let Some(var_403) = &input.dry_run {
        scope_402.boolean(*var_403);
    }
    #[allow(unused_mut)]
    let mut scope_404 = writer.prefix("SpotFleetRequestId");
    if let Some(var_405) = &input.spot_fleet_request_ids {
        let mut list_407 = scope_404.start_list(true, Some("item"));
        for item_406 in var_405 {
            #[allow(unused_mut)]
            let mut entry_408 = list_407.entry();
            entry_408.string(item_406);
        }
        list_407.finish();
    }
    #[allow(unused_mut)]
    let mut scope_409 = writer.prefix("TerminateInstances");
    if let Some(var_410) = &input.terminate_instances {
        scope_409.boolean(*var_410);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_spot_instance_requests(
    input: &crate::input::CancelSpotInstanceRequestsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CancelSpotInstanceRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_411 = writer.prefix("DryRun");
    if let Some(var_412) = &input.dry_run {
        scope_411.boolean(*var_412);
    }
    #[allow(unused_mut)]
    let mut scope_413 = writer.prefix("SpotInstanceRequestId");
    if let Some(var_414) = &input.spot_instance_request_ids {
        let mut list_416 = scope_413.start_list(true, Some("SpotInstanceRequestId"));
        for item_415 in var_414 {
            #[allow(unused_mut)]
            let mut entry_417 = list_416.entry();
            entry_417.string(item_415);
        }
        list_416.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_confirm_product_instance(
    input: &crate::input::ConfirmProductInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ConfirmProductInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_418 = writer.prefix("InstanceId");
    if let Some(var_419) = &input.instance_id {
        scope_418.string(var_419);
    }
    #[allow(unused_mut)]
    let mut scope_420 = writer.prefix("ProductCode");
    if let Some(var_421) = &input.product_code {
        scope_420.string(var_421);
    }
    #[allow(unused_mut)]
    let mut scope_422 = writer.prefix("DryRun");
    if let Some(var_423) = &input.dry_run {
        scope_422.boolean(*var_423);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_fpga_image(
    input: &crate::input::CopyFpgaImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopyFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_424 = writer.prefix("DryRun");
    if let Some(var_425) = &input.dry_run {
        scope_424.boolean(*var_425);
    }
    #[allow(unused_mut)]
    let mut scope_426 = writer.prefix("SourceFpgaImageId");
    if let Some(var_427) = &input.source_fpga_image_id {
        scope_426.string(var_427);
    }
    #[allow(unused_mut)]
    let mut scope_428 = writer.prefix("Description");
    if let Some(var_429) = &input.description {
        scope_428.string(var_429);
    }
    #[allow(unused_mut)]
    let mut scope_430 = writer.prefix("Name");
    if let Some(var_431) = &input.name {
        scope_430.string(var_431);
    }
    #[allow(unused_mut)]
    let mut scope_432 = writer.prefix("SourceRegion");
    if let Some(var_433) = &input.source_region {
        scope_432.string(var_433);
    }
    #[allow(unused_mut)]
    let mut scope_434 = writer.prefix("ClientToken");
    if let Some(var_435) = &input.client_token {
        scope_434.string(var_435);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_image(
    input: &crate::input::CopyImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopyImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_436 = writer.prefix("ClientToken");
    if let Some(var_437) = &input.client_token {
        scope_436.string(var_437);
    }
    #[allow(unused_mut)]
    let mut scope_438 = writer.prefix("Description");
    if let Some(var_439) = &input.description {
        scope_438.string(var_439);
    }
    #[allow(unused_mut)]
    let mut scope_440 = writer.prefix("Encrypted");
    if let Some(var_441) = &input.encrypted {
        scope_440.boolean(*var_441);
    }
    #[allow(unused_mut)]
    let mut scope_442 = writer.prefix("KmsKeyId");
    if let Some(var_443) = &input.kms_key_id {
        scope_442.string(var_443);
    }
    #[allow(unused_mut)]
    let mut scope_444 = writer.prefix("Name");
    if let Some(var_445) = &input.name {
        scope_444.string(var_445);
    }
    #[allow(unused_mut)]
    let mut scope_446 = writer.prefix("SourceImageId");
    if let Some(var_447) = &input.source_image_id {
        scope_446.string(var_447);
    }
    #[allow(unused_mut)]
    let mut scope_448 = writer.prefix("SourceRegion");
    if let Some(var_449) = &input.source_region {
        scope_448.string(var_449);
    }
    #[allow(unused_mut)]
    let mut scope_450 = writer.prefix("DestinationOutpostArn");
    if let Some(var_451) = &input.destination_outpost_arn {
        scope_450.string(var_451);
    }
    #[allow(unused_mut)]
    let mut scope_452 = writer.prefix("DryRun");
    if let Some(var_453) = &input.dry_run {
        scope_452.boolean(*var_453);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_snapshot(
    input: &crate::input::CopySnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopySnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_454 = writer.prefix("Description");
    if let Some(var_455) = &input.description {
        scope_454.string(var_455);
    }
    #[allow(unused_mut)]
    let mut scope_456 = writer.prefix("DestinationOutpostArn");
    if let Some(var_457) = &input.destination_outpost_arn {
        scope_456.string(var_457);
    }
    #[allow(unused_mut)]
    let mut scope_458 = writer.prefix("DestinationRegion");
    if let Some(var_459) = &input.destination_region {
        scope_458.string(var_459);
    }
    #[allow(unused_mut)]
    let mut scope_460 = writer.prefix("Encrypted");
    if let Some(var_461) = &input.encrypted {
        scope_460.boolean(*var_461);
    }
    #[allow(unused_mut)]
    let mut scope_462 = writer.prefix("KmsKeyId");
    if let Some(var_463) = &input.kms_key_id {
        scope_462.string(var_463);
    }
    #[allow(unused_mut)]
    let mut scope_464 = writer.prefix("PresignedUrl");
    if let Some(var_465) = &input.presigned_url {
        scope_464.string(var_465);
    }
    #[allow(unused_mut)]
    let mut scope_466 = writer.prefix("SourceRegion");
    if let Some(var_467) = &input.source_region {
        scope_466.string(var_467);
    }
    #[allow(unused_mut)]
    let mut scope_468 = writer.prefix("SourceSnapshotId");
    if let Some(var_469) = &input.source_snapshot_id {
        scope_468.string(var_469);
    }
    #[allow(unused_mut)]
    let mut scope_470 = writer.prefix("TagSpecification");
    if let Some(var_471) = &input.tag_specifications {
        let mut list_473 = scope_470.start_list(true, Some("item"));
        for item_472 in var_471 {
            #[allow(unused_mut)]
            let mut entry_474 = list_473.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_474, item_472,
            )?;
        }
        list_473.finish();
    }
    #[allow(unused_mut)]
    let mut scope_475 = writer.prefix("DryRun");
    if let Some(var_476) = &input.dry_run {
        scope_475.boolean(*var_476);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_capacity_reservation(
    input: &crate::input::CreateCapacityReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_477 = writer.prefix("ClientToken");
    if let Some(var_478) = &input.client_token {
        scope_477.string(var_478);
    }
    #[allow(unused_mut)]
    let mut scope_479 = writer.prefix("InstanceType");
    if let Some(var_480) = &input.instance_type {
        scope_479.string(var_480);
    }
    #[allow(unused_mut)]
    let mut scope_481 = writer.prefix("InstancePlatform");
    if let Some(var_482) = &input.instance_platform {
        scope_481.string(var_482.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_483 = writer.prefix("AvailabilityZone");
    if let Some(var_484) = &input.availability_zone {
        scope_483.string(var_484);
    }
    #[allow(unused_mut)]
    let mut scope_485 = writer.prefix("AvailabilityZoneId");
    if let Some(var_486) = &input.availability_zone_id {
        scope_485.string(var_486);
    }
    #[allow(unused_mut)]
    let mut scope_487 = writer.prefix("Tenancy");
    if let Some(var_488) = &input.tenancy {
        scope_487.string(var_488.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_489 = writer.prefix("InstanceCount");
    if let Some(var_490) = &input.instance_count {
        scope_489.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_490).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_491 = writer.prefix("EbsOptimized");
    if let Some(var_492) = &input.ebs_optimized {
        scope_491.boolean(*var_492);
    }
    #[allow(unused_mut)]
    let mut scope_493 = writer.prefix("EphemeralStorage");
    if let Some(var_494) = &input.ephemeral_storage {
        scope_493.boolean(*var_494);
    }
    #[allow(unused_mut)]
    let mut scope_495 = writer.prefix("EndDate");
    if let Some(var_496) = &input.end_date {
        scope_495.date_time(var_496, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_497 = writer.prefix("EndDateType");
    if let Some(var_498) = &input.end_date_type {
        scope_497.string(var_498.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_499 = writer.prefix("InstanceMatchCriteria");
    if let Some(var_500) = &input.instance_match_criteria {
        scope_499.string(var_500.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_501 = writer.prefix("TagSpecifications");
    if let Some(var_502) = &input.tag_specifications {
        let mut list_504 = scope_501.start_list(true, Some("item"));
        for item_503 in var_502 {
            #[allow(unused_mut)]
            let mut entry_505 = list_504.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_505, item_503,
            )?;
        }
        list_504.finish();
    }
    #[allow(unused_mut)]
    let mut scope_506 = writer.prefix("DryRun");
    if let Some(var_507) = &input.dry_run {
        scope_506.boolean(*var_507);
    }
    #[allow(unused_mut)]
    let mut scope_508 = writer.prefix("OutpostArn");
    if let Some(var_509) = &input.outpost_arn {
        scope_508.string(var_509);
    }
    #[allow(unused_mut)]
    let mut scope_510 = writer.prefix("PlacementGroupArn");
    if let Some(var_511) = &input.placement_group_arn {
        scope_510.string(var_511);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_capacity_reservation_fleet(
    input: &crate::input::CreateCapacityReservationFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateCapacityReservationFleet",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_512 = writer.prefix("AllocationStrategy");
    if let Some(var_513) = &input.allocation_strategy {
        scope_512.string(var_513);
    }
    #[allow(unused_mut)]
    let mut scope_514 = writer.prefix("ClientToken");
    if let Some(var_515) = &input.client_token {
        scope_514.string(var_515);
    }
    #[allow(unused_mut)]
    let mut scope_516 = writer.prefix("InstanceTypeSpecification");
    if let Some(var_517) = &input.instance_type_specifications {
        let mut list_519 = scope_516.start_list(true, None);
        for item_518 in var_517 {
            #[allow(unused_mut)]
            let mut entry_520 = list_519.entry();
            crate::query_ser::serialize_structure_crate_model_reservation_fleet_instance_specification(entry_520, item_518)?;
        }
        list_519.finish();
    }
    #[allow(unused_mut)]
    let mut scope_521 = writer.prefix("Tenancy");
    if let Some(var_522) = &input.tenancy {
        scope_521.string(var_522.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_523 = writer.prefix("TotalTargetCapacity");
    if let Some(var_524) = &input.total_target_capacity {
        scope_523.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_524).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_525 = writer.prefix("EndDate");
    if let Some(var_526) = &input.end_date {
        scope_525.date_time(var_526, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_527 = writer.prefix("InstanceMatchCriteria");
    if let Some(var_528) = &input.instance_match_criteria {
        scope_527.string(var_528.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_529 = writer.prefix("TagSpecification");
    if let Some(var_530) = &input.tag_specifications {
        let mut list_532 = scope_529.start_list(true, Some("item"));
        for item_531 in var_530 {
            #[allow(unused_mut)]
            let mut entry_533 = list_532.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_533, item_531,
            )?;
        }
        list_532.finish();
    }
    #[allow(unused_mut)]
    let mut scope_534 = writer.prefix("DryRun");
    if let Some(var_535) = &input.dry_run {
        scope_534.boolean(*var_535);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_carrier_gateway(
    input: &crate::input::CreateCarrierGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCarrierGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_536 = writer.prefix("VpcId");
    if let Some(var_537) = &input.vpc_id {
        scope_536.string(var_537);
    }
    #[allow(unused_mut)]
    let mut scope_538 = writer.prefix("TagSpecification");
    if let Some(var_539) = &input.tag_specifications {
        let mut list_541 = scope_538.start_list(true, Some("item"));
        for item_540 in var_539 {
            #[allow(unused_mut)]
            let mut entry_542 = list_541.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_542, item_540,
            )?;
        }
        list_541.finish();
    }
    #[allow(unused_mut)]
    let mut scope_543 = writer.prefix("DryRun");
    if let Some(var_544) = &input.dry_run {
        scope_543.boolean(*var_544);
    }
    #[allow(unused_mut)]
    let mut scope_545 = writer.prefix("ClientToken");
    if let Some(var_546) = &input.client_token {
        scope_545.string(var_546);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_client_vpn_endpoint(
    input: &crate::input::CreateClientVpnEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_547 = writer.prefix("ClientCidrBlock");
    if let Some(var_548) = &input.client_cidr_block {
        scope_547.string(var_548);
    }
    #[allow(unused_mut)]
    let mut scope_549 = writer.prefix("ServerCertificateArn");
    if let Some(var_550) = &input.server_certificate_arn {
        scope_549.string(var_550);
    }
    #[allow(unused_mut)]
    let mut scope_551 = writer.prefix("Authentication");
    if let Some(var_552) = &input.authentication_options {
        let mut list_554 = scope_551.start_list(true, None);
        for item_553 in var_552 {
            #[allow(unused_mut)]
            let mut entry_555 = list_554.entry();
            crate::query_ser::serialize_structure_crate_model_client_vpn_authentication_request(
                entry_555, item_553,
            )?;
        }
        list_554.finish();
    }
    #[allow(unused_mut)]
    let mut scope_556 = writer.prefix("ConnectionLogOptions");
    if let Some(var_557) = &input.connection_log_options {
        crate::query_ser::serialize_structure_crate_model_connection_log_options(
            scope_556, var_557,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_558 = writer.prefix("DnsServers");
    if let Some(var_559) = &input.dns_servers {
        let mut list_561 = scope_558.start_list(true, Some("item"));
        for item_560 in var_559 {
            #[allow(unused_mut)]
            let mut entry_562 = list_561.entry();
            entry_562.string(item_560);
        }
        list_561.finish();
    }
    #[allow(unused_mut)]
    let mut scope_563 = writer.prefix("TransportProtocol");
    if let Some(var_564) = &input.transport_protocol {
        scope_563.string(var_564.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_565 = writer.prefix("VpnPort");
    if let Some(var_566) = &input.vpn_port {
        scope_565.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_566).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_567 = writer.prefix("Description");
    if let Some(var_568) = &input.description {
        scope_567.string(var_568);
    }
    #[allow(unused_mut)]
    let mut scope_569 = writer.prefix("SplitTunnel");
    if let Some(var_570) = &input.split_tunnel {
        scope_569.boolean(*var_570);
    }
    #[allow(unused_mut)]
    let mut scope_571 = writer.prefix("DryRun");
    if let Some(var_572) = &input.dry_run {
        scope_571.boolean(*var_572);
    }
    #[allow(unused_mut)]
    let mut scope_573 = writer.prefix("ClientToken");
    if let Some(var_574) = &input.client_token {
        scope_573.string(var_574);
    }
    #[allow(unused_mut)]
    let mut scope_575 = writer.prefix("TagSpecification");
    if let Some(var_576) = &input.tag_specifications {
        let mut list_578 = scope_575.start_list(true, Some("item"));
        for item_577 in var_576 {
            #[allow(unused_mut)]
            let mut entry_579 = list_578.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_579, item_577,
            )?;
        }
        list_578.finish();
    }
    #[allow(unused_mut)]
    let mut scope_580 = writer.prefix("SecurityGroupId");
    if let Some(var_581) = &input.security_group_ids {
        let mut list_583 = scope_580.start_list(true, Some("item"));
        for item_582 in var_581 {
            #[allow(unused_mut)]
            let mut entry_584 = list_583.entry();
            entry_584.string(item_582);
        }
        list_583.finish();
    }
    #[allow(unused_mut)]
    let mut scope_585 = writer.prefix("VpcId");
    if let Some(var_586) = &input.vpc_id {
        scope_585.string(var_586);
    }
    #[allow(unused_mut)]
    let mut scope_587 = writer.prefix("SelfServicePortal");
    if let Some(var_588) = &input.self_service_portal {
        scope_587.string(var_588.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_589 = writer.prefix("ClientConnectOptions");
    if let Some(var_590) = &input.client_connect_options {
        crate::query_ser::serialize_structure_crate_model_client_connect_options(
            scope_589, var_590,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_591 = writer.prefix("SessionTimeoutHours");
    if let Some(var_592) = &input.session_timeout_hours {
        scope_591.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_592).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_593 = writer.prefix("ClientLoginBannerOptions");
    if let Some(var_594) = &input.client_login_banner_options {
        crate::query_ser::serialize_structure_crate_model_client_login_banner_options(
            scope_593, var_594,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_client_vpn_route(
    input: &crate::input::CreateClientVpnRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateClientVpnRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_595 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_596) = &input.client_vpn_endpoint_id {
        scope_595.string(var_596);
    }
    #[allow(unused_mut)]
    let mut scope_597 = writer.prefix("DestinationCidrBlock");
    if let Some(var_598) = &input.destination_cidr_block {
        scope_597.string(var_598);
    }
    #[allow(unused_mut)]
    let mut scope_599 = writer.prefix("TargetVpcSubnetId");
    if let Some(var_600) = &input.target_vpc_subnet_id {
        scope_599.string(var_600);
    }
    #[allow(unused_mut)]
    let mut scope_601 = writer.prefix("Description");
    if let Some(var_602) = &input.description {
        scope_601.string(var_602);
    }
    #[allow(unused_mut)]
    let mut scope_603 = writer.prefix("ClientToken");
    if let Some(var_604) = &input.client_token {
        scope_603.string(var_604);
    }
    #[allow(unused_mut)]
    let mut scope_605 = writer.prefix("DryRun");
    if let Some(var_606) = &input.dry_run {
        scope_605.boolean(*var_606);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_customer_gateway(
    input: &crate::input::CreateCustomerGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCustomerGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_607 = writer.prefix("BgpAsn");
    if let Some(var_608) = &input.bgp_asn {
        scope_607.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_608).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_609 = writer.prefix("IpAddress");
    if let Some(var_610) = &input.public_ip {
        scope_609.string(var_610);
    }
    #[allow(unused_mut)]
    let mut scope_611 = writer.prefix("CertificateArn");
    if let Some(var_612) = &input.certificate_arn {
        scope_611.string(var_612);
    }
    #[allow(unused_mut)]
    let mut scope_613 = writer.prefix("Type");
    if let Some(var_614) = &input.r#type {
        scope_613.string(var_614.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_615 = writer.prefix("TagSpecification");
    if let Some(var_616) = &input.tag_specifications {
        let mut list_618 = scope_615.start_list(true, Some("item"));
        for item_617 in var_616 {
            #[allow(unused_mut)]
            let mut entry_619 = list_618.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_619, item_617,
            )?;
        }
        list_618.finish();
    }
    #[allow(unused_mut)]
    let mut scope_620 = writer.prefix("DeviceName");
    if let Some(var_621) = &input.device_name {
        scope_620.string(var_621);
    }
    #[allow(unused_mut)]
    let mut scope_622 = writer.prefix("DryRun");
    if let Some(var_623) = &input.dry_run {
        scope_622.boolean(*var_623);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_default_subnet(
    input: &crate::input::CreateDefaultSubnetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDefaultSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_624 = writer.prefix("AvailabilityZone");
    if let Some(var_625) = &input.availability_zone {
        scope_624.string(var_625);
    }
    #[allow(unused_mut)]
    let mut scope_626 = writer.prefix("DryRun");
    if let Some(var_627) = &input.dry_run {
        scope_626.boolean(*var_627);
    }
    #[allow(unused_mut)]
    let mut scope_628 = writer.prefix("Ipv6Native");
    if let Some(var_629) = &input.ipv6_native {
        scope_628.boolean(*var_629);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_default_vpc(
    input: &crate::input::CreateDefaultVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateDefaultVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_630 = writer.prefix("DryRun");
    if let Some(var_631) = &input.dry_run {
        scope_630.boolean(*var_631);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_dhcp_options(
    input: &crate::input::CreateDhcpOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_632 = writer.prefix("DhcpConfiguration");
    if let Some(var_633) = &input.dhcp_configurations {
        let mut list_635 = scope_632.start_list(true, Some("item"));
        for item_634 in var_633 {
            #[allow(unused_mut)]
            let mut entry_636 = list_635.entry();
            crate::query_ser::serialize_structure_crate_model_new_dhcp_configuration(
                entry_636, item_634,
            )?;
        }
        list_635.finish();
    }
    #[allow(unused_mut)]
    let mut scope_637 = writer.prefix("TagSpecification");
    if let Some(var_638) = &input.tag_specifications {
        let mut list_640 = scope_637.start_list(true, Some("item"));
        for item_639 in var_638 {
            #[allow(unused_mut)]
            let mut entry_641 = list_640.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_641, item_639,
            )?;
        }
        list_640.finish();
    }
    #[allow(unused_mut)]
    let mut scope_642 = writer.prefix("DryRun");
    if let Some(var_643) = &input.dry_run {
        scope_642.boolean(*var_643);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_egress_only_internet_gateway(
    input: &crate::input::CreateEgressOnlyInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateEgressOnlyInternetGateway",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_644 = writer.prefix("ClientToken");
    if let Some(var_645) = &input.client_token {
        scope_644.string(var_645);
    }
    #[allow(unused_mut)]
    let mut scope_646 = writer.prefix("DryRun");
    if let Some(var_647) = &input.dry_run {
        scope_646.boolean(*var_647);
    }
    #[allow(unused_mut)]
    let mut scope_648 = writer.prefix("VpcId");
    if let Some(var_649) = &input.vpc_id {
        scope_648.string(var_649);
    }
    #[allow(unused_mut)]
    let mut scope_650 = writer.prefix("TagSpecification");
    if let Some(var_651) = &input.tag_specifications {
        let mut list_653 = scope_650.start_list(true, Some("item"));
        for item_652 in var_651 {
            #[allow(unused_mut)]
            let mut entry_654 = list_653.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_654, item_652,
            )?;
        }
        list_653.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_fleet(
    input: &crate::input::CreateFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_655 = writer.prefix("DryRun");
    if let Some(var_656) = &input.dry_run {
        scope_655.boolean(*var_656);
    }
    #[allow(unused_mut)]
    let mut scope_657 = writer.prefix("ClientToken");
    if let Some(var_658) = &input.client_token {
        scope_657.string(var_658);
    }
    #[allow(unused_mut)]
    let mut scope_659 = writer.prefix("SpotOptions");
    if let Some(var_660) = &input.spot_options {
        crate::query_ser::serialize_structure_crate_model_spot_options_request(scope_659, var_660)?;
    }
    #[allow(unused_mut)]
    let mut scope_661 = writer.prefix("OnDemandOptions");
    if let Some(var_662) = &input.on_demand_options {
        crate::query_ser::serialize_structure_crate_model_on_demand_options_request(
            scope_661, var_662,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_663 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_664) = &input.excess_capacity_termination_policy {
        scope_663.string(var_664.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_665 = writer.prefix("LaunchTemplateConfigs");
    if let Some(var_666) = &input.launch_template_configs {
        let mut list_668 = scope_665.start_list(true, Some("item"));
        for item_667 in var_666 {
            #[allow(unused_mut)]
            let mut entry_669 = list_668.entry();
            crate::query_ser::serialize_structure_crate_model_fleet_launch_template_config_request(
                entry_669, item_667,
            )?;
        }
        list_668.finish();
    }
    #[allow(unused_mut)]
    let mut scope_670 = writer.prefix("TargetCapacitySpecification");
    if let Some(var_671) = &input.target_capacity_specification {
        crate::query_ser::serialize_structure_crate_model_target_capacity_specification_request(
            scope_670, var_671,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_672 = writer.prefix("TerminateInstancesWithExpiration");
    if let Some(var_673) = &input.terminate_instances_with_expiration {
        scope_672.boolean(*var_673);
    }
    #[allow(unused_mut)]
    let mut scope_674 = writer.prefix("Type");
    if let Some(var_675) = &input.r#type {
        scope_674.string(var_675.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_676 = writer.prefix("ValidFrom");
    if let Some(var_677) = &input.valid_from {
        scope_676.date_time(var_677, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_678 = writer.prefix("ValidUntil");
    if let Some(var_679) = &input.valid_until {
        scope_678.date_time(var_679, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_680 = writer.prefix("ReplaceUnhealthyInstances");
    if let Some(var_681) = &input.replace_unhealthy_instances {
        scope_680.boolean(*var_681);
    }
    #[allow(unused_mut)]
    let mut scope_682 = writer.prefix("TagSpecification");
    if let Some(var_683) = &input.tag_specifications {
        let mut list_685 = scope_682.start_list(true, Some("item"));
        for item_684 in var_683 {
            #[allow(unused_mut)]
            let mut entry_686 = list_685.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_686, item_684,
            )?;
        }
        list_685.finish();
    }
    #[allow(unused_mut)]
    let mut scope_687 = writer.prefix("Context");
    if let Some(var_688) = &input.context {
        scope_687.string(var_688);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_flow_logs(
    input: &crate::input::CreateFlowLogsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_689 = writer.prefix("DryRun");
    if let Some(var_690) = &input.dry_run {
        scope_689.boolean(*var_690);
    }
    #[allow(unused_mut)]
    let mut scope_691 = writer.prefix("ClientToken");
    if let Some(var_692) = &input.client_token {
        scope_691.string(var_692);
    }
    #[allow(unused_mut)]
    let mut scope_693 = writer.prefix("DeliverLogsPermissionArn");
    if let Some(var_694) = &input.deliver_logs_permission_arn {
        scope_693.string(var_694);
    }
    #[allow(unused_mut)]
    let mut scope_695 = writer.prefix("LogGroupName");
    if let Some(var_696) = &input.log_group_name {
        scope_695.string(var_696);
    }
    #[allow(unused_mut)]
    let mut scope_697 = writer.prefix("ResourceId");
    if let Some(var_698) = &input.resource_ids {
        let mut list_700 = scope_697.start_list(true, Some("item"));
        for item_699 in var_698 {
            #[allow(unused_mut)]
            let mut entry_701 = list_700.entry();
            entry_701.string(item_699);
        }
        list_700.finish();
    }
    #[allow(unused_mut)]
    let mut scope_702 = writer.prefix("ResourceType");
    if let Some(var_703) = &input.resource_type {
        scope_702.string(var_703.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_704 = writer.prefix("TrafficType");
    if let Some(var_705) = &input.traffic_type {
        scope_704.string(var_705.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_706 = writer.prefix("LogDestinationType");
    if let Some(var_707) = &input.log_destination_type {
        scope_706.string(var_707.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_708 = writer.prefix("LogDestination");
    if let Some(var_709) = &input.log_destination {
        scope_708.string(var_709);
    }
    #[allow(unused_mut)]
    let mut scope_710 = writer.prefix("LogFormat");
    if let Some(var_711) = &input.log_format {
        scope_710.string(var_711);
    }
    #[allow(unused_mut)]
    let mut scope_712 = writer.prefix("TagSpecification");
    if let Some(var_713) = &input.tag_specifications {
        let mut list_715 = scope_712.start_list(true, Some("item"));
        for item_714 in var_713 {
            #[allow(unused_mut)]
            let mut entry_716 = list_715.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_716, item_714,
            )?;
        }
        list_715.finish();
    }
    #[allow(unused_mut)]
    let mut scope_717 = writer.prefix("MaxAggregationInterval");
    if let Some(var_718) = &input.max_aggregation_interval {
        scope_717.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_718).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_719 = writer.prefix("DestinationOptions");
    if let Some(var_720) = &input.destination_options {
        crate::query_ser::serialize_structure_crate_model_destination_options_request(
            scope_719, var_720,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_fpga_image(
    input: &crate::input::CreateFpgaImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_721 = writer.prefix("DryRun");
    if let Some(var_722) = &input.dry_run {
        scope_721.boolean(*var_722);
    }
    #[allow(unused_mut)]
    let mut scope_723 = writer.prefix("InputStorageLocation");
    if let Some(var_724) = &input.input_storage_location {
        crate::query_ser::serialize_structure_crate_model_storage_location(scope_723, var_724)?;
    }
    #[allow(unused_mut)]
    let mut scope_725 = writer.prefix("LogsStorageLocation");
    if let Some(var_726) = &input.logs_storage_location {
        crate::query_ser::serialize_structure_crate_model_storage_location(scope_725, var_726)?;
    }
    #[allow(unused_mut)]
    let mut scope_727 = writer.prefix("Description");
    if let Some(var_728) = &input.description {
        scope_727.string(var_728);
    }
    #[allow(unused_mut)]
    let mut scope_729 = writer.prefix("Name");
    if let Some(var_730) = &input.name {
        scope_729.string(var_730);
    }
    #[allow(unused_mut)]
    let mut scope_731 = writer.prefix("ClientToken");
    if let Some(var_732) = &input.client_token {
        scope_731.string(var_732);
    }
    #[allow(unused_mut)]
    let mut scope_733 = writer.prefix("TagSpecification");
    if let Some(var_734) = &input.tag_specifications {
        let mut list_736 = scope_733.start_list(true, Some("item"));
        for item_735 in var_734 {
            #[allow(unused_mut)]
            let mut entry_737 = list_736.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_737, item_735,
            )?;
        }
        list_736.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_image(
    input: &crate::input::CreateImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_738 = writer.prefix("BlockDeviceMapping");
    if let Some(var_739) = &input.block_device_mappings {
        let mut list_741 = scope_738.start_list(true, Some("BlockDeviceMapping"));
        for item_740 in var_739 {
            #[allow(unused_mut)]
            let mut entry_742 = list_741.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_742, item_740,
            )?;
        }
        list_741.finish();
    }
    #[allow(unused_mut)]
    let mut scope_743 = writer.prefix("Description");
    if let Some(var_744) = &input.description {
        scope_743.string(var_744);
    }
    #[allow(unused_mut)]
    let mut scope_745 = writer.prefix("DryRun");
    if let Some(var_746) = &input.dry_run {
        scope_745.boolean(*var_746);
    }
    #[allow(unused_mut)]
    let mut scope_747 = writer.prefix("InstanceId");
    if let Some(var_748) = &input.instance_id {
        scope_747.string(var_748);
    }
    #[allow(unused_mut)]
    let mut scope_749 = writer.prefix("Name");
    if let Some(var_750) = &input.name {
        scope_749.string(var_750);
    }
    #[allow(unused_mut)]
    let mut scope_751 = writer.prefix("NoReboot");
    if let Some(var_752) = &input.no_reboot {
        scope_751.boolean(*var_752);
    }
    #[allow(unused_mut)]
    let mut scope_753 = writer.prefix("TagSpecification");
    if let Some(var_754) = &input.tag_specifications {
        let mut list_756 = scope_753.start_list(true, Some("item"));
        for item_755 in var_754 {
            #[allow(unused_mut)]
            let mut entry_757 = list_756.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_757, item_755,
            )?;
        }
        list_756.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_instance_event_window(
    input: &crate::input::CreateInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_758 = writer.prefix("DryRun");
    if let Some(var_759) = &input.dry_run {
        scope_758.boolean(*var_759);
    }
    #[allow(unused_mut)]
    let mut scope_760 = writer.prefix("Name");
    if let Some(var_761) = &input.name {
        scope_760.string(var_761);
    }
    #[allow(unused_mut)]
    let mut scope_762 = writer.prefix("TimeRange");
    if let Some(var_763) = &input.time_ranges {
        let mut list_765 = scope_762.start_list(true, None);
        for item_764 in var_763 {
            #[allow(unused_mut)]
            let mut entry_766 = list_765.entry();
            crate::query_ser::serialize_structure_crate_model_instance_event_window_time_range_request(entry_766, item_764)?;
        }
        list_765.finish();
    }
    #[allow(unused_mut)]
    let mut scope_767 = writer.prefix("CronExpression");
    if let Some(var_768) = &input.cron_expression {
        scope_767.string(var_768);
    }
    #[allow(unused_mut)]
    let mut scope_769 = writer.prefix("TagSpecification");
    if let Some(var_770) = &input.tag_specifications {
        let mut list_772 = scope_769.start_list(true, Some("item"));
        for item_771 in var_770 {
            #[allow(unused_mut)]
            let mut entry_773 = list_772.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_773, item_771,
            )?;
        }
        list_772.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_instance_export_task(
    input: &crate::input::CreateInstanceExportTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateInstanceExportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_774 = writer.prefix("Description");
    if let Some(var_775) = &input.description {
        scope_774.string(var_775);
    }
    #[allow(unused_mut)]
    let mut scope_776 = writer.prefix("ExportToS3");
    if let Some(var_777) = &input.export_to_s3_task {
        crate::query_ser::serialize_structure_crate_model_export_to_s3_task_specification(
            scope_776, var_777,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_778 = writer.prefix("InstanceId");
    if let Some(var_779) = &input.instance_id {
        scope_778.string(var_779);
    }
    #[allow(unused_mut)]
    let mut scope_780 = writer.prefix("TargetEnvironment");
    if let Some(var_781) = &input.target_environment {
        scope_780.string(var_781.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_782 = writer.prefix("TagSpecification");
    if let Some(var_783) = &input.tag_specifications {
        let mut list_785 = scope_782.start_list(true, Some("item"));
        for item_784 in var_783 {
            #[allow(unused_mut)]
            let mut entry_786 = list_785.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_786, item_784,
            )?;
        }
        list_785.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_internet_gateway(
    input: &crate::input::CreateInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_787 = writer.prefix("TagSpecification");
    if let Some(var_788) = &input.tag_specifications {
        let mut list_790 = scope_787.start_list(true, Some("item"));
        for item_789 in var_788 {
            #[allow(unused_mut)]
            let mut entry_791 = list_790.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_791, item_789,
            )?;
        }
        list_790.finish();
    }
    #[allow(unused_mut)]
    let mut scope_792 = writer.prefix("DryRun");
    if let Some(var_793) = &input.dry_run {
        scope_792.boolean(*var_793);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_ipam(
    input: &crate::input::CreateIpamInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateIpam", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_794 = writer.prefix("DryRun");
    if let Some(var_795) = &input.dry_run {
        scope_794.boolean(*var_795);
    }
    #[allow(unused_mut)]
    let mut scope_796 = writer.prefix("Description");
    if let Some(var_797) = &input.description {
        scope_796.string(var_797);
    }
    #[allow(unused_mut)]
    let mut scope_798 = writer.prefix("OperatingRegion");
    if let Some(var_799) = &input.operating_regions {
        let mut list_801 = scope_798.start_list(true, None);
        for item_800 in var_799 {
            #[allow(unused_mut)]
            let mut entry_802 = list_801.entry();
            crate::query_ser::serialize_structure_crate_model_add_ipam_operating_region(
                entry_802, item_800,
            )?;
        }
        list_801.finish();
    }
    #[allow(unused_mut)]
    let mut scope_803 = writer.prefix("TagSpecification");
    if let Some(var_804) = &input.tag_specifications {
        let mut list_806 = scope_803.start_list(true, Some("item"));
        for item_805 in var_804 {
            #[allow(unused_mut)]
            let mut entry_807 = list_806.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_807, item_805,
            )?;
        }
        list_806.finish();
    }
    #[allow(unused_mut)]
    let mut scope_808 = writer.prefix("ClientToken");
    if let Some(var_809) = &input.client_token {
        scope_808.string(var_809);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_ipam_pool(
    input: &crate::input::CreateIpamPoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateIpamPool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_810 = writer.prefix("DryRun");
    if let Some(var_811) = &input.dry_run {
        scope_810.boolean(*var_811);
    }
    #[allow(unused_mut)]
    let mut scope_812 = writer.prefix("IpamScopeId");
    if let Some(var_813) = &input.ipam_scope_id {
        scope_812.string(var_813);
    }
    #[allow(unused_mut)]
    let mut scope_814 = writer.prefix("Locale");
    if let Some(var_815) = &input.locale {
        scope_814.string(var_815);
    }
    #[allow(unused_mut)]
    let mut scope_816 = writer.prefix("SourceIpamPoolId");
    if let Some(var_817) = &input.source_ipam_pool_id {
        scope_816.string(var_817);
    }
    #[allow(unused_mut)]
    let mut scope_818 = writer.prefix("Description");
    if let Some(var_819) = &input.description {
        scope_818.string(var_819);
    }
    #[allow(unused_mut)]
    let mut scope_820 = writer.prefix("AddressFamily");
    if let Some(var_821) = &input.address_family {
        scope_820.string(var_821.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_822 = writer.prefix("AutoImport");
    if let Some(var_823) = &input.auto_import {
        scope_822.boolean(*var_823);
    }
    #[allow(unused_mut)]
    let mut scope_824 = writer.prefix("PubliclyAdvertisable");
    if let Some(var_825) = &input.publicly_advertisable {
        scope_824.boolean(*var_825);
    }
    #[allow(unused_mut)]
    let mut scope_826 = writer.prefix("AllocationMinNetmaskLength");
    if let Some(var_827) = &input.allocation_min_netmask_length {
        scope_826.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_827).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_828 = writer.prefix("AllocationMaxNetmaskLength");
    if let Some(var_829) = &input.allocation_max_netmask_length {
        scope_828.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_829).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_830 = writer.prefix("AllocationDefaultNetmaskLength");
    if let Some(var_831) = &input.allocation_default_netmask_length {
        scope_830.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_831).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_832 = writer.prefix("AllocationResourceTag");
    if let Some(var_833) = &input.allocation_resource_tags {
        let mut list_835 = scope_832.start_list(true, Some("item"));
        for item_834 in var_833 {
            #[allow(unused_mut)]
            let mut entry_836 = list_835.entry();
            crate::query_ser::serialize_structure_crate_model_request_ipam_resource_tag(
                entry_836, item_834,
            )?;
        }
        list_835.finish();
    }
    #[allow(unused_mut)]
    let mut scope_837 = writer.prefix("TagSpecification");
    if let Some(var_838) = &input.tag_specifications {
        let mut list_840 = scope_837.start_list(true, Some("item"));
        for item_839 in var_838 {
            #[allow(unused_mut)]
            let mut entry_841 = list_840.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_841, item_839,
            )?;
        }
        list_840.finish();
    }
    #[allow(unused_mut)]
    let mut scope_842 = writer.prefix("ClientToken");
    if let Some(var_843) = &input.client_token {
        scope_842.string(var_843);
    }
    #[allow(unused_mut)]
    let mut scope_844 = writer.prefix("AwsService");
    if let Some(var_845) = &input.aws_service {
        scope_844.string(var_845.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_ipam_scope(
    input: &crate::input::CreateIpamScopeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateIpamScope", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_846 = writer.prefix("DryRun");
    if let Some(var_847) = &input.dry_run {
        scope_846.boolean(*var_847);
    }
    #[allow(unused_mut)]
    let mut scope_848 = writer.prefix("IpamId");
    if let Some(var_849) = &input.ipam_id {
        scope_848.string(var_849);
    }
    #[allow(unused_mut)]
    let mut scope_850 = writer.prefix("Description");
    if let Some(var_851) = &input.description {
        scope_850.string(var_851);
    }
    #[allow(unused_mut)]
    let mut scope_852 = writer.prefix("TagSpecification");
    if let Some(var_853) = &input.tag_specifications {
        let mut list_855 = scope_852.start_list(true, Some("item"));
        for item_854 in var_853 {
            #[allow(unused_mut)]
            let mut entry_856 = list_855.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_856, item_854,
            )?;
        }
        list_855.finish();
    }
    #[allow(unused_mut)]
    let mut scope_857 = writer.prefix("ClientToken");
    if let Some(var_858) = &input.client_token {
        scope_857.string(var_858);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_key_pair(
    input: &crate::input::CreateKeyPairInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_859 = writer.prefix("KeyName");
    if let Some(var_860) = &input.key_name {
        scope_859.string(var_860);
    }
    #[allow(unused_mut)]
    let mut scope_861 = writer.prefix("DryRun");
    if let Some(var_862) = &input.dry_run {
        scope_861.boolean(*var_862);
    }
    #[allow(unused_mut)]
    let mut scope_863 = writer.prefix("KeyType");
    if let Some(var_864) = &input.key_type {
        scope_863.string(var_864.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_865 = writer.prefix("TagSpecification");
    if let Some(var_866) = &input.tag_specifications {
        let mut list_868 = scope_865.start_list(true, Some("item"));
        for item_867 in var_866 {
            #[allow(unused_mut)]
            let mut entry_869 = list_868.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_869, item_867,
            )?;
        }
        list_868.finish();
    }
    #[allow(unused_mut)]
    let mut scope_870 = writer.prefix("KeyFormat");
    if let Some(var_871) = &input.key_format {
        scope_870.string(var_871.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_launch_template(
    input: &crate::input::CreateLaunchTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_872 = writer.prefix("DryRun");
    if let Some(var_873) = &input.dry_run {
        scope_872.boolean(*var_873);
    }
    #[allow(unused_mut)]
    let mut scope_874 = writer.prefix("ClientToken");
    if let Some(var_875) = &input.client_token {
        scope_874.string(var_875);
    }
    #[allow(unused_mut)]
    let mut scope_876 = writer.prefix("LaunchTemplateName");
    if let Some(var_877) = &input.launch_template_name {
        scope_876.string(var_877);
    }
    #[allow(unused_mut)]
    let mut scope_878 = writer.prefix("VersionDescription");
    if let Some(var_879) = &input.version_description {
        scope_878.string(var_879);
    }
    #[allow(unused_mut)]
    let mut scope_880 = writer.prefix("LaunchTemplateData");
    if let Some(var_881) = &input.launch_template_data {
        crate::query_ser::serialize_structure_crate_model_request_launch_template_data(
            scope_880, var_881,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_882 = writer.prefix("TagSpecification");
    if let Some(var_883) = &input.tag_specifications {
        let mut list_885 = scope_882.start_list(true, Some("item"));
        for item_884 in var_883 {
            #[allow(unused_mut)]
            let mut entry_886 = list_885.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_886, item_884,
            )?;
        }
        list_885.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_launch_template_version(
    input: &crate::input::CreateLaunchTemplateVersionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateLaunchTemplateVersion", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_887 = writer.prefix("DryRun");
    if let Some(var_888) = &input.dry_run {
        scope_887.boolean(*var_888);
    }
    #[allow(unused_mut)]
    let mut scope_889 = writer.prefix("ClientToken");
    if let Some(var_890) = &input.client_token {
        scope_889.string(var_890);
    }
    #[allow(unused_mut)]
    let mut scope_891 = writer.prefix("LaunchTemplateId");
    if let Some(var_892) = &input.launch_template_id {
        scope_891.string(var_892);
    }
    #[allow(unused_mut)]
    let mut scope_893 = writer.prefix("LaunchTemplateName");
    if let Some(var_894) = &input.launch_template_name {
        scope_893.string(var_894);
    }
    #[allow(unused_mut)]
    let mut scope_895 = writer.prefix("SourceVersion");
    if let Some(var_896) = &input.source_version {
        scope_895.string(var_896);
    }
    #[allow(unused_mut)]
    let mut scope_897 = writer.prefix("VersionDescription");
    if let Some(var_898) = &input.version_description {
        scope_897.string(var_898);
    }
    #[allow(unused_mut)]
    let mut scope_899 = writer.prefix("LaunchTemplateData");
    if let Some(var_900) = &input.launch_template_data {
        crate::query_ser::serialize_structure_crate_model_request_launch_template_data(
            scope_899, var_900,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_local_gateway_route(
    input: &crate::input::CreateLocalGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateLocalGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_901 = writer.prefix("DestinationCidrBlock");
    if let Some(var_902) = &input.destination_cidr_block {
        scope_901.string(var_902);
    }
    #[allow(unused_mut)]
    let mut scope_903 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_904) = &input.local_gateway_route_table_id {
        scope_903.string(var_904);
    }
    #[allow(unused_mut)]
    let mut scope_905 = writer.prefix("LocalGatewayVirtualInterfaceGroupId");
    if let Some(var_906) = &input.local_gateway_virtual_interface_group_id {
        scope_905.string(var_906);
    }
    #[allow(unused_mut)]
    let mut scope_907 = writer.prefix("DryRun");
    if let Some(var_908) = &input.dry_run {
        scope_907.boolean(*var_908);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_local_gateway_route_table_vpc_association(
    input: &crate::input::CreateLocalGatewayRouteTableVpcAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateLocalGatewayRouteTableVpcAssociation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_909 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_910) = &input.local_gateway_route_table_id {
        scope_909.string(var_910);
    }
    #[allow(unused_mut)]
    let mut scope_911 = writer.prefix("VpcId");
    if let Some(var_912) = &input.vpc_id {
        scope_911.string(var_912);
    }
    #[allow(unused_mut)]
    let mut scope_913 = writer.prefix("TagSpecification");
    if let Some(var_914) = &input.tag_specifications {
        let mut list_916 = scope_913.start_list(true, Some("item"));
        for item_915 in var_914 {
            #[allow(unused_mut)]
            let mut entry_917 = list_916.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_917, item_915,
            )?;
        }
        list_916.finish();
    }
    #[allow(unused_mut)]
    let mut scope_918 = writer.prefix("DryRun");
    if let Some(var_919) = &input.dry_run {
        scope_918.boolean(*var_919);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_managed_prefix_list(
    input: &crate::input::CreateManagedPrefixListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_920 = writer.prefix("DryRun");
    if let Some(var_921) = &input.dry_run {
        scope_920.boolean(*var_921);
    }
    #[allow(unused_mut)]
    let mut scope_922 = writer.prefix("PrefixListName");
    if let Some(var_923) = &input.prefix_list_name {
        scope_922.string(var_923);
    }
    #[allow(unused_mut)]
    let mut scope_924 = writer.prefix("Entry");
    if let Some(var_925) = &input.entries {
        let mut list_927 = scope_924.start_list(true, None);
        for item_926 in var_925 {
            #[allow(unused_mut)]
            let mut entry_928 = list_927.entry();
            crate::query_ser::serialize_structure_crate_model_add_prefix_list_entry(
                entry_928, item_926,
            )?;
        }
        list_927.finish();
    }
    #[allow(unused_mut)]
    let mut scope_929 = writer.prefix("MaxEntries");
    if let Some(var_930) = &input.max_entries {
        scope_929.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_930).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_931 = writer.prefix("TagSpecification");
    if let Some(var_932) = &input.tag_specifications {
        let mut list_934 = scope_931.start_list(true, Some("item"));
        for item_933 in var_932 {
            #[allow(unused_mut)]
            let mut entry_935 = list_934.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_935, item_933,
            )?;
        }
        list_934.finish();
    }
    #[allow(unused_mut)]
    let mut scope_936 = writer.prefix("AddressFamily");
    if let Some(var_937) = &input.address_family {
        scope_936.string(var_937);
    }
    #[allow(unused_mut)]
    let mut scope_938 = writer.prefix("ClientToken");
    if let Some(var_939) = &input.client_token {
        scope_938.string(var_939);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_nat_gateway(
    input: &crate::input::CreateNatGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateNatGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_940 = writer.prefix("AllocationId");
    if let Some(var_941) = &input.allocation_id {
        scope_940.string(var_941);
    }
    #[allow(unused_mut)]
    let mut scope_942 = writer.prefix("ClientToken");
    if let Some(var_943) = &input.client_token {
        scope_942.string(var_943);
    }
    #[allow(unused_mut)]
    let mut scope_944 = writer.prefix("DryRun");
    if let Some(var_945) = &input.dry_run {
        scope_944.boolean(*var_945);
    }
    #[allow(unused_mut)]
    let mut scope_946 = writer.prefix("SubnetId");
    if let Some(var_947) = &input.subnet_id {
        scope_946.string(var_947);
    }
    #[allow(unused_mut)]
    let mut scope_948 = writer.prefix("TagSpecification");
    if let Some(var_949) = &input.tag_specifications {
        let mut list_951 = scope_948.start_list(true, Some("item"));
        for item_950 in var_949 {
            #[allow(unused_mut)]
            let mut entry_952 = list_951.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_952, item_950,
            )?;
        }
        list_951.finish();
    }
    #[allow(unused_mut)]
    let mut scope_953 = writer.prefix("ConnectivityType");
    if let Some(var_954) = &input.connectivity_type {
        scope_953.string(var_954.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_acl(
    input: &crate::input::CreateNetworkAclInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkAcl", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_955 = writer.prefix("DryRun");
    if let Some(var_956) = &input.dry_run {
        scope_955.boolean(*var_956);
    }
    #[allow(unused_mut)]
    let mut scope_957 = writer.prefix("VpcId");
    if let Some(var_958) = &input.vpc_id {
        scope_957.string(var_958);
    }
    #[allow(unused_mut)]
    let mut scope_959 = writer.prefix("TagSpecification");
    if let Some(var_960) = &input.tag_specifications {
        let mut list_962 = scope_959.start_list(true, Some("item"));
        for item_961 in var_960 {
            #[allow(unused_mut)]
            let mut entry_963 = list_962.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_963, item_961,
            )?;
        }
        list_962.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_acl_entry(
    input: &crate::input::CreateNetworkAclEntryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_964 = writer.prefix("CidrBlock");
    if let Some(var_965) = &input.cidr_block {
        scope_964.string(var_965);
    }
    #[allow(unused_mut)]
    let mut scope_966 = writer.prefix("DryRun");
    if let Some(var_967) = &input.dry_run {
        scope_966.boolean(*var_967);
    }
    #[allow(unused_mut)]
    let mut scope_968 = writer.prefix("Egress");
    if let Some(var_969) = &input.egress {
        scope_968.boolean(*var_969);
    }
    #[allow(unused_mut)]
    let mut scope_970 = writer.prefix("Icmp");
    if let Some(var_971) = &input.icmp_type_code {
        crate::query_ser::serialize_structure_crate_model_icmp_type_code(scope_970, var_971)?;
    }
    #[allow(unused_mut)]
    let mut scope_972 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_973) = &input.ipv6_cidr_block {
        scope_972.string(var_973);
    }
    #[allow(unused_mut)]
    let mut scope_974 = writer.prefix("NetworkAclId");
    if let Some(var_975) = &input.network_acl_id {
        scope_974.string(var_975);
    }
    #[allow(unused_mut)]
    let mut scope_976 = writer.prefix("PortRange");
    if let Some(var_977) = &input.port_range {
        crate::query_ser::serialize_structure_crate_model_port_range(scope_976, var_977)?;
    }
    #[allow(unused_mut)]
    let mut scope_978 = writer.prefix("Protocol");
    if let Some(var_979) = &input.protocol {
        scope_978.string(var_979);
    }
    #[allow(unused_mut)]
    let mut scope_980 = writer.prefix("RuleAction");
    if let Some(var_981) = &input.rule_action {
        scope_980.string(var_981.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_982 = writer.prefix("RuleNumber");
    if let Some(var_983) = &input.rule_number {
        scope_982.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_983).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_insights_access_scope(
    input: &crate::input::CreateNetworkInsightsAccessScopeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateNetworkInsightsAccessScope",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_984 = writer.prefix("MatchPath");
    if let Some(var_985) = &input.match_paths {
        let mut list_987 = scope_984.start_list(true, Some("item"));
        for item_986 in var_985 {
            #[allow(unused_mut)]
            let mut entry_988 = list_987.entry();
            crate::query_ser::serialize_structure_crate_model_access_scope_path_request(
                entry_988, item_986,
            )?;
        }
        list_987.finish();
    }
    #[allow(unused_mut)]
    let mut scope_989 = writer.prefix("ExcludePath");
    if let Some(var_990) = &input.exclude_paths {
        let mut list_992 = scope_989.start_list(true, Some("item"));
        for item_991 in var_990 {
            #[allow(unused_mut)]
            let mut entry_993 = list_992.entry();
            crate::query_ser::serialize_structure_crate_model_access_scope_path_request(
                entry_993, item_991,
            )?;
        }
        list_992.finish();
    }
    #[allow(unused_mut)]
    let mut scope_994 = writer.prefix("ClientToken");
    if let Some(var_995) = &input.client_token {
        scope_994.string(var_995);
    }
    #[allow(unused_mut)]
    let mut scope_996 = writer.prefix("TagSpecification");
    if let Some(var_997) = &input.tag_specifications {
        let mut list_999 = scope_996.start_list(true, Some("item"));
        for item_998 in var_997 {
            #[allow(unused_mut)]
            let mut entry_1000 = list_999.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1000, item_998,
            )?;
        }
        list_999.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1001 = writer.prefix("DryRun");
    if let Some(var_1002) = &input.dry_run {
        scope_1001.boolean(*var_1002);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_insights_path(
    input: &crate::input::CreateNetworkInsightsPathInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkInsightsPath", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1003 = writer.prefix("SourceIp");
    if let Some(var_1004) = &input.source_ip {
        scope_1003.string(var_1004);
    }
    #[allow(unused_mut)]
    let mut scope_1005 = writer.prefix("DestinationIp");
    if let Some(var_1006) = &input.destination_ip {
        scope_1005.string(var_1006);
    }
    #[allow(unused_mut)]
    let mut scope_1007 = writer.prefix("Source");
    if let Some(var_1008) = &input.source {
        scope_1007.string(var_1008);
    }
    #[allow(unused_mut)]
    let mut scope_1009 = writer.prefix("Destination");
    if let Some(var_1010) = &input.destination {
        scope_1009.string(var_1010);
    }
    #[allow(unused_mut)]
    let mut scope_1011 = writer.prefix("Protocol");
    if let Some(var_1012) = &input.protocol {
        scope_1011.string(var_1012.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1013 = writer.prefix("DestinationPort");
    if let Some(var_1014) = &input.destination_port {
        scope_1013.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1014).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1015 = writer.prefix("TagSpecification");
    if let Some(var_1016) = &input.tag_specifications {
        let mut list_1018 = scope_1015.start_list(true, Some("item"));
        for item_1017 in var_1016 {
            #[allow(unused_mut)]
            let mut entry_1019 = list_1018.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1019, item_1017,
            )?;
        }
        list_1018.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1020 = writer.prefix("DryRun");
    if let Some(var_1021) = &input.dry_run {
        scope_1020.boolean(*var_1021);
    }
    #[allow(unused_mut)]
    let mut scope_1022 = writer.prefix("ClientToken");
    if let Some(var_1023) = &input.client_token {
        scope_1022.string(var_1023);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_interface(
    input: &crate::input::CreateNetworkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1024 = writer.prefix("Description");
    if let Some(var_1025) = &input.description {
        scope_1024.string(var_1025);
    }
    #[allow(unused_mut)]
    let mut scope_1026 = writer.prefix("DryRun");
    if let Some(var_1027) = &input.dry_run {
        scope_1026.boolean(*var_1027);
    }
    #[allow(unused_mut)]
    let mut scope_1028 = writer.prefix("SecurityGroupId");
    if let Some(var_1029) = &input.groups {
        let mut list_1031 = scope_1028.start_list(true, Some("SecurityGroupId"));
        for item_1030 in var_1029 {
            #[allow(unused_mut)]
            let mut entry_1032 = list_1031.entry();
            entry_1032.string(item_1030);
        }
        list_1031.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1033 = writer.prefix("Ipv6AddressCount");
    if let Some(var_1034) = &input.ipv6_address_count {
        scope_1033.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1034).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1035 = writer.prefix("Ipv6Addresses");
    if let Some(var_1036) = &input.ipv6_addresses {
        let mut list_1038 = scope_1035.start_list(true, Some("item"));
        for item_1037 in var_1036 {
            #[allow(unused_mut)]
            let mut entry_1039 = list_1038.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address(
                entry_1039, item_1037,
            )?;
        }
        list_1038.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1040 = writer.prefix("PrivateIpAddress");
    if let Some(var_1041) = &input.private_ip_address {
        scope_1040.string(var_1041);
    }
    #[allow(unused_mut)]
    let mut scope_1042 = writer.prefix("PrivateIpAddresses");
    if let Some(var_1043) = &input.private_ip_addresses {
        let mut list_1045 = scope_1042.start_list(true, Some("item"));
        for item_1044 in var_1043 {
            #[allow(unused_mut)]
            let mut entry_1046 = list_1045.entry();
            crate::query_ser::serialize_structure_crate_model_private_ip_address_specification(
                entry_1046, item_1044,
            )?;
        }
        list_1045.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1047 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_1048) = &input.secondary_private_ip_address_count {
        scope_1047.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1048).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1049 = writer.prefix("Ipv4Prefix");
    if let Some(var_1050) = &input.ipv4_prefixes {
        let mut list_1052 = scope_1049.start_list(true, Some("item"));
        for item_1051 in var_1050 {
            #[allow(unused_mut)]
            let mut entry_1053 = list_1052.entry();
            crate::query_ser::serialize_structure_crate_model_ipv4_prefix_specification_request(
                entry_1053, item_1051,
            )?;
        }
        list_1052.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1054 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_1055) = &input.ipv4_prefix_count {
        scope_1054.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1055).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1056 = writer.prefix("Ipv6Prefix");
    if let Some(var_1057) = &input.ipv6_prefixes {
        let mut list_1059 = scope_1056.start_list(true, Some("item"));
        for item_1058 in var_1057 {
            #[allow(unused_mut)]
            let mut entry_1060 = list_1059.entry();
            crate::query_ser::serialize_structure_crate_model_ipv6_prefix_specification_request(
                entry_1060, item_1058,
            )?;
        }
        list_1059.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1061 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_1062) = &input.ipv6_prefix_count {
        scope_1061.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1062).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1063 = writer.prefix("InterfaceType");
    if let Some(var_1064) = &input.interface_type {
        scope_1063.string(var_1064.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1065 = writer.prefix("SubnetId");
    if let Some(var_1066) = &input.subnet_id {
        scope_1065.string(var_1066);
    }
    #[allow(unused_mut)]
    let mut scope_1067 = writer.prefix("TagSpecification");
    if let Some(var_1068) = &input.tag_specifications {
        let mut list_1070 = scope_1067.start_list(true, Some("item"));
        for item_1069 in var_1068 {
            #[allow(unused_mut)]
            let mut entry_1071 = list_1070.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1071, item_1069,
            )?;
        }
        list_1070.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1072 = writer.prefix("ClientToken");
    if let Some(var_1073) = &input.client_token {
        scope_1072.string(var_1073);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_interface_permission(
    input: &crate::input::CreateNetworkInterfacePermissionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateNetworkInterfacePermission",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1074 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1075) = &input.network_interface_id {
        scope_1074.string(var_1075);
    }
    #[allow(unused_mut)]
    let mut scope_1076 = writer.prefix("AwsAccountId");
    if let Some(var_1077) = &input.aws_account_id {
        scope_1076.string(var_1077);
    }
    #[allow(unused_mut)]
    let mut scope_1078 = writer.prefix("AwsService");
    if let Some(var_1079) = &input.aws_service {
        scope_1078.string(var_1079);
    }
    #[allow(unused_mut)]
    let mut scope_1080 = writer.prefix("Permission");
    if let Some(var_1081) = &input.permission {
        scope_1080.string(var_1081.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1082 = writer.prefix("DryRun");
    if let Some(var_1083) = &input.dry_run {
        scope_1082.boolean(*var_1083);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_placement_group(
    input: &crate::input::CreatePlacementGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreatePlacementGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1084 = writer.prefix("DryRun");
    if let Some(var_1085) = &input.dry_run {
        scope_1084.boolean(*var_1085);
    }
    #[allow(unused_mut)]
    let mut scope_1086 = writer.prefix("GroupName");
    if let Some(var_1087) = &input.group_name {
        scope_1086.string(var_1087);
    }
    #[allow(unused_mut)]
    let mut scope_1088 = writer.prefix("Strategy");
    if let Some(var_1089) = &input.strategy {
        scope_1088.string(var_1089.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1090 = writer.prefix("PartitionCount");
    if let Some(var_1091) = &input.partition_count {
        scope_1090.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1091).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1092 = writer.prefix("TagSpecification");
    if let Some(var_1093) = &input.tag_specifications {
        let mut list_1095 = scope_1092.start_list(true, Some("item"));
        for item_1094 in var_1093 {
            #[allow(unused_mut)]
            let mut entry_1096 = list_1095.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1096, item_1094,
            )?;
        }
        list_1095.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_public_ipv4_pool(
    input: &crate::input::CreatePublicIpv4PoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreatePublicIpv4Pool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1097 = writer.prefix("DryRun");
    if let Some(var_1098) = &input.dry_run {
        scope_1097.boolean(*var_1098);
    }
    #[allow(unused_mut)]
    let mut scope_1099 = writer.prefix("TagSpecification");
    if let Some(var_1100) = &input.tag_specifications {
        let mut list_1102 = scope_1099.start_list(true, Some("item"));
        for item_1101 in var_1100 {
            #[allow(unused_mut)]
            let mut entry_1103 = list_1102.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1103, item_1101,
            )?;
        }
        list_1102.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_replace_root_volume_task(
    input: &crate::input::CreateReplaceRootVolumeTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateReplaceRootVolumeTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1104 = writer.prefix("InstanceId");
    if let Some(var_1105) = &input.instance_id {
        scope_1104.string(var_1105);
    }
    #[allow(unused_mut)]
    let mut scope_1106 = writer.prefix("SnapshotId");
    if let Some(var_1107) = &input.snapshot_id {
        scope_1106.string(var_1107);
    }
    #[allow(unused_mut)]
    let mut scope_1108 = writer.prefix("ClientToken");
    if let Some(var_1109) = &input.client_token {
        scope_1108.string(var_1109);
    }
    #[allow(unused_mut)]
    let mut scope_1110 = writer.prefix("DryRun");
    if let Some(var_1111) = &input.dry_run {
        scope_1110.boolean(*var_1111);
    }
    #[allow(unused_mut)]
    let mut scope_1112 = writer.prefix("TagSpecification");
    if let Some(var_1113) = &input.tag_specifications {
        let mut list_1115 = scope_1112.start_list(true, Some("item"));
        for item_1114 in var_1113 {
            #[allow(unused_mut)]
            let mut entry_1116 = list_1115.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1116, item_1114,
            )?;
        }
        list_1115.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_reserved_instances_listing(
    input: &crate::input::CreateReservedInstancesListingInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateReservedInstancesListing",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1117 = writer.prefix("ClientToken");
    if let Some(var_1118) = &input.client_token {
        scope_1117.string(var_1118);
    }
    #[allow(unused_mut)]
    let mut scope_1119 = writer.prefix("InstanceCount");
    if let Some(var_1120) = &input.instance_count {
        scope_1119.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1120).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1121 = writer.prefix("PriceSchedules");
    if let Some(var_1122) = &input.price_schedules {
        let mut list_1124 = scope_1121.start_list(true, Some("item"));
        for item_1123 in var_1122 {
            #[allow(unused_mut)]
            let mut entry_1125 = list_1124.entry();
            crate::query_ser::serialize_structure_crate_model_price_schedule_specification(
                entry_1125, item_1123,
            )?;
        }
        list_1124.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1126 = writer.prefix("ReservedInstancesId");
    if let Some(var_1127) = &input.reserved_instances_id {
        scope_1126.string(var_1127);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_restore_image_task(
    input: &crate::input::CreateRestoreImageTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateRestoreImageTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1128 = writer.prefix("Bucket");
    if let Some(var_1129) = &input.bucket {
        scope_1128.string(var_1129);
    }
    #[allow(unused_mut)]
    let mut scope_1130 = writer.prefix("ObjectKey");
    if let Some(var_1131) = &input.object_key {
        scope_1130.string(var_1131);
    }
    #[allow(unused_mut)]
    let mut scope_1132 = writer.prefix("Name");
    if let Some(var_1133) = &input.name {
        scope_1132.string(var_1133);
    }
    #[allow(unused_mut)]
    let mut scope_1134 = writer.prefix("TagSpecification");
    if let Some(var_1135) = &input.tag_specifications {
        let mut list_1137 = scope_1134.start_list(true, Some("item"));
        for item_1136 in var_1135 {
            #[allow(unused_mut)]
            let mut entry_1138 = list_1137.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1138, item_1136,
            )?;
        }
        list_1137.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1139 = writer.prefix("DryRun");
    if let Some(var_1140) = &input.dry_run {
        scope_1139.boolean(*var_1140);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_route(
    input: &crate::input::CreateRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1141 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1142) = &input.destination_cidr_block {
        scope_1141.string(var_1142);
    }
    #[allow(unused_mut)]
    let mut scope_1143 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_1144) = &input.destination_ipv6_cidr_block {
        scope_1143.string(var_1144);
    }
    #[allow(unused_mut)]
    let mut scope_1145 = writer.prefix("DestinationPrefixListId");
    if let Some(var_1146) = &input.destination_prefix_list_id {
        scope_1145.string(var_1146);
    }
    #[allow(unused_mut)]
    let mut scope_1147 = writer.prefix("DryRun");
    if let Some(var_1148) = &input.dry_run {
        scope_1147.boolean(*var_1148);
    }
    #[allow(unused_mut)]
    let mut scope_1149 = writer.prefix("VpcEndpointId");
    if let Some(var_1150) = &input.vpc_endpoint_id {
        scope_1149.string(var_1150);
    }
    #[allow(unused_mut)]
    let mut scope_1151 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_1152) = &input.egress_only_internet_gateway_id {
        scope_1151.string(var_1152);
    }
    #[allow(unused_mut)]
    let mut scope_1153 = writer.prefix("GatewayId");
    if let Some(var_1154) = &input.gateway_id {
        scope_1153.string(var_1154);
    }
    #[allow(unused_mut)]
    let mut scope_1155 = writer.prefix("InstanceId");
    if let Some(var_1156) = &input.instance_id {
        scope_1155.string(var_1156);
    }
    #[allow(unused_mut)]
    let mut scope_1157 = writer.prefix("NatGatewayId");
    if let Some(var_1158) = &input.nat_gateway_id {
        scope_1157.string(var_1158);
    }
    #[allow(unused_mut)]
    let mut scope_1159 = writer.prefix("TransitGatewayId");
    if let Some(var_1160) = &input.transit_gateway_id {
        scope_1159.string(var_1160);
    }
    #[allow(unused_mut)]
    let mut scope_1161 = writer.prefix("LocalGatewayId");
    if let Some(var_1162) = &input.local_gateway_id {
        scope_1161.string(var_1162);
    }
    #[allow(unused_mut)]
    let mut scope_1163 = writer.prefix("CarrierGatewayId");
    if let Some(var_1164) = &input.carrier_gateway_id {
        scope_1163.string(var_1164);
    }
    #[allow(unused_mut)]
    let mut scope_1165 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1166) = &input.network_interface_id {
        scope_1165.string(var_1166);
    }
    #[allow(unused_mut)]
    let mut scope_1167 = writer.prefix("RouteTableId");
    if let Some(var_1168) = &input.route_table_id {
        scope_1167.string(var_1168);
    }
    #[allow(unused_mut)]
    let mut scope_1169 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_1170) = &input.vpc_peering_connection_id {
        scope_1169.string(var_1170);
    }
    #[allow(unused_mut)]
    let mut scope_1171 = writer.prefix("CoreNetworkArn");
    if let Some(var_1172) = &input.core_network_arn {
        scope_1171.string(var_1172);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_route_table(
    input: &crate::input::CreateRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1173 = writer.prefix("DryRun");
    if let Some(var_1174) = &input.dry_run {
        scope_1173.boolean(*var_1174);
    }
    #[allow(unused_mut)]
    let mut scope_1175 = writer.prefix("VpcId");
    if let Some(var_1176) = &input.vpc_id {
        scope_1175.string(var_1176);
    }
    #[allow(unused_mut)]
    let mut scope_1177 = writer.prefix("TagSpecification");
    if let Some(var_1178) = &input.tag_specifications {
        let mut list_1180 = scope_1177.start_list(true, Some("item"));
        for item_1179 in var_1178 {
            #[allow(unused_mut)]
            let mut entry_1181 = list_1180.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1181, item_1179,
            )?;
        }
        list_1180.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_security_group(
    input: &crate::input::CreateSecurityGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateSecurityGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1182 = writer.prefix("GroupDescription");
    if let Some(var_1183) = &input.description {
        scope_1182.string(var_1183);
    }
    #[allow(unused_mut)]
    let mut scope_1184 = writer.prefix("GroupName");
    if let Some(var_1185) = &input.group_name {
        scope_1184.string(var_1185);
    }
    #[allow(unused_mut)]
    let mut scope_1186 = writer.prefix("VpcId");
    if let Some(var_1187) = &input.vpc_id {
        scope_1186.string(var_1187);
    }
    #[allow(unused_mut)]
    let mut scope_1188 = writer.prefix("TagSpecification");
    if let Some(var_1189) = &input.tag_specifications {
        let mut list_1191 = scope_1188.start_list(true, Some("item"));
        for item_1190 in var_1189 {
            #[allow(unused_mut)]
            let mut entry_1192 = list_1191.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1192, item_1190,
            )?;
        }
        list_1191.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1193 = writer.prefix("DryRun");
    if let Some(var_1194) = &input.dry_run {
        scope_1193.boolean(*var_1194);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_snapshot(
    input: &crate::input::CreateSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1195 = writer.prefix("Description");
    if let Some(var_1196) = &input.description {
        scope_1195.string(var_1196);
    }
    #[allow(unused_mut)]
    let mut scope_1197 = writer.prefix("OutpostArn");
    if let Some(var_1198) = &input.outpost_arn {
        scope_1197.string(var_1198);
    }
    #[allow(unused_mut)]
    let mut scope_1199 = writer.prefix("VolumeId");
    if let Some(var_1200) = &input.volume_id {
        scope_1199.string(var_1200);
    }
    #[allow(unused_mut)]
    let mut scope_1201 = writer.prefix("TagSpecification");
    if let Some(var_1202) = &input.tag_specifications {
        let mut list_1204 = scope_1201.start_list(true, Some("item"));
        for item_1203 in var_1202 {
            #[allow(unused_mut)]
            let mut entry_1205 = list_1204.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1205, item_1203,
            )?;
        }
        list_1204.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1206 = writer.prefix("DryRun");
    if let Some(var_1207) = &input.dry_run {
        scope_1206.boolean(*var_1207);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_snapshots(
    input: &crate::input::CreateSnapshotsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSnapshots", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1208 = writer.prefix("Description");
    if let Some(var_1209) = &input.description {
        scope_1208.string(var_1209);
    }
    #[allow(unused_mut)]
    let mut scope_1210 = writer.prefix("InstanceSpecification");
    if let Some(var_1211) = &input.instance_specification {
        crate::query_ser::serialize_structure_crate_model_instance_specification(
            scope_1210, var_1211,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1212 = writer.prefix("OutpostArn");
    if let Some(var_1213) = &input.outpost_arn {
        scope_1212.string(var_1213);
    }
    #[allow(unused_mut)]
    let mut scope_1214 = writer.prefix("TagSpecification");
    if let Some(var_1215) = &input.tag_specifications {
        let mut list_1217 = scope_1214.start_list(true, Some("item"));
        for item_1216 in var_1215 {
            #[allow(unused_mut)]
            let mut entry_1218 = list_1217.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1218, item_1216,
            )?;
        }
        list_1217.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1219 = writer.prefix("DryRun");
    if let Some(var_1220) = &input.dry_run {
        scope_1219.boolean(*var_1220);
    }
    #[allow(unused_mut)]
    let mut scope_1221 = writer.prefix("CopyTagsFromSource");
    if let Some(var_1222) = &input.copy_tags_from_source {
        scope_1221.string(var_1222.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_spot_datafeed_subscription(
    input: &crate::input::CreateSpotDatafeedSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateSpotDatafeedSubscription",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1223 = writer.prefix("Bucket");
    if let Some(var_1224) = &input.bucket {
        scope_1223.string(var_1224);
    }
    #[allow(unused_mut)]
    let mut scope_1225 = writer.prefix("DryRun");
    if let Some(var_1226) = &input.dry_run {
        scope_1225.boolean(*var_1226);
    }
    #[allow(unused_mut)]
    let mut scope_1227 = writer.prefix("Prefix");
    if let Some(var_1228) = &input.prefix {
        scope_1227.string(var_1228);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_store_image_task(
    input: &crate::input::CreateStoreImageTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateStoreImageTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1229 = writer.prefix("ImageId");
    if let Some(var_1230) = &input.image_id {
        scope_1229.string(var_1230);
    }
    #[allow(unused_mut)]
    let mut scope_1231 = writer.prefix("Bucket");
    if let Some(var_1232) = &input.bucket {
        scope_1231.string(var_1232);
    }
    #[allow(unused_mut)]
    let mut scope_1233 = writer.prefix("S3ObjectTag");
    if let Some(var_1234) = &input.s3_object_tags {
        let mut list_1236 = scope_1233.start_list(true, Some("item"));
        for item_1235 in var_1234 {
            #[allow(unused_mut)]
            let mut entry_1237 = list_1236.entry();
            crate::query_ser::serialize_structure_crate_model_s3_object_tag(entry_1237, item_1235)?;
        }
        list_1236.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1238 = writer.prefix("DryRun");
    if let Some(var_1239) = &input.dry_run {
        scope_1238.boolean(*var_1239);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_subnet(
    input: &crate::input::CreateSubnetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1240 = writer.prefix("TagSpecification");
    if let Some(var_1241) = &input.tag_specifications {
        let mut list_1243 = scope_1240.start_list(true, Some("item"));
        for item_1242 in var_1241 {
            #[allow(unused_mut)]
            let mut entry_1244 = list_1243.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1244, item_1242,
            )?;
        }
        list_1243.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1245 = writer.prefix("AvailabilityZone");
    if let Some(var_1246) = &input.availability_zone {
        scope_1245.string(var_1246);
    }
    #[allow(unused_mut)]
    let mut scope_1247 = writer.prefix("AvailabilityZoneId");
    if let Some(var_1248) = &input.availability_zone_id {
        scope_1247.string(var_1248);
    }
    #[allow(unused_mut)]
    let mut scope_1249 = writer.prefix("CidrBlock");
    if let Some(var_1250) = &input.cidr_block {
        scope_1249.string(var_1250);
    }
    #[allow(unused_mut)]
    let mut scope_1251 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_1252) = &input.ipv6_cidr_block {
        scope_1251.string(var_1252);
    }
    #[allow(unused_mut)]
    let mut scope_1253 = writer.prefix("OutpostArn");
    if let Some(var_1254) = &input.outpost_arn {
        scope_1253.string(var_1254);
    }
    #[allow(unused_mut)]
    let mut scope_1255 = writer.prefix("VpcId");
    if let Some(var_1256) = &input.vpc_id {
        scope_1255.string(var_1256);
    }
    #[allow(unused_mut)]
    let mut scope_1257 = writer.prefix("DryRun");
    if let Some(var_1258) = &input.dry_run {
        scope_1257.boolean(*var_1258);
    }
    #[allow(unused_mut)]
    let mut scope_1259 = writer.prefix("Ipv6Native");
    if let Some(var_1260) = &input.ipv6_native {
        scope_1259.boolean(*var_1260);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_subnet_cidr_reservation(
    input: &crate::input::CreateSubnetCidrReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateSubnetCidrReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1261 = writer.prefix("SubnetId");
    if let Some(var_1262) = &input.subnet_id {
        scope_1261.string(var_1262);
    }
    #[allow(unused_mut)]
    let mut scope_1263 = writer.prefix("Cidr");
    if let Some(var_1264) = &input.cidr {
        scope_1263.string(var_1264);
    }
    #[allow(unused_mut)]
    let mut scope_1265 = writer.prefix("ReservationType");
    if let Some(var_1266) = &input.reservation_type {
        scope_1265.string(var_1266.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1267 = writer.prefix("Description");
    if let Some(var_1268) = &input.description {
        scope_1267.string(var_1268);
    }
    #[allow(unused_mut)]
    let mut scope_1269 = writer.prefix("DryRun");
    if let Some(var_1270) = &input.dry_run {
        scope_1269.boolean(*var_1270);
    }
    #[allow(unused_mut)]
    let mut scope_1271 = writer.prefix("TagSpecification");
    if let Some(var_1272) = &input.tag_specifications {
        let mut list_1274 = scope_1271.start_list(true, Some("item"));
        for item_1273 in var_1272 {
            #[allow(unused_mut)]
            let mut entry_1275 = list_1274.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1275, item_1273,
            )?;
        }
        list_1274.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_tags(
    input: &crate::input::CreateTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1276 = writer.prefix("DryRun");
    if let Some(var_1277) = &input.dry_run {
        scope_1276.boolean(*var_1277);
    }
    #[allow(unused_mut)]
    let mut scope_1278 = writer.prefix("ResourceId");
    if let Some(var_1279) = &input.resources {
        let mut list_1281 = scope_1278.start_list(true, None);
        for item_1280 in var_1279 {
            #[allow(unused_mut)]
            let mut entry_1282 = list_1281.entry();
            entry_1282.string(item_1280);
        }
        list_1281.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1283 = writer.prefix("Tag");
    if let Some(var_1284) = &input.tags {
        let mut list_1286 = scope_1283.start_list(true, Some("item"));
        for item_1285 in var_1284 {
            #[allow(unused_mut)]
            let mut entry_1287 = list_1286.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1287, item_1285)?;
        }
        list_1286.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_filter(
    input: &crate::input::CreateTrafficMirrorFilterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorFilter", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1288 = writer.prefix("Description");
    if let Some(var_1289) = &input.description {
        scope_1288.string(var_1289);
    }
    #[allow(unused_mut)]
    let mut scope_1290 = writer.prefix("TagSpecification");
    if let Some(var_1291) = &input.tag_specifications {
        let mut list_1293 = scope_1290.start_list(true, Some("item"));
        for item_1292 in var_1291 {
            #[allow(unused_mut)]
            let mut entry_1294 = list_1293.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1294, item_1292,
            )?;
        }
        list_1293.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1295 = writer.prefix("DryRun");
    if let Some(var_1296) = &input.dry_run {
        scope_1295.boolean(*var_1296);
    }
    #[allow(unused_mut)]
    let mut scope_1297 = writer.prefix("ClientToken");
    if let Some(var_1298) = &input.client_token {
        scope_1297.string(var_1298);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_filter_rule(
    input: &crate::input::CreateTrafficMirrorFilterRuleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1299 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1300) = &input.traffic_mirror_filter_id {
        scope_1299.string(var_1300);
    }
    #[allow(unused_mut)]
    let mut scope_1301 = writer.prefix("TrafficDirection");
    if let Some(var_1302) = &input.traffic_direction {
        scope_1301.string(var_1302.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1303 = writer.prefix("RuleNumber");
    if let Some(var_1304) = &input.rule_number {
        scope_1303.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1304).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1305 = writer.prefix("RuleAction");
    if let Some(var_1306) = &input.rule_action {
        scope_1305.string(var_1306.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1307 = writer.prefix("DestinationPortRange");
    if let Some(var_1308) = &input.destination_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_1307, var_1308,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1309 = writer.prefix("SourcePortRange");
    if let Some(var_1310) = &input.source_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_1309, var_1310,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1311 = writer.prefix("Protocol");
    if let Some(var_1312) = &input.protocol {
        scope_1311.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1312).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1313 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1314) = &input.destination_cidr_block {
        scope_1313.string(var_1314);
    }
    #[allow(unused_mut)]
    let mut scope_1315 = writer.prefix("SourceCidrBlock");
    if let Some(var_1316) = &input.source_cidr_block {
        scope_1315.string(var_1316);
    }
    #[allow(unused_mut)]
    let mut scope_1317 = writer.prefix("Description");
    if let Some(var_1318) = &input.description {
        scope_1317.string(var_1318);
    }
    #[allow(unused_mut)]
    let mut scope_1319 = writer.prefix("DryRun");
    if let Some(var_1320) = &input.dry_run {
        scope_1319.boolean(*var_1320);
    }
    #[allow(unused_mut)]
    let mut scope_1321 = writer.prefix("ClientToken");
    if let Some(var_1322) = &input.client_token {
        scope_1321.string(var_1322);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_session(
    input: &crate::input::CreateTrafficMirrorSessionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1323 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1324) = &input.network_interface_id {
        scope_1323.string(var_1324);
    }
    #[allow(unused_mut)]
    let mut scope_1325 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_1326) = &input.traffic_mirror_target_id {
        scope_1325.string(var_1326);
    }
    #[allow(unused_mut)]
    let mut scope_1327 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1328) = &input.traffic_mirror_filter_id {
        scope_1327.string(var_1328);
    }
    #[allow(unused_mut)]
    let mut scope_1329 = writer.prefix("PacketLength");
    if let Some(var_1330) = &input.packet_length {
        scope_1329.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1330).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1331 = writer.prefix("SessionNumber");
    if let Some(var_1332) = &input.session_number {
        scope_1331.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1332).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1333 = writer.prefix("VirtualNetworkId");
    if let Some(var_1334) = &input.virtual_network_id {
        scope_1333.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1334).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1335 = writer.prefix("Description");
    if let Some(var_1336) = &input.description {
        scope_1335.string(var_1336);
    }
    #[allow(unused_mut)]
    let mut scope_1337 = writer.prefix("TagSpecification");
    if let Some(var_1338) = &input.tag_specifications {
        let mut list_1340 = scope_1337.start_list(true, Some("item"));
        for item_1339 in var_1338 {
            #[allow(unused_mut)]
            let mut entry_1341 = list_1340.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1341, item_1339,
            )?;
        }
        list_1340.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1342 = writer.prefix("DryRun");
    if let Some(var_1343) = &input.dry_run {
        scope_1342.boolean(*var_1343);
    }
    #[allow(unused_mut)]
    let mut scope_1344 = writer.prefix("ClientToken");
    if let Some(var_1345) = &input.client_token {
        scope_1344.string(var_1345);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_target(
    input: &crate::input::CreateTrafficMirrorTargetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorTarget", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1346 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1347) = &input.network_interface_id {
        scope_1346.string(var_1347);
    }
    #[allow(unused_mut)]
    let mut scope_1348 = writer.prefix("NetworkLoadBalancerArn");
    if let Some(var_1349) = &input.network_load_balancer_arn {
        scope_1348.string(var_1349);
    }
    #[allow(unused_mut)]
    let mut scope_1350 = writer.prefix("Description");
    if let Some(var_1351) = &input.description {
        scope_1350.string(var_1351);
    }
    #[allow(unused_mut)]
    let mut scope_1352 = writer.prefix("TagSpecification");
    if let Some(var_1353) = &input.tag_specifications {
        let mut list_1355 = scope_1352.start_list(true, Some("item"));
        for item_1354 in var_1353 {
            #[allow(unused_mut)]
            let mut entry_1356 = list_1355.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1356, item_1354,
            )?;
        }
        list_1355.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1357 = writer.prefix("DryRun");
    if let Some(var_1358) = &input.dry_run {
        scope_1357.boolean(*var_1358);
    }
    #[allow(unused_mut)]
    let mut scope_1359 = writer.prefix("ClientToken");
    if let Some(var_1360) = &input.client_token {
        scope_1359.string(var_1360);
    }
    #[allow(unused_mut)]
    let mut scope_1361 = writer.prefix("GatewayLoadBalancerEndpointId");
    if let Some(var_1362) = &input.gateway_load_balancer_endpoint_id {
        scope_1361.string(var_1362);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway(
    input: &crate::input::CreateTransitGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1363 = writer.prefix("Description");
    if let Some(var_1364) = &input.description {
        scope_1363.string(var_1364);
    }
    #[allow(unused_mut)]
    let mut scope_1365 = writer.prefix("Options");
    if let Some(var_1366) = &input.options {
        crate::query_ser::serialize_structure_crate_model_transit_gateway_request_options(
            scope_1365, var_1366,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1367 = writer.prefix("TagSpecification");
    if let Some(var_1368) = &input.tag_specifications {
        let mut list_1370 = scope_1367.start_list(true, Some("item"));
        for item_1369 in var_1368 {
            #[allow(unused_mut)]
            let mut entry_1371 = list_1370.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1371, item_1369,
            )?;
        }
        list_1370.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1372 = writer.prefix("DryRun");
    if let Some(var_1373) = &input.dry_run {
        scope_1372.boolean(*var_1373);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_connect(
    input: &crate::input::CreateTransitGatewayConnectInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayConnect", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1374 = writer.prefix("TransportTransitGatewayAttachmentId");
    if let Some(var_1375) = &input.transport_transit_gateway_attachment_id {
        scope_1374.string(var_1375);
    }
    #[allow(unused_mut)]
    let mut scope_1376 = writer.prefix("Options");
    if let Some(var_1377) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_connect_request_options(scope_1376, var_1377)?;
    }
    #[allow(unused_mut)]
    let mut scope_1378 = writer.prefix("TagSpecification");
    if let Some(var_1379) = &input.tag_specifications {
        let mut list_1381 = scope_1378.start_list(true, Some("item"));
        for item_1380 in var_1379 {
            #[allow(unused_mut)]
            let mut entry_1382 = list_1381.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1382, item_1380,
            )?;
        }
        list_1381.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1383 = writer.prefix("DryRun");
    if let Some(var_1384) = &input.dry_run {
        scope_1383.boolean(*var_1384);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_connect_peer(
    input: &crate::input::CreateTransitGatewayConnectPeerInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayConnectPeer",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1385 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1386) = &input.transit_gateway_attachment_id {
        scope_1385.string(var_1386);
    }
    #[allow(unused_mut)]
    let mut scope_1387 = writer.prefix("TransitGatewayAddress");
    if let Some(var_1388) = &input.transit_gateway_address {
        scope_1387.string(var_1388);
    }
    #[allow(unused_mut)]
    let mut scope_1389 = writer.prefix("PeerAddress");
    if let Some(var_1390) = &input.peer_address {
        scope_1389.string(var_1390);
    }
    #[allow(unused_mut)]
    let mut scope_1391 = writer.prefix("BgpOptions");
    if let Some(var_1392) = &input.bgp_options {
        crate::query_ser::serialize_structure_crate_model_transit_gateway_connect_request_bgp_options(scope_1391, var_1392)?;
    }
    #[allow(unused_mut)]
    let mut scope_1393 = writer.prefix("InsideCidrBlocks");
    if let Some(var_1394) = &input.inside_cidr_blocks {
        let mut list_1396 = scope_1393.start_list(true, Some("item"));
        for item_1395 in var_1394 {
            #[allow(unused_mut)]
            let mut entry_1397 = list_1396.entry();
            entry_1397.string(item_1395);
        }
        list_1396.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1398 = writer.prefix("TagSpecification");
    if let Some(var_1399) = &input.tag_specifications {
        let mut list_1401 = scope_1398.start_list(true, Some("item"));
        for item_1400 in var_1399 {
            #[allow(unused_mut)]
            let mut entry_1402 = list_1401.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1402, item_1400,
            )?;
        }
        list_1401.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1403 = writer.prefix("DryRun");
    if let Some(var_1404) = &input.dry_run {
        scope_1403.boolean(*var_1404);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_multicast_domain(
    input: &crate::input::CreateTransitGatewayMulticastDomainInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1405 = writer.prefix("TransitGatewayId");
    if let Some(var_1406) = &input.transit_gateway_id {
        scope_1405.string(var_1406);
    }
    #[allow(unused_mut)]
    let mut scope_1407 = writer.prefix("Options");
    if let Some(var_1408) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_multicast_domain_request_options(scope_1407, var_1408)?;
    }
    #[allow(unused_mut)]
    let mut scope_1409 = writer.prefix("TagSpecification");
    if let Some(var_1410) = &input.tag_specifications {
        let mut list_1412 = scope_1409.start_list(true, Some("item"));
        for item_1411 in var_1410 {
            #[allow(unused_mut)]
            let mut entry_1413 = list_1412.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1413, item_1411,
            )?;
        }
        list_1412.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1414 = writer.prefix("DryRun");
    if let Some(var_1415) = &input.dry_run {
        scope_1414.boolean(*var_1415);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_peering_attachment(
    input: &crate::input::CreateTransitGatewayPeeringAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1416 = writer.prefix("TransitGatewayId");
    if let Some(var_1417) = &input.transit_gateway_id {
        scope_1416.string(var_1417);
    }
    #[allow(unused_mut)]
    let mut scope_1418 = writer.prefix("PeerTransitGatewayId");
    if let Some(var_1419) = &input.peer_transit_gateway_id {
        scope_1418.string(var_1419);
    }
    #[allow(unused_mut)]
    let mut scope_1420 = writer.prefix("PeerAccountId");
    if let Some(var_1421) = &input.peer_account_id {
        scope_1420.string(var_1421);
    }
    #[allow(unused_mut)]
    let mut scope_1422 = writer.prefix("PeerRegion");
    if let Some(var_1423) = &input.peer_region {
        scope_1422.string(var_1423);
    }
    #[allow(unused_mut)]
    let mut scope_1424 = writer.prefix("TagSpecification");
    if let Some(var_1425) = &input.tag_specifications {
        let mut list_1427 = scope_1424.start_list(true, Some("item"));
        for item_1426 in var_1425 {
            #[allow(unused_mut)]
            let mut entry_1428 = list_1427.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1428, item_1426,
            )?;
        }
        list_1427.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1429 = writer.prefix("DryRun");
    if let Some(var_1430) = &input.dry_run {
        scope_1429.boolean(*var_1430);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_prefix_list_reference(
    input: &crate::input::CreateTransitGatewayPrefixListReferenceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayPrefixListReference",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1431 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1432) = &input.transit_gateway_route_table_id {
        scope_1431.string(var_1432);
    }
    #[allow(unused_mut)]
    let mut scope_1433 = writer.prefix("PrefixListId");
    if let Some(var_1434) = &input.prefix_list_id {
        scope_1433.string(var_1434);
    }
    #[allow(unused_mut)]
    let mut scope_1435 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1436) = &input.transit_gateway_attachment_id {
        scope_1435.string(var_1436);
    }
    #[allow(unused_mut)]
    let mut scope_1437 = writer.prefix("Blackhole");
    if let Some(var_1438) = &input.blackhole {
        scope_1437.boolean(*var_1438);
    }
    #[allow(unused_mut)]
    let mut scope_1439 = writer.prefix("DryRun");
    if let Some(var_1440) = &input.dry_run {
        scope_1439.boolean(*var_1440);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_route(
    input: &crate::input::CreateTransitGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1441 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1442) = &input.destination_cidr_block {
        scope_1441.string(var_1442);
    }
    #[allow(unused_mut)]
    let mut scope_1443 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1444) = &input.transit_gateway_route_table_id {
        scope_1443.string(var_1444);
    }
    #[allow(unused_mut)]
    let mut scope_1445 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1446) = &input.transit_gateway_attachment_id {
        scope_1445.string(var_1446);
    }
    #[allow(unused_mut)]
    let mut scope_1447 = writer.prefix("Blackhole");
    if let Some(var_1448) = &input.blackhole {
        scope_1447.boolean(*var_1448);
    }
    #[allow(unused_mut)]
    let mut scope_1449 = writer.prefix("DryRun");
    if let Some(var_1450) = &input.dry_run {
        scope_1449.boolean(*var_1450);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_route_table(
    input: &crate::input::CreateTransitGatewayRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1451 = writer.prefix("TransitGatewayId");
    if let Some(var_1452) = &input.transit_gateway_id {
        scope_1451.string(var_1452);
    }
    #[allow(unused_mut)]
    let mut scope_1453 = writer.prefix("TagSpecifications");
    if let Some(var_1454) = &input.tag_specifications {
        let mut list_1456 = scope_1453.start_list(true, Some("item"));
        for item_1455 in var_1454 {
            #[allow(unused_mut)]
            let mut entry_1457 = list_1456.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1457, item_1455,
            )?;
        }
        list_1456.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1458 = writer.prefix("DryRun");
    if let Some(var_1459) = &input.dry_run {
        scope_1458.boolean(*var_1459);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_vpc_attachment(
    input: &crate::input::CreateTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1460 = writer.prefix("TransitGatewayId");
    if let Some(var_1461) = &input.transit_gateway_id {
        scope_1460.string(var_1461);
    }
    #[allow(unused_mut)]
    let mut scope_1462 = writer.prefix("VpcId");
    if let Some(var_1463) = &input.vpc_id {
        scope_1462.string(var_1463);
    }
    #[allow(unused_mut)]
    let mut scope_1464 = writer.prefix("SubnetIds");
    if let Some(var_1465) = &input.subnet_ids {
        let mut list_1467 = scope_1464.start_list(true, Some("item"));
        for item_1466 in var_1465 {
            #[allow(unused_mut)]
            let mut entry_1468 = list_1467.entry();
            entry_1468.string(item_1466);
        }
        list_1467.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1469 = writer.prefix("Options");
    if let Some(var_1470) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_vpc_attachment_request_options(scope_1469, var_1470)?;
    }
    #[allow(unused_mut)]
    let mut scope_1471 = writer.prefix("TagSpecifications");
    if let Some(var_1472) = &input.tag_specifications {
        let mut list_1474 = scope_1471.start_list(true, Some("item"));
        for item_1473 in var_1472 {
            #[allow(unused_mut)]
            let mut entry_1475 = list_1474.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1475, item_1473,
            )?;
        }
        list_1474.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1476 = writer.prefix("DryRun");
    if let Some(var_1477) = &input.dry_run {
        scope_1476.boolean(*var_1477);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_volume(
    input: &crate::input::CreateVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1478 = writer.prefix("AvailabilityZone");
    if let Some(var_1479) = &input.availability_zone {
        scope_1478.string(var_1479);
    }
    #[allow(unused_mut)]
    let mut scope_1480 = writer.prefix("Encrypted");
    if let Some(var_1481) = &input.encrypted {
        scope_1480.boolean(*var_1481);
    }
    #[allow(unused_mut)]
    let mut scope_1482 = writer.prefix("Iops");
    if let Some(var_1483) = &input.iops {
        scope_1482.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1483).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1484 = writer.prefix("KmsKeyId");
    if let Some(var_1485) = &input.kms_key_id {
        scope_1484.string(var_1485);
    }
    #[allow(unused_mut)]
    let mut scope_1486 = writer.prefix("OutpostArn");
    if let Some(var_1487) = &input.outpost_arn {
        scope_1486.string(var_1487);
    }
    #[allow(unused_mut)]
    let mut scope_1488 = writer.prefix("Size");
    if let Some(var_1489) = &input.size {
        scope_1488.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1489).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1490 = writer.prefix("SnapshotId");
    if let Some(var_1491) = &input.snapshot_id {
        scope_1490.string(var_1491);
    }
    #[allow(unused_mut)]
    let mut scope_1492 = writer.prefix("VolumeType");
    if let Some(var_1493) = &input.volume_type {
        scope_1492.string(var_1493.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1494 = writer.prefix("DryRun");
    if let Some(var_1495) = &input.dry_run {
        scope_1494.boolean(*var_1495);
    }
    #[allow(unused_mut)]
    let mut scope_1496 = writer.prefix("TagSpecification");
    if let Some(var_1497) = &input.tag_specifications {
        let mut list_1499 = scope_1496.start_list(true, Some("item"));
        for item_1498 in var_1497 {
            #[allow(unused_mut)]
            let mut entry_1500 = list_1499.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1500, item_1498,
            )?;
        }
        list_1499.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1501 = writer.prefix("MultiAttachEnabled");
    if let Some(var_1502) = &input.multi_attach_enabled {
        scope_1501.boolean(*var_1502);
    }
    #[allow(unused_mut)]
    let mut scope_1503 = writer.prefix("Throughput");
    if let Some(var_1504) = &input.throughput {
        scope_1503.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1504).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1505 = writer.prefix("ClientToken");
    if let Some(var_1506) = &input.client_token {
        scope_1505.string(var_1506);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc(
    input: &crate::input::CreateVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1507 = writer.prefix("CidrBlock");
    if let Some(var_1508) = &input.cidr_block {
        scope_1507.string(var_1508);
    }
    #[allow(unused_mut)]
    let mut scope_1509 = writer.prefix("AmazonProvidedIpv6CidrBlock");
    if let Some(var_1510) = &input.amazon_provided_ipv6_cidr_block {
        scope_1509.boolean(*var_1510);
    }
    #[allow(unused_mut)]
    let mut scope_1511 = writer.prefix("Ipv6Pool");
    if let Some(var_1512) = &input.ipv6_pool {
        scope_1511.string(var_1512);
    }
    #[allow(unused_mut)]
    let mut scope_1513 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_1514) = &input.ipv6_cidr_block {
        scope_1513.string(var_1514);
    }
    #[allow(unused_mut)]
    let mut scope_1515 = writer.prefix("Ipv4IpamPoolId");
    if let Some(var_1516) = &input.ipv4_ipam_pool_id {
        scope_1515.string(var_1516);
    }
    #[allow(unused_mut)]
    let mut scope_1517 = writer.prefix("Ipv4NetmaskLength");
    if let Some(var_1518) = &input.ipv4_netmask_length {
        scope_1517.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1518).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1519 = writer.prefix("Ipv6IpamPoolId");
    if let Some(var_1520) = &input.ipv6_ipam_pool_id {
        scope_1519.string(var_1520);
    }
    #[allow(unused_mut)]
    let mut scope_1521 = writer.prefix("Ipv6NetmaskLength");
    if let Some(var_1522) = &input.ipv6_netmask_length {
        scope_1521.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1522).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1523 = writer.prefix("DryRun");
    if let Some(var_1524) = &input.dry_run {
        scope_1523.boolean(*var_1524);
    }
    #[allow(unused_mut)]
    let mut scope_1525 = writer.prefix("InstanceTenancy");
    if let Some(var_1526) = &input.instance_tenancy {
        scope_1525.string(var_1526.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1527 = writer.prefix("Ipv6CidrBlockNetworkBorderGroup");
    if let Some(var_1528) = &input.ipv6_cidr_block_network_border_group {
        scope_1527.string(var_1528);
    }
    #[allow(unused_mut)]
    let mut scope_1529 = writer.prefix("TagSpecification");
    if let Some(var_1530) = &input.tag_specifications {
        let mut list_1532 = scope_1529.start_list(true, Some("item"));
        for item_1531 in var_1530 {
            #[allow(unused_mut)]
            let mut entry_1533 = list_1532.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1533, item_1531,
            )?;
        }
        list_1532.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_endpoint(
    input: &crate::input::CreateVpcEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateVpcEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1534 = writer.prefix("DryRun");
    if let Some(var_1535) = &input.dry_run {
        scope_1534.boolean(*var_1535);
    }
    #[allow(unused_mut)]
    let mut scope_1536 = writer.prefix("VpcEndpointType");
    if let Some(var_1537) = &input.vpc_endpoint_type {
        scope_1536.string(var_1537.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1538 = writer.prefix("VpcId");
    if let Some(var_1539) = &input.vpc_id {
        scope_1538.string(var_1539);
    }
    #[allow(unused_mut)]
    let mut scope_1540 = writer.prefix("ServiceName");
    if let Some(var_1541) = &input.service_name {
        scope_1540.string(var_1541);
    }
    #[allow(unused_mut)]
    let mut scope_1542 = writer.prefix("PolicyDocument");
    if let Some(var_1543) = &input.policy_document {
        scope_1542.string(var_1543);
    }
    #[allow(unused_mut)]
    let mut scope_1544 = writer.prefix("RouteTableId");
    if let Some(var_1545) = &input.route_table_ids {
        let mut list_1547 = scope_1544.start_list(true, Some("item"));
        for item_1546 in var_1545 {
            #[allow(unused_mut)]
            let mut entry_1548 = list_1547.entry();
            entry_1548.string(item_1546);
        }
        list_1547.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1549 = writer.prefix("SubnetId");
    if let Some(var_1550) = &input.subnet_ids {
        let mut list_1552 = scope_1549.start_list(true, Some("item"));
        for item_1551 in var_1550 {
            #[allow(unused_mut)]
            let mut entry_1553 = list_1552.entry();
            entry_1553.string(item_1551);
        }
        list_1552.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1554 = writer.prefix("SecurityGroupId");
    if let Some(var_1555) = &input.security_group_ids {
        let mut list_1557 = scope_1554.start_list(true, Some("item"));
        for item_1556 in var_1555 {
            #[allow(unused_mut)]
            let mut entry_1558 = list_1557.entry();
            entry_1558.string(item_1556);
        }
        list_1557.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1559 = writer.prefix("IpAddressType");
    if let Some(var_1560) = &input.ip_address_type {
        scope_1559.string(var_1560.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1561 = writer.prefix("DnsOptions");
    if let Some(var_1562) = &input.dns_options {
        crate::query_ser::serialize_structure_crate_model_dns_options_specification(
            scope_1561, var_1562,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1563 = writer.prefix("ClientToken");
    if let Some(var_1564) = &input.client_token {
        scope_1563.string(var_1564);
    }
    #[allow(unused_mut)]
    let mut scope_1565 = writer.prefix("PrivateDnsEnabled");
    if let Some(var_1566) = &input.private_dns_enabled {
        scope_1565.boolean(*var_1566);
    }
    #[allow(unused_mut)]
    let mut scope_1567 = writer.prefix("TagSpecification");
    if let Some(var_1568) = &input.tag_specifications {
        let mut list_1570 = scope_1567.start_list(true, Some("item"));
        for item_1569 in var_1568 {
            #[allow(unused_mut)]
            let mut entry_1571 = list_1570.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1571, item_1569,
            )?;
        }
        list_1570.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_endpoint_connection_notification(
    input: &crate::input::CreateVpcEndpointConnectionNotificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateVpcEndpointConnectionNotification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1572 = writer.prefix("DryRun");
    if let Some(var_1573) = &input.dry_run {
        scope_1572.boolean(*var_1573);
    }
    #[allow(unused_mut)]
    let mut scope_1574 = writer.prefix("ServiceId");
    if let Some(var_1575) = &input.service_id {
        scope_1574.string(var_1575);
    }
    #[allow(unused_mut)]
    let mut scope_1576 = writer.prefix("VpcEndpointId");
    if let Some(var_1577) = &input.vpc_endpoint_id {
        scope_1576.string(var_1577);
    }
    #[allow(unused_mut)]
    let mut scope_1578 = writer.prefix("ConnectionNotificationArn");
    if let Some(var_1579) = &input.connection_notification_arn {
        scope_1578.string(var_1579);
    }
    #[allow(unused_mut)]
    let mut scope_1580 = writer.prefix("ConnectionEvents");
    if let Some(var_1581) = &input.connection_events {
        let mut list_1583 = scope_1580.start_list(true, Some("item"));
        for item_1582 in var_1581 {
            #[allow(unused_mut)]
            let mut entry_1584 = list_1583.entry();
            entry_1584.string(item_1582);
        }
        list_1583.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1585 = writer.prefix("ClientToken");
    if let Some(var_1586) = &input.client_token {
        scope_1585.string(var_1586);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_endpoint_service_configuration(
    input: &crate::input::CreateVpcEndpointServiceConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateVpcEndpointServiceConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1587 = writer.prefix("DryRun");
    if let Some(var_1588) = &input.dry_run {
        scope_1587.boolean(*var_1588);
    }
    #[allow(unused_mut)]
    let mut scope_1589 = writer.prefix("AcceptanceRequired");
    if let Some(var_1590) = &input.acceptance_required {
        scope_1589.boolean(*var_1590);
    }
    #[allow(unused_mut)]
    let mut scope_1591 = writer.prefix("PrivateDnsName");
    if let Some(var_1592) = &input.private_dns_name {
        scope_1591.string(var_1592);
    }
    #[allow(unused_mut)]
    let mut scope_1593 = writer.prefix("NetworkLoadBalancerArn");
    if let Some(var_1594) = &input.network_load_balancer_arns {
        let mut list_1596 = scope_1593.start_list(true, Some("item"));
        for item_1595 in var_1594 {
            #[allow(unused_mut)]
            let mut entry_1597 = list_1596.entry();
            entry_1597.string(item_1595);
        }
        list_1596.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1598 = writer.prefix("GatewayLoadBalancerArn");
    if let Some(var_1599) = &input.gateway_load_balancer_arns {
        let mut list_1601 = scope_1598.start_list(true, Some("item"));
        for item_1600 in var_1599 {
            #[allow(unused_mut)]
            let mut entry_1602 = list_1601.entry();
            entry_1602.string(item_1600);
        }
        list_1601.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1603 = writer.prefix("SupportedIpAddressType");
    if let Some(var_1604) = &input.supported_ip_address_types {
        let mut list_1606 = scope_1603.start_list(true, Some("item"));
        for item_1605 in var_1604 {
            #[allow(unused_mut)]
            let mut entry_1607 = list_1606.entry();
            entry_1607.string(item_1605);
        }
        list_1606.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1608 = writer.prefix("ClientToken");
    if let Some(var_1609) = &input.client_token {
        scope_1608.string(var_1609);
    }
    #[allow(unused_mut)]
    let mut scope_1610 = writer.prefix("TagSpecification");
    if let Some(var_1611) = &input.tag_specifications {
        let mut list_1613 = scope_1610.start_list(true, Some("item"));
        for item_1612 in var_1611 {
            #[allow(unused_mut)]
            let mut entry_1614 = list_1613.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1614, item_1612,
            )?;
        }
        list_1613.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_peering_connection(
    input: &crate::input::CreateVpcPeeringConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1615 = writer.prefix("DryRun");
    if let Some(var_1616) = &input.dry_run {
        scope_1615.boolean(*var_1616);
    }
    #[allow(unused_mut)]
    let mut scope_1617 = writer.prefix("PeerOwnerId");
    if let Some(var_1618) = &input.peer_owner_id {
        scope_1617.string(var_1618);
    }
    #[allow(unused_mut)]
    let mut scope_1619 = writer.prefix("PeerVpcId");
    if let Some(var_1620) = &input.peer_vpc_id {
        scope_1619.string(var_1620);
    }
    #[allow(unused_mut)]
    let mut scope_1621 = writer.prefix("VpcId");
    if let Some(var_1622) = &input.vpc_id {
        scope_1621.string(var_1622);
    }
    #[allow(unused_mut)]
    let mut scope_1623 = writer.prefix("PeerRegion");
    if let Some(var_1624) = &input.peer_region {
        scope_1623.string(var_1624);
    }
    #[allow(unused_mut)]
    let mut scope_1625 = writer.prefix("TagSpecification");
    if let Some(var_1626) = &input.tag_specifications {
        let mut list_1628 = scope_1625.start_list(true, Some("item"));
        for item_1627 in var_1626 {
            #[allow(unused_mut)]
            let mut entry_1629 = list_1628.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1629, item_1627,
            )?;
        }
        list_1628.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpn_connection(
    input: &crate::input::CreateVpnConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1630 = writer.prefix("CustomerGatewayId");
    if let Some(var_1631) = &input.customer_gateway_id {
        scope_1630.string(var_1631);
    }
    #[allow(unused_mut)]
    let mut scope_1632 = writer.prefix("Type");
    if let Some(var_1633) = &input.r#type {
        scope_1632.string(var_1633);
    }
    #[allow(unused_mut)]
    let mut scope_1634 = writer.prefix("VpnGatewayId");
    if let Some(var_1635) = &input.vpn_gateway_id {
        scope_1634.string(var_1635);
    }
    #[allow(unused_mut)]
    let mut scope_1636 = writer.prefix("TransitGatewayId");
    if let Some(var_1637) = &input.transit_gateway_id {
        scope_1636.string(var_1637);
    }
    #[allow(unused_mut)]
    let mut scope_1638 = writer.prefix("DryRun");
    if let Some(var_1639) = &input.dry_run {
        scope_1638.boolean(*var_1639);
    }
    #[allow(unused_mut)]
    let mut scope_1640 = writer.prefix("Options");
    if let Some(var_1641) = &input.options {
        crate::query_ser::serialize_structure_crate_model_vpn_connection_options_specification(
            scope_1640, var_1641,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1642 = writer.prefix("TagSpecification");
    if let Some(var_1643) = &input.tag_specifications {
        let mut list_1645 = scope_1642.start_list(true, Some("item"));
        for item_1644 in var_1643 {
            #[allow(unused_mut)]
            let mut entry_1646 = list_1645.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1646, item_1644,
            )?;
        }
        list_1645.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpn_connection_route(
    input: &crate::input::CreateVpnConnectionRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateVpnConnectionRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1647 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1648) = &input.destination_cidr_block {
        scope_1647.string(var_1648);
    }
    #[allow(unused_mut)]
    let mut scope_1649 = writer.prefix("VpnConnectionId");
    if let Some(var_1650) = &input.vpn_connection_id {
        scope_1649.string(var_1650);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpn_gateway(
    input: &crate::input::CreateVpnGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1651 = writer.prefix("AvailabilityZone");
    if let Some(var_1652) = &input.availability_zone {
        scope_1651.string(var_1652);
    }
    #[allow(unused_mut)]
    let mut scope_1653 = writer.prefix("Type");
    if let Some(var_1654) = &input.r#type {
        scope_1653.string(var_1654.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1655 = writer.prefix("TagSpecification");
    if let Some(var_1656) = &input.tag_specifications {
        let mut list_1658 = scope_1655.start_list(true, Some("item"));
        for item_1657 in var_1656 {
            #[allow(unused_mut)]
            let mut entry_1659 = list_1658.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1659, item_1657,
            )?;
        }
        list_1658.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1660 = writer.prefix("AmazonSideAsn");
    if let Some(var_1661) = &input.amazon_side_asn {
        scope_1660.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1661).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1662 = writer.prefix("DryRun");
    if let Some(var_1663) = &input.dry_run {
        scope_1662.boolean(*var_1663);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_carrier_gateway(
    input: &crate::input::DeleteCarrierGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteCarrierGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1664 = writer.prefix("CarrierGatewayId");
    if let Some(var_1665) = &input.carrier_gateway_id {
        scope_1664.string(var_1665);
    }
    #[allow(unused_mut)]
    let mut scope_1666 = writer.prefix("DryRun");
    if let Some(var_1667) = &input.dry_run {
        scope_1666.boolean(*var_1667);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_client_vpn_endpoint(
    input: &crate::input::DeleteClientVpnEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1668 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1669) = &input.client_vpn_endpoint_id {
        scope_1668.string(var_1669);
    }
    #[allow(unused_mut)]
    let mut scope_1670 = writer.prefix("DryRun");
    if let Some(var_1671) = &input.dry_run {
        scope_1670.boolean(*var_1671);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_client_vpn_route(
    input: &crate::input::DeleteClientVpnRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteClientVpnRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1672 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1673) = &input.client_vpn_endpoint_id {
        scope_1672.string(var_1673);
    }
    #[allow(unused_mut)]
    let mut scope_1674 = writer.prefix("TargetVpcSubnetId");
    if let Some(var_1675) = &input.target_vpc_subnet_id {
        scope_1674.string(var_1675);
    }
    #[allow(unused_mut)]
    let mut scope_1676 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1677) = &input.destination_cidr_block {
        scope_1676.string(var_1677);
    }
    #[allow(unused_mut)]
    let mut scope_1678 = writer.prefix("DryRun");
    if let Some(var_1679) = &input.dry_run {
        scope_1678.boolean(*var_1679);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_customer_gateway(
    input: &crate::input::DeleteCustomerGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteCustomerGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1680 = writer.prefix("CustomerGatewayId");
    if let Some(var_1681) = &input.customer_gateway_id {
        scope_1680.string(var_1681);
    }
    #[allow(unused_mut)]
    let mut scope_1682 = writer.prefix("DryRun");
    if let Some(var_1683) = &input.dry_run {
        scope_1682.boolean(*var_1683);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_dhcp_options(
    input: &crate::input::DeleteDhcpOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1684 = writer.prefix("DhcpOptionsId");
    if let Some(var_1685) = &input.dhcp_options_id {
        scope_1684.string(var_1685);
    }
    #[allow(unused_mut)]
    let mut scope_1686 = writer.prefix("DryRun");
    if let Some(var_1687) = &input.dry_run {
        scope_1686.boolean(*var_1687);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_egress_only_internet_gateway(
    input: &crate::input::DeleteEgressOnlyInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteEgressOnlyInternetGateway",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1688 = writer.prefix("DryRun");
    if let Some(var_1689) = &input.dry_run {
        scope_1688.boolean(*var_1689);
    }
    #[allow(unused_mut)]
    let mut scope_1690 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_1691) = &input.egress_only_internet_gateway_id {
        scope_1690.string(var_1691);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_fleets(
    input: &crate::input::DeleteFleetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteFleets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1692 = writer.prefix("DryRun");
    if let Some(var_1693) = &input.dry_run {
        scope_1692.boolean(*var_1693);
    }
    #[allow(unused_mut)]
    let mut scope_1694 = writer.prefix("FleetId");
    if let Some(var_1695) = &input.fleet_ids {
        let mut list_1697 = scope_1694.start_list(true, None);
        for item_1696 in var_1695 {
            #[allow(unused_mut)]
            let mut entry_1698 = list_1697.entry();
            entry_1698.string(item_1696);
        }
        list_1697.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1699 = writer.prefix("TerminateInstances");
    if let Some(var_1700) = &input.terminate_instances {
        scope_1699.boolean(*var_1700);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_flow_logs(
    input: &crate::input::DeleteFlowLogsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1701 = writer.prefix("DryRun");
    if let Some(var_1702) = &input.dry_run {
        scope_1701.boolean(*var_1702);
    }
    #[allow(unused_mut)]
    let mut scope_1703 = writer.prefix("FlowLogId");
    if let Some(var_1704) = &input.flow_log_ids {
        let mut list_1706 = scope_1703.start_list(true, Some("item"));
        for item_1705 in var_1704 {
            #[allow(unused_mut)]
            let mut entry_1707 = list_1706.entry();
            entry_1707.string(item_1705);
        }
        list_1706.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_fpga_image(
    input: &crate::input::DeleteFpgaImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1708 = writer.prefix("DryRun");
    if let Some(var_1709) = &input.dry_run {
        scope_1708.boolean(*var_1709);
    }
    #[allow(unused_mut)]
    let mut scope_1710 = writer.prefix("FpgaImageId");
    if let Some(var_1711) = &input.fpga_image_id {
        scope_1710.string(var_1711);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_instance_event_window(
    input: &crate::input::DeleteInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1712 = writer.prefix("DryRun");
    if let Some(var_1713) = &input.dry_run {
        scope_1712.boolean(*var_1713);
    }
    #[allow(unused_mut)]
    let mut scope_1714 = writer.prefix("ForceDelete");
    if let Some(var_1715) = &input.force_delete {
        scope_1714.boolean(*var_1715);
    }
    #[allow(unused_mut)]
    let mut scope_1716 = writer.prefix("InstanceEventWindowId");
    if let Some(var_1717) = &input.instance_event_window_id {
        scope_1716.string(var_1717);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_internet_gateway(
    input: &crate::input::DeleteInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1718 = writer.prefix("DryRun");
    if let Some(var_1719) = &input.dry_run {
        scope_1718.boolean(*var_1719);
    }
    #[allow(unused_mut)]
    let mut scope_1720 = writer.prefix("InternetGatewayId");
    if let Some(var_1721) = &input.internet_gateway_id {
        scope_1720.string(var_1721);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_ipam(
    input: &crate::input::DeleteIpamInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteIpam", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1722 = writer.prefix("DryRun");
    if let Some(var_1723) = &input.dry_run {
        scope_1722.boolean(*var_1723);
    }
    #[allow(unused_mut)]
    let mut scope_1724 = writer.prefix("IpamId");
    if let Some(var_1725) = &input.ipam_id {
        scope_1724.string(var_1725);
    }
    #[allow(unused_mut)]
    let mut scope_1726 = writer.prefix("Cascade");
    if let Some(var_1727) = &input.cascade {
        scope_1726.boolean(*var_1727);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_ipam_pool(
    input: &crate::input::DeleteIpamPoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteIpamPool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1728 = writer.prefix("DryRun");
    if let Some(var_1729) = &input.dry_run {
        scope_1728.boolean(*var_1729);
    }
    #[allow(unused_mut)]
    let mut scope_1730 = writer.prefix("IpamPoolId");
    if let Some(var_1731) = &input.ipam_pool_id {
        scope_1730.string(var_1731);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_ipam_scope(
    input: &crate::input::DeleteIpamScopeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteIpamScope", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1732 = writer.prefix("DryRun");
    if let Some(var_1733) = &input.dry_run {
        scope_1732.boolean(*var_1733);
    }
    #[allow(unused_mut)]
    let mut scope_1734 = writer.prefix("IpamScopeId");
    if let Some(var_1735) = &input.ipam_scope_id {
        scope_1734.string(var_1735);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_key_pair(
    input: &crate::input::DeleteKeyPairInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1736 = writer.prefix("KeyName");
    if let Some(var_1737) = &input.key_name {
        scope_1736.string(var_1737);
    }
    #[allow(unused_mut)]
    let mut scope_1738 = writer.prefix("KeyPairId");
    if let Some(var_1739) = &input.key_pair_id {
        scope_1738.string(var_1739);
    }
    #[allow(unused_mut)]
    let mut scope_1740 = writer.prefix("DryRun");
    if let Some(var_1741) = &input.dry_run {
        scope_1740.boolean(*var_1741);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_launch_template(
    input: &crate::input::DeleteLaunchTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1742 = writer.prefix("DryRun");
    if let Some(var_1743) = &input.dry_run {
        scope_1742.boolean(*var_1743);
    }
    #[allow(unused_mut)]
    let mut scope_1744 = writer.prefix("LaunchTemplateId");
    if let Some(var_1745) = &input.launch_template_id {
        scope_1744.string(var_1745);
    }
    #[allow(unused_mut)]
    let mut scope_1746 = writer.prefix("LaunchTemplateName");
    if let Some(var_1747) = &input.launch_template_name {
        scope_1746.string(var_1747);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_launch_template_versions(
    input: &crate::input::DeleteLaunchTemplateVersionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteLaunchTemplateVersions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1748 = writer.prefix("DryRun");
    if let Some(var_1749) = &input.dry_run {
        scope_1748.boolean(*var_1749);
    }
    #[allow(unused_mut)]
    let mut scope_1750 = writer.prefix("LaunchTemplateId");
    if let Some(var_1751) = &input.launch_template_id {
        scope_1750.string(var_1751);
    }
    #[allow(unused_mut)]
    let mut scope_1752 = writer.prefix("LaunchTemplateName");
    if let Some(var_1753) = &input.launch_template_name {
        scope_1752.string(var_1753);
    }
    #[allow(unused_mut)]
    let mut scope_1754 = writer.prefix("LaunchTemplateVersion");
    if let Some(var_1755) = &input.versions {
        let mut list_1757 = scope_1754.start_list(true, Some("item"));
        for item_1756 in var_1755 {
            #[allow(unused_mut)]
            let mut entry_1758 = list_1757.entry();
            entry_1758.string(item_1756);
        }
        list_1757.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_local_gateway_route(
    input: &crate::input::DeleteLocalGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteLocalGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1759 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1760) = &input.destination_cidr_block {
        scope_1759.string(var_1760);
    }
    #[allow(unused_mut)]
    let mut scope_1761 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_1762) = &input.local_gateway_route_table_id {
        scope_1761.string(var_1762);
    }
    #[allow(unused_mut)]
    let mut scope_1763 = writer.prefix("DryRun");
    if let Some(var_1764) = &input.dry_run {
        scope_1763.boolean(*var_1764);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_local_gateway_route_table_vpc_association(
    input: &crate::input::DeleteLocalGatewayRouteTableVpcAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteLocalGatewayRouteTableVpcAssociation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1765 = writer.prefix("LocalGatewayRouteTableVpcAssociationId");
    if let Some(var_1766) = &input.local_gateway_route_table_vpc_association_id {
        scope_1765.string(var_1766);
    }
    #[allow(unused_mut)]
    let mut scope_1767 = writer.prefix("DryRun");
    if let Some(var_1768) = &input.dry_run {
        scope_1767.boolean(*var_1768);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_managed_prefix_list(
    input: &crate::input::DeleteManagedPrefixListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1769 = writer.prefix("DryRun");
    if let Some(var_1770) = &input.dry_run {
        scope_1769.boolean(*var_1770);
    }
    #[allow(unused_mut)]
    let mut scope_1771 = writer.prefix("PrefixListId");
    if let Some(var_1772) = &input.prefix_list_id {
        scope_1771.string(var_1772);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_nat_gateway(
    input: &crate::input::DeleteNatGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteNatGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1773 = writer.prefix("DryRun");
    if let Some(var_1774) = &input.dry_run {
        scope_1773.boolean(*var_1774);
    }
    #[allow(unused_mut)]
    let mut scope_1775 = writer.prefix("NatGatewayId");
    if let Some(var_1776) = &input.nat_gateway_id {
        scope_1775.string(var_1776);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_acl(
    input: &crate::input::DeleteNetworkAclInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkAcl", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1777 = writer.prefix("DryRun");
    if let Some(var_1778) = &input.dry_run {
        scope_1777.boolean(*var_1778);
    }
    #[allow(unused_mut)]
    let mut scope_1779 = writer.prefix("NetworkAclId");
    if let Some(var_1780) = &input.network_acl_id {
        scope_1779.string(var_1780);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_acl_entry(
    input: &crate::input::DeleteNetworkAclEntryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1781 = writer.prefix("DryRun");
    if let Some(var_1782) = &input.dry_run {
        scope_1781.boolean(*var_1782);
    }
    #[allow(unused_mut)]
    let mut scope_1783 = writer.prefix("Egress");
    if let Some(var_1784) = &input.egress {
        scope_1783.boolean(*var_1784);
    }
    #[allow(unused_mut)]
    let mut scope_1785 = writer.prefix("NetworkAclId");
    if let Some(var_1786) = &input.network_acl_id {
        scope_1785.string(var_1786);
    }
    #[allow(unused_mut)]
    let mut scope_1787 = writer.prefix("RuleNumber");
    if let Some(var_1788) = &input.rule_number {
        scope_1787.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1788).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_access_scope(
    input: &crate::input::DeleteNetworkInsightsAccessScopeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteNetworkInsightsAccessScope",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1789 = writer.prefix("DryRun");
    if let Some(var_1790) = &input.dry_run {
        scope_1789.boolean(*var_1790);
    }
    #[allow(unused_mut)]
    let mut scope_1791 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_1792) = &input.network_insights_access_scope_id {
        scope_1791.string(var_1792);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_access_scope_analysis(
    input: &crate::input::DeleteNetworkInsightsAccessScopeAnalysisInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteNetworkInsightsAccessScopeAnalysis",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1793 = writer.prefix("NetworkInsightsAccessScopeAnalysisId");
    if let Some(var_1794) = &input.network_insights_access_scope_analysis_id {
        scope_1793.string(var_1794);
    }
    #[allow(unused_mut)]
    let mut scope_1795 = writer.prefix("DryRun");
    if let Some(var_1796) = &input.dry_run {
        scope_1795.boolean(*var_1796);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_analysis(
    input: &crate::input::DeleteNetworkInsightsAnalysisInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInsightsAnalysis", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1797 = writer.prefix("DryRun");
    if let Some(var_1798) = &input.dry_run {
        scope_1797.boolean(*var_1798);
    }
    #[allow(unused_mut)]
    let mut scope_1799 = writer.prefix("NetworkInsightsAnalysisId");
    if let Some(var_1800) = &input.network_insights_analysis_id {
        scope_1799.string(var_1800);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_path(
    input: &crate::input::DeleteNetworkInsightsPathInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInsightsPath", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1801 = writer.prefix("DryRun");
    if let Some(var_1802) = &input.dry_run {
        scope_1801.boolean(*var_1802);
    }
    #[allow(unused_mut)]
    let mut scope_1803 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_1804) = &input.network_insights_path_id {
        scope_1803.string(var_1804);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_interface(
    input: &crate::input::DeleteNetworkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1805 = writer.prefix("DryRun");
    if let Some(var_1806) = &input.dry_run {
        scope_1805.boolean(*var_1806);
    }
    #[allow(unused_mut)]
    let mut scope_1807 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1808) = &input.network_interface_id {
        scope_1807.string(var_1808);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_interface_permission(
    input: &crate::input::DeleteNetworkInterfacePermissionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteNetworkInterfacePermission",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1809 = writer.prefix("NetworkInterfacePermissionId");
    if let Some(var_1810) = &input.network_interface_permission_id {
        scope_1809.string(var_1810);
    }
    #[allow(unused_mut)]
    let mut scope_1811 = writer.prefix("Force");
    if let Some(var_1812) = &input.force {
        scope_1811.boolean(*var_1812);
    }
    #[allow(unused_mut)]
    let mut scope_1813 = writer.prefix("DryRun");
    if let Some(var_1814) = &input.dry_run {
        scope_1813.boolean(*var_1814);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_placement_group(
    input: &crate::input::DeletePlacementGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeletePlacementGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1815 = writer.prefix("DryRun");
    if let Some(var_1816) = &input.dry_run {
        scope_1815.boolean(*var_1816);
    }
    #[allow(unused_mut)]
    let mut scope_1817 = writer.prefix("GroupName");
    if let Some(var_1818) = &input.group_name {
        scope_1817.string(var_1818);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_public_ipv4_pool(
    input: &crate::input::DeletePublicIpv4PoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeletePublicIpv4Pool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1819 = writer.prefix("DryRun");
    if let Some(var_1820) = &input.dry_run {
        scope_1819.boolean(*var_1820);
    }
    #[allow(unused_mut)]
    let mut scope_1821 = writer.prefix("PoolId");
    if let Some(var_1822) = &input.pool_id {
        scope_1821.string(var_1822);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_queued_reserved_instances(
    input: &crate::input::DeleteQueuedReservedInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteQueuedReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1823 = writer.prefix("DryRun");
    if let Some(var_1824) = &input.dry_run {
        scope_1823.boolean(*var_1824);
    }
    #[allow(unused_mut)]
    let mut scope_1825 = writer.prefix("ReservedInstancesId");
    if let Some(var_1826) = &input.reserved_instances_ids {
        let mut list_1828 = scope_1825.start_list(true, Some("item"));
        for item_1827 in var_1826 {
            #[allow(unused_mut)]
            let mut entry_1829 = list_1828.entry();
            entry_1829.string(item_1827);
        }
        list_1828.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_route(
    input: &crate::input::DeleteRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1830 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1831) = &input.destination_cidr_block {
        scope_1830.string(var_1831);
    }
    #[allow(unused_mut)]
    let mut scope_1832 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_1833) = &input.destination_ipv6_cidr_block {
        scope_1832.string(var_1833);
    }
    #[allow(unused_mut)]
    let mut scope_1834 = writer.prefix("DestinationPrefixListId");
    if let Some(var_1835) = &input.destination_prefix_list_id {
        scope_1834.string(var_1835);
    }
    #[allow(unused_mut)]
    let mut scope_1836 = writer.prefix("DryRun");
    if let Some(var_1837) = &input.dry_run {
        scope_1836.boolean(*var_1837);
    }
    #[allow(unused_mut)]
    let mut scope_1838 = writer.prefix("RouteTableId");
    if let Some(var_1839) = &input.route_table_id {
        scope_1838.string(var_1839);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_route_table(
    input: &crate::input::DeleteRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1840 = writer.prefix("DryRun");
    if let Some(var_1841) = &input.dry_run {
        scope_1840.boolean(*var_1841);
    }
    #[allow(unused_mut)]
    let mut scope_1842 = writer.prefix("RouteTableId");
    if let Some(var_1843) = &input.route_table_id {
        scope_1842.string(var_1843);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_security_group(
    input: &crate::input::DeleteSecurityGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteSecurityGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1844 = writer.prefix("GroupId");
    if let Some(var_1845) = &input.group_id {
        scope_1844.string(var_1845);
    }
    #[allow(unused_mut)]
    let mut scope_1846 = writer.prefix("GroupName");
    if let Some(var_1847) = &input.group_name {
        scope_1846.string(var_1847);
    }
    #[allow(unused_mut)]
    let mut scope_1848 = writer.prefix("DryRun");
    if let Some(var_1849) = &input.dry_run {
        scope_1848.boolean(*var_1849);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_snapshot(
    input: &crate::input::DeleteSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1850 = writer.prefix("SnapshotId");
    if let Some(var_1851) = &input.snapshot_id {
        scope_1850.string(var_1851);
    }
    #[allow(unused_mut)]
    let mut scope_1852 = writer.prefix("DryRun");
    if let Some(var_1853) = &input.dry_run {
        scope_1852.boolean(*var_1853);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_spot_datafeed_subscription(
    input: &crate::input::DeleteSpotDatafeedSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteSpotDatafeedSubscription",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1854 = writer.prefix("DryRun");
    if let Some(var_1855) = &input.dry_run {
        scope_1854.boolean(*var_1855);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_subnet(
    input: &crate::input::DeleteSubnetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1856 = writer.prefix("SubnetId");
    if let Some(var_1857) = &input.subnet_id {
        scope_1856.string(var_1857);
    }
    #[allow(unused_mut)]
    let mut scope_1858 = writer.prefix("DryRun");
    if let Some(var_1859) = &input.dry_run {
        scope_1858.boolean(*var_1859);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_subnet_cidr_reservation(
    input: &crate::input::DeleteSubnetCidrReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteSubnetCidrReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1860 = writer.prefix("SubnetCidrReservationId");
    if let Some(var_1861) = &input.subnet_cidr_reservation_id {
        scope_1860.string(var_1861);
    }
    #[allow(unused_mut)]
    let mut scope_1862 = writer.prefix("DryRun");
    if let Some(var_1863) = &input.dry_run {
        scope_1862.boolean(*var_1863);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_tags(
    input: &crate::input::DeleteTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1864 = writer.prefix("DryRun");
    if let Some(var_1865) = &input.dry_run {
        scope_1864.boolean(*var_1865);
    }
    #[allow(unused_mut)]
    let mut scope_1866 = writer.prefix("ResourceId");
    if let Some(var_1867) = &input.resources {
        let mut list_1869 = scope_1866.start_list(true, None);
        for item_1868 in var_1867 {
            #[allow(unused_mut)]
            let mut entry_1870 = list_1869.entry();
            entry_1870.string(item_1868);
        }
        list_1869.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1871 = writer.prefix("Tag");
    if let Some(var_1872) = &input.tags {
        let mut list_1874 = scope_1871.start_list(true, Some("item"));
        for item_1873 in var_1872 {
            #[allow(unused_mut)]
            let mut entry_1875 = list_1874.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1875, item_1873)?;
        }
        list_1874.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_filter(
    input: &crate::input::DeleteTrafficMirrorFilterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorFilter", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1876 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1877) = &input.traffic_mirror_filter_id {
        scope_1876.string(var_1877);
    }
    #[allow(unused_mut)]
    let mut scope_1878 = writer.prefix("DryRun");
    if let Some(var_1879) = &input.dry_run {
        scope_1878.boolean(*var_1879);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_filter_rule(
    input: &crate::input::DeleteTrafficMirrorFilterRuleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1880 = writer.prefix("TrafficMirrorFilterRuleId");
    if let Some(var_1881) = &input.traffic_mirror_filter_rule_id {
        scope_1880.string(var_1881);
    }
    #[allow(unused_mut)]
    let mut scope_1882 = writer.prefix("DryRun");
    if let Some(var_1883) = &input.dry_run {
        scope_1882.boolean(*var_1883);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_session(
    input: &crate::input::DeleteTrafficMirrorSessionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1884 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_1885) = &input.traffic_mirror_session_id {
        scope_1884.string(var_1885);
    }
    #[allow(unused_mut)]
    let mut scope_1886 = writer.prefix("DryRun");
    if let Some(var_1887) = &input.dry_run {
        scope_1886.boolean(*var_1887);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_target(
    input: &crate::input::DeleteTrafficMirrorTargetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorTarget", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1888 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_1889) = &input.traffic_mirror_target_id {
        scope_1888.string(var_1889);
    }
    #[allow(unused_mut)]
    let mut scope_1890 = writer.prefix("DryRun");
    if let Some(var_1891) = &input.dry_run {
        scope_1890.boolean(*var_1891);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway(
    input: &crate::input::DeleteTransitGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1892 = writer.prefix("TransitGatewayId");
    if let Some(var_1893) = &input.transit_gateway_id {
        scope_1892.string(var_1893);
    }
    #[allow(unused_mut)]
    let mut scope_1894 = writer.prefix("DryRun");
    if let Some(var_1895) = &input.dry_run {
        scope_1894.boolean(*var_1895);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_connect(
    input: &crate::input::DeleteTransitGatewayConnectInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayConnect", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1896 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1897) = &input.transit_gateway_attachment_id {
        scope_1896.string(var_1897);
    }
    #[allow(unused_mut)]
    let mut scope_1898 = writer.prefix("DryRun");
    if let Some(var_1899) = &input.dry_run {
        scope_1898.boolean(*var_1899);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_connect_peer(
    input: &crate::input::DeleteTransitGatewayConnectPeerInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayConnectPeer",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1900 = writer.prefix("TransitGatewayConnectPeerId");
    if let Some(var_1901) = &input.transit_gateway_connect_peer_id {
        scope_1900.string(var_1901);
    }
    #[allow(unused_mut)]
    let mut scope_1902 = writer.prefix("DryRun");
    if let Some(var_1903) = &input.dry_run {
        scope_1902.boolean(*var_1903);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_multicast_domain(
    input: &crate::input::DeleteTransitGatewayMulticastDomainInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1904 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_1905) = &input.transit_gateway_multicast_domain_id {
        scope_1904.string(var_1905);
    }
    #[allow(unused_mut)]
    let mut scope_1906 = writer.prefix("DryRun");
    if let Some(var_1907) = &input.dry_run {
        scope_1906.boolean(*var_1907);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_peering_attachment(
    input: &crate::input::DeleteTransitGatewayPeeringAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1908 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1909) = &input.transit_gateway_attachment_id {
        scope_1908.string(var_1909);
    }
    #[allow(unused_mut)]
    let mut scope_1910 = writer.prefix("DryRun");
    if let Some(var_1911) = &input.dry_run {
        scope_1910.boolean(*var_1911);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_prefix_list_reference(
    input: &crate::input::DeleteTransitGatewayPrefixListReferenceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayPrefixListReference",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1912 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1913) = &input.transit_gateway_route_table_id {
        scope_1912.string(var_1913);
    }
    #[allow(unused_mut)]
    let mut scope_1914 = writer.prefix("PrefixListId");
    if let Some(var_1915) = &input.prefix_list_id {
        scope_1914.string(var_1915);
    }
    #[allow(unused_mut)]
    let mut scope_1916 = writer.prefix("DryRun");
    if let Some(var_1917) = &input.dry_run {
        scope_1916.boolean(*var_1917);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_route(
    input: &crate::input::DeleteTransitGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1918 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1919) = &input.transit_gateway_route_table_id {
        scope_1918.string(var_1919);
    }
    #[allow(unused_mut)]
    let mut scope_1920 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1921) = &input.destination_cidr_block {
        scope_1920.string(var_1921);
    }
    #[allow(unused_mut)]
    let mut scope_1922 = writer.prefix("DryRun");
    if let Some(var_1923) = &input.dry_run {
        scope_1922.boolean(*var_1923);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_route_table(
    input: &crate::input::DeleteTransitGatewayRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1924 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1925) = &input.transit_gateway_route_table_id {
        scope_1924.string(var_1925);
    }
    #[allow(unused_mut)]
    let mut scope_1926 = writer.prefix("DryRun");
    if let Some(var_1927) = &input.dry_run {
        scope_1926.boolean(*var_1927);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_vpc_attachment(
    input: &crate::input::DeleteTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1928 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1929) = &input.transit_gateway_attachment_id {
        scope_1928.string(var_1929);
    }
    #[allow(unused_mut)]
    let mut scope_1930 = writer.prefix("DryRun");
    if let Some(var_1931) = &input.dry_run {
        scope_1930.boolean(*var_1931);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_volume(
    input: &crate::input::DeleteVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1932 = writer.prefix("VolumeId");
    if let Some(var_1933) = &input.volume_id {
        scope_1932.string(var_1933);
    }
    #[allow(unused_mut)]
    let mut scope_1934 = writer.prefix("DryRun");
    if let Some(var_1935) = &input.dry_run {
        scope_1934.boolean(*var_1935);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc(
    input: &crate::input::DeleteVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1936 = writer.prefix("VpcId");
    if let Some(var_1937) = &input.vpc_id {
        scope_1936.string(var_1937);
    }
    #[allow(unused_mut)]
    let mut scope_1938 = writer.prefix("DryRun");
    if let Some(var_1939) = &input.dry_run {
        scope_1938.boolean(*var_1939);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_endpoint_connection_notifications(
    input: &crate::input::DeleteVpcEndpointConnectionNotificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteVpcEndpointConnectionNotifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1940 = writer.prefix("DryRun");
    if let Some(var_1941) = &input.dry_run {
        scope_1940.boolean(*var_1941);
    }
    #[allow(unused_mut)]
    let mut scope_1942 = writer.prefix("ConnectionNotificationId");
    if let Some(var_1943) = &input.connection_notification_ids {
        let mut list_1945 = scope_1942.start_list(true, Some("item"));
        for item_1944 in var_1943 {
            #[allow(unused_mut)]
            let mut entry_1946 = list_1945.entry();
            entry_1946.string(item_1944);
        }
        list_1945.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_endpoints(
    input: &crate::input::DeleteVpcEndpointsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpcEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1947 = writer.prefix("DryRun");
    if let Some(var_1948) = &input.dry_run {
        scope_1947.boolean(*var_1948);
    }
    #[allow(unused_mut)]
    let mut scope_1949 = writer.prefix("VpcEndpointId");
    if let Some(var_1950) = &input.vpc_endpoint_ids {
        let mut list_1952 = scope_1949.start_list(true, Some("item"));
        for item_1951 in var_1950 {
            #[allow(unused_mut)]
            let mut entry_1953 = list_1952.entry();
            entry_1953.string(item_1951);
        }
        list_1952.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_endpoint_service_configurations(
    input: &crate::input::DeleteVpcEndpointServiceConfigurationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteVpcEndpointServiceConfigurations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1954 = writer.prefix("DryRun");
    if let Some(var_1955) = &input.dry_run {
        scope_1954.boolean(*var_1955);
    }
    #[allow(unused_mut)]
    let mut scope_1956 = writer.prefix("ServiceId");
    if let Some(var_1957) = &input.service_ids {
        let mut list_1959 = scope_1956.start_list(true, Some("item"));
        for item_1958 in var_1957 {
            #[allow(unused_mut)]
            let mut entry_1960 = list_1959.entry();
            entry_1960.string(item_1958);
        }
        list_1959.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_peering_connection(
    input: &crate::input::DeleteVpcPeeringConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1961 = writer.prefix("DryRun");
    if let Some(var_1962) = &input.dry_run {
        scope_1961.boolean(*var_1962);
    }
    #[allow(unused_mut)]
    let mut scope_1963 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_1964) = &input.vpc_peering_connection_id {
        scope_1963.string(var_1964);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpn_connection(
    input: &crate::input::DeleteVpnConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1965 = writer.prefix("VpnConnectionId");
    if let Some(var_1966) = &input.vpn_connection_id {
        scope_1965.string(var_1966);
    }
    #[allow(unused_mut)]
    let mut scope_1967 = writer.prefix("DryRun");
    if let Some(var_1968) = &input.dry_run {
        scope_1967.boolean(*var_1968);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpn_connection_route(
    input: &crate::input::DeleteVpnConnectionRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpnConnectionRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1969 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1970) = &input.destination_cidr_block {
        scope_1969.string(var_1970);
    }
    #[allow(unused_mut)]
    let mut scope_1971 = writer.prefix("VpnConnectionId");
    if let Some(var_1972) = &input.vpn_connection_id {
        scope_1971.string(var_1972);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpn_gateway(
    input: &crate::input::DeleteVpnGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1973 = writer.prefix("VpnGatewayId");
    if let Some(var_1974) = &input.vpn_gateway_id {
        scope_1973.string(var_1974);
    }
    #[allow(unused_mut)]
    let mut scope_1975 = writer.prefix("DryRun");
    if let Some(var_1976) = &input.dry_run {
        scope_1975.boolean(*var_1976);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deprovision_byoip_cidr(
    input: &crate::input::DeprovisionByoipCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeprovisionByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1977 = writer.prefix("Cidr");
    if let Some(var_1978) = &input.cidr {
        scope_1977.string(var_1978);
    }
    #[allow(unused_mut)]
    let mut scope_1979 = writer.prefix("DryRun");
    if let Some(var_1980) = &input.dry_run {
        scope_1979.boolean(*var_1980);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deprovision_ipam_pool_cidr(
    input: &crate::input::DeprovisionIpamPoolCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeprovisionIpamPoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1981 = writer.prefix("DryRun");
    if let Some(var_1982) = &input.dry_run {
        scope_1981.boolean(*var_1982);
    }
    #[allow(unused_mut)]
    let mut scope_1983 = writer.prefix("IpamPoolId");
    if let Some(var_1984) = &input.ipam_pool_id {
        scope_1983.string(var_1984);
    }
    #[allow(unused_mut)]
    let mut scope_1985 = writer.prefix("Cidr");
    if let Some(var_1986) = &input.cidr {
        scope_1985.string(var_1986);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deprovision_public_ipv4_pool_cidr(
    input: &crate::input::DeprovisionPublicIpv4PoolCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeprovisionPublicIpv4PoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1987 = writer.prefix("DryRun");
    if let Some(var_1988) = &input.dry_run {
        scope_1987.boolean(*var_1988);
    }
    #[allow(unused_mut)]
    let mut scope_1989 = writer.prefix("PoolId");
    if let Some(var_1990) = &input.pool_id {
        scope_1989.string(var_1990);
    }
    #[allow(unused_mut)]
    let mut scope_1991 = writer.prefix("Cidr");
    if let Some(var_1992) = &input.cidr {
        scope_1991.string(var_1992);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_image(
    input: &crate::input::DeregisterImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeregisterImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1993 = writer.prefix("ImageId");
    if let Some(var_1994) = &input.image_id {
        scope_1993.string(var_1994);
    }
    #[allow(unused_mut)]
    let mut scope_1995 = writer.prefix("DryRun");
    if let Some(var_1996) = &input.dry_run {
        scope_1995.boolean(*var_1996);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_instance_event_notification_attributes(
    input: &crate::input::DeregisterInstanceEventNotificationAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeregisterInstanceEventNotificationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1997 = writer.prefix("DryRun");
    if let Some(var_1998) = &input.dry_run {
        scope_1997.boolean(*var_1998);
    }
    #[allow(unused_mut)]
    let mut scope_1999 = writer.prefix("InstanceTagAttribute");
    if let Some(var_2000) = &input.instance_tag_attribute {
        crate::query_ser::serialize_structure_crate_model_deregister_instance_tag_attribute_request(scope_1999, var_2000)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_transit_gateway_multicast_group_members(
    input: &crate::input::DeregisterTransitGatewayMulticastGroupMembersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeregisterTransitGatewayMulticastGroupMembers",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2001 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_2002) = &input.transit_gateway_multicast_domain_id {
        scope_2001.string(var_2002);
    }
    #[allow(unused_mut)]
    let mut scope_2003 = writer.prefix("GroupIpAddress");
    if let Some(var_2004) = &input.group_ip_address {
        scope_2003.string(var_2004);
    }
    #[allow(unused_mut)]
    let mut scope_2005 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_2006) = &input.network_interface_ids {
        let mut list_2008 = scope_2005.start_list(true, Some("item"));
        for item_2007 in var_2006 {
            #[allow(unused_mut)]
            let mut entry_2009 = list_2008.entry();
            entry_2009.string(item_2007);
        }
        list_2008.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2010 = writer.prefix("DryRun");
    if let Some(var_2011) = &input.dry_run {
        scope_2010.boolean(*var_2011);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_transit_gateway_multicast_group_sources(
    input: &crate::input::DeregisterTransitGatewayMulticastGroupSourcesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeregisterTransitGatewayMulticastGroupSources",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2012 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_2013) = &input.transit_gateway_multicast_domain_id {
        scope_2012.string(var_2013);
    }
    #[allow(unused_mut)]
    let mut scope_2014 = writer.prefix("GroupIpAddress");
    if let Some(var_2015) = &input.group_ip_address {
        scope_2014.string(var_2015);
    }
    #[allow(unused_mut)]
    let mut scope_2016 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_2017) = &input.network_interface_ids {
        let mut list_2019 = scope_2016.start_list(true, Some("item"));
        for item_2018 in var_2017 {
            #[allow(unused_mut)]
            let mut entry_2020 = list_2019.entry();
            entry_2020.string(item_2018);
        }
        list_2019.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2021 = writer.prefix("DryRun");
    if let Some(var_2022) = &input.dry_run {
        scope_2021.boolean(*var_2022);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_account_attributes(
    input: &crate::input::DescribeAccountAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAccountAttributes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2023 = writer.prefix("AttributeName");
    if let Some(var_2024) = &input.attribute_names {
        let mut list_2026 = scope_2023.start_list(true, Some("attributeName"));
        for item_2025 in var_2024 {
            #[allow(unused_mut)]
            let mut entry_2027 = list_2026.entry();
            entry_2027.string(item_2025.as_str());
        }
        list_2026.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2028 = writer.prefix("DryRun");
    if let Some(var_2029) = &input.dry_run {
        scope_2028.boolean(*var_2029);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_addresses(
    input: &crate::input::DescribeAddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2030 = writer.prefix("Filter");
    if let Some(var_2031) = &input.filters {
        let mut list_2033 = scope_2030.start_list(true, Some("Filter"));
        for item_2032 in var_2031 {
            #[allow(unused_mut)]
            let mut entry_2034 = list_2033.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2034, item_2032)?;
        }
        list_2033.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2035 = writer.prefix("PublicIp");
    if let Some(var_2036) = &input.public_ips {
        let mut list_2038 = scope_2035.start_list(true, Some("PublicIp"));
        for item_2037 in var_2036 {
            #[allow(unused_mut)]
            let mut entry_2039 = list_2038.entry();
            entry_2039.string(item_2037);
        }
        list_2038.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2040 = writer.prefix("AllocationId");
    if let Some(var_2041) = &input.allocation_ids {
        let mut list_2043 = scope_2040.start_list(true, Some("AllocationId"));
        for item_2042 in var_2041 {
            #[allow(unused_mut)]
            let mut entry_2044 = list_2043.entry();
            entry_2044.string(item_2042);
        }
        list_2043.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2045 = writer.prefix("DryRun");
    if let Some(var_2046) = &input.dry_run {
        scope_2045.boolean(*var_2046);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_addresses_attribute(
    input: &crate::input::DescribeAddressesAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAddressesAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2047 = writer.prefix("AllocationId");
    if let Some(var_2048) = &input.allocation_ids {
        let mut list_2050 = scope_2047.start_list(true, Some("item"));
        for item_2049 in var_2048 {
            #[allow(unused_mut)]
            let mut entry_2051 = list_2050.entry();
            entry_2051.string(item_2049);
        }
        list_2050.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2052 = writer.prefix("Attribute");
    if let Some(var_2053) = &input.attribute {
        scope_2052.string(var_2053.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2054 = writer.prefix("NextToken");
    if let Some(var_2055) = &input.next_token {
        scope_2054.string(var_2055);
    }
    #[allow(unused_mut)]
    let mut scope_2056 = writer.prefix("MaxResults");
    if let Some(var_2057) = &input.max_results {
        scope_2056.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2057).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2058 = writer.prefix("DryRun");
    if let Some(var_2059) = &input.dry_run {
        scope_2058.boolean(*var_2059);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_aggregate_id_format(
    input: &crate::input::DescribeAggregateIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAggregateIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2060 = writer.prefix("DryRun");
    if let Some(var_2061) = &input.dry_run {
        scope_2060.boolean(*var_2061);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_availability_zones(
    input: &crate::input::DescribeAvailabilityZonesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAvailabilityZones", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2062 = writer.prefix("Filter");
    if let Some(var_2063) = &input.filters {
        let mut list_2065 = scope_2062.start_list(true, Some("Filter"));
        for item_2064 in var_2063 {
            #[allow(unused_mut)]
            let mut entry_2066 = list_2065.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2066, item_2064)?;
        }
        list_2065.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2067 = writer.prefix("ZoneName");
    if let Some(var_2068) = &input.zone_names {
        let mut list_2070 = scope_2067.start_list(true, Some("ZoneName"));
        for item_2069 in var_2068 {
            #[allow(unused_mut)]
            let mut entry_2071 = list_2070.entry();
            entry_2071.string(item_2069);
        }
        list_2070.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2072 = writer.prefix("ZoneId");
    if let Some(var_2073) = &input.zone_ids {
        let mut list_2075 = scope_2072.start_list(true, Some("ZoneId"));
        for item_2074 in var_2073 {
            #[allow(unused_mut)]
            let mut entry_2076 = list_2075.entry();
            entry_2076.string(item_2074);
        }
        list_2075.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2077 = writer.prefix("AllAvailabilityZones");
    if let Some(var_2078) = &input.all_availability_zones {
        scope_2077.boolean(*var_2078);
    }
    #[allow(unused_mut)]
    let mut scope_2079 = writer.prefix("DryRun");
    if let Some(var_2080) = &input.dry_run {
        scope_2079.boolean(*var_2080);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_bundle_tasks(
    input: &crate::input::DescribeBundleTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeBundleTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2081 = writer.prefix("BundleId");
    if let Some(var_2082) = &input.bundle_ids {
        let mut list_2084 = scope_2081.start_list(true, Some("BundleId"));
        for item_2083 in var_2082 {
            #[allow(unused_mut)]
            let mut entry_2085 = list_2084.entry();
            entry_2085.string(item_2083);
        }
        list_2084.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2086 = writer.prefix("Filter");
    if let Some(var_2087) = &input.filters {
        let mut list_2089 = scope_2086.start_list(true, Some("Filter"));
        for item_2088 in var_2087 {
            #[allow(unused_mut)]
            let mut entry_2090 = list_2089.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2090, item_2088)?;
        }
        list_2089.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2091 = writer.prefix("DryRun");
    if let Some(var_2092) = &input.dry_run {
        scope_2091.boolean(*var_2092);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_byoip_cidrs(
    input: &crate::input::DescribeByoipCidrsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeByoipCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2093 = writer.prefix("DryRun");
    if let Some(var_2094) = &input.dry_run {
        scope_2093.boolean(*var_2094);
    }
    #[allow(unused_mut)]
    let mut scope_2095 = writer.prefix("MaxResults");
    if let Some(var_2096) = &input.max_results {
        scope_2095.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2096).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2097 = writer.prefix("NextToken");
    if let Some(var_2098) = &input.next_token {
        scope_2097.string(var_2098);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_capacity_reservation_fleets(
    input: &crate::input::DescribeCapacityReservationFleetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeCapacityReservationFleets",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2099 = writer.prefix("CapacityReservationFleetId");
    if let Some(var_2100) = &input.capacity_reservation_fleet_ids {
        let mut list_2102 = scope_2099.start_list(true, Some("item"));
        for item_2101 in var_2100 {
            #[allow(unused_mut)]
            let mut entry_2103 = list_2102.entry();
            entry_2103.string(item_2101);
        }
        list_2102.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2104 = writer.prefix("NextToken");
    if let Some(var_2105) = &input.next_token {
        scope_2104.string(var_2105);
    }
    #[allow(unused_mut)]
    let mut scope_2106 = writer.prefix("MaxResults");
    if let Some(var_2107) = &input.max_results {
        scope_2106.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2107).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2108 = writer.prefix("Filter");
    if let Some(var_2109) = &input.filters {
        let mut list_2111 = scope_2108.start_list(true, Some("Filter"));
        for item_2110 in var_2109 {
            #[allow(unused_mut)]
            let mut entry_2112 = list_2111.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2112, item_2110)?;
        }
        list_2111.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2113 = writer.prefix("DryRun");
    if let Some(var_2114) = &input.dry_run {
        scope_2113.boolean(*var_2114);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_capacity_reservations(
    input: &crate::input::DescribeCapacityReservationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCapacityReservations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2115 = writer.prefix("CapacityReservationId");
    if let Some(var_2116) = &input.capacity_reservation_ids {
        let mut list_2118 = scope_2115.start_list(true, Some("item"));
        for item_2117 in var_2116 {
            #[allow(unused_mut)]
            let mut entry_2119 = list_2118.entry();
            entry_2119.string(item_2117);
        }
        list_2118.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2120 = writer.prefix("NextToken");
    if let Some(var_2121) = &input.next_token {
        scope_2120.string(var_2121);
    }
    #[allow(unused_mut)]
    let mut scope_2122 = writer.prefix("MaxResults");
    if let Some(var_2123) = &input.max_results {
        scope_2122.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2123).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2124 = writer.prefix("Filter");
    if let Some(var_2125) = &input.filters {
        let mut list_2127 = scope_2124.start_list(true, Some("Filter"));
        for item_2126 in var_2125 {
            #[allow(unused_mut)]
            let mut entry_2128 = list_2127.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2128, item_2126)?;
        }
        list_2127.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2129 = writer.prefix("DryRun");
    if let Some(var_2130) = &input.dry_run {
        scope_2129.boolean(*var_2130);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_carrier_gateways(
    input: &crate::input::DescribeCarrierGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCarrierGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2131 = writer.prefix("CarrierGatewayId");
    if let Some(var_2132) = &input.carrier_gateway_ids {
        let mut list_2134 = scope_2131.start_list(true, None);
        for item_2133 in var_2132 {
            #[allow(unused_mut)]
            let mut entry_2135 = list_2134.entry();
            entry_2135.string(item_2133);
        }
        list_2134.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2136 = writer.prefix("Filter");
    if let Some(var_2137) = &input.filters {
        let mut list_2139 = scope_2136.start_list(true, Some("Filter"));
        for item_2138 in var_2137 {
            #[allow(unused_mut)]
            let mut entry_2140 = list_2139.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2140, item_2138)?;
        }
        list_2139.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2141 = writer.prefix("MaxResults");
    if let Some(var_2142) = &input.max_results {
        scope_2141.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2142).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2143 = writer.prefix("NextToken");
    if let Some(var_2144) = &input.next_token {
        scope_2143.string(var_2144);
    }
    #[allow(unused_mut)]
    let mut scope_2145 = writer.prefix("DryRun");
    if let Some(var_2146) = &input.dry_run {
        scope_2145.boolean(*var_2146);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_classic_link_instances(
    input: &crate::input::DescribeClassicLinkInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClassicLinkInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2147 = writer.prefix("Filter");
    if let Some(var_2148) = &input.filters {
        let mut list_2150 = scope_2147.start_list(true, Some("Filter"));
        for item_2149 in var_2148 {
            #[allow(unused_mut)]
            let mut entry_2151 = list_2150.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2151, item_2149)?;
        }
        list_2150.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2152 = writer.prefix("DryRun");
    if let Some(var_2153) = &input.dry_run {
        scope_2152.boolean(*var_2153);
    }
    #[allow(unused_mut)]
    let mut scope_2154 = writer.prefix("InstanceId");
    if let Some(var_2155) = &input.instance_ids {
        let mut list_2157 = scope_2154.start_list(true, Some("InstanceId"));
        for item_2156 in var_2155 {
            #[allow(unused_mut)]
            let mut entry_2158 = list_2157.entry();
            entry_2158.string(item_2156);
        }
        list_2157.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2159 = writer.prefix("MaxResults");
    if let Some(var_2160) = &input.max_results {
        scope_2159.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2160).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2161 = writer.prefix("NextToken");
    if let Some(var_2162) = &input.next_token {
        scope_2161.string(var_2162);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_authorization_rules(
    input: &crate::input::DescribeClientVpnAuthorizationRulesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeClientVpnAuthorizationRules",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2163 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2164) = &input.client_vpn_endpoint_id {
        scope_2163.string(var_2164);
    }
    #[allow(unused_mut)]
    let mut scope_2165 = writer.prefix("DryRun");
    if let Some(var_2166) = &input.dry_run {
        scope_2165.boolean(*var_2166);
    }
    #[allow(unused_mut)]
    let mut scope_2167 = writer.prefix("NextToken");
    if let Some(var_2168) = &input.next_token {
        scope_2167.string(var_2168);
    }
    #[allow(unused_mut)]
    let mut scope_2169 = writer.prefix("Filter");
    if let Some(var_2170) = &input.filters {
        let mut list_2172 = scope_2169.start_list(true, Some("Filter"));
        for item_2171 in var_2170 {
            #[allow(unused_mut)]
            let mut entry_2173 = list_2172.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2173, item_2171)?;
        }
        list_2172.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2174 = writer.prefix("MaxResults");
    if let Some(var_2175) = &input.max_results {
        scope_2174.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2175).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_connections(
    input: &crate::input::DescribeClientVpnConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2176 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2177) = &input.client_vpn_endpoint_id {
        scope_2176.string(var_2177);
    }
    #[allow(unused_mut)]
    let mut scope_2178 = writer.prefix("Filter");
    if let Some(var_2179) = &input.filters {
        let mut list_2181 = scope_2178.start_list(true, Some("Filter"));
        for item_2180 in var_2179 {
            #[allow(unused_mut)]
            let mut entry_2182 = list_2181.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2182, item_2180)?;
        }
        list_2181.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2183 = writer.prefix("NextToken");
    if let Some(var_2184) = &input.next_token {
        scope_2183.string(var_2184);
    }
    #[allow(unused_mut)]
    let mut scope_2185 = writer.prefix("MaxResults");
    if let Some(var_2186) = &input.max_results {
        scope_2185.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2186).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2187 = writer.prefix("DryRun");
    if let Some(var_2188) = &input.dry_run {
        scope_2187.boolean(*var_2188);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_endpoints(
    input: &crate::input::DescribeClientVpnEndpointsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2189 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2190) = &input.client_vpn_endpoint_ids {
        let mut list_2192 = scope_2189.start_list(true, Some("item"));
        for item_2191 in var_2190 {
            #[allow(unused_mut)]
            let mut entry_2193 = list_2192.entry();
            entry_2193.string(item_2191);
        }
        list_2192.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2194 = writer.prefix("MaxResults");
    if let Some(var_2195) = &input.max_results {
        scope_2194.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2195).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2196 = writer.prefix("NextToken");
    if let Some(var_2197) = &input.next_token {
        scope_2196.string(var_2197);
    }
    #[allow(unused_mut)]
    let mut scope_2198 = writer.prefix("Filter");
    if let Some(var_2199) = &input.filters {
        let mut list_2201 = scope_2198.start_list(true, Some("Filter"));
        for item_2200 in var_2199 {
            #[allow(unused_mut)]
            let mut entry_2202 = list_2201.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2202, item_2200)?;
        }
        list_2201.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2203 = writer.prefix("DryRun");
    if let Some(var_2204) = &input.dry_run {
        scope_2203.boolean(*var_2204);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_routes(
    input: &crate::input::DescribeClientVpnRoutesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2205 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2206) = &input.client_vpn_endpoint_id {
        scope_2205.string(var_2206);
    }
    #[allow(unused_mut)]
    let mut scope_2207 = writer.prefix("Filter");
    if let Some(var_2208) = &input.filters {
        let mut list_2210 = scope_2207.start_list(true, Some("Filter"));
        for item_2209 in var_2208 {
            #[allow(unused_mut)]
            let mut entry_2211 = list_2210.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2211, item_2209)?;
        }
        list_2210.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2212 = writer.prefix("MaxResults");
    if let Some(var_2213) = &input.max_results {
        scope_2212.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2213).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2214 = writer.prefix("NextToken");
    if let Some(var_2215) = &input.next_token {
        scope_2214.string(var_2215);
    }
    #[allow(unused_mut)]
    let mut scope_2216 = writer.prefix("DryRun");
    if let Some(var_2217) = &input.dry_run {
        scope_2216.boolean(*var_2217);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_target_networks(
    input: &crate::input::DescribeClientVpnTargetNetworksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeClientVpnTargetNetworks",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2218 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2219) = &input.client_vpn_endpoint_id {
        scope_2218.string(var_2219);
    }
    #[allow(unused_mut)]
    let mut scope_2220 = writer.prefix("AssociationIds");
    if let Some(var_2221) = &input.association_ids {
        let mut list_2223 = scope_2220.start_list(true, Some("item"));
        for item_2222 in var_2221 {
            #[allow(unused_mut)]
            let mut entry_2224 = list_2223.entry();
            entry_2224.string(item_2222);
        }
        list_2223.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2225 = writer.prefix("MaxResults");
    if let Some(var_2226) = &input.max_results {
        scope_2225.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2226).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2227 = writer.prefix("NextToken");
    if let Some(var_2228) = &input.next_token {
        scope_2227.string(var_2228);
    }
    #[allow(unused_mut)]
    let mut scope_2229 = writer.prefix("Filter");
    if let Some(var_2230) = &input.filters {
        let mut list_2232 = scope_2229.start_list(true, Some("Filter"));
        for item_2231 in var_2230 {
            #[allow(unused_mut)]
            let mut entry_2233 = list_2232.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2233, item_2231)?;
        }
        list_2232.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2234 = writer.prefix("DryRun");
    if let Some(var_2235) = &input.dry_run {
        scope_2234.boolean(*var_2235);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_coip_pools(
    input: &crate::input::DescribeCoipPoolsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCoipPools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2236 = writer.prefix("PoolId");
    if let Some(var_2237) = &input.pool_ids {
        let mut list_2239 = scope_2236.start_list(true, Some("item"));
        for item_2238 in var_2237 {
            #[allow(unused_mut)]
            let mut entry_2240 = list_2239.entry();
            entry_2240.string(item_2238);
        }
        list_2239.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2241 = writer.prefix("Filter");
    if let Some(var_2242) = &input.filters {
        let mut list_2244 = scope_2241.start_list(true, Some("Filter"));
        for item_2243 in var_2242 {
            #[allow(unused_mut)]
            let mut entry_2245 = list_2244.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2245, item_2243)?;
        }
        list_2244.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2246 = writer.prefix("MaxResults");
    if let Some(var_2247) = &input.max_results {
        scope_2246.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2247).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2248 = writer.prefix("NextToken");
    if let Some(var_2249) = &input.next_token {
        scope_2248.string(var_2249);
    }
    #[allow(unused_mut)]
    let mut scope_2250 = writer.prefix("DryRun");
    if let Some(var_2251) = &input.dry_run {
        scope_2250.boolean(*var_2251);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_conversion_tasks(
    input: &crate::input::DescribeConversionTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeConversionTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2252 = writer.prefix("ConversionTaskId");
    if let Some(var_2253) = &input.conversion_task_ids {
        let mut list_2255 = scope_2252.start_list(true, Some("item"));
        for item_2254 in var_2253 {
            #[allow(unused_mut)]
            let mut entry_2256 = list_2255.entry();
            entry_2256.string(item_2254);
        }
        list_2255.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2257 = writer.prefix("DryRun");
    if let Some(var_2258) = &input.dry_run {
        scope_2257.boolean(*var_2258);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_customer_gateways(
    input: &crate::input::DescribeCustomerGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCustomerGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2259 = writer.prefix("CustomerGatewayId");
    if let Some(var_2260) = &input.customer_gateway_ids {
        let mut list_2262 = scope_2259.start_list(true, Some("CustomerGatewayId"));
        for item_2261 in var_2260 {
            #[allow(unused_mut)]
            let mut entry_2263 = list_2262.entry();
            entry_2263.string(item_2261);
        }
        list_2262.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2264 = writer.prefix("Filter");
    if let Some(var_2265) = &input.filters {
        let mut list_2267 = scope_2264.start_list(true, Some("Filter"));
        for item_2266 in var_2265 {
            #[allow(unused_mut)]
            let mut entry_2268 = list_2267.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2268, item_2266)?;
        }
        list_2267.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2269 = writer.prefix("DryRun");
    if let Some(var_2270) = &input.dry_run {
        scope_2269.boolean(*var_2270);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_dhcp_options(
    input: &crate::input::DescribeDhcpOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2271 = writer.prefix("DhcpOptionsId");
    if let Some(var_2272) = &input.dhcp_options_ids {
        let mut list_2274 = scope_2271.start_list(true, Some("DhcpOptionsId"));
        for item_2273 in var_2272 {
            #[allow(unused_mut)]
            let mut entry_2275 = list_2274.entry();
            entry_2275.string(item_2273);
        }
        list_2274.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2276 = writer.prefix("Filter");
    if let Some(var_2277) = &input.filters {
        let mut list_2279 = scope_2276.start_list(true, Some("Filter"));
        for item_2278 in var_2277 {
            #[allow(unused_mut)]
            let mut entry_2280 = list_2279.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2280, item_2278)?;
        }
        list_2279.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2281 = writer.prefix("DryRun");
    if let Some(var_2282) = &input.dry_run {
        scope_2281.boolean(*var_2282);
    }
    #[allow(unused_mut)]
    let mut scope_2283 = writer.prefix("NextToken");
    if let Some(var_2284) = &input.next_token {
        scope_2283.string(var_2284);
    }
    #[allow(unused_mut)]
    let mut scope_2285 = writer.prefix("MaxResults");
    if let Some(var_2286) = &input.max_results {
        scope_2285.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2286).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_egress_only_internet_gateways(
    input: &crate::input::DescribeEgressOnlyInternetGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeEgressOnlyInternetGateways",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2287 = writer.prefix("DryRun");
    if let Some(var_2288) = &input.dry_run {
        scope_2287.boolean(*var_2288);
    }
    #[allow(unused_mut)]
    let mut scope_2289 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_2290) = &input.egress_only_internet_gateway_ids {
        let mut list_2292 = scope_2289.start_list(true, Some("item"));
        for item_2291 in var_2290 {
            #[allow(unused_mut)]
            let mut entry_2293 = list_2292.entry();
            entry_2293.string(item_2291);
        }
        list_2292.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2294 = writer.prefix("MaxResults");
    if let Some(var_2295) = &input.max_results {
        scope_2294.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2295).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2296 = writer.prefix("NextToken");
    if let Some(var_2297) = &input.next_token {
        scope_2296.string(var_2297);
    }
    #[allow(unused_mut)]
    let mut scope_2298 = writer.prefix("Filter");
    if let Some(var_2299) = &input.filters {
        let mut list_2301 = scope_2298.start_list(true, Some("Filter"));
        for item_2300 in var_2299 {
            #[allow(unused_mut)]
            let mut entry_2302 = list_2301.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2302, item_2300)?;
        }
        list_2301.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_elastic_gpus(
    input: &crate::input::DescribeElasticGpusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeElasticGpus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2303 = writer.prefix("ElasticGpuId");
    if let Some(var_2304) = &input.elastic_gpu_ids {
        let mut list_2306 = scope_2303.start_list(true, Some("item"));
        for item_2305 in var_2304 {
            #[allow(unused_mut)]
            let mut entry_2307 = list_2306.entry();
            entry_2307.string(item_2305);
        }
        list_2306.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2308 = writer.prefix("DryRun");
    if let Some(var_2309) = &input.dry_run {
        scope_2308.boolean(*var_2309);
    }
    #[allow(unused_mut)]
    let mut scope_2310 = writer.prefix("Filter");
    if let Some(var_2311) = &input.filters {
        let mut list_2313 = scope_2310.start_list(true, Some("Filter"));
        for item_2312 in var_2311 {
            #[allow(unused_mut)]
            let mut entry_2314 = list_2313.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2314, item_2312)?;
        }
        list_2313.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2315 = writer.prefix("MaxResults");
    if let Some(var_2316) = &input.max_results {
        scope_2315.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2316).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2317 = writer.prefix("NextToken");
    if let Some(var_2318) = &input.next_token {
        scope_2317.string(var_2318);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_export_image_tasks(
    input: &crate::input::DescribeExportImageTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeExportImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2319 = writer.prefix("DryRun");
    if let Some(var_2320) = &input.dry_run {
        scope_2319.boolean(*var_2320);
    }
    #[allow(unused_mut)]
    let mut scope_2321 = writer.prefix("Filter");
    if let Some(var_2322) = &input.filters {
        let mut list_2324 = scope_2321.start_list(true, Some("Filter"));
        for item_2323 in var_2322 {
            #[allow(unused_mut)]
            let mut entry_2325 = list_2324.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2325, item_2323)?;
        }
        list_2324.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2326 = writer.prefix("ExportImageTaskId");
    if let Some(var_2327) = &input.export_image_task_ids {
        let mut list_2329 = scope_2326.start_list(true, Some("ExportImageTaskId"));
        for item_2328 in var_2327 {
            #[allow(unused_mut)]
            let mut entry_2330 = list_2329.entry();
            entry_2330.string(item_2328);
        }
        list_2329.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2331 = writer.prefix("MaxResults");
    if let Some(var_2332) = &input.max_results {
        scope_2331.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2332).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2333 = writer.prefix("NextToken");
    if let Some(var_2334) = &input.next_token {
        scope_2333.string(var_2334);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_export_tasks(
    input: &crate::input::DescribeExportTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeExportTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2335 = writer.prefix("ExportTaskId");
    if let Some(var_2336) = &input.export_task_ids {
        let mut list_2338 = scope_2335.start_list(true, Some("ExportTaskId"));
        for item_2337 in var_2336 {
            #[allow(unused_mut)]
            let mut entry_2339 = list_2338.entry();
            entry_2339.string(item_2337);
        }
        list_2338.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2340 = writer.prefix("Filter");
    if let Some(var_2341) = &input.filters {
        let mut list_2343 = scope_2340.start_list(true, Some("Filter"));
        for item_2342 in var_2341 {
            #[allow(unused_mut)]
            let mut entry_2344 = list_2343.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2344, item_2342)?;
        }
        list_2343.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fast_launch_images(
    input: &crate::input::DescribeFastLaunchImagesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFastLaunchImages", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2345 = writer.prefix("ImageId");
    if let Some(var_2346) = &input.image_ids {
        let mut list_2348 = scope_2345.start_list(true, Some("ImageId"));
        for item_2347 in var_2346 {
            #[allow(unused_mut)]
            let mut entry_2349 = list_2348.entry();
            entry_2349.string(item_2347);
        }
        list_2348.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2350 = writer.prefix("Filter");
    if let Some(var_2351) = &input.filters {
        let mut list_2353 = scope_2350.start_list(true, Some("Filter"));
        for item_2352 in var_2351 {
            #[allow(unused_mut)]
            let mut entry_2354 = list_2353.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2354, item_2352)?;
        }
        list_2353.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2355 = writer.prefix("MaxResults");
    if let Some(var_2356) = &input.max_results {
        scope_2355.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2356).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2357 = writer.prefix("NextToken");
    if let Some(var_2358) = &input.next_token {
        scope_2357.string(var_2358);
    }
    #[allow(unused_mut)]
    let mut scope_2359 = writer.prefix("DryRun");
    if let Some(var_2360) = &input.dry_run {
        scope_2359.boolean(*var_2360);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fast_snapshot_restores(
    input: &crate::input::DescribeFastSnapshotRestoresInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2361 = writer.prefix("Filter");
    if let Some(var_2362) = &input.filters {
        let mut list_2364 = scope_2361.start_list(true, Some("Filter"));
        for item_2363 in var_2362 {
            #[allow(unused_mut)]
            let mut entry_2365 = list_2364.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2365, item_2363)?;
        }
        list_2364.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2366 = writer.prefix("MaxResults");
    if let Some(var_2367) = &input.max_results {
        scope_2366.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2367).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2368 = writer.prefix("NextToken");
    if let Some(var_2369) = &input.next_token {
        scope_2368.string(var_2369);
    }
    #[allow(unused_mut)]
    let mut scope_2370 = writer.prefix("DryRun");
    if let Some(var_2371) = &input.dry_run {
        scope_2370.boolean(*var_2371);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fleet_history(
    input: &crate::input::DescribeFleetHistoryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFleetHistory", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2372 = writer.prefix("DryRun");
    if let Some(var_2373) = &input.dry_run {
        scope_2372.boolean(*var_2373);
    }
    #[allow(unused_mut)]
    let mut scope_2374 = writer.prefix("EventType");
    if let Some(var_2375) = &input.event_type {
        scope_2374.string(var_2375.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2376 = writer.prefix("MaxResults");
    if let Some(var_2377) = &input.max_results {
        scope_2376.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2377).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2378 = writer.prefix("NextToken");
    if let Some(var_2379) = &input.next_token {
        scope_2378.string(var_2379);
    }
    #[allow(unused_mut)]
    let mut scope_2380 = writer.prefix("FleetId");
    if let Some(var_2381) = &input.fleet_id {
        scope_2380.string(var_2381);
    }
    #[allow(unused_mut)]
    let mut scope_2382 = writer.prefix("StartTime");
    if let Some(var_2383) = &input.start_time {
        scope_2382.date_time(var_2383, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fleet_instances(
    input: &crate::input::DescribeFleetInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFleetInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2384 = writer.prefix("DryRun");
    if let Some(var_2385) = &input.dry_run {
        scope_2384.boolean(*var_2385);
    }
    #[allow(unused_mut)]
    let mut scope_2386 = writer.prefix("MaxResults");
    if let Some(var_2387) = &input.max_results {
        scope_2386.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2387).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2388 = writer.prefix("NextToken");
    if let Some(var_2389) = &input.next_token {
        scope_2388.string(var_2389);
    }
    #[allow(unused_mut)]
    let mut scope_2390 = writer.prefix("FleetId");
    if let Some(var_2391) = &input.fleet_id {
        scope_2390.string(var_2391);
    }
    #[allow(unused_mut)]
    let mut scope_2392 = writer.prefix("Filter");
    if let Some(var_2393) = &input.filters {
        let mut list_2395 = scope_2392.start_list(true, Some("Filter"));
        for item_2394 in var_2393 {
            #[allow(unused_mut)]
            let mut entry_2396 = list_2395.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2396, item_2394)?;
        }
        list_2395.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fleets(
    input: &crate::input::DescribeFleetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeFleets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2397 = writer.prefix("DryRun");
    if let Some(var_2398) = &input.dry_run {
        scope_2397.boolean(*var_2398);
    }
    #[allow(unused_mut)]
    let mut scope_2399 = writer.prefix("MaxResults");
    if let Some(var_2400) = &input.max_results {
        scope_2399.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2400).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2401 = writer.prefix("NextToken");
    if let Some(var_2402) = &input.next_token {
        scope_2401.string(var_2402);
    }
    #[allow(unused_mut)]
    let mut scope_2403 = writer.prefix("FleetId");
    if let Some(var_2404) = &input.fleet_ids {
        let mut list_2406 = scope_2403.start_list(true, None);
        for item_2405 in var_2404 {
            #[allow(unused_mut)]
            let mut entry_2407 = list_2406.entry();
            entry_2407.string(item_2405);
        }
        list_2406.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2408 = writer.prefix("Filter");
    if let Some(var_2409) = &input.filters {
        let mut list_2411 = scope_2408.start_list(true, Some("Filter"));
        for item_2410 in var_2409 {
            #[allow(unused_mut)]
            let mut entry_2412 = list_2411.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2412, item_2410)?;
        }
        list_2411.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_flow_logs(
    input: &crate::input::DescribeFlowLogsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2413 = writer.prefix("DryRun");
    if let Some(var_2414) = &input.dry_run {
        scope_2413.boolean(*var_2414);
    }
    #[allow(unused_mut)]
    let mut scope_2415 = writer.prefix("Filter");
    if let Some(var_2416) = &input.filter {
        let mut list_2418 = scope_2415.start_list(true, Some("Filter"));
        for item_2417 in var_2416 {
            #[allow(unused_mut)]
            let mut entry_2419 = list_2418.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2419, item_2417)?;
        }
        list_2418.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2420 = writer.prefix("FlowLogId");
    if let Some(var_2421) = &input.flow_log_ids {
        let mut list_2423 = scope_2420.start_list(true, Some("item"));
        for item_2422 in var_2421 {
            #[allow(unused_mut)]
            let mut entry_2424 = list_2423.entry();
            entry_2424.string(item_2422);
        }
        list_2423.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2425 = writer.prefix("MaxResults");
    if let Some(var_2426) = &input.max_results {
        scope_2425.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2426).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2427 = writer.prefix("NextToken");
    if let Some(var_2428) = &input.next_token {
        scope_2427.string(var_2428);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fpga_image_attribute(
    input: &crate::input::DescribeFpgaImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2429 = writer.prefix("DryRun");
    if let Some(var_2430) = &input.dry_run {
        scope_2429.boolean(*var_2430);
    }
    #[allow(unused_mut)]
    let mut scope_2431 = writer.prefix("FpgaImageId");
    if let Some(var_2432) = &input.fpga_image_id {
        scope_2431.string(var_2432);
    }
    #[allow(unused_mut)]
    let mut scope_2433 = writer.prefix("Attribute");
    if let Some(var_2434) = &input.attribute {
        scope_2433.string(var_2434.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fpga_images(
    input: &crate::input::DescribeFpgaImagesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFpgaImages", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2435 = writer.prefix("DryRun");
    if let Some(var_2436) = &input.dry_run {
        scope_2435.boolean(*var_2436);
    }
    #[allow(unused_mut)]
    let mut scope_2437 = writer.prefix("FpgaImageId");
    if let Some(var_2438) = &input.fpga_image_ids {
        let mut list_2440 = scope_2437.start_list(true, Some("item"));
        for item_2439 in var_2438 {
            #[allow(unused_mut)]
            let mut entry_2441 = list_2440.entry();
            entry_2441.string(item_2439);
        }
        list_2440.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2442 = writer.prefix("Owner");
    if let Some(var_2443) = &input.owners {
        let mut list_2445 = scope_2442.start_list(true, Some("Owner"));
        for item_2444 in var_2443 {
            #[allow(unused_mut)]
            let mut entry_2446 = list_2445.entry();
            entry_2446.string(item_2444);
        }
        list_2445.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2447 = writer.prefix("Filter");
    if let Some(var_2448) = &input.filters {
        let mut list_2450 = scope_2447.start_list(true, Some("Filter"));
        for item_2449 in var_2448 {
            #[allow(unused_mut)]
            let mut entry_2451 = list_2450.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2451, item_2449)?;
        }
        list_2450.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2452 = writer.prefix("NextToken");
    if let Some(var_2453) = &input.next_token {
        scope_2452.string(var_2453);
    }
    #[allow(unused_mut)]
    let mut scope_2454 = writer.prefix("MaxResults");
    if let Some(var_2455) = &input.max_results {
        scope_2454.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2455).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_host_reservation_offerings(
    input: &crate::input::DescribeHostReservationOfferingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeHostReservationOfferings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2456 = writer.prefix("Filter");
    if let Some(var_2457) = &input.filter {
        let mut list_2459 = scope_2456.start_list(true, Some("Filter"));
        for item_2458 in var_2457 {
            #[allow(unused_mut)]
            let mut entry_2460 = list_2459.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2460, item_2458)?;
        }
        list_2459.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2461 = writer.prefix("MaxDuration");
    if let Some(var_2462) = &input.max_duration {
        scope_2461.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2462).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2463 = writer.prefix("MaxResults");
    if let Some(var_2464) = &input.max_results {
        scope_2463.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2464).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2465 = writer.prefix("MinDuration");
    if let Some(var_2466) = &input.min_duration {
        scope_2465.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2466).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2467 = writer.prefix("NextToken");
    if let Some(var_2468) = &input.next_token {
        scope_2467.string(var_2468);
    }
    #[allow(unused_mut)]
    let mut scope_2469 = writer.prefix("OfferingId");
    if let Some(var_2470) = &input.offering_id {
        scope_2469.string(var_2470);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_host_reservations(
    input: &crate::input::DescribeHostReservationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeHostReservations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2471 = writer.prefix("Filter");
    if let Some(var_2472) = &input.filter {
        let mut list_2474 = scope_2471.start_list(true, Some("Filter"));
        for item_2473 in var_2472 {
            #[allow(unused_mut)]
            let mut entry_2475 = list_2474.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2475, item_2473)?;
        }
        list_2474.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2476 = writer.prefix("HostReservationIdSet");
    if let Some(var_2477) = &input.host_reservation_id_set {
        let mut list_2479 = scope_2476.start_list(true, Some("item"));
        for item_2478 in var_2477 {
            #[allow(unused_mut)]
            let mut entry_2480 = list_2479.entry();
            entry_2480.string(item_2478);
        }
        list_2479.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2481 = writer.prefix("MaxResults");
    if let Some(var_2482) = &input.max_results {
        scope_2481.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2482).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2483 = writer.prefix("NextToken");
    if let Some(var_2484) = &input.next_token {
        scope_2483.string(var_2484);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_hosts(
    input: &crate::input::DescribeHostsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2485 = writer.prefix("Filter");
    if let Some(var_2486) = &input.filter {
        let mut list_2488 = scope_2485.start_list(true, Some("Filter"));
        for item_2487 in var_2486 {
            #[allow(unused_mut)]
            let mut entry_2489 = list_2488.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2489, item_2487)?;
        }
        list_2488.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2490 = writer.prefix("HostId");
    if let Some(var_2491) = &input.host_ids {
        let mut list_2493 = scope_2490.start_list(true, Some("item"));
        for item_2492 in var_2491 {
            #[allow(unused_mut)]
            let mut entry_2494 = list_2493.entry();
            entry_2494.string(item_2492);
        }
        list_2493.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2495 = writer.prefix("MaxResults");
    if let Some(var_2496) = &input.max_results {
        scope_2495.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2496).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2497 = writer.prefix("NextToken");
    if let Some(var_2498) = &input.next_token {
        scope_2497.string(var_2498);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_iam_instance_profile_associations(
    input: &crate::input::DescribeIamInstanceProfileAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeIamInstanceProfileAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2499 = writer.prefix("AssociationId");
    if let Some(var_2500) = &input.association_ids {
        let mut list_2502 = scope_2499.start_list(true, Some("AssociationId"));
        for item_2501 in var_2500 {
            #[allow(unused_mut)]
            let mut entry_2503 = list_2502.entry();
            entry_2503.string(item_2501);
        }
        list_2502.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2504 = writer.prefix("Filter");
    if let Some(var_2505) = &input.filters {
        let mut list_2507 = scope_2504.start_list(true, Some("Filter"));
        for item_2506 in var_2505 {
            #[allow(unused_mut)]
            let mut entry_2508 = list_2507.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2508, item_2506)?;
        }
        list_2507.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2509 = writer.prefix("MaxResults");
    if let Some(var_2510) = &input.max_results {
        scope_2509.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2510).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2511 = writer.prefix("NextToken");
    if let Some(var_2512) = &input.next_token {
        scope_2511.string(var_2512);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_identity_id_format(
    input: &crate::input::DescribeIdentityIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeIdentityIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2513 = writer.prefix("PrincipalArn");
    if let Some(var_2514) = &input.principal_arn {
        scope_2513.string(var_2514);
    }
    #[allow(unused_mut)]
    let mut scope_2515 = writer.prefix("Resource");
    if let Some(var_2516) = &input.resource {
        scope_2515.string(var_2516);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_id_format(
    input: &crate::input::DescribeIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2517 = writer.prefix("Resource");
    if let Some(var_2518) = &input.resource {
        scope_2517.string(var_2518);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_image_attribute(
    input: &crate::input::DescribeImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2519 = writer.prefix("Attribute");
    if let Some(var_2520) = &input.attribute {
        scope_2519.string(var_2520.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2521 = writer.prefix("ImageId");
    if let Some(var_2522) = &input.image_id {
        scope_2521.string(var_2522);
    }
    #[allow(unused_mut)]
    let mut scope_2523 = writer.prefix("DryRun");
    if let Some(var_2524) = &input.dry_run {
        scope_2523.boolean(*var_2524);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_images(
    input: &crate::input::DescribeImagesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeImages", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2525 = writer.prefix("ExecutableBy");
    if let Some(var_2526) = &input.executable_users {
        let mut list_2528 = scope_2525.start_list(true, Some("ExecutableBy"));
        for item_2527 in var_2526 {
            #[allow(unused_mut)]
            let mut entry_2529 = list_2528.entry();
            entry_2529.string(item_2527);
        }
        list_2528.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2530 = writer.prefix("Filter");
    if let Some(var_2531) = &input.filters {
        let mut list_2533 = scope_2530.start_list(true, Some("Filter"));
        for item_2532 in var_2531 {
            #[allow(unused_mut)]
            let mut entry_2534 = list_2533.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2534, item_2532)?;
        }
        list_2533.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2535 = writer.prefix("ImageId");
    if let Some(var_2536) = &input.image_ids {
        let mut list_2538 = scope_2535.start_list(true, Some("ImageId"));
        for item_2537 in var_2536 {
            #[allow(unused_mut)]
            let mut entry_2539 = list_2538.entry();
            entry_2539.string(item_2537);
        }
        list_2538.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2540 = writer.prefix("Owner");
    if let Some(var_2541) = &input.owners {
        let mut list_2543 = scope_2540.start_list(true, Some("Owner"));
        for item_2542 in var_2541 {
            #[allow(unused_mut)]
            let mut entry_2544 = list_2543.entry();
            entry_2544.string(item_2542);
        }
        list_2543.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2545 = writer.prefix("IncludeDeprecated");
    if let Some(var_2546) = &input.include_deprecated {
        scope_2545.boolean(*var_2546);
    }
    #[allow(unused_mut)]
    let mut scope_2547 = writer.prefix("DryRun");
    if let Some(var_2548) = &input.dry_run {
        scope_2547.boolean(*var_2548);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_import_image_tasks(
    input: &crate::input::DescribeImportImageTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeImportImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2549 = writer.prefix("DryRun");
    if let Some(var_2550) = &input.dry_run {
        scope_2549.boolean(*var_2550);
    }
    #[allow(unused_mut)]
    let mut scope_2551 = writer.prefix("Filters");
    if let Some(var_2552) = &input.filters {
        let mut list_2554 = scope_2551.start_list(true, Some("Filter"));
        for item_2553 in var_2552 {
            #[allow(unused_mut)]
            let mut entry_2555 = list_2554.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2555, item_2553)?;
        }
        list_2554.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2556 = writer.prefix("ImportTaskId");
    if let Some(var_2557) = &input.import_task_ids {
        let mut list_2559 = scope_2556.start_list(true, Some("ImportTaskId"));
        for item_2558 in var_2557 {
            #[allow(unused_mut)]
            let mut entry_2560 = list_2559.entry();
            entry_2560.string(item_2558);
        }
        list_2559.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2561 = writer.prefix("MaxResults");
    if let Some(var_2562) = &input.max_results {
        scope_2561.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2562).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2563 = writer.prefix("NextToken");
    if let Some(var_2564) = &input.next_token {
        scope_2563.string(var_2564);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_import_snapshot_tasks(
    input: &crate::input::DescribeImportSnapshotTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeImportSnapshotTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2565 = writer.prefix("DryRun");
    if let Some(var_2566) = &input.dry_run {
        scope_2565.boolean(*var_2566);
    }
    #[allow(unused_mut)]
    let mut scope_2567 = writer.prefix("Filters");
    if let Some(var_2568) = &input.filters {
        let mut list_2570 = scope_2567.start_list(true, Some("Filter"));
        for item_2569 in var_2568 {
            #[allow(unused_mut)]
            let mut entry_2571 = list_2570.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2571, item_2569)?;
        }
        list_2570.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2572 = writer.prefix("ImportTaskId");
    if let Some(var_2573) = &input.import_task_ids {
        let mut list_2575 = scope_2572.start_list(true, Some("ImportTaskId"));
        for item_2574 in var_2573 {
            #[allow(unused_mut)]
            let mut entry_2576 = list_2575.entry();
            entry_2576.string(item_2574);
        }
        list_2575.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2577 = writer.prefix("MaxResults");
    if let Some(var_2578) = &input.max_results {
        scope_2577.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2578).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2579 = writer.prefix("NextToken");
    if let Some(var_2580) = &input.next_token {
        scope_2579.string(var_2580);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_attribute(
    input: &crate::input::DescribeInstanceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2581 = writer.prefix("Attribute");
    if let Some(var_2582) = &input.attribute {
        scope_2581.string(var_2582.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2583 = writer.prefix("DryRun");
    if let Some(var_2584) = &input.dry_run {
        scope_2583.boolean(*var_2584);
    }
    #[allow(unused_mut)]
    let mut scope_2585 = writer.prefix("InstanceId");
    if let Some(var_2586) = &input.instance_id {
        scope_2585.string(var_2586);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_credit_specifications(
    input: &crate::input::DescribeInstanceCreditSpecificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeInstanceCreditSpecifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2587 = writer.prefix("DryRun");
    if let Some(var_2588) = &input.dry_run {
        scope_2587.boolean(*var_2588);
    }
    #[allow(unused_mut)]
    let mut scope_2589 = writer.prefix("Filter");
    if let Some(var_2590) = &input.filters {
        let mut list_2592 = scope_2589.start_list(true, Some("Filter"));
        for item_2591 in var_2590 {
            #[allow(unused_mut)]
            let mut entry_2593 = list_2592.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2593, item_2591)?;
        }
        list_2592.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2594 = writer.prefix("InstanceId");
    if let Some(var_2595) = &input.instance_ids {
        let mut list_2597 = scope_2594.start_list(true, Some("InstanceId"));
        for item_2596 in var_2595 {
            #[allow(unused_mut)]
            let mut entry_2598 = list_2597.entry();
            entry_2598.string(item_2596);
        }
        list_2597.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2599 = writer.prefix("MaxResults");
    if let Some(var_2600) = &input.max_results {
        scope_2599.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2600).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2601 = writer.prefix("NextToken");
    if let Some(var_2602) = &input.next_token {
        scope_2601.string(var_2602);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_event_notification_attributes(
    input: &crate::input::DescribeInstanceEventNotificationAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeInstanceEventNotificationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2603 = writer.prefix("DryRun");
    if let Some(var_2604) = &input.dry_run {
        scope_2603.boolean(*var_2604);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_event_windows(
    input: &crate::input::DescribeInstanceEventWindowsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceEventWindows", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2605 = writer.prefix("DryRun");
    if let Some(var_2606) = &input.dry_run {
        scope_2605.boolean(*var_2606);
    }
    #[allow(unused_mut)]
    let mut scope_2607 = writer.prefix("InstanceEventWindowId");
    if let Some(var_2608) = &input.instance_event_window_ids {
        let mut list_2610 = scope_2607.start_list(true, Some("InstanceEventWindowId"));
        for item_2609 in var_2608 {
            #[allow(unused_mut)]
            let mut entry_2611 = list_2610.entry();
            entry_2611.string(item_2609);
        }
        list_2610.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2612 = writer.prefix("Filter");
    if let Some(var_2613) = &input.filters {
        let mut list_2615 = scope_2612.start_list(true, Some("Filter"));
        for item_2614 in var_2613 {
            #[allow(unused_mut)]
            let mut entry_2616 = list_2615.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2616, item_2614)?;
        }
        list_2615.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2617 = writer.prefix("MaxResults");
    if let Some(var_2618) = &input.max_results {
        scope_2617.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2618).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2619 = writer.prefix("NextToken");
    if let Some(var_2620) = &input.next_token {
        scope_2619.string(var_2620);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instances(
    input: &crate::input::DescribeInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2621 = writer.prefix("Filter");
    if let Some(var_2622) = &input.filters {
        let mut list_2624 = scope_2621.start_list(true, Some("Filter"));
        for item_2623 in var_2622 {
            #[allow(unused_mut)]
            let mut entry_2625 = list_2624.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2625, item_2623)?;
        }
        list_2624.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2626 = writer.prefix("InstanceId");
    if let Some(var_2627) = &input.instance_ids {
        let mut list_2629 = scope_2626.start_list(true, Some("InstanceId"));
        for item_2628 in var_2627 {
            #[allow(unused_mut)]
            let mut entry_2630 = list_2629.entry();
            entry_2630.string(item_2628);
        }
        list_2629.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2631 = writer.prefix("DryRun");
    if let Some(var_2632) = &input.dry_run {
        scope_2631.boolean(*var_2632);
    }
    #[allow(unused_mut)]
    let mut scope_2633 = writer.prefix("MaxResults");
    if let Some(var_2634) = &input.max_results {
        scope_2633.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2634).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2635 = writer.prefix("NextToken");
    if let Some(var_2636) = &input.next_token {
        scope_2635.string(var_2636);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_status(
    input: &crate::input::DescribeInstanceStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2637 = writer.prefix("Filter");
    if let Some(var_2638) = &input.filters {
        let mut list_2640 = scope_2637.start_list(true, Some("Filter"));
        for item_2639 in var_2638 {
            #[allow(unused_mut)]
            let mut entry_2641 = list_2640.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2641, item_2639)?;
        }
        list_2640.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2642 = writer.prefix("InstanceId");
    if let Some(var_2643) = &input.instance_ids {
        let mut list_2645 = scope_2642.start_list(true, Some("InstanceId"));
        for item_2644 in var_2643 {
            #[allow(unused_mut)]
            let mut entry_2646 = list_2645.entry();
            entry_2646.string(item_2644);
        }
        list_2645.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2647 = writer.prefix("MaxResults");
    if let Some(var_2648) = &input.max_results {
        scope_2647.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2648).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2649 = writer.prefix("NextToken");
    if let Some(var_2650) = &input.next_token {
        scope_2649.string(var_2650);
    }
    #[allow(unused_mut)]
    let mut scope_2651 = writer.prefix("DryRun");
    if let Some(var_2652) = &input.dry_run {
        scope_2651.boolean(*var_2652);
    }
    #[allow(unused_mut)]
    let mut scope_2653 = writer.prefix("IncludeAllInstances");
    if let Some(var_2654) = &input.include_all_instances {
        scope_2653.boolean(*var_2654);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_type_offerings(
    input: &crate::input::DescribeInstanceTypeOfferingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceTypeOfferings", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2655 = writer.prefix("DryRun");
    if let Some(var_2656) = &input.dry_run {
        scope_2655.boolean(*var_2656);
    }
    #[allow(unused_mut)]
    let mut scope_2657 = writer.prefix("LocationType");
    if let Some(var_2658) = &input.location_type {
        scope_2657.string(var_2658.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2659 = writer.prefix("Filter");
    if let Some(var_2660) = &input.filters {
        let mut list_2662 = scope_2659.start_list(true, Some("Filter"));
        for item_2661 in var_2660 {
            #[allow(unused_mut)]
            let mut entry_2663 = list_2662.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2663, item_2661)?;
        }
        list_2662.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2664 = writer.prefix("MaxResults");
    if let Some(var_2665) = &input.max_results {
        scope_2664.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2665).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2666 = writer.prefix("NextToken");
    if let Some(var_2667) = &input.next_token {
        scope_2666.string(var_2667);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_types(
    input: &crate::input::DescribeInstanceTypesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceTypes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2668 = writer.prefix("DryRun");
    if let Some(var_2669) = &input.dry_run {
        scope_2668.boolean(*var_2669);
    }
    #[allow(unused_mut)]
    let mut scope_2670 = writer.prefix("InstanceType");
    if let Some(var_2671) = &input.instance_types {
        let mut list_2673 = scope_2670.start_list(true, None);
        for item_2672 in var_2671 {
            #[allow(unused_mut)]
            let mut entry_2674 = list_2673.entry();
            entry_2674.string(item_2672.as_str());
        }
        list_2673.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2675 = writer.prefix("Filter");
    if let Some(var_2676) = &input.filters {
        let mut list_2678 = scope_2675.start_list(true, Some("Filter"));
        for item_2677 in var_2676 {
            #[allow(unused_mut)]
            let mut entry_2679 = list_2678.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2679, item_2677)?;
        }
        list_2678.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2680 = writer.prefix("MaxResults");
    if let Some(var_2681) = &input.max_results {
        scope_2680.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2681).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2682 = writer.prefix("NextToken");
    if let Some(var_2683) = &input.next_token {
        scope_2682.string(var_2683);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_internet_gateways(
    input: &crate::input::DescribeInternetGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInternetGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2684 = writer.prefix("Filter");
    if let Some(var_2685) = &input.filters {
        let mut list_2687 = scope_2684.start_list(true, Some("Filter"));
        for item_2686 in var_2685 {
            #[allow(unused_mut)]
            let mut entry_2688 = list_2687.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2688, item_2686)?;
        }
        list_2687.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2689 = writer.prefix("DryRun");
    if let Some(var_2690) = &input.dry_run {
        scope_2689.boolean(*var_2690);
    }
    #[allow(unused_mut)]
    let mut scope_2691 = writer.prefix("InternetGatewayId");
    if let Some(var_2692) = &input.internet_gateway_ids {
        let mut list_2694 = scope_2691.start_list(true, Some("item"));
        for item_2693 in var_2692 {
            #[allow(unused_mut)]
            let mut entry_2695 = list_2694.entry();
            entry_2695.string(item_2693);
        }
        list_2694.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2696 = writer.prefix("NextToken");
    if let Some(var_2697) = &input.next_token {
        scope_2696.string(var_2697);
    }
    #[allow(unused_mut)]
    let mut scope_2698 = writer.prefix("MaxResults");
    if let Some(var_2699) = &input.max_results {
        scope_2698.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2699).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipam_pools(
    input: &crate::input::DescribeIpamPoolsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeIpamPools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2700 = writer.prefix("DryRun");
    if let Some(var_2701) = &input.dry_run {
        scope_2700.boolean(*var_2701);
    }
    #[allow(unused_mut)]
    let mut scope_2702 = writer.prefix("Filter");
    if let Some(var_2703) = &input.filters {
        let mut list_2705 = scope_2702.start_list(true, Some("Filter"));
        for item_2704 in var_2703 {
            #[allow(unused_mut)]
            let mut entry_2706 = list_2705.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2706, item_2704)?;
        }
        list_2705.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2707 = writer.prefix("MaxResults");
    if let Some(var_2708) = &input.max_results {
        scope_2707.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2708).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2709 = writer.prefix("NextToken");
    if let Some(var_2710) = &input.next_token {
        scope_2709.string(var_2710);
    }
    #[allow(unused_mut)]
    let mut scope_2711 = writer.prefix("IpamPoolId");
    if let Some(var_2712) = &input.ipam_pool_ids {
        let mut list_2714 = scope_2711.start_list(true, Some("item"));
        for item_2713 in var_2712 {
            #[allow(unused_mut)]
            let mut entry_2715 = list_2714.entry();
            entry_2715.string(item_2713);
        }
        list_2714.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipams(
    input: &crate::input::DescribeIpamsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeIpams", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2716 = writer.prefix("DryRun");
    if let Some(var_2717) = &input.dry_run {
        scope_2716.boolean(*var_2717);
    }
    #[allow(unused_mut)]
    let mut scope_2718 = writer.prefix("Filter");
    if let Some(var_2719) = &input.filters {
        let mut list_2721 = scope_2718.start_list(true, Some("Filter"));
        for item_2720 in var_2719 {
            #[allow(unused_mut)]
            let mut entry_2722 = list_2721.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2722, item_2720)?;
        }
        list_2721.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2723 = writer.prefix("MaxResults");
    if let Some(var_2724) = &input.max_results {
        scope_2723.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2724).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2725 = writer.prefix("NextToken");
    if let Some(var_2726) = &input.next_token {
        scope_2725.string(var_2726);
    }
    #[allow(unused_mut)]
    let mut scope_2727 = writer.prefix("IpamId");
    if let Some(var_2728) = &input.ipam_ids {
        let mut list_2730 = scope_2727.start_list(true, Some("item"));
        for item_2729 in var_2728 {
            #[allow(unused_mut)]
            let mut entry_2731 = list_2730.entry();
            entry_2731.string(item_2729);
        }
        list_2730.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipam_scopes(
    input: &crate::input::DescribeIpamScopesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeIpamScopes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2732 = writer.prefix("DryRun");
    if let Some(var_2733) = &input.dry_run {
        scope_2732.boolean(*var_2733);
    }
    #[allow(unused_mut)]
    let mut scope_2734 = writer.prefix("Filter");
    if let Some(var_2735) = &input.filters {
        let mut list_2737 = scope_2734.start_list(true, Some("Filter"));
        for item_2736 in var_2735 {
            #[allow(unused_mut)]
            let mut entry_2738 = list_2737.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2738, item_2736)?;
        }
        list_2737.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2739 = writer.prefix("MaxResults");
    if let Some(var_2740) = &input.max_results {
        scope_2739.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2740).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2741 = writer.prefix("NextToken");
    if let Some(var_2742) = &input.next_token {
        scope_2741.string(var_2742);
    }
    #[allow(unused_mut)]
    let mut scope_2743 = writer.prefix("IpamScopeId");
    if let Some(var_2744) = &input.ipam_scope_ids {
        let mut list_2746 = scope_2743.start_list(true, Some("item"));
        for item_2745 in var_2744 {
            #[allow(unused_mut)]
            let mut entry_2747 = list_2746.entry();
            entry_2747.string(item_2745);
        }
        list_2746.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipv6_pools(
    input: &crate::input::DescribeIpv6PoolsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeIpv6Pools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2748 = writer.prefix("PoolId");
    if let Some(var_2749) = &input.pool_ids {
        let mut list_2751 = scope_2748.start_list(true, Some("item"));
        for item_2750 in var_2749 {
            #[allow(unused_mut)]
            let mut entry_2752 = list_2751.entry();
            entry_2752.string(item_2750);
        }
        list_2751.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2753 = writer.prefix("NextToken");
    if let Some(var_2754) = &input.next_token {
        scope_2753.string(var_2754);
    }
    #[allow(unused_mut)]
    let mut scope_2755 = writer.prefix("MaxResults");
    if let Some(var_2756) = &input.max_results {
        scope_2755.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2756).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2757 = writer.prefix("DryRun");
    if let Some(var_2758) = &input.dry_run {
        scope_2757.boolean(*var_2758);
    }
    #[allow(unused_mut)]
    let mut scope_2759 = writer.prefix("Filter");
    if let Some(var_2760) = &input.filters {
        let mut list_2762 = scope_2759.start_list(true, Some("Filter"));
        for item_2761 in var_2760 {
            #[allow(unused_mut)]
            let mut entry_2763 = list_2762.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2763, item_2761)?;
        }
        list_2762.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_key_pairs(
    input: &crate::input::DescribeKeyPairsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeKeyPairs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2764 = writer.prefix("Filter");
    if let Some(var_2765) = &input.filters {
        let mut list_2767 = scope_2764.start_list(true, Some("Filter"));
        for item_2766 in var_2765 {
            #[allow(unused_mut)]
            let mut entry_2768 = list_2767.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2768, item_2766)?;
        }
        list_2767.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2769 = writer.prefix("KeyName");
    if let Some(var_2770) = &input.key_names {
        let mut list_2772 = scope_2769.start_list(true, Some("KeyName"));
        for item_2771 in var_2770 {
            #[allow(unused_mut)]
            let mut entry_2773 = list_2772.entry();
            entry_2773.string(item_2771);
        }
        list_2772.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2774 = writer.prefix("KeyPairId");
    if let Some(var_2775) = &input.key_pair_ids {
        let mut list_2777 = scope_2774.start_list(true, Some("KeyPairId"));
        for item_2776 in var_2775 {
            #[allow(unused_mut)]
            let mut entry_2778 = list_2777.entry();
            entry_2778.string(item_2776);
        }
        list_2777.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2779 = writer.prefix("DryRun");
    if let Some(var_2780) = &input.dry_run {
        scope_2779.boolean(*var_2780);
    }
    #[allow(unused_mut)]
    let mut scope_2781 = writer.prefix("IncludePublicKey");
    if let Some(var_2782) = &input.include_public_key {
        scope_2781.boolean(*var_2782);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_launch_templates(
    input: &crate::input::DescribeLaunchTemplatesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeLaunchTemplates", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2783 = writer.prefix("DryRun");
    if let Some(var_2784) = &input.dry_run {
        scope_2783.boolean(*var_2784);
    }
    #[allow(unused_mut)]
    let mut scope_2785 = writer.prefix("LaunchTemplateId");
    if let Some(var_2786) = &input.launch_template_ids {
        let mut list_2788 = scope_2785.start_list(true, Some("item"));
        for item_2787 in var_2786 {
            #[allow(unused_mut)]
            let mut entry_2789 = list_2788.entry();
            entry_2789.string(item_2787);
        }
        list_2788.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2790 = writer.prefix("LaunchTemplateName");
    if let Some(var_2791) = &input.launch_template_names {
        let mut list_2793 = scope_2790.start_list(true, Some("item"));
        for item_2792 in var_2791 {
            #[allow(unused_mut)]
            let mut entry_2794 = list_2793.entry();
            entry_2794.string(item_2792);
        }
        list_2793.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2795 = writer.prefix("Filter");
    if let Some(var_2796) = &input.filters {
        let mut list_2798 = scope_2795.start_list(true, Some("Filter"));
        for item_2797 in var_2796 {
            #[allow(unused_mut)]
            let mut entry_2799 = list_2798.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2799, item_2797)?;
        }
        list_2798.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2800 = writer.prefix("NextToken");
    if let Some(var_2801) = &input.next_token {
        scope_2800.string(var_2801);
    }
    #[allow(unused_mut)]
    let mut scope_2802 = writer.prefix("MaxResults");
    if let Some(var_2803) = &input.max_results {
        scope_2802.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2803).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_launch_template_versions(
    input: &crate::input::DescribeLaunchTemplateVersionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLaunchTemplateVersions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2804 = writer.prefix("DryRun");
    if let Some(var_2805) = &input.dry_run {
        scope_2804.boolean(*var_2805);
    }
    #[allow(unused_mut)]
    let mut scope_2806 = writer.prefix("LaunchTemplateId");
    if let Some(var_2807) = &input.launch_template_id {
        scope_2806.string(var_2807);
    }
    #[allow(unused_mut)]
    let mut scope_2808 = writer.prefix("LaunchTemplateName");
    if let Some(var_2809) = &input.launch_template_name {
        scope_2808.string(var_2809);
    }
    #[allow(unused_mut)]
    let mut scope_2810 = writer.prefix("LaunchTemplateVersion");
    if let Some(var_2811) = &input.versions {
        let mut list_2813 = scope_2810.start_list(true, Some("item"));
        for item_2812 in var_2811 {
            #[allow(unused_mut)]
            let mut entry_2814 = list_2813.entry();
            entry_2814.string(item_2812);
        }
        list_2813.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2815 = writer.prefix("MinVersion");
    if let Some(var_2816) = &input.min_version {
        scope_2815.string(var_2816);
    }
    #[allow(unused_mut)]
    let mut scope_2817 = writer.prefix("MaxVersion");
    if let Some(var_2818) = &input.max_version {
        scope_2817.string(var_2818);
    }
    #[allow(unused_mut)]
    let mut scope_2819 = writer.prefix("NextToken");
    if let Some(var_2820) = &input.next_token {
        scope_2819.string(var_2820);
    }
    #[allow(unused_mut)]
    let mut scope_2821 = writer.prefix("MaxResults");
    if let Some(var_2822) = &input.max_results {
        scope_2821.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2822).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2823 = writer.prefix("Filter");
    if let Some(var_2824) = &input.filters {
        let mut list_2826 = scope_2823.start_list(true, Some("Filter"));
        for item_2825 in var_2824 {
            #[allow(unused_mut)]
            let mut entry_2827 = list_2826.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2827, item_2825)?;
        }
        list_2826.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_route_tables(
    input: &crate::input::DescribeLocalGatewayRouteTablesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayRouteTables",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2828 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_2829) = &input.local_gateway_route_table_ids {
        let mut list_2831 = scope_2828.start_list(true, Some("item"));
        for item_2830 in var_2829 {
            #[allow(unused_mut)]
            let mut entry_2832 = list_2831.entry();
            entry_2832.string(item_2830);
        }
        list_2831.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2833 = writer.prefix("Filter");
    if let Some(var_2834) = &input.filters {
        let mut list_2836 = scope_2833.start_list(true, Some("Filter"));
        for item_2835 in var_2834 {
            #[allow(unused_mut)]
            let mut entry_2837 = list_2836.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2837, item_2835)?;
        }
        list_2836.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2838 = writer.prefix("MaxResults");
    if let Some(var_2839) = &input.max_results {
        scope_2838.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2839).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2840 = writer.prefix("NextToken");
    if let Some(var_2841) = &input.next_token {
        scope_2840.string(var_2841);
    }
    #[allow(unused_mut)]
    let mut scope_2842 = writer.prefix("DryRun");
    if let Some(var_2843) = &input.dry_run {
        scope_2842.boolean(*var_2843);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_route_table_virtual_interface_group_associations(
    input: &crate::input::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2844 = writer.prefix("LocalGatewayRouteTableVirtualInterfaceGroupAssociationId");
    if let Some(var_2845) = &input.local_gateway_route_table_virtual_interface_group_association_ids
    {
        let mut list_2847 = scope_2844.start_list(true, Some("item"));
        for item_2846 in var_2845 {
            #[allow(unused_mut)]
            let mut entry_2848 = list_2847.entry();
            entry_2848.string(item_2846);
        }
        list_2847.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2849 = writer.prefix("Filter");
    if let Some(var_2850) = &input.filters {
        let mut list_2852 = scope_2849.start_list(true, Some("Filter"));
        for item_2851 in var_2850 {
            #[allow(unused_mut)]
            let mut entry_2853 = list_2852.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2853, item_2851)?;
        }
        list_2852.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2854 = writer.prefix("MaxResults");
    if let Some(var_2855) = &input.max_results {
        scope_2854.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2855).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2856 = writer.prefix("NextToken");
    if let Some(var_2857) = &input.next_token {
        scope_2856.string(var_2857);
    }
    #[allow(unused_mut)]
    let mut scope_2858 = writer.prefix("DryRun");
    if let Some(var_2859) = &input.dry_run {
        scope_2858.boolean(*var_2859);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_route_table_vpc_associations(
    input: &crate::input::DescribeLocalGatewayRouteTableVpcAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayRouteTableVpcAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2860 = writer.prefix("LocalGatewayRouteTableVpcAssociationId");
    if let Some(var_2861) = &input.local_gateway_route_table_vpc_association_ids {
        let mut list_2863 = scope_2860.start_list(true, Some("item"));
        for item_2862 in var_2861 {
            #[allow(unused_mut)]
            let mut entry_2864 = list_2863.entry();
            entry_2864.string(item_2862);
        }
        list_2863.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2865 = writer.prefix("Filter");
    if let Some(var_2866) = &input.filters {
        let mut list_2868 = scope_2865.start_list(true, Some("Filter"));
        for item_2867 in var_2866 {
            #[allow(unused_mut)]
            let mut entry_2869 = list_2868.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2869, item_2867)?;
        }
        list_2868.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2870 = writer.prefix("MaxResults");
    if let Some(var_2871) = &input.max_results {
        scope_2870.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2871).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2872 = writer.prefix("NextToken");
    if let Some(var_2873) = &input.next_token {
        scope_2872.string(var_2873);
    }
    #[allow(unused_mut)]
    let mut scope_2874 = writer.prefix("DryRun");
    if let Some(var_2875) = &input.dry_run {
        scope_2874.boolean(*var_2875);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateways(
    input: &crate::input::DescribeLocalGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeLocalGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2876 = writer.prefix("LocalGatewayId");
    if let Some(var_2877) = &input.local_gateway_ids {
        let mut list_2879 = scope_2876.start_list(true, Some("item"));
        for item_2878 in var_2877 {
            #[allow(unused_mut)]
            let mut entry_2880 = list_2879.entry();
            entry_2880.string(item_2878);
        }
        list_2879.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2881 = writer.prefix("Filter");
    if let Some(var_2882) = &input.filters {
        let mut list_2884 = scope_2881.start_list(true, Some("Filter"));
        for item_2883 in var_2882 {
            #[allow(unused_mut)]
            let mut entry_2885 = list_2884.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2885, item_2883)?;
        }
        list_2884.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2886 = writer.prefix("MaxResults");
    if let Some(var_2887) = &input.max_results {
        scope_2886.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2887).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2888 = writer.prefix("NextToken");
    if let Some(var_2889) = &input.next_token {
        scope_2888.string(var_2889);
    }
    #[allow(unused_mut)]
    let mut scope_2890 = writer.prefix("DryRun");
    if let Some(var_2891) = &input.dry_run {
        scope_2890.boolean(*var_2891);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_virtual_interface_groups(
    input: &crate::input::DescribeLocalGatewayVirtualInterfaceGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayVirtualInterfaceGroups",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2892 = writer.prefix("LocalGatewayVirtualInterfaceGroupId");
    if let Some(var_2893) = &input.local_gateway_virtual_interface_group_ids {
        let mut list_2895 = scope_2892.start_list(true, Some("item"));
        for item_2894 in var_2893 {
            #[allow(unused_mut)]
            let mut entry_2896 = list_2895.entry();
            entry_2896.string(item_2894);
        }
        list_2895.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2897 = writer.prefix("Filter");
    if let Some(var_2898) = &input.filters {
        let mut list_2900 = scope_2897.start_list(true, Some("Filter"));
        for item_2899 in var_2898 {
            #[allow(unused_mut)]
            let mut entry_2901 = list_2900.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2901, item_2899)?;
        }
        list_2900.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2902 = writer.prefix("MaxResults");
    if let Some(var_2903) = &input.max_results {
        scope_2902.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2903).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2904 = writer.prefix("NextToken");
    if let Some(var_2905) = &input.next_token {
        scope_2904.string(var_2905);
    }
    #[allow(unused_mut)]
    let mut scope_2906 = writer.prefix("DryRun");
    if let Some(var_2907) = &input.dry_run {
        scope_2906.boolean(*var_2907);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_virtual_interfaces(
    input: &crate::input::DescribeLocalGatewayVirtualInterfacesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayVirtualInterfaces",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2908 = writer.prefix("LocalGatewayVirtualInterfaceId");
    if let Some(var_2909) = &input.local_gateway_virtual_interface_ids {
        let mut list_2911 = scope_2908.start_list(true, Some("item"));
        for item_2910 in var_2909 {
            #[allow(unused_mut)]
            let mut entry_2912 = list_2911.entry();
            entry_2912.string(item_2910);
        }
        list_2911.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2913 = writer.prefix("Filter");
    if let Some(var_2914) = &input.filters {
        let mut list_2916 = scope_2913.start_list(true, Some("Filter"));
        for item_2915 in var_2914 {
            #[allow(unused_mut)]
            let mut entry_2917 = list_2916.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2917, item_2915)?;
        }
        list_2916.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2918 = writer.prefix("MaxResults");
    if let Some(var_2919) = &input.max_results {
        scope_2918.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2919).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2920 = writer.prefix("NextToken");
    if let Some(var_2921) = &input.next_token {
        scope_2920.string(var_2921);
    }
    #[allow(unused_mut)]
    let mut scope_2922 = writer.prefix("DryRun");
    if let Some(var_2923) = &input.dry_run {
        scope_2922.boolean(*var_2923);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_managed_prefix_lists(
    input: &crate::input::DescribeManagedPrefixListsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeManagedPrefixLists", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2924 = writer.prefix("DryRun");
    if let Some(var_2925) = &input.dry_run {
        scope_2924.boolean(*var_2925);
    }
    #[allow(unused_mut)]
    let mut scope_2926 = writer.prefix("Filter");
    if let Some(var_2927) = &input.filters {
        let mut list_2929 = scope_2926.start_list(true, Some("Filter"));
        for item_2928 in var_2927 {
            #[allow(unused_mut)]
            let mut entry_2930 = list_2929.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2930, item_2928)?;
        }
        list_2929.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2931 = writer.prefix("MaxResults");
    if let Some(var_2932) = &input.max_results {
        scope_2931.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2932).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2933 = writer.prefix("NextToken");
    if let Some(var_2934) = &input.next_token {
        scope_2933.string(var_2934);
    }
    #[allow(unused_mut)]
    let mut scope_2935 = writer.prefix("PrefixListId");
    if let Some(var_2936) = &input.prefix_list_ids {
        let mut list_2938 = scope_2935.start_list(true, Some("item"));
        for item_2937 in var_2936 {
            #[allow(unused_mut)]
            let mut entry_2939 = list_2938.entry();
            entry_2939.string(item_2937);
        }
        list_2938.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_moving_addresses(
    input: &crate::input::DescribeMovingAddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeMovingAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2940 = writer.prefix("Filter");
    if let Some(var_2941) = &input.filters {
        let mut list_2943 = scope_2940.start_list(true, Some("Filter"));
        for item_2942 in var_2941 {
            #[allow(unused_mut)]
            let mut entry_2944 = list_2943.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2944, item_2942)?;
        }
        list_2943.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2945 = writer.prefix("DryRun");
    if let Some(var_2946) = &input.dry_run {
        scope_2945.boolean(*var_2946);
    }
    #[allow(unused_mut)]
    let mut scope_2947 = writer.prefix("MaxResults");
    if let Some(var_2948) = &input.max_results {
        scope_2947.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2948).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2949 = writer.prefix("NextToken");
    if let Some(var_2950) = &input.next_token {
        scope_2949.string(var_2950);
    }
    #[allow(unused_mut)]
    let mut scope_2951 = writer.prefix("PublicIp");
    if let Some(var_2952) = &input.public_ips {
        let mut list_2954 = scope_2951.start_list(true, Some("item"));
        for item_2953 in var_2952 {
            #[allow(unused_mut)]
            let mut entry_2955 = list_2954.entry();
            entry_2955.string(item_2953);
        }
        list_2954.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_nat_gateways(
    input: &crate::input::DescribeNatGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeNatGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2956 = writer.prefix("DryRun");
    if let Some(var_2957) = &input.dry_run {
        scope_2956.boolean(*var_2957);
    }
    #[allow(unused_mut)]
    let mut scope_2958 = writer.prefix("Filter");
    if let Some(var_2959) = &input.filter {
        let mut list_2961 = scope_2958.start_list(true, Some("Filter"));
        for item_2960 in var_2959 {
            #[allow(unused_mut)]
            let mut entry_2962 = list_2961.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2962, item_2960)?;
        }
        list_2961.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2963 = writer.prefix("MaxResults");
    if let Some(var_2964) = &input.max_results {
        scope_2963.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2964).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2965 = writer.prefix("NatGatewayId");
    if let Some(var_2966) = &input.nat_gateway_ids {
        let mut list_2968 = scope_2965.start_list(true, Some("item"));
        for item_2967 in var_2966 {
            #[allow(unused_mut)]
            let mut entry_2969 = list_2968.entry();
            entry_2969.string(item_2967);
        }
        list_2968.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2970 = writer.prefix("NextToken");
    if let Some(var_2971) = &input.next_token {
        scope_2970.string(var_2971);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_acls(
    input: &crate::input::DescribeNetworkAclsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkAcls", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2972 = writer.prefix("Filter");
    if let Some(var_2973) = &input.filters {
        let mut list_2975 = scope_2972.start_list(true, Some("Filter"));
        for item_2974 in var_2973 {
            #[allow(unused_mut)]
            let mut entry_2976 = list_2975.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2976, item_2974)?;
        }
        list_2975.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2977 = writer.prefix("DryRun");
    if let Some(var_2978) = &input.dry_run {
        scope_2977.boolean(*var_2978);
    }
    #[allow(unused_mut)]
    let mut scope_2979 = writer.prefix("NetworkAclId");
    if let Some(var_2980) = &input.network_acl_ids {
        let mut list_2982 = scope_2979.start_list(true, Some("item"));
        for item_2981 in var_2980 {
            #[allow(unused_mut)]
            let mut entry_2983 = list_2982.entry();
            entry_2983.string(item_2981);
        }
        list_2982.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2984 = writer.prefix("NextToken");
    if let Some(var_2985) = &input.next_token {
        scope_2984.string(var_2985);
    }
    #[allow(unused_mut)]
    let mut scope_2986 = writer.prefix("MaxResults");
    if let Some(var_2987) = &input.max_results {
        scope_2986.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2987).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_access_scope_analyses(
    input: &crate::input::DescribeNetworkInsightsAccessScopeAnalysesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInsightsAccessScopeAnalyses",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2988 = writer.prefix("NetworkInsightsAccessScopeAnalysisId");
    if let Some(var_2989) = &input.network_insights_access_scope_analysis_ids {
        let mut list_2991 = scope_2988.start_list(true, Some("item"));
        for item_2990 in var_2989 {
            #[allow(unused_mut)]
            let mut entry_2992 = list_2991.entry();
            entry_2992.string(item_2990);
        }
        list_2991.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2993 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_2994) = &input.network_insights_access_scope_id {
        scope_2993.string(var_2994);
    }
    #[allow(unused_mut)]
    let mut scope_2995 = writer.prefix("AnalysisStartTimeBegin");
    if let Some(var_2996) = &input.analysis_start_time_begin {
        scope_2995.date_time(var_2996, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_2997 = writer.prefix("AnalysisStartTimeEnd");
    if let Some(var_2998) = &input.analysis_start_time_end {
        scope_2997.date_time(var_2998, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_2999 = writer.prefix("Filter");
    if let Some(var_3000) = &input.filters {
        let mut list_3002 = scope_2999.start_list(true, Some("Filter"));
        for item_3001 in var_3000 {
            #[allow(unused_mut)]
            let mut entry_3003 = list_3002.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3003, item_3001)?;
        }
        list_3002.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3004 = writer.prefix("MaxResults");
    if let Some(var_3005) = &input.max_results {
        scope_3004.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3005).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3006 = writer.prefix("DryRun");
    if let Some(var_3007) = &input.dry_run {
        scope_3006.boolean(*var_3007);
    }
    #[allow(unused_mut)]
    let mut scope_3008 = writer.prefix("NextToken");
    if let Some(var_3009) = &input.next_token {
        scope_3008.string(var_3009);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_access_scopes(
    input: &crate::input::DescribeNetworkInsightsAccessScopesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInsightsAccessScopes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3010 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_3011) = &input.network_insights_access_scope_ids {
        let mut list_3013 = scope_3010.start_list(true, Some("item"));
        for item_3012 in var_3011 {
            #[allow(unused_mut)]
            let mut entry_3014 = list_3013.entry();
            entry_3014.string(item_3012);
        }
        list_3013.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3015 = writer.prefix("Filter");
    if let Some(var_3016) = &input.filters {
        let mut list_3018 = scope_3015.start_list(true, Some("Filter"));
        for item_3017 in var_3016 {
            #[allow(unused_mut)]
            let mut entry_3019 = list_3018.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3019, item_3017)?;
        }
        list_3018.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3020 = writer.prefix("MaxResults");
    if let Some(var_3021) = &input.max_results {
        scope_3020.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3021).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3022 = writer.prefix("DryRun");
    if let Some(var_3023) = &input.dry_run {
        scope_3022.boolean(*var_3023);
    }
    #[allow(unused_mut)]
    let mut scope_3024 = writer.prefix("NextToken");
    if let Some(var_3025) = &input.next_token {
        scope_3024.string(var_3025);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_analyses(
    input: &crate::input::DescribeNetworkInsightsAnalysesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInsightsAnalyses",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3026 = writer.prefix("NetworkInsightsAnalysisId");
    if let Some(var_3027) = &input.network_insights_analysis_ids {
        let mut list_3029 = scope_3026.start_list(true, Some("item"));
        for item_3028 in var_3027 {
            #[allow(unused_mut)]
            let mut entry_3030 = list_3029.entry();
            entry_3030.string(item_3028);
        }
        list_3029.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3031 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_3032) = &input.network_insights_path_id {
        scope_3031.string(var_3032);
    }
    #[allow(unused_mut)]
    let mut scope_3033 = writer.prefix("AnalysisStartTime");
    if let Some(var_3034) = &input.analysis_start_time {
        scope_3033.date_time(var_3034, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_3035 = writer.prefix("AnalysisEndTime");
    if let Some(var_3036) = &input.analysis_end_time {
        scope_3035.date_time(var_3036, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_3037 = writer.prefix("Filter");
    if let Some(var_3038) = &input.filters {
        let mut list_3040 = scope_3037.start_list(true, Some("Filter"));
        for item_3039 in var_3038 {
            #[allow(unused_mut)]
            let mut entry_3041 = list_3040.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3041, item_3039)?;
        }
        list_3040.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3042 = writer.prefix("MaxResults");
    if let Some(var_3043) = &input.max_results {
        scope_3042.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3043).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3044 = writer.prefix("DryRun");
    if let Some(var_3045) = &input.dry_run {
        scope_3044.boolean(*var_3045);
    }
    #[allow(unused_mut)]
    let mut scope_3046 = writer.prefix("NextToken");
    if let Some(var_3047) = &input.next_token {
        scope_3046.string(var_3047);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_paths(
    input: &crate::input::DescribeNetworkInsightsPathsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInsightsPaths", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3048 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_3049) = &input.network_insights_path_ids {
        let mut list_3051 = scope_3048.start_list(true, Some("item"));
        for item_3050 in var_3049 {
            #[allow(unused_mut)]
            let mut entry_3052 = list_3051.entry();
            entry_3052.string(item_3050);
        }
        list_3051.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3053 = writer.prefix("Filter");
    if let Some(var_3054) = &input.filters {
        let mut list_3056 = scope_3053.start_list(true, Some("Filter"));
        for item_3055 in var_3054 {
            #[allow(unused_mut)]
            let mut entry_3057 = list_3056.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3057, item_3055)?;
        }
        list_3056.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3058 = writer.prefix("MaxResults");
    if let Some(var_3059) = &input.max_results {
        scope_3058.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3059).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3060 = writer.prefix("DryRun");
    if let Some(var_3061) = &input.dry_run {
        scope_3060.boolean(*var_3061);
    }
    #[allow(unused_mut)]
    let mut scope_3062 = writer.prefix("NextToken");
    if let Some(var_3063) = &input.next_token {
        scope_3062.string(var_3063);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_interface_attribute(
    input: &crate::input::DescribeNetworkInterfaceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInterfaceAttribute",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3064 = writer.prefix("Attribute");
    if let Some(var_3065) = &input.attribute {
        scope_3064.string(var_3065.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3066 = writer.prefix("DryRun");
    if let Some(var_3067) = &input.dry_run {
        scope_3066.boolean(*var_3067);
    }
    #[allow(unused_mut)]
    let mut scope_3068 = writer.prefix("NetworkInterfaceId");
    if let Some(var_3069) = &input.network_interface_id {
        scope_3068.string(var_3069);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_interface_permissions(
    input: &crate::input::DescribeNetworkInterfacePermissionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInterfacePermissions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3070 = writer.prefix("NetworkInterfacePermissionId");
    if let Some(var_3071) = &input.network_interface_permission_ids {
        let mut list_3073 = scope_3070.start_list(true, None);
        for item_3072 in var_3071 {
            #[allow(unused_mut)]
            let mut entry_3074 = list_3073.entry();
            entry_3074.string(item_3072);
        }
        list_3073.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3075 = writer.prefix("Filter");
    if let Some(var_3076) = &input.filters {
        let mut list_3078 = scope_3075.start_list(true, Some("Filter"));
        for item_3077 in var_3076 {
            #[allow(unused_mut)]
            let mut entry_3079 = list_3078.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3079, item_3077)?;
        }
        list_3078.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3080 = writer.prefix("NextToken");
    if let Some(var_3081) = &input.next_token {
        scope_3080.string(var_3081);
    }
    #[allow(unused_mut)]
    let mut scope_3082 = writer.prefix("MaxResults");
    if let Some(var_3083) = &input.max_results {
        scope_3082.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3083).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_interfaces(
    input: &crate::input::DescribeNetworkInterfacesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInterfaces", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3084 = writer.prefix("Filter");
    if let Some(var_3085) = &input.filters {
        let mut list_3087 = scope_3084.start_list(true, Some("Filter"));
        for item_3086 in var_3085 {
            #[allow(unused_mut)]
            let mut entry_3088 = list_3087.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3088, item_3086)?;
        }
        list_3087.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3089 = writer.prefix("DryRun");
    if let Some(var_3090) = &input.dry_run {
        scope_3089.boolean(*var_3090);
    }
    #[allow(unused_mut)]
    let mut scope_3091 = writer.prefix("NetworkInterfaceId");
    if let Some(var_3092) = &input.network_interface_ids {
        let mut list_3094 = scope_3091.start_list(true, Some("item"));
        for item_3093 in var_3092 {
            #[allow(unused_mut)]
            let mut entry_3095 = list_3094.entry();
            entry_3095.string(item_3093);
        }
        list_3094.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3096 = writer.prefix("NextToken");
    if let Some(var_3097) = &input.next_token {
        scope_3096.string(var_3097);
    }
    #[allow(unused_mut)]
    let mut scope_3098 = writer.prefix("MaxResults");
    if let Some(var_3099) = &input.max_results {
        scope_3098.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3099).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_placement_groups(
    input: &crate::input::DescribePlacementGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribePlacementGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3100 = writer.prefix("Filter");
    if let Some(var_3101) = &input.filters {
        let mut list_3103 = scope_3100.start_list(true, Some("Filter"));
        for item_3102 in var_3101 {
            #[allow(unused_mut)]
            let mut entry_3104 = list_3103.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3104, item_3102)?;
        }
        list_3103.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3105 = writer.prefix("DryRun");
    if let Some(var_3106) = &input.dry_run {
        scope_3105.boolean(*var_3106);
    }
    #[allow(unused_mut)]
    let mut scope_3107 = writer.prefix("GroupName");
    if let Some(var_3108) = &input.group_names {
        let mut list_3110 = scope_3107.start_list(true, None);
        for item_3109 in var_3108 {
            #[allow(unused_mut)]
            let mut entry_3111 = list_3110.entry();
            entry_3111.string(item_3109);
        }
        list_3110.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3112 = writer.prefix("GroupId");
    if let Some(var_3113) = &input.group_ids {
        let mut list_3115 = scope_3112.start_list(true, Some("GroupId"));
        for item_3114 in var_3113 {
            #[allow(unused_mut)]
            let mut entry_3116 = list_3115.entry();
            entry_3116.string(item_3114);
        }
        list_3115.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_prefix_lists(
    input: &crate::input::DescribePrefixListsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribePrefixLists", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3117 = writer.prefix("DryRun");
    if let Some(var_3118) = &input.dry_run {
        scope_3117.boolean(*var_3118);
    }
    #[allow(unused_mut)]
    let mut scope_3119 = writer.prefix("Filter");
    if let Some(var_3120) = &input.filters {
        let mut list_3122 = scope_3119.start_list(true, Some("Filter"));
        for item_3121 in var_3120 {
            #[allow(unused_mut)]
            let mut entry_3123 = list_3122.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3123, item_3121)?;
        }
        list_3122.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3124 = writer.prefix("MaxResults");
    if let Some(var_3125) = &input.max_results {
        scope_3124.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3125).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3126 = writer.prefix("NextToken");
    if let Some(var_3127) = &input.next_token {
        scope_3126.string(var_3127);
    }
    #[allow(unused_mut)]
    let mut scope_3128 = writer.prefix("PrefixListId");
    if let Some(var_3129) = &input.prefix_list_ids {
        let mut list_3131 = scope_3128.start_list(true, Some("item"));
        for item_3130 in var_3129 {
            #[allow(unused_mut)]
            let mut entry_3132 = list_3131.entry();
            entry_3132.string(item_3130);
        }
        list_3131.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_principal_id_format(
    input: &crate::input::DescribePrincipalIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribePrincipalIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3133 = writer.prefix("DryRun");
    if let Some(var_3134) = &input.dry_run {
        scope_3133.boolean(*var_3134);
    }
    #[allow(unused_mut)]
    let mut scope_3135 = writer.prefix("Resource");
    if let Some(var_3136) = &input.resources {
        let mut list_3138 = scope_3135.start_list(true, Some("item"));
        for item_3137 in var_3136 {
            #[allow(unused_mut)]
            let mut entry_3139 = list_3138.entry();
            entry_3139.string(item_3137);
        }
        list_3138.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3140 = writer.prefix("MaxResults");
    if let Some(var_3141) = &input.max_results {
        scope_3140.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3141).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3142 = writer.prefix("NextToken");
    if let Some(var_3143) = &input.next_token {
        scope_3142.string(var_3143);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_public_ipv4_pools(
    input: &crate::input::DescribePublicIpv4PoolsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribePublicIpv4Pools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3144 = writer.prefix("PoolId");
    if let Some(var_3145) = &input.pool_ids {
        let mut list_3147 = scope_3144.start_list(true, Some("item"));
        for item_3146 in var_3145 {
            #[allow(unused_mut)]
            let mut entry_3148 = list_3147.entry();
            entry_3148.string(item_3146);
        }
        list_3147.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3149 = writer.prefix("NextToken");
    if let Some(var_3150) = &input.next_token {
        scope_3149.string(var_3150);
    }
    #[allow(unused_mut)]
    let mut scope_3151 = writer.prefix("MaxResults");
    if let Some(var_3152) = &input.max_results {
        scope_3151.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3152).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3153 = writer.prefix("Filter");
    if let Some(var_3154) = &input.filters {
        let mut list_3156 = scope_3153.start_list(true, Some("Filter"));
        for item_3155 in var_3154 {
            #[allow(unused_mut)]
            let mut entry_3157 = list_3156.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3157, item_3155)?;
        }
        list_3156.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_regions(
    input: &crate::input::DescribeRegionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeRegions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3158 = writer.prefix("Filter");
    if let Some(var_3159) = &input.filters {
        let mut list_3161 = scope_3158.start_list(true, Some("Filter"));
        for item_3160 in var_3159 {
            #[allow(unused_mut)]
            let mut entry_3162 = list_3161.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3162, item_3160)?;
        }
        list_3161.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3163 = writer.prefix("RegionName");
    if let Some(var_3164) = &input.region_names {
        let mut list_3166 = scope_3163.start_list(true, Some("RegionName"));
        for item_3165 in var_3164 {
            #[allow(unused_mut)]
            let mut entry_3167 = list_3166.entry();
            entry_3167.string(item_3165);
        }
        list_3166.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3168 = writer.prefix("DryRun");
    if let Some(var_3169) = &input.dry_run {
        scope_3168.boolean(*var_3169);
    }
    #[allow(unused_mut)]
    let mut scope_3170 = writer.prefix("AllRegions");
    if let Some(var_3171) = &input.all_regions {
        scope_3170.boolean(*var_3171);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_replace_root_volume_tasks(
    input: &crate::input::DescribeReplaceRootVolumeTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReplaceRootVolumeTasks",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3172 = writer.prefix("ReplaceRootVolumeTaskId");
    if let Some(var_3173) = &input.replace_root_volume_task_ids {
        let mut list_3175 = scope_3172.start_list(true, Some("ReplaceRootVolumeTaskId"));
        for item_3174 in var_3173 {
            #[allow(unused_mut)]
            let mut entry_3176 = list_3175.entry();
            entry_3176.string(item_3174);
        }
        list_3175.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3177 = writer.prefix("Filter");
    if let Some(var_3178) = &input.filters {
        let mut list_3180 = scope_3177.start_list(true, Some("Filter"));
        for item_3179 in var_3178 {
            #[allow(unused_mut)]
            let mut entry_3181 = list_3180.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3181, item_3179)?;
        }
        list_3180.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3182 = writer.prefix("MaxResults");
    if let Some(var_3183) = &input.max_results {
        scope_3182.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3183).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3184 = writer.prefix("NextToken");
    if let Some(var_3185) = &input.next_token {
        scope_3184.string(var_3185);
    }
    #[allow(unused_mut)]
    let mut scope_3186 = writer.prefix("DryRun");
    if let Some(var_3187) = &input.dry_run {
        scope_3186.boolean(*var_3187);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances(
    input: &crate::input::DescribeReservedInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3188 = writer.prefix("Filter");
    if let Some(var_3189) = &input.filters {
        let mut list_3191 = scope_3188.start_list(true, Some("Filter"));
        for item_3190 in var_3189 {
            #[allow(unused_mut)]
            let mut entry_3192 = list_3191.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3192, item_3190)?;
        }
        list_3191.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3193 = writer.prefix("OfferingClass");
    if let Some(var_3194) = &input.offering_class {
        scope_3193.string(var_3194.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3195 = writer.prefix("ReservedInstancesId");
    if let Some(var_3196) = &input.reserved_instances_ids {
        let mut list_3198 = scope_3195.start_list(true, Some("ReservedInstancesId"));
        for item_3197 in var_3196 {
            #[allow(unused_mut)]
            let mut entry_3199 = list_3198.entry();
            entry_3199.string(item_3197);
        }
        list_3198.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3200 = writer.prefix("DryRun");
    if let Some(var_3201) = &input.dry_run {
        scope_3200.boolean(*var_3201);
    }
    #[allow(unused_mut)]
    let mut scope_3202 = writer.prefix("OfferingType");
    if let Some(var_3203) = &input.offering_type {
        scope_3202.string(var_3203.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances_listings(
    input: &crate::input::DescribeReservedInstancesListingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedInstancesListings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3204 = writer.prefix("Filter");
    if let Some(var_3205) = &input.filters {
        let mut list_3207 = scope_3204.start_list(true, Some("Filter"));
        for item_3206 in var_3205 {
            #[allow(unused_mut)]
            let mut entry_3208 = list_3207.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3208, item_3206)?;
        }
        list_3207.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3209 = writer.prefix("ReservedInstancesId");
    if let Some(var_3210) = &input.reserved_instances_id {
        scope_3209.string(var_3210);
    }
    #[allow(unused_mut)]
    let mut scope_3211 = writer.prefix("ReservedInstancesListingId");
    if let Some(var_3212) = &input.reserved_instances_listing_id {
        scope_3211.string(var_3212);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances_modifications(
    input: &crate::input::DescribeReservedInstancesModificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedInstancesModifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3213 = writer.prefix("Filter");
    if let Some(var_3214) = &input.filters {
        let mut list_3216 = scope_3213.start_list(true, Some("Filter"));
        for item_3215 in var_3214 {
            #[allow(unused_mut)]
            let mut entry_3217 = list_3216.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3217, item_3215)?;
        }
        list_3216.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3218 = writer.prefix("ReservedInstancesModificationId");
    if let Some(var_3219) = &input.reserved_instances_modification_ids {
        let mut list_3221 = scope_3218.start_list(true, Some("ReservedInstancesModificationId"));
        for item_3220 in var_3219 {
            #[allow(unused_mut)]
            let mut entry_3222 = list_3221.entry();
            entry_3222.string(item_3220);
        }
        list_3221.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3223 = writer.prefix("NextToken");
    if let Some(var_3224) = &input.next_token {
        scope_3223.string(var_3224);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances_offerings(
    input: &crate::input::DescribeReservedInstancesOfferingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedInstancesOfferings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3225 = writer.prefix("AvailabilityZone");
    if let Some(var_3226) = &input.availability_zone {
        scope_3225.string(var_3226);
    }
    #[allow(unused_mut)]
    let mut scope_3227 = writer.prefix("Filter");
    if let Some(var_3228) = &input.filters {
        let mut list_3230 = scope_3227.start_list(true, Some("Filter"));
        for item_3229 in var_3228 {
            #[allow(unused_mut)]
            let mut entry_3231 = list_3230.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3231, item_3229)?;
        }
        list_3230.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3232 = writer.prefix("IncludeMarketplace");
    if let Some(var_3233) = &input.include_marketplace {
        scope_3232.boolean(*var_3233);
    }
    #[allow(unused_mut)]
    let mut scope_3234 = writer.prefix("InstanceType");
    if let Some(var_3235) = &input.instance_type {
        scope_3234.string(var_3235.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3236 = writer.prefix("MaxDuration");
    if let Some(var_3237) = &input.max_duration {
        scope_3236.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3237).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3238 = writer.prefix("MaxInstanceCount");
    if let Some(var_3239) = &input.max_instance_count {
        scope_3238.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3239).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3240 = writer.prefix("MinDuration");
    if let Some(var_3241) = &input.min_duration {
        scope_3240.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3241).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3242 = writer.prefix("OfferingClass");
    if let Some(var_3243) = &input.offering_class {
        scope_3242.string(var_3243.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3244 = writer.prefix("ProductDescription");
    if let Some(var_3245) = &input.product_description {
        scope_3244.string(var_3245.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3246 = writer.prefix("ReservedInstancesOfferingId");
    if let Some(var_3247) = &input.reserved_instances_offering_ids {
        let mut list_3249 = scope_3246.start_list(true, None);
        for item_3248 in var_3247 {
            #[allow(unused_mut)]
            let mut entry_3250 = list_3249.entry();
            entry_3250.string(item_3248);
        }
        list_3249.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3251 = writer.prefix("DryRun");
    if let Some(var_3252) = &input.dry_run {
        scope_3251.boolean(*var_3252);
    }
    #[allow(unused_mut)]
    let mut scope_3253 = writer.prefix("InstanceTenancy");
    if let Some(var_3254) = &input.instance_tenancy {
        scope_3253.string(var_3254.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3255 = writer.prefix("MaxResults");
    if let Some(var_3256) = &input.max_results {
        scope_3255.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3256).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3257 = writer.prefix("NextToken");
    if let Some(var_3258) = &input.next_token {
        scope_3257.string(var_3258);
    }
    #[allow(unused_mut)]
    let mut scope_3259 = writer.prefix("OfferingType");
    if let Some(var_3260) = &input.offering_type {
        scope_3259.string(var_3260.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_route_tables(
    input: &crate::input::DescribeRouteTablesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeRouteTables", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3261 = writer.prefix("Filter");
    if let Some(var_3262) = &input.filters {
        let mut list_3264 = scope_3261.start_list(true, Some("Filter"));
        for item_3263 in var_3262 {
            #[allow(unused_mut)]
            let mut entry_3265 = list_3264.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3265, item_3263)?;
        }
        list_3264.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3266 = writer.prefix("DryRun");
    if let Some(var_3267) = &input.dry_run {
        scope_3266.boolean(*var_3267);
    }
    #[allow(unused_mut)]
    let mut scope_3268 = writer.prefix("RouteTableId");
    if let Some(var_3269) = &input.route_table_ids {
        let mut list_3271 = scope_3268.start_list(true, Some("item"));
        for item_3270 in var_3269 {
            #[allow(unused_mut)]
            let mut entry_3272 = list_3271.entry();
            entry_3272.string(item_3270);
        }
        list_3271.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3273 = writer.prefix("NextToken");
    if let Some(var_3274) = &input.next_token {
        scope_3273.string(var_3274);
    }
    #[allow(unused_mut)]
    let mut scope_3275 = writer.prefix("MaxResults");
    if let Some(var_3276) = &input.max_results {
        scope_3275.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3276).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_scheduled_instance_availability(
    input: &crate::input::DescribeScheduledInstanceAvailabilityInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeScheduledInstanceAvailability",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3277 = writer.prefix("DryRun");
    if let Some(var_3278) = &input.dry_run {
        scope_3277.boolean(*var_3278);
    }
    #[allow(unused_mut)]
    let mut scope_3279 = writer.prefix("Filter");
    if let Some(var_3280) = &input.filters {
        let mut list_3282 = scope_3279.start_list(true, Some("Filter"));
        for item_3281 in var_3280 {
            #[allow(unused_mut)]
            let mut entry_3283 = list_3282.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3283, item_3281)?;
        }
        list_3282.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3284 = writer.prefix("FirstSlotStartTimeRange");
    if let Some(var_3285) = &input.first_slot_start_time_range {
        crate::query_ser::serialize_structure_crate_model_slot_date_time_range_request(
            scope_3284, var_3285,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_3286 = writer.prefix("MaxResults");
    if let Some(var_3287) = &input.max_results {
        scope_3286.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3287).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3288 = writer.prefix("MaxSlotDurationInHours");
    if let Some(var_3289) = &input.max_slot_duration_in_hours {
        scope_3288.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3289).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3290 = writer.prefix("MinSlotDurationInHours");
    if let Some(var_3291) = &input.min_slot_duration_in_hours {
        scope_3290.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3291).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3292 = writer.prefix("NextToken");
    if let Some(var_3293) = &input.next_token {
        scope_3292.string(var_3293);
    }
    #[allow(unused_mut)]
    let mut scope_3294 = writer.prefix("Recurrence");
    if let Some(var_3295) = &input.recurrence {
        crate::query_ser::serialize_structure_crate_model_scheduled_instance_recurrence_request(
            scope_3294, var_3295,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_scheduled_instances(
    input: &crate::input::DescribeScheduledInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3296 = writer.prefix("DryRun");
    if let Some(var_3297) = &input.dry_run {
        scope_3296.boolean(*var_3297);
    }
    #[allow(unused_mut)]
    let mut scope_3298 = writer.prefix("Filter");
    if let Some(var_3299) = &input.filters {
        let mut list_3301 = scope_3298.start_list(true, Some("Filter"));
        for item_3300 in var_3299 {
            #[allow(unused_mut)]
            let mut entry_3302 = list_3301.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3302, item_3300)?;
        }
        list_3301.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3303 = writer.prefix("MaxResults");
    if let Some(var_3304) = &input.max_results {
        scope_3303.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3304).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3305 = writer.prefix("NextToken");
    if let Some(var_3306) = &input.next_token {
        scope_3305.string(var_3306);
    }
    #[allow(unused_mut)]
    let mut scope_3307 = writer.prefix("ScheduledInstanceId");
    if let Some(var_3308) = &input.scheduled_instance_ids {
        let mut list_3310 = scope_3307.start_list(true, Some("ScheduledInstanceId"));
        for item_3309 in var_3308 {
            #[allow(unused_mut)]
            let mut entry_3311 = list_3310.entry();
            entry_3311.string(item_3309);
        }
        list_3310.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3312 = writer.prefix("SlotStartTimeRange");
    if let Some(var_3313) = &input.slot_start_time_range {
        crate::query_ser::serialize_structure_crate_model_slot_start_time_range_request(
            scope_3312, var_3313,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_security_group_references(
    input: &crate::input::DescribeSecurityGroupReferencesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeSecurityGroupReferences",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3314 = writer.prefix("DryRun");
    if let Some(var_3315) = &input.dry_run {
        scope_3314.boolean(*var_3315);
    }
    #[allow(unused_mut)]
    let mut scope_3316 = writer.prefix("GroupId");
    if let Some(var_3317) = &input.group_id {
        let mut list_3319 = scope_3316.start_list(true, Some("item"));
        for item_3318 in var_3317 {
            #[allow(unused_mut)]
            let mut entry_3320 = list_3319.entry();
            entry_3320.string(item_3318);
        }
        list_3319.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_security_group_rules(
    input: &crate::input::DescribeSecurityGroupRulesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSecurityGroupRules", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3321 = writer.prefix("Filter");
    if let Some(var_3322) = &input.filters {
        let mut list_3324 = scope_3321.start_list(true, Some("Filter"));
        for item_3323 in var_3322 {
            #[allow(unused_mut)]
            let mut entry_3325 = list_3324.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3325, item_3323)?;
        }
        list_3324.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3326 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_3327) = &input.security_group_rule_ids {
        let mut list_3329 = scope_3326.start_list(true, Some("item"));
        for item_3328 in var_3327 {
            #[allow(unused_mut)]
            let mut entry_3330 = list_3329.entry();
            entry_3330.string(item_3328);
        }
        list_3329.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3331 = writer.prefix("DryRun");
    if let Some(var_3332) = &input.dry_run {
        scope_3331.boolean(*var_3332);
    }
    #[allow(unused_mut)]
    let mut scope_3333 = writer.prefix("NextToken");
    if let Some(var_3334) = &input.next_token {
        scope_3333.string(var_3334);
    }
    #[allow(unused_mut)]
    let mut scope_3335 = writer.prefix("MaxResults");
    if let Some(var_3336) = &input.max_results {
        scope_3335.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3336).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_security_groups(
    input: &crate::input::DescribeSecurityGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSecurityGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3337 = writer.prefix("Filter");
    if let Some(var_3338) = &input.filters {
        let mut list_3340 = scope_3337.start_list(true, Some("Filter"));
        for item_3339 in var_3338 {
            #[allow(unused_mut)]
            let mut entry_3341 = list_3340.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3341, item_3339)?;
        }
        list_3340.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3342 = writer.prefix("GroupId");
    if let Some(var_3343) = &input.group_ids {
        let mut list_3345 = scope_3342.start_list(true, Some("groupId"));
        for item_3344 in var_3343 {
            #[allow(unused_mut)]
            let mut entry_3346 = list_3345.entry();
            entry_3346.string(item_3344);
        }
        list_3345.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3347 = writer.prefix("GroupName");
    if let Some(var_3348) = &input.group_names {
        let mut list_3350 = scope_3347.start_list(true, Some("GroupName"));
        for item_3349 in var_3348 {
            #[allow(unused_mut)]
            let mut entry_3351 = list_3350.entry();
            entry_3351.string(item_3349);
        }
        list_3350.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3352 = writer.prefix("DryRun");
    if let Some(var_3353) = &input.dry_run {
        scope_3352.boolean(*var_3353);
    }
    #[allow(unused_mut)]
    let mut scope_3354 = writer.prefix("NextToken");
    if let Some(var_3355) = &input.next_token {
        scope_3354.string(var_3355);
    }
    #[allow(unused_mut)]
    let mut scope_3356 = writer.prefix("MaxResults");
    if let Some(var_3357) = &input.max_results {
        scope_3356.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3357).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshot_attribute(
    input: &crate::input::DescribeSnapshotAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3358 = writer.prefix("Attribute");
    if let Some(var_3359) = &input.attribute {
        scope_3358.string(var_3359.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3360 = writer.prefix("SnapshotId");
    if let Some(var_3361) = &input.snapshot_id {
        scope_3360.string(var_3361);
    }
    #[allow(unused_mut)]
    let mut scope_3362 = writer.prefix("DryRun");
    if let Some(var_3363) = &input.dry_run {
        scope_3362.boolean(*var_3363);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshots(
    input: &crate::input::DescribeSnapshotsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshots", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3364 = writer.prefix("Filter");
    if let Some(var_3365) = &input.filters {
        let mut list_3367 = scope_3364.start_list(true, Some("Filter"));
        for item_3366 in var_3365 {
            #[allow(unused_mut)]
            let mut entry_3368 = list_3367.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3368, item_3366)?;
        }
        list_3367.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3369 = writer.prefix("MaxResults");
    if let Some(var_3370) = &input.max_results {
        scope_3369.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3370).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3371 = writer.prefix("NextToken");
    if let Some(var_3372) = &input.next_token {
        scope_3371.string(var_3372);
    }
    #[allow(unused_mut)]
    let mut scope_3373 = writer.prefix("Owner");
    if let Some(var_3374) = &input.owner_ids {
        let mut list_3376 = scope_3373.start_list(true, Some("Owner"));
        for item_3375 in var_3374 {
            #[allow(unused_mut)]
            let mut entry_3377 = list_3376.entry();
            entry_3377.string(item_3375);
        }
        list_3376.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3378 = writer.prefix("RestorableBy");
    if let Some(var_3379) = &input.restorable_by_user_ids {
        let mut list_3381 = scope_3378.start_list(true, None);
        for item_3380 in var_3379 {
            #[allow(unused_mut)]
            let mut entry_3382 = list_3381.entry();
            entry_3382.string(item_3380);
        }
        list_3381.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3383 = writer.prefix("SnapshotId");
    if let Some(var_3384) = &input.snapshot_ids {
        let mut list_3386 = scope_3383.start_list(true, Some("SnapshotId"));
        for item_3385 in var_3384 {
            #[allow(unused_mut)]
            let mut entry_3387 = list_3386.entry();
            entry_3387.string(item_3385);
        }
        list_3386.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3388 = writer.prefix("DryRun");
    if let Some(var_3389) = &input.dry_run {
        scope_3388.boolean(*var_3389);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshot_tier_status(
    input: &crate::input::DescribeSnapshotTierStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshotTierStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3390 = writer.prefix("Filter");
    if let Some(var_3391) = &input.filters {
        let mut list_3393 = scope_3390.start_list(true, Some("Filter"));
        for item_3392 in var_3391 {
            #[allow(unused_mut)]
            let mut entry_3394 = list_3393.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3394, item_3392)?;
        }
        list_3393.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3395 = writer.prefix("DryRun");
    if let Some(var_3396) = &input.dry_run {
        scope_3395.boolean(*var_3396);
    }
    #[allow(unused_mut)]
    let mut scope_3397 = writer.prefix("NextToken");
    if let Some(var_3398) = &input.next_token {
        scope_3397.string(var_3398);
    }
    #[allow(unused_mut)]
    let mut scope_3399 = writer.prefix("MaxResults");
    if let Some(var_3400) = &input.max_results {
        scope_3399.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3400).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_datafeed_subscription(
    input: &crate::input::DescribeSpotDatafeedSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeSpotDatafeedSubscription",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3401 = writer.prefix("DryRun");
    if let Some(var_3402) = &input.dry_run {
        scope_3401.boolean(*var_3402);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_fleet_instances(
    input: &crate::input::DescribeSpotFleetInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotFleetInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3403 = writer.prefix("DryRun");
    if let Some(var_3404) = &input.dry_run {
        scope_3403.boolean(*var_3404);
    }
    #[allow(unused_mut)]
    let mut scope_3405 = writer.prefix("MaxResults");
    if let Some(var_3406) = &input.max_results {
        scope_3405.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3406).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3407 = writer.prefix("NextToken");
    if let Some(var_3408) = &input.next_token {
        scope_3407.string(var_3408);
    }
    #[allow(unused_mut)]
    let mut scope_3409 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3410) = &input.spot_fleet_request_id {
        scope_3409.string(var_3410);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_fleet_request_history(
    input: &crate::input::DescribeSpotFleetRequestHistoryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeSpotFleetRequestHistory",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3411 = writer.prefix("DryRun");
    if let Some(var_3412) = &input.dry_run {
        scope_3411.boolean(*var_3412);
    }
    #[allow(unused_mut)]
    let mut scope_3413 = writer.prefix("EventType");
    if let Some(var_3414) = &input.event_type {
        scope_3413.string(var_3414.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3415 = writer.prefix("MaxResults");
    if let Some(var_3416) = &input.max_results {
        scope_3415.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3416).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3417 = writer.prefix("NextToken");
    if let Some(var_3418) = &input.next_token {
        scope_3417.string(var_3418);
    }
    #[allow(unused_mut)]
    let mut scope_3419 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3420) = &input.spot_fleet_request_id {
        scope_3419.string(var_3420);
    }
    #[allow(unused_mut)]
    let mut scope_3421 = writer.prefix("StartTime");
    if let Some(var_3422) = &input.start_time {
        scope_3421.date_time(var_3422, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_fleet_requests(
    input: &crate::input::DescribeSpotFleetRequestsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotFleetRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3423 = writer.prefix("DryRun");
    if let Some(var_3424) = &input.dry_run {
        scope_3423.boolean(*var_3424);
    }
    #[allow(unused_mut)]
    let mut scope_3425 = writer.prefix("MaxResults");
    if let Some(var_3426) = &input.max_results {
        scope_3425.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3426).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3427 = writer.prefix("NextToken");
    if let Some(var_3428) = &input.next_token {
        scope_3427.string(var_3428);
    }
    #[allow(unused_mut)]
    let mut scope_3429 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3430) = &input.spot_fleet_request_ids {
        let mut list_3432 = scope_3429.start_list(true, Some("item"));
        for item_3431 in var_3430 {
            #[allow(unused_mut)]
            let mut entry_3433 = list_3432.entry();
            entry_3433.string(item_3431);
        }
        list_3432.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_instance_requests(
    input: &crate::input::DescribeSpotInstanceRequestsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotInstanceRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3434 = writer.prefix("Filter");
    if let Some(var_3435) = &input.filters {
        let mut list_3437 = scope_3434.start_list(true, Some("Filter"));
        for item_3436 in var_3435 {
            #[allow(unused_mut)]
            let mut entry_3438 = list_3437.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3438, item_3436)?;
        }
        list_3437.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3439 = writer.prefix("DryRun");
    if let Some(var_3440) = &input.dry_run {
        scope_3439.boolean(*var_3440);
    }
    #[allow(unused_mut)]
    let mut scope_3441 = writer.prefix("SpotInstanceRequestId");
    if let Some(var_3442) = &input.spot_instance_request_ids {
        let mut list_3444 = scope_3441.start_list(true, Some("SpotInstanceRequestId"));
        for item_3443 in var_3442 {
            #[allow(unused_mut)]
            let mut entry_3445 = list_3444.entry();
            entry_3445.string(item_3443);
        }
        list_3444.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3446 = writer.prefix("NextToken");
    if let Some(var_3447) = &input.next_token {
        scope_3446.string(var_3447);
    }
    #[allow(unused_mut)]
    let mut scope_3448 = writer.prefix("MaxResults");
    if let Some(var_3449) = &input.max_results {
        scope_3448.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3449).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_price_history(
    input: &crate::input::DescribeSpotPriceHistoryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotPriceHistory", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3450 = writer.prefix("Filter");
    if let Some(var_3451) = &input.filters {
        let mut list_3453 = scope_3450.start_list(true, Some("Filter"));
        for item_3452 in var_3451 {
            #[allow(unused_mut)]
            let mut entry_3454 = list_3453.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3454, item_3452)?;
        }
        list_3453.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3455 = writer.prefix("AvailabilityZone");
    if let Some(var_3456) = &input.availability_zone {
        scope_3455.string(var_3456);
    }
    #[allow(unused_mut)]
    let mut scope_3457 = writer.prefix("DryRun");
    if let Some(var_3458) = &input.dry_run {
        scope_3457.boolean(*var_3458);
    }
    #[allow(unused_mut)]
    let mut scope_3459 = writer.prefix("EndTime");
    if let Some(var_3460) = &input.end_time {
        scope_3459.date_time(var_3460, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_3461 = writer.prefix("InstanceType");
    if let Some(var_3462) = &input.instance_types {
        let mut list_3464 = scope_3461.start_list(true, None);
        for item_3463 in var_3462 {
            #[allow(unused_mut)]
            let mut entry_3465 = list_3464.entry();
            entry_3465.string(item_3463.as_str());
        }
        list_3464.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3466 = writer.prefix("MaxResults");
    if let Some(var_3467) = &input.max_results {
        scope_3466.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3467).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3468 = writer.prefix("NextToken");
    if let Some(var_3469) = &input.next_token {
        scope_3468.string(var_3469);
    }
    #[allow(unused_mut)]
    let mut scope_3470 = writer.prefix("ProductDescription");
    if let Some(var_3471) = &input.product_descriptions {
        let mut list_3473 = scope_3470.start_list(true, None);
        for item_3472 in var_3471 {
            #[allow(unused_mut)]
            let mut entry_3474 = list_3473.entry();
            entry_3474.string(item_3472);
        }
        list_3473.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3475 = writer.prefix("StartTime");
    if let Some(var_3476) = &input.start_time {
        scope_3475.date_time(var_3476, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_stale_security_groups(
    input: &crate::input::DescribeStaleSecurityGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeStaleSecurityGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3477 = writer.prefix("DryRun");
    if let Some(var_3478) = &input.dry_run {
        scope_3477.boolean(*var_3478);
    }
    #[allow(unused_mut)]
    let mut scope_3479 = writer.prefix("MaxResults");
    if let Some(var_3480) = &input.max_results {
        scope_3479.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3480).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3481 = writer.prefix("NextToken");
    if let Some(var_3482) = &input.next_token {
        scope_3481.string(var_3482);
    }
    #[allow(unused_mut)]
    let mut scope_3483 = writer.prefix("VpcId");
    if let Some(var_3484) = &input.vpc_id {
        scope_3483.string(var_3484);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_store_image_tasks(
    input: &crate::input::DescribeStoreImageTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeStoreImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3485 = writer.prefix("ImageId");
    if let Some(var_3486) = &input.image_ids {
        let mut list_3488 = scope_3485.start_list(true, Some("item"));
        for item_3487 in var_3486 {
            #[allow(unused_mut)]
            let mut entry_3489 = list_3488.entry();
            entry_3489.string(item_3487);
        }
        list_3488.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3490 = writer.prefix("DryRun");
    if let Some(var_3491) = &input.dry_run {
        scope_3490.boolean(*var_3491);
    }
    #[allow(unused_mut)]
    let mut scope_3492 = writer.prefix("Filter");
    if let Some(var_3493) = &input.filters {
        let mut list_3495 = scope_3492.start_list(true, Some("Filter"));
        for item_3494 in var_3493 {
            #[allow(unused_mut)]
            let mut entry_3496 = list_3495.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3496, item_3494)?;
        }
        list_3495.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3497 = writer.prefix("NextToken");
    if let Some(var_3498) = &input.next_token {
        scope_3497.string(var_3498);
    }
    #[allow(unused_mut)]
    let mut scope_3499 = writer.prefix("MaxResults");
    if let Some(var_3500) = &input.max_results {
        scope_3499.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3500).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_subnets(
    input: &crate::input::DescribeSubnetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeSubnets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3501 = writer.prefix("Filter");
    if let Some(var_3502) = &input.filters {
        let mut list_3504 = scope_3501.start_list(true, Some("Filter"));
        for item_3503 in var_3502 {
            #[allow(unused_mut)]
            let mut entry_3505 = list_3504.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3505, item_3503)?;
        }
        list_3504.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3506 = writer.prefix("SubnetId");
    if let Some(var_3507) = &input.subnet_ids {
        let mut list_3509 = scope_3506.start_list(true, Some("SubnetId"));
        for item_3508 in var_3507 {
            #[allow(unused_mut)]
            let mut entry_3510 = list_3509.entry();
            entry_3510.string(item_3508);
        }
        list_3509.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3511 = writer.prefix("DryRun");
    if let Some(var_3512) = &input.dry_run {
        scope_3511.boolean(*var_3512);
    }
    #[allow(unused_mut)]
    let mut scope_3513 = writer.prefix("NextToken");
    if let Some(var_3514) = &input.next_token {
        scope_3513.string(var_3514);
    }
    #[allow(unused_mut)]
    let mut scope_3515 = writer.prefix("MaxResults");
    if let Some(var_3516) = &input.max_results {
        scope_3515.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3516).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_tags(
    input: &crate::input::DescribeTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3517 = writer.prefix("DryRun");
    if let Some(var_3518) = &input.dry_run {
        scope_3517.boolean(*var_3518);
    }
    #[allow(unused_mut)]
    let mut scope_3519 = writer.prefix("Filter");
    if let Some(var_3520) = &input.filters {
        let mut list_3522 = scope_3519.start_list(true, Some("Filter"));
        for item_3521 in var_3520 {
            #[allow(unused_mut)]
            let mut entry_3523 = list_3522.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3523, item_3521)?;
        }
        list_3522.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3524 = writer.prefix("MaxResults");
    if let Some(var_3525) = &input.max_results {
        scope_3524.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3525).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3526 = writer.prefix("NextToken");
    if let Some(var_3527) = &input.next_token {
        scope_3526.string(var_3527);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_traffic_mirror_filters(
    input: &crate::input::DescribeTrafficMirrorFiltersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorFilters", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3528 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_3529) = &input.traffic_mirror_filter_ids {
        let mut list_3531 = scope_3528.start_list(true, Some("item"));
        for item_3530 in var_3529 {
            #[allow(unused_mut)]
            let mut entry_3532 = list_3531.entry();
            entry_3532.string(item_3530);
        }
        list_3531.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3533 = writer.prefix("DryRun");
    if let Some(var_3534) = &input.dry_run {
        scope_3533.boolean(*var_3534);
    }
    #[allow(unused_mut)]
    let mut scope_3535 = writer.prefix("Filter");
    if let Some(var_3536) = &input.filters {
        let mut list_3538 = scope_3535.start_list(true, Some("Filter"));
        for item_3537 in var_3536 {
            #[allow(unused_mut)]
            let mut entry_3539 = list_3538.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3539, item_3537)?;
        }
        list_3538.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3540 = writer.prefix("MaxResults");
    if let Some(var_3541) = &input.max_results {
        scope_3540.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3541).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3542 = writer.prefix("NextToken");
    if let Some(var_3543) = &input.next_token {
        scope_3542.string(var_3543);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_traffic_mirror_sessions(
    input: &crate::input::DescribeTrafficMirrorSessionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorSessions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3544 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_3545) = &input.traffic_mirror_session_ids {
        let mut list_3547 = scope_3544.start_list(true, Some("item"));
        for item_3546 in var_3545 {
            #[allow(unused_mut)]
            let mut entry_3548 = list_3547.entry();
            entry_3548.string(item_3546);
        }
        list_3547.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3549 = writer.prefix("DryRun");
    if let Some(var_3550) = &input.dry_run {
        scope_3549.boolean(*var_3550);
    }
    #[allow(unused_mut)]
    let mut scope_3551 = writer.prefix("Filter");
    if let Some(var_3552) = &input.filters {
        let mut list_3554 = scope_3551.start_list(true, Some("Filter"));
        for item_3553 in var_3552 {
            #[allow(unused_mut)]
            let mut entry_3555 = list_3554.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3555, item_3553)?;
        }
        list_3554.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3556 = writer.prefix("MaxResults");
    if let Some(var_3557) = &input.max_results {
        scope_3556.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3557).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3558 = writer.prefix("NextToken");
    if let Some(var_3559) = &input.next_token {
        scope_3558.string(var_3559);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_traffic_mirror_targets(
    input: &crate::input::DescribeTrafficMirrorTargetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorTargets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3560 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_3561) = &input.traffic_mirror_target_ids {
        let mut list_3563 = scope_3560.start_list(true, Some("item"));
        for item_3562 in var_3561 {
            #[allow(unused_mut)]
            let mut entry_3564 = list_3563.entry();
            entry_3564.string(item_3562);
        }
        list_3563.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3565 = writer.prefix("DryRun");
    if let Some(var_3566) = &input.dry_run {
        scope_3565.boolean(*var_3566);
    }
    #[allow(unused_mut)]
    let mut scope_3567 = writer.prefix("Filter");
    if let Some(var_3568) = &input.filters {
        let mut list_3570 = scope_3567.start_list(true, Some("Filter"));
        for item_3569 in var_3568 {
            #[allow(unused_mut)]
            let mut entry_3571 = list_3570.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3571, item_3569)?;
        }
        list_3570.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3572 = writer.prefix("MaxResults");
    if let Some(var_3573) = &input.max_results {
        scope_3572.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3573).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3574 = writer.prefix("NextToken");
    if let Some(var_3575) = &input.next_token {
        scope_3574.string(var_3575);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_attachments(
    input: &crate::input::DescribeTransitGatewayAttachmentsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayAttachments",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3576 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3577) = &input.transit_gateway_attachment_ids {
        let mut list_3579 = scope_3576.start_list(true, None);
        for item_3578 in var_3577 {
            #[allow(unused_mut)]
            let mut entry_3580 = list_3579.entry();
            entry_3580.string(item_3578);
        }
        list_3579.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3581 = writer.prefix("Filter");
    if let Some(var_3582) = &input.filters {
        let mut list_3584 = scope_3581.start_list(true, Some("Filter"));
        for item_3583 in var_3582 {
            #[allow(unused_mut)]
            let mut entry_3585 = list_3584.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3585, item_3583)?;
        }
        list_3584.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3586 = writer.prefix("MaxResults");
    if let Some(var_3587) = &input.max_results {
        scope_3586.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3587).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3588 = writer.prefix("NextToken");
    if let Some(var_3589) = &input.next_token {
        scope_3588.string(var_3589);
    }
    #[allow(unused_mut)]
    let mut scope_3590 = writer.prefix("DryRun");
    if let Some(var_3591) = &input.dry_run {
        scope_3590.boolean(*var_3591);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_connect_peers(
    input: &crate::input::DescribeTransitGatewayConnectPeersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayConnectPeers",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3592 = writer.prefix("TransitGatewayConnectPeerIds");
    if let Some(var_3593) = &input.transit_gateway_connect_peer_ids {
        let mut list_3595 = scope_3592.start_list(true, Some("item"));
        for item_3594 in var_3593 {
            #[allow(unused_mut)]
            let mut entry_3596 = list_3595.entry();
            entry_3596.string(item_3594);
        }
        list_3595.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3597 = writer.prefix("Filter");
    if let Some(var_3598) = &input.filters {
        let mut list_3600 = scope_3597.start_list(true, Some("Filter"));
        for item_3599 in var_3598 {
            #[allow(unused_mut)]
            let mut entry_3601 = list_3600.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3601, item_3599)?;
        }
        list_3600.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3602 = writer.prefix("MaxResults");
    if let Some(var_3603) = &input.max_results {
        scope_3602.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3603).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3604 = writer.prefix("NextToken");
    if let Some(var_3605) = &input.next_token {
        scope_3604.string(var_3605);
    }
    #[allow(unused_mut)]
    let mut scope_3606 = writer.prefix("DryRun");
    if let Some(var_3607) = &input.dry_run {
        scope_3606.boolean(*var_3607);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_connects(
    input: &crate::input::DescribeTransitGatewayConnectsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayConnects",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3608 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3609) = &input.transit_gateway_attachment_ids {
        let mut list_3611 = scope_3608.start_list(true, None);
        for item_3610 in var_3609 {
            #[allow(unused_mut)]
            let mut entry_3612 = list_3611.entry();
            entry_3612.string(item_3610);
        }
        list_3611.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3613 = writer.prefix("Filter");
    if let Some(var_3614) = &input.filters {
        let mut list_3616 = scope_3613.start_list(true, Some("Filter"));
        for item_3615 in var_3614 {
            #[allow(unused_mut)]
            let mut entry_3617 = list_3616.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3617, item_3615)?;
        }
        list_3616.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3618 = writer.prefix("MaxResults");
    if let Some(var_3619) = &input.max_results {
        scope_3618.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3619).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3620 = writer.prefix("NextToken");
    if let Some(var_3621) = &input.next_token {
        scope_3620.string(var_3621);
    }
    #[allow(unused_mut)]
    let mut scope_3622 = writer.prefix("DryRun");
    if let Some(var_3623) = &input.dry_run {
        scope_3622.boolean(*var_3623);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_multicast_domains(
    input: &crate::input::DescribeTransitGatewayMulticastDomainsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayMulticastDomains",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3624 = writer.prefix("TransitGatewayMulticastDomainIds");
    if let Some(var_3625) = &input.transit_gateway_multicast_domain_ids {
        let mut list_3627 = scope_3624.start_list(true, Some("item"));
        for item_3626 in var_3625 {
            #[allow(unused_mut)]
            let mut entry_3628 = list_3627.entry();
            entry_3628.string(item_3626);
        }
        list_3627.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3629 = writer.prefix("Filter");
    if let Some(var_3630) = &input.filters {
        let mut list_3632 = scope_3629.start_list(true, Some("Filter"));
        for item_3631 in var_3630 {
            #[allow(unused_mut)]
            let mut entry_3633 = list_3632.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3633, item_3631)?;
        }
        list_3632.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3634 = writer.prefix("MaxResults");
    if let Some(var_3635) = &input.max_results {
        scope_3634.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3635).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3636 = writer.prefix("NextToken");
    if let Some(var_3637) = &input.next_token {
        scope_3636.string(var_3637);
    }
    #[allow(unused_mut)]
    let mut scope_3638 = writer.prefix("DryRun");
    if let Some(var_3639) = &input.dry_run {
        scope_3638.boolean(*var_3639);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_peering_attachments(
    input: &crate::input::DescribeTransitGatewayPeeringAttachmentsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayPeeringAttachments",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3640 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3641) = &input.transit_gateway_attachment_ids {
        let mut list_3643 = scope_3640.start_list(true, None);
        for item_3642 in var_3641 {
            #[allow(unused_mut)]
            let mut entry_3644 = list_3643.entry();
            entry_3644.string(item_3642);
        }
        list_3643.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3645 = writer.prefix("Filter");
    if let Some(var_3646) = &input.filters {
        let mut list_3648 = scope_3645.start_list(true, Some("Filter"));
        for item_3647 in var_3646 {
            #[allow(unused_mut)]
            let mut entry_3649 = list_3648.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3649, item_3647)?;
        }
        list_3648.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3650 = writer.prefix("MaxResults");
    if let Some(var_3651) = &input.max_results {
        scope_3650.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3651).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3652 = writer.prefix("NextToken");
    if let Some(var_3653) = &input.next_token {
        scope_3652.string(var_3653);
    }
    #[allow(unused_mut)]
    let mut scope_3654 = writer.prefix("DryRun");
    if let Some(var_3655) = &input.dry_run {
        scope_3654.boolean(*var_3655);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_route_tables(
    input: &crate::input::DescribeTransitGatewayRouteTablesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayRouteTables",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3656 = writer.prefix("TransitGatewayRouteTableIds");
    if let Some(var_3657) = &input.transit_gateway_route_table_ids {
        let mut list_3659 = scope_3656.start_list(true, Some("item"));
        for item_3658 in var_3657 {
            #[allow(unused_mut)]
            let mut entry_3660 = list_3659.entry();
            entry_3660.string(item_3658);
        }
        list_3659.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3661 = writer.prefix("Filter");
    if let Some(var_3662) = &input.filters {
        let mut list_3664 = scope_3661.start_list(true, Some("Filter"));
        for item_3663 in var_3662 {
            #[allow(unused_mut)]
            let mut entry_3665 = list_3664.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3665, item_3663)?;
        }
        list_3664.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3666 = writer.prefix("MaxResults");
    if let Some(var_3667) = &input.max_results {
        scope_3666.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3667).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3668 = writer.prefix("NextToken");
    if let Some(var_3669) = &input.next_token {
        scope_3668.string(var_3669);
    }
    #[allow(unused_mut)]
    let mut scope_3670 = writer.prefix("DryRun");
    if let Some(var_3671) = &input.dry_run {
        scope_3670.boolean(*var_3671);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateways(
    input: &crate::input::DescribeTransitGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTransitGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3672 = writer.prefix("TransitGatewayIds");
    if let Some(var_3673) = &input.transit_gateway_ids {
        let mut list_3675 = scope_3672.start_list(true, Some("item"));
        for item_3674 in var_3673 {
            #[allow(unused_mut)]
            let mut entry_3676 = list_3675.entry();
            entry_3676.string(item_3674);
        }
        list_3675.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3677 = writer.prefix("Filter");
    if let Some(var_3678) = &input.filters {
        let mut list_3680 = scope_3677.start_list(true, Some("Filter"));
        for item_3679 in var_3678 {
            #[allow(unused_mut)]
            let mut entry_3681 = list_3680.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3681, item_3679)?;
        }
        list_3680.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3682 = writer.prefix("MaxResults");
    if let Some(var_3683) = &input.max_results {
        scope_3682.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3683).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3684 = writer.prefix("NextToken");
    if let Some(var_3685) = &input.next_token {
        scope_3684.string(var_3685);
    }
    #[allow(unused_mut)]
    let mut scope_3686 = writer.prefix("DryRun");
    if let Some(var_3687) = &input.dry_run {
        scope_3686.boolean(*var_3687);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_vpc_attachments(
    input: &crate::input::DescribeTransitGatewayVpcAttachmentsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayVpcAttachments",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3688 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3689) = &input.transit_gateway_attachment_ids {
        let mut list_3691 = scope_3688.start_list(true, None);
        for item_3690 in var_3689 {
            #[allow(unused_mut)]
            let mut entry_3692 = list_3691.entry();
            entry_3692.string(item_3690);
        }
        list_3691.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3693 = writer.prefix("Filter");
    if let Some(var_3694) = &input.filters {
        let mut list_3696 = scope_3693.start_list(true, Some("Filter"));
        for item_3695 in var_3694 {
            #[allow(unused_mut)]
            let mut entry_3697 = list_3696.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3697, item_3695)?;
        }
        list_3696.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3698 = writer.prefix("MaxResults");
    if let Some(var_3699) = &input.max_results {
        scope_3698.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3699).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3700 = writer.prefix("NextToken");
    if let Some(var_3701) = &input.next_token {
        scope_3700.string(var_3701);
    }
    #[allow(unused_mut)]
    let mut scope_3702 = writer.prefix("DryRun");
    if let Some(var_3703) = &input.dry_run {
        scope_3702.boolean(*var_3703);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_trunk_interface_associations(
    input: &crate::input::DescribeTrunkInterfaceAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTrunkInterfaceAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3704 = writer.prefix("AssociationId");
    if let Some(var_3705) = &input.association_ids {
        let mut list_3707 = scope_3704.start_list(true, Some("item"));
        for item_3706 in var_3705 {
            #[allow(unused_mut)]
            let mut entry_3708 = list_3707.entry();
            entry_3708.string(item_3706);
        }
        list_3707.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3709 = writer.prefix("DryRun");
    if let Some(var_3710) = &input.dry_run {
        scope_3709.boolean(*var_3710);
    }
    #[allow(unused_mut)]
    let mut scope_3711 = writer.prefix("Filter");
    if let Some(var_3712) = &input.filters {
        let mut list_3714 = scope_3711.start_list(true, Some("Filter"));
        for item_3713 in var_3712 {
            #[allow(unused_mut)]
            let mut entry_3715 = list_3714.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3715, item_3713)?;
        }
        list_3714.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3716 = writer.prefix("NextToken");
    if let Some(var_3717) = &input.next_token {
        scope_3716.string(var_3717);
    }
    #[allow(unused_mut)]
    let mut scope_3718 = writer.prefix("MaxResults");
    if let Some(var_3719) = &input.max_results {
        scope_3718.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3719).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volume_attribute(
    input: &crate::input::DescribeVolumeAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumeAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3720 = writer.prefix("Attribute");
    if let Some(var_3721) = &input.attribute {
        scope_3720.string(var_3721.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3722 = writer.prefix("VolumeId");
    if let Some(var_3723) = &input.volume_id {
        scope_3722.string(var_3723);
    }
    #[allow(unused_mut)]
    let mut scope_3724 = writer.prefix("DryRun");
    if let Some(var_3725) = &input.dry_run {
        scope_3724.boolean(*var_3725);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volumes(
    input: &crate::input::DescribeVolumesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3726 = writer.prefix("Filter");
    if let Some(var_3727) = &input.filters {
        let mut list_3729 = scope_3726.start_list(true, Some("Filter"));
        for item_3728 in var_3727 {
            #[allow(unused_mut)]
            let mut entry_3730 = list_3729.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3730, item_3728)?;
        }
        list_3729.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3731 = writer.prefix("VolumeId");
    if let Some(var_3732) = &input.volume_ids {
        let mut list_3734 = scope_3731.start_list(true, Some("VolumeId"));
        for item_3733 in var_3732 {
            #[allow(unused_mut)]
            let mut entry_3735 = list_3734.entry();
            entry_3735.string(item_3733);
        }
        list_3734.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3736 = writer.prefix("DryRun");
    if let Some(var_3737) = &input.dry_run {
        scope_3736.boolean(*var_3737);
    }
    #[allow(unused_mut)]
    let mut scope_3738 = writer.prefix("MaxResults");
    if let Some(var_3739) = &input.max_results {
        scope_3738.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3739).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3740 = writer.prefix("NextToken");
    if let Some(var_3741) = &input.next_token {
        scope_3740.string(var_3741);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volumes_modifications(
    input: &crate::input::DescribeVolumesModificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumesModifications", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3742 = writer.prefix("DryRun");
    if let Some(var_3743) = &input.dry_run {
        scope_3742.boolean(*var_3743);
    }
    #[allow(unused_mut)]
    let mut scope_3744 = writer.prefix("VolumeId");
    if let Some(var_3745) = &input.volume_ids {
        let mut list_3747 = scope_3744.start_list(true, Some("VolumeId"));
        for item_3746 in var_3745 {
            #[allow(unused_mut)]
            let mut entry_3748 = list_3747.entry();
            entry_3748.string(item_3746);
        }
        list_3747.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3749 = writer.prefix("Filter");
    if let Some(var_3750) = &input.filters {
        let mut list_3752 = scope_3749.start_list(true, Some("Filter"));
        for item_3751 in var_3750 {
            #[allow(unused_mut)]
            let mut entry_3753 = list_3752.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3753, item_3751)?;
        }
        list_3752.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3754 = writer.prefix("NextToken");
    if let Some(var_3755) = &input.next_token {
        scope_3754.string(var_3755);
    }
    #[allow(unused_mut)]
    let mut scope_3756 = writer.prefix("MaxResults");
    if let Some(var_3757) = &input.max_results {
        scope_3756.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3757).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volume_status(
    input: &crate::input::DescribeVolumeStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumeStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3758 = writer.prefix("Filter");
    if let Some(var_3759) = &input.filters {
        let mut list_3761 = scope_3758.start_list(true, Some("Filter"));
        for item_3760 in var_3759 {
            #[allow(unused_mut)]
            let mut entry_3762 = list_3761.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3762, item_3760)?;
        }
        list_3761.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3763 = writer.prefix("MaxResults");
    if let Some(var_3764) = &input.max_results {
        scope_3763.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3764).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3765 = writer.prefix("NextToken");
    if let Some(var_3766) = &input.next_token {
        scope_3765.string(var_3766);
    }
    #[allow(unused_mut)]
    let mut scope_3767 = writer.prefix("VolumeId");
    if let Some(var_3768) = &input.volume_ids {
        let mut list_3770 = scope_3767.start_list(true, Some("VolumeId"));
        for item_3769 in var_3768 {
            #[allow(unused_mut)]
            let mut entry_3771 = list_3770.entry();
            entry_3771.string(item_3769);
        }
        list_3770.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3772 = writer.prefix("DryRun");
    if let Some(var_3773) = &input.dry_run {
        scope_3772.boolean(*var_3773);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_attribute(
    input: &crate::input::DescribeVpcAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3774 = writer.prefix("Attribute");
    if let Some(var_3775) = &input.attribute {
        scope_3774.string(var_3775.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3776 = writer.prefix("VpcId");
    if let Some(var_3777) = &input.vpc_id {
        scope_3776.string(var_3777);
    }
    #[allow(unused_mut)]
    let mut scope_3778 = writer.prefix("DryRun");
    if let Some(var_3779) = &input.dry_run {
        scope_3778.boolean(*var_3779);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_classic_link(
    input: &crate::input::DescribeVpcClassicLinkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3780 = writer.prefix("Filter");
    if let Some(var_3781) = &input.filters {
        let mut list_3783 = scope_3780.start_list(true, Some("Filter"));
        for item_3782 in var_3781 {
            #[allow(unused_mut)]
            let mut entry_3784 = list_3783.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3784, item_3782)?;
        }
        list_3783.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3785 = writer.prefix("DryRun");
    if let Some(var_3786) = &input.dry_run {
        scope_3785.boolean(*var_3786);
    }
    #[allow(unused_mut)]
    let mut scope_3787 = writer.prefix("VpcId");
    if let Some(var_3788) = &input.vpc_ids {
        let mut list_3790 = scope_3787.start_list(true, Some("VpcId"));
        for item_3789 in var_3788 {
            #[allow(unused_mut)]
            let mut entry_3791 = list_3790.entry();
            entry_3791.string(item_3789);
        }
        list_3790.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_classic_link_dns_support(
    input: &crate::input::DescribeVpcClassicLinkDnsSupportInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcClassicLinkDnsSupport",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3792 = writer.prefix("MaxResults");
    if let Some(var_3793) = &input.max_results {
        scope_3792.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3793).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3794 = writer.prefix("NextToken");
    if let Some(var_3795) = &input.next_token {
        scope_3794.string(var_3795);
    }
    #[allow(unused_mut)]
    let mut scope_3796 = writer.prefix("VpcIds");
    if let Some(var_3797) = &input.vpc_ids {
        let mut list_3799 = scope_3796.start_list(true, Some("VpcId"));
        for item_3798 in var_3797 {
            #[allow(unused_mut)]
            let mut entry_3800 = list_3799.entry();
            entry_3800.string(item_3798);
        }
        list_3799.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_connection_notifications(
    input: &crate::input::DescribeVpcEndpointConnectionNotificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointConnectionNotifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3801 = writer.prefix("DryRun");
    if let Some(var_3802) = &input.dry_run {
        scope_3801.boolean(*var_3802);
    }
    #[allow(unused_mut)]
    let mut scope_3803 = writer.prefix("ConnectionNotificationId");
    if let Some(var_3804) = &input.connection_notification_id {
        scope_3803.string(var_3804);
    }
    #[allow(unused_mut)]
    let mut scope_3805 = writer.prefix("Filter");
    if let Some(var_3806) = &input.filters {
        let mut list_3808 = scope_3805.start_list(true, Some("Filter"));
        for item_3807 in var_3806 {
            #[allow(unused_mut)]
            let mut entry_3809 = list_3808.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3809, item_3807)?;
        }
        list_3808.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3810 = writer.prefix("MaxResults");
    if let Some(var_3811) = &input.max_results {
        scope_3810.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3811).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3812 = writer.prefix("NextToken");
    if let Some(var_3813) = &input.next_token {
        scope_3812.string(var_3813);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_connections(
    input: &crate::input::DescribeVpcEndpointConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointConnections",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3814 = writer.prefix("DryRun");
    if let Some(var_3815) = &input.dry_run {
        scope_3814.boolean(*var_3815);
    }
    #[allow(unused_mut)]
    let mut scope_3816 = writer.prefix("Filter");
    if let Some(var_3817) = &input.filters {
        let mut list_3819 = scope_3816.start_list(true, Some("Filter"));
        for item_3818 in var_3817 {
            #[allow(unused_mut)]
            let mut entry_3820 = list_3819.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3820, item_3818)?;
        }
        list_3819.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3821 = writer.prefix("MaxResults");
    if let Some(var_3822) = &input.max_results {
        scope_3821.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3822).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3823 = writer.prefix("NextToken");
    if let Some(var_3824) = &input.next_token {
        scope_3823.string(var_3824);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoints(
    input: &crate::input::DescribeVpcEndpointsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3825 = writer.prefix("DryRun");
    if let Some(var_3826) = &input.dry_run {
        scope_3825.boolean(*var_3826);
    }
    #[allow(unused_mut)]
    let mut scope_3827 = writer.prefix("VpcEndpointId");
    if let Some(var_3828) = &input.vpc_endpoint_ids {
        let mut list_3830 = scope_3827.start_list(true, Some("item"));
        for item_3829 in var_3828 {
            #[allow(unused_mut)]
            let mut entry_3831 = list_3830.entry();
            entry_3831.string(item_3829);
        }
        list_3830.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3832 = writer.prefix("Filter");
    if let Some(var_3833) = &input.filters {
        let mut list_3835 = scope_3832.start_list(true, Some("Filter"));
        for item_3834 in var_3833 {
            #[allow(unused_mut)]
            let mut entry_3836 = list_3835.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3836, item_3834)?;
        }
        list_3835.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3837 = writer.prefix("MaxResults");
    if let Some(var_3838) = &input.max_results {
        scope_3837.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3838).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3839 = writer.prefix("NextToken");
    if let Some(var_3840) = &input.next_token {
        scope_3839.string(var_3840);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_service_configurations(
    input: &crate::input::DescribeVpcEndpointServiceConfigurationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointServiceConfigurations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3841 = writer.prefix("DryRun");
    if let Some(var_3842) = &input.dry_run {
        scope_3841.boolean(*var_3842);
    }
    #[allow(unused_mut)]
    let mut scope_3843 = writer.prefix("ServiceId");
    if let Some(var_3844) = &input.service_ids {
        let mut list_3846 = scope_3843.start_list(true, Some("item"));
        for item_3845 in var_3844 {
            #[allow(unused_mut)]
            let mut entry_3847 = list_3846.entry();
            entry_3847.string(item_3845);
        }
        list_3846.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3848 = writer.prefix("Filter");
    if let Some(var_3849) = &input.filters {
        let mut list_3851 = scope_3848.start_list(true, Some("Filter"));
        for item_3850 in var_3849 {
            #[allow(unused_mut)]
            let mut entry_3852 = list_3851.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3852, item_3850)?;
        }
        list_3851.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3853 = writer.prefix("MaxResults");
    if let Some(var_3854) = &input.max_results {
        scope_3853.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3854).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3855 = writer.prefix("NextToken");
    if let Some(var_3856) = &input.next_token {
        scope_3855.string(var_3856);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_service_permissions(
    input: &crate::input::DescribeVpcEndpointServicePermissionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointServicePermissions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3857 = writer.prefix("DryRun");
    if let Some(var_3858) = &input.dry_run {
        scope_3857.boolean(*var_3858);
    }
    #[allow(unused_mut)]
    let mut scope_3859 = writer.prefix("ServiceId");
    if let Some(var_3860) = &input.service_id {
        scope_3859.string(var_3860);
    }
    #[allow(unused_mut)]
    let mut scope_3861 = writer.prefix("Filter");
    if let Some(var_3862) = &input.filters {
        let mut list_3864 = scope_3861.start_list(true, Some("Filter"));
        for item_3863 in var_3862 {
            #[allow(unused_mut)]
            let mut entry_3865 = list_3864.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3865, item_3863)?;
        }
        list_3864.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3866 = writer.prefix("MaxResults");
    if let Some(var_3867) = &input.max_results {
        scope_3866.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3867).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3868 = writer.prefix("NextToken");
    if let Some(var_3869) = &input.next_token {
        scope_3868.string(var_3869);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_services(
    input: &crate::input::DescribeVpcEndpointServicesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcEndpointServices", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3870 = writer.prefix("DryRun");
    if let Some(var_3871) = &input.dry_run {
        scope_3870.boolean(*var_3871);
    }
    #[allow(unused_mut)]
    let mut scope_3872 = writer.prefix("ServiceName");
    if let Some(var_3873) = &input.service_names {
        let mut list_3875 = scope_3872.start_list(true, Some("item"));
        for item_3874 in var_3873 {
            #[allow(unused_mut)]
            let mut entry_3876 = list_3875.entry();
            entry_3876.string(item_3874);
        }
        list_3875.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3877 = writer.prefix("Filter");
    if let Some(var_3878) = &input.filters {
        let mut list_3880 = scope_3877.start_list(true, Some("Filter"));
        for item_3879 in var_3878 {
            #[allow(unused_mut)]
            let mut entry_3881 = list_3880.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3881, item_3879)?;
        }
        list_3880.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3882 = writer.prefix("MaxResults");
    if let Some(var_3883) = &input.max_results {
        scope_3882.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3883).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3884 = writer.prefix("NextToken");
    if let Some(var_3885) = &input.next_token {
        scope_3884.string(var_3885);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_peering_connections(
    input: &crate::input::DescribeVpcPeeringConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcPeeringConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3886 = writer.prefix("Filter");
    if let Some(var_3887) = &input.filters {
        let mut list_3889 = scope_3886.start_list(true, Some("Filter"));
        for item_3888 in var_3887 {
            #[allow(unused_mut)]
            let mut entry_3890 = list_3889.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3890, item_3888)?;
        }
        list_3889.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3891 = writer.prefix("DryRun");
    if let Some(var_3892) = &input.dry_run {
        scope_3891.boolean(*var_3892);
    }
    #[allow(unused_mut)]
    let mut scope_3893 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_3894) = &input.vpc_peering_connection_ids {
        let mut list_3896 = scope_3893.start_list(true, Some("item"));
        for item_3895 in var_3894 {
            #[allow(unused_mut)]
            let mut entry_3897 = list_3896.entry();
            entry_3897.string(item_3895);
        }
        list_3896.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3898 = writer.prefix("NextToken");
    if let Some(var_3899) = &input.next_token {
        scope_3898.string(var_3899);
    }
    #[allow(unused_mut)]
    let mut scope_3900 = writer.prefix("MaxResults");
    if let Some(var_3901) = &input.max_results {
        scope_3900.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3901).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpcs(
    input: &crate::input::DescribeVpcsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3902 = writer.prefix("Filter");
    if let Some(var_3903) = &input.filters {
        let mut list_3905 = scope_3902.start_list(true, Some("Filter"));
        for item_3904 in var_3903 {
            #[allow(unused_mut)]
            let mut entry_3906 = list_3905.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3906, item_3904)?;
        }
        list_3905.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3907 = writer.prefix("VpcId");
    if let Some(var_3908) = &input.vpc_ids {
        let mut list_3910 = scope_3907.start_list(true, Some("VpcId"));
        for item_3909 in var_3908 {
            #[allow(unused_mut)]
            let mut entry_3911 = list_3910.entry();
            entry_3911.string(item_3909);
        }
        list_3910.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3912 = writer.prefix("DryRun");
    if let Some(var_3913) = &input.dry_run {
        scope_3912.boolean(*var_3913);
    }
    #[allow(unused_mut)]
    let mut scope_3914 = writer.prefix("NextToken");
    if let Some(var_3915) = &input.next_token {
        scope_3914.string(var_3915);
    }
    #[allow(unused_mut)]
    let mut scope_3916 = writer.prefix("MaxResults");
    if let Some(var_3917) = &input.max_results {
        scope_3916.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3917).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpn_connections(
    input: &crate::input::DescribeVpnConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3918 = writer.prefix("Filter");
    if let Some(var_3919) = &input.filters {
        let mut list_3921 = scope_3918.start_list(true, Some("Filter"));
        for item_3920 in var_3919 {
            #[allow(unused_mut)]
            let mut entry_3922 = list_3921.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3922, item_3920)?;
        }
        list_3921.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3923 = writer.prefix("VpnConnectionId");
    if let Some(var_3924) = &input.vpn_connection_ids {
        let mut list_3926 = scope_3923.start_list(true, Some("VpnConnectionId"));
        for item_3925 in var_3924 {
            #[allow(unused_mut)]
            let mut entry_3927 = list_3926.entry();
            entry_3927.string(item_3925);
        }
        list_3926.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3928 = writer.prefix("DryRun");
    if let Some(var_3929) = &input.dry_run {
        scope_3928.boolean(*var_3929);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpn_gateways(
    input: &crate::input::DescribeVpnGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpnGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3930 = writer.prefix("Filter");
    if let Some(var_3931) = &input.filters {
        let mut list_3933 = scope_3930.start_list(true, Some("Filter"));
        for item_3932 in var_3931 {
            #[allow(unused_mut)]
            let mut entry_3934 = list_3933.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3934, item_3932)?;
        }
        list_3933.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3935 = writer.prefix("VpnGatewayId");
    if let Some(var_3936) = &input.vpn_gateway_ids {
        let mut list_3938 = scope_3935.start_list(true, Some("VpnGatewayId"));
        for item_3937 in var_3936 {
            #[allow(unused_mut)]
            let mut entry_3939 = list_3938.entry();
            entry_3939.string(item_3937);
        }
        list_3938.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3940 = writer.prefix("DryRun");
    if let Some(var_3941) = &input.dry_run {
        scope_3940.boolean(*var_3941);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_classic_link_vpc(
    input: &crate::input::DetachClassicLinkVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DetachClassicLinkVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3942 = writer.prefix("DryRun");
    if let Some(var_3943) = &input.dry_run {
        scope_3942.boolean(*var_3943);
    }
    #[allow(unused_mut)]
    let mut scope_3944 = writer.prefix("InstanceId");
    if let Some(var_3945) = &input.instance_id {
        scope_3944.string(var_3945);
    }
    #[allow(unused_mut)]
    let mut scope_3946 = writer.prefix("VpcId");
    if let Some(var_3947) = &input.vpc_id {
        scope_3946.string(var_3947);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_internet_gateway(
    input: &crate::input::DetachInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DetachInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3948 = writer.prefix("DryRun");
    if let Some(var_3949) = &input.dry_run {
        scope_3948.boolean(*var_3949);
    }
    #[allow(unused_mut)]
    let mut scope_3950 = writer.prefix("InternetGatewayId");
    if let Some(var_3951) = &input.internet_gateway_id {
        scope_3950.string(var_3951);
    }
    #[allow(unused_mut)]
    let mut scope_3952 = writer.prefix("VpcId");
    if let Some(var_3953) = &input.vpc_id {
        scope_3952.string(var_3953);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_network_interface(
    input: &crate::input::DetachNetworkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DetachNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3954 = writer.prefix("AttachmentId");
    if let Some(var_3955) = &input.attachment_id {
        scope_3954.string(var_3955);
    }
    #[allow(unused_mut)]
    let mut scope_3956 = writer.prefix("DryRun");
    if let Some(var_3957) = &input.dry_run {
        scope_3956.boolean(*var_3957);
    }
    #[allow(unused_mut)]
    let mut scope_3958 = writer.prefix("Force");
    if let Some(var_3959) = &input.force {
        scope_3958.boolean(*var_3959);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_volume(
    input: &crate::input::DetachVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DetachVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3960 = writer.prefix("Device");
    if let Some(var_3961) = &input.device {
        scope_3960.string(var_3961);
    }
    #[allow(unused_mut)]
    let mut scope_3962 = writer.prefix("Force");
    if let Some(var_3963) = &input.force {
        scope_3962.boolean(*var_3963);
    }
    #[allow(unused_mut)]
    let mut scope_3964 = writer.prefix("InstanceId");
    if let Some(var_3965) = &input.instance_id {
        scope_3964.string(var_3965);
    }
    #[allow(unused_mut)]
    let mut scope_3966 = writer.prefix("VolumeId");
    if let Some(var_3967) = &input.volume_id {
        scope_3966.string(var_3967);
    }
    #[allow(unused_mut)]
    let mut scope_3968 = writer.prefix("DryRun");
    if let Some(var_3969) = &input.dry_run {
        scope_3968.boolean(*var_3969);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_vpn_gateway(
    input: &crate::input::DetachVpnGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DetachVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3970 = writer.prefix("VpcId");
    if let Some(var_3971) = &input.vpc_id {
        scope_3970.string(var_3971);
    }
    #[allow(unused_mut)]
    let mut scope_3972 = writer.prefix("VpnGatewayId");
    if let Some(var_3973) = &input.vpn_gateway_id {
        scope_3972.string(var_3973);
    }
    #[allow(unused_mut)]
    let mut scope_3974 = writer.prefix("DryRun");
    if let Some(var_3975) = &input.dry_run {
        scope_3974.boolean(*var_3975);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_ebs_encryption_by_default(
    input: &crate::input::DisableEbsEncryptionByDefaultInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3976 = writer.prefix("DryRun");
    if let Some(var_3977) = &input.dry_run {
        scope_3976.boolean(*var_3977);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_fast_launch(
    input: &crate::input::DisableFastLaunchInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableFastLaunch", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3978 = writer.prefix("ImageId");
    if let Some(var_3979) = &input.image_id {
        scope_3978.string(var_3979);
    }
    #[allow(unused_mut)]
    let mut scope_3980 = writer.prefix("Force");
    if let Some(var_3981) = &input.force {
        scope_3980.boolean(*var_3981);
    }
    #[allow(unused_mut)]
    let mut scope_3982 = writer.prefix("DryRun");
    if let Some(var_3983) = &input.dry_run {
        scope_3982.boolean(*var_3983);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_fast_snapshot_restores(
    input: &crate::input::DisableFastSnapshotRestoresInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3984 = writer.prefix("AvailabilityZone");
    if let Some(var_3985) = &input.availability_zones {
        let mut list_3987 = scope_3984.start_list(true, Some("AvailabilityZone"));
        for item_3986 in var_3985 {
            #[allow(unused_mut)]
            let mut entry_3988 = list_3987.entry();
            entry_3988.string(item_3986);
        }
        list_3987.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3989 = writer.prefix("SourceSnapshotId");
    if let Some(var_3990) = &input.source_snapshot_ids {
        let mut list_3992 = scope_3989.start_list(true, Some("SnapshotId"));
        for item_3991 in var_3990 {
            #[allow(unused_mut)]
            let mut entry_3993 = list_3992.entry();
            entry_3993.string(item_3991);
        }
        list_3992.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3994 = writer.prefix("DryRun");
    if let Some(var_3995) = &input.dry_run {
        scope_3994.boolean(*var_3995);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_image_deprecation(
    input: &crate::input::DisableImageDeprecationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableImageDeprecation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3996 = writer.prefix("ImageId");
    if let Some(var_3997) = &input.image_id {
        scope_3996.string(var_3997);
    }
    #[allow(unused_mut)]
    let mut scope_3998 = writer.prefix("DryRun");
    if let Some(var_3999) = &input.dry_run {
        scope_3998.boolean(*var_3999);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_ipam_organization_admin_account(
    input: &crate::input::DisableIpamOrganizationAdminAccountInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisableIpamOrganizationAdminAccount",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4000 = writer.prefix("DryRun");
    if let Some(var_4001) = &input.dry_run {
        scope_4000.boolean(*var_4001);
    }
    #[allow(unused_mut)]
    let mut scope_4002 = writer.prefix("DelegatedAdminAccountId");
    if let Some(var_4003) = &input.delegated_admin_account_id {
        scope_4002.string(var_4003);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_serial_console_access(
    input: &crate::input::DisableSerialConsoleAccessInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableSerialConsoleAccess", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4004 = writer.prefix("DryRun");
    if let Some(var_4005) = &input.dry_run {
        scope_4004.boolean(*var_4005);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_transit_gateway_route_table_propagation(
    input: &crate::input::DisableTransitGatewayRouteTablePropagationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisableTransitGatewayRouteTablePropagation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4006 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4007) = &input.transit_gateway_route_table_id {
        scope_4006.string(var_4007);
    }
    #[allow(unused_mut)]
    let mut scope_4008 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4009) = &input.transit_gateway_attachment_id {
        scope_4008.string(var_4009);
    }
    #[allow(unused_mut)]
    let mut scope_4010 = writer.prefix("DryRun");
    if let Some(var_4011) = &input.dry_run {
        scope_4010.boolean(*var_4011);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_vgw_route_propagation(
    input: &crate::input::DisableVgwRoutePropagationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableVgwRoutePropagation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4012 = writer.prefix("GatewayId");
    if let Some(var_4013) = &input.gateway_id {
        scope_4012.string(var_4013);
    }
    #[allow(unused_mut)]
    let mut scope_4014 = writer.prefix("RouteTableId");
    if let Some(var_4015) = &input.route_table_id {
        scope_4014.string(var_4015);
    }
    #[allow(unused_mut)]
    let mut scope_4016 = writer.prefix("DryRun");
    if let Some(var_4017) = &input.dry_run {
        scope_4016.boolean(*var_4017);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_vpc_classic_link(
    input: &crate::input::DisableVpcClassicLinkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4018 = writer.prefix("DryRun");
    if let Some(var_4019) = &input.dry_run {
        scope_4018.boolean(*var_4019);
    }
    #[allow(unused_mut)]
    let mut scope_4020 = writer.prefix("VpcId");
    if let Some(var_4021) = &input.vpc_id {
        scope_4020.string(var_4021);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_vpc_classic_link_dns_support(
    input: &crate::input::DisableVpcClassicLinkDnsSupportInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisableVpcClassicLinkDnsSupport",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4022 = writer.prefix("VpcId");
    if let Some(var_4023) = &input.vpc_id {
        scope_4022.string(var_4023);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_address(
    input: &crate::input::DisassociateAddressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4024 = writer.prefix("AssociationId");
    if let Some(var_4025) = &input.association_id {
        scope_4024.string(var_4025);
    }
    #[allow(unused_mut)]
    let mut scope_4026 = writer.prefix("PublicIp");
    if let Some(var_4027) = &input.public_ip {
        scope_4026.string(var_4027);
    }
    #[allow(unused_mut)]
    let mut scope_4028 = writer.prefix("DryRun");
    if let Some(var_4029) = &input.dry_run {
        scope_4028.boolean(*var_4029);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_client_vpn_target_network(
    input: &crate::input::DisassociateClientVpnTargetNetworkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateClientVpnTargetNetwork",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4030 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4031) = &input.client_vpn_endpoint_id {
        scope_4030.string(var_4031);
    }
    #[allow(unused_mut)]
    let mut scope_4032 = writer.prefix("AssociationId");
    if let Some(var_4033) = &input.association_id {
        scope_4032.string(var_4033);
    }
    #[allow(unused_mut)]
    let mut scope_4034 = writer.prefix("DryRun");
    if let Some(var_4035) = &input.dry_run {
        scope_4034.boolean(*var_4035);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_enclave_certificate_iam_role(
    input: &crate::input::DisassociateEnclaveCertificateIamRoleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateEnclaveCertificateIamRole",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4036 = writer.prefix("CertificateArn");
    if let Some(var_4037) = &input.certificate_arn {
        scope_4036.string(var_4037);
    }
    #[allow(unused_mut)]
    let mut scope_4038 = writer.prefix("RoleArn");
    if let Some(var_4039) = &input.role_arn {
        scope_4038.string(var_4039);
    }
    #[allow(unused_mut)]
    let mut scope_4040 = writer.prefix("DryRun");
    if let Some(var_4041) = &input.dry_run {
        scope_4040.boolean(*var_4041);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_iam_instance_profile(
    input: &crate::input::DisassociateIamInstanceProfileInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateIamInstanceProfile",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4042 = writer.prefix("AssociationId");
    if let Some(var_4043) = &input.association_id {
        scope_4042.string(var_4043);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_instance_event_window(
    input: &crate::input::DisassociateInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateInstanceEventWindow",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4044 = writer.prefix("DryRun");
    if let Some(var_4045) = &input.dry_run {
        scope_4044.boolean(*var_4045);
    }
    #[allow(unused_mut)]
    let mut scope_4046 = writer.prefix("InstanceEventWindowId");
    if let Some(var_4047) = &input.instance_event_window_id {
        scope_4046.string(var_4047);
    }
    #[allow(unused_mut)]
    let mut scope_4048 = writer.prefix("AssociationTarget");
    if let Some(var_4049) = &input.association_target {
        crate::query_ser::serialize_structure_crate_model_instance_event_window_disassociation_request(scope_4048, var_4049)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_route_table(
    input: &crate::input::DisassociateRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4050 = writer.prefix("AssociationId");
    if let Some(var_4051) = &input.association_id {
        scope_4050.string(var_4051);
    }
    #[allow(unused_mut)]
    let mut scope_4052 = writer.prefix("DryRun");
    if let Some(var_4053) = &input.dry_run {
        scope_4052.boolean(*var_4053);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_subnet_cidr_block(
    input: &crate::input::DisassociateSubnetCidrBlockInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateSubnetCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4054 = writer.prefix("AssociationId");
    if let Some(var_4055) = &input.association_id {
        scope_4054.string(var_4055);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_transit_gateway_multicast_domain(
    input: &crate::input::DisassociateTransitGatewayMulticastDomainInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4056 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_4057) = &input.transit_gateway_multicast_domain_id {
        scope_4056.string(var_4057);
    }
    #[allow(unused_mut)]
    let mut scope_4058 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4059) = &input.transit_gateway_attachment_id {
        scope_4058.string(var_4059);
    }
    #[allow(unused_mut)]
    let mut scope_4060 = writer.prefix("SubnetIds");
    if let Some(var_4061) = &input.subnet_ids {
        let mut list_4063 = scope_4060.start_list(true, Some("item"));
        for item_4062 in var_4061 {
            #[allow(unused_mut)]
            let mut entry_4064 = list_4063.entry();
            entry_4064.string(item_4062);
        }
        list_4063.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4065 = writer.prefix("DryRun");
    if let Some(var_4066) = &input.dry_run {
        scope_4065.boolean(*var_4066);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_transit_gateway_route_table(
    input: &crate::input::DisassociateTransitGatewayRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4067 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4068) = &input.transit_gateway_route_table_id {
        scope_4067.string(var_4068);
    }
    #[allow(unused_mut)]
    let mut scope_4069 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4070) = &input.transit_gateway_attachment_id {
        scope_4069.string(var_4070);
    }
    #[allow(unused_mut)]
    let mut scope_4071 = writer.prefix("DryRun");
    if let Some(var_4072) = &input.dry_run {
        scope_4071.boolean(*var_4072);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_trunk_interface(
    input: &crate::input::DisassociateTrunkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateTrunkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4073 = writer.prefix("AssociationId");
    if let Some(var_4074) = &input.association_id {
        scope_4073.string(var_4074);
    }
    #[allow(unused_mut)]
    let mut scope_4075 = writer.prefix("ClientToken");
    if let Some(var_4076) = &input.client_token {
        scope_4075.string(var_4076);
    }
    #[allow(unused_mut)]
    let mut scope_4077 = writer.prefix("DryRun");
    if let Some(var_4078) = &input.dry_run {
        scope_4077.boolean(*var_4078);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_vpc_cidr_block(
    input: &crate::input::DisassociateVpcCidrBlockInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateVpcCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4079 = writer.prefix("AssociationId");
    if let Some(var_4080) = &input.association_id {
        scope_4079.string(var_4080);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_ebs_encryption_by_default(
    input: &crate::input::EnableEbsEncryptionByDefaultInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4081 = writer.prefix("DryRun");
    if let Some(var_4082) = &input.dry_run {
        scope_4081.boolean(*var_4082);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_fast_launch(
    input: &crate::input::EnableFastLaunchInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnableFastLaunch", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4083 = writer.prefix("ImageId");
    if let Some(var_4084) = &input.image_id {
        scope_4083.string(var_4084);
    }
    #[allow(unused_mut)]
    let mut scope_4085 = writer.prefix("ResourceType");
    if let Some(var_4086) = &input.resource_type {
        scope_4085.string(var_4086);
    }
    #[allow(unused_mut)]
    let mut scope_4087 = writer.prefix("SnapshotConfiguration");
    if let Some(var_4088) = &input.snapshot_configuration {
        crate::query_ser::serialize_structure_crate_model_fast_launch_snapshot_configuration_request(scope_4087, var_4088)?;
    }
    #[allow(unused_mut)]
    let mut scope_4089 = writer.prefix("LaunchTemplate");
    if let Some(var_4090) = &input.launch_template {
        crate::query_ser::serialize_structure_crate_model_fast_launch_launch_template_specification_request(scope_4089, var_4090)?;
    }
    #[allow(unused_mut)]
    let mut scope_4091 = writer.prefix("MaxParallelLaunches");
    if let Some(var_4092) = &input.max_parallel_launches {
        scope_4091.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4092).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4093 = writer.prefix("DryRun");
    if let Some(var_4094) = &input.dry_run {
        scope_4093.boolean(*var_4094);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_fast_snapshot_restores(
    input: &crate::input::EnableFastSnapshotRestoresInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4095 = writer.prefix("AvailabilityZone");
    if let Some(var_4096) = &input.availability_zones {
        let mut list_4098 = scope_4095.start_list(true, Some("AvailabilityZone"));
        for item_4097 in var_4096 {
            #[allow(unused_mut)]
            let mut entry_4099 = list_4098.entry();
            entry_4099.string(item_4097);
        }
        list_4098.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4100 = writer.prefix("SourceSnapshotId");
    if let Some(var_4101) = &input.source_snapshot_ids {
        let mut list_4103 = scope_4100.start_list(true, Some("SnapshotId"));
        for item_4102 in var_4101 {
            #[allow(unused_mut)]
            let mut entry_4104 = list_4103.entry();
            entry_4104.string(item_4102);
        }
        list_4103.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4105 = writer.prefix("DryRun");
    if let Some(var_4106) = &input.dry_run {
        scope_4105.boolean(*var_4106);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_image_deprecation(
    input: &crate::input::EnableImageDeprecationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableImageDeprecation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4107 = writer.prefix("ImageId");
    if let Some(var_4108) = &input.image_id {
        scope_4107.string(var_4108);
    }
    #[allow(unused_mut)]
    let mut scope_4109 = writer.prefix("DeprecateAt");
    if let Some(var_4110) = &input.deprecate_at {
        scope_4109.date_time(var_4110, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4111 = writer.prefix("DryRun");
    if let Some(var_4112) = &input.dry_run {
        scope_4111.boolean(*var_4112);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_ipam_organization_admin_account(
    input: &crate::input::EnableIpamOrganizationAdminAccountInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "EnableIpamOrganizationAdminAccount",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4113 = writer.prefix("DryRun");
    if let Some(var_4114) = &input.dry_run {
        scope_4113.boolean(*var_4114);
    }
    #[allow(unused_mut)]
    let mut scope_4115 = writer.prefix("DelegatedAdminAccountId");
    if let Some(var_4116) = &input.delegated_admin_account_id {
        scope_4115.string(var_4116);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_serial_console_access(
    input: &crate::input::EnableSerialConsoleAccessInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableSerialConsoleAccess", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4117 = writer.prefix("DryRun");
    if let Some(var_4118) = &input.dry_run {
        scope_4117.boolean(*var_4118);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_transit_gateway_route_table_propagation(
    input: &crate::input::EnableTransitGatewayRouteTablePropagationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "EnableTransitGatewayRouteTablePropagation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4119 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4120) = &input.transit_gateway_route_table_id {
        scope_4119.string(var_4120);
    }
    #[allow(unused_mut)]
    let mut scope_4121 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4122) = &input.transit_gateway_attachment_id {
        scope_4121.string(var_4122);
    }
    #[allow(unused_mut)]
    let mut scope_4123 = writer.prefix("DryRun");
    if let Some(var_4124) = &input.dry_run {
        scope_4123.boolean(*var_4124);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_vgw_route_propagation(
    input: &crate::input::EnableVgwRoutePropagationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableVgwRoutePropagation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4125 = writer.prefix("GatewayId");
    if let Some(var_4126) = &input.gateway_id {
        scope_4125.string(var_4126);
    }
    #[allow(unused_mut)]
    let mut scope_4127 = writer.prefix("RouteTableId");
    if let Some(var_4128) = &input.route_table_id {
        scope_4127.string(var_4128);
    }
    #[allow(unused_mut)]
    let mut scope_4129 = writer.prefix("DryRun");
    if let Some(var_4130) = &input.dry_run {
        scope_4129.boolean(*var_4130);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_volume_io(
    input: &crate::input::EnableVolumeIoInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnableVolumeIO", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4131 = writer.prefix("DryRun");
    if let Some(var_4132) = &input.dry_run {
        scope_4131.boolean(*var_4132);
    }
    #[allow(unused_mut)]
    let mut scope_4133 = writer.prefix("VolumeId");
    if let Some(var_4134) = &input.volume_id {
        scope_4133.string(var_4134);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_vpc_classic_link(
    input: &crate::input::EnableVpcClassicLinkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4135 = writer.prefix("DryRun");
    if let Some(var_4136) = &input.dry_run {
        scope_4135.boolean(*var_4136);
    }
    #[allow(unused_mut)]
    let mut scope_4137 = writer.prefix("VpcId");
    if let Some(var_4138) = &input.vpc_id {
        scope_4137.string(var_4138);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_vpc_classic_link_dns_support(
    input: &crate::input::EnableVpcClassicLinkDnsSupportInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "EnableVpcClassicLinkDnsSupport",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4139 = writer.prefix("VpcId");
    if let Some(var_4140) = &input.vpc_id {
        scope_4139.string(var_4140);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_client_vpn_client_certificate_revocation_list(
    input: &crate::input::ExportClientVpnClientCertificateRevocationListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ExportClientVpnClientCertificateRevocationList",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4141 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4142) = &input.client_vpn_endpoint_id {
        scope_4141.string(var_4142);
    }
    #[allow(unused_mut)]
    let mut scope_4143 = writer.prefix("DryRun");
    if let Some(var_4144) = &input.dry_run {
        scope_4143.boolean(*var_4144);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_client_vpn_client_configuration(
    input: &crate::input::ExportClientVpnClientConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ExportClientVpnClientConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4145 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4146) = &input.client_vpn_endpoint_id {
        scope_4145.string(var_4146);
    }
    #[allow(unused_mut)]
    let mut scope_4147 = writer.prefix("DryRun");
    if let Some(var_4148) = &input.dry_run {
        scope_4147.boolean(*var_4148);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_image(
    input: &crate::input::ExportImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ExportImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4149 = writer.prefix("ClientToken");
    if let Some(var_4150) = &input.client_token {
        scope_4149.string(var_4150);
    }
    #[allow(unused_mut)]
    let mut scope_4151 = writer.prefix("Description");
    if let Some(var_4152) = &input.description {
        scope_4151.string(var_4152);
    }
    #[allow(unused_mut)]
    let mut scope_4153 = writer.prefix("DiskImageFormat");
    if let Some(var_4154) = &input.disk_image_format {
        scope_4153.string(var_4154.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4155 = writer.prefix("DryRun");
    if let Some(var_4156) = &input.dry_run {
        scope_4155.boolean(*var_4156);
    }
    #[allow(unused_mut)]
    let mut scope_4157 = writer.prefix("ImageId");
    if let Some(var_4158) = &input.image_id {
        scope_4157.string(var_4158);
    }
    #[allow(unused_mut)]
    let mut scope_4159 = writer.prefix("S3ExportLocation");
    if let Some(var_4160) = &input.s3_export_location {
        crate::query_ser::serialize_structure_crate_model_export_task_s3_location_request(
            scope_4159, var_4160,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4161 = writer.prefix("RoleName");
    if let Some(var_4162) = &input.role_name {
        scope_4161.string(var_4162);
    }
    #[allow(unused_mut)]
    let mut scope_4163 = writer.prefix("TagSpecification");
    if let Some(var_4164) = &input.tag_specifications {
        let mut list_4166 = scope_4163.start_list(true, Some("item"));
        for item_4165 in var_4164 {
            #[allow(unused_mut)]
            let mut entry_4167 = list_4166.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4167, item_4165,
            )?;
        }
        list_4166.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_transit_gateway_routes(
    input: &crate::input::ExportTransitGatewayRoutesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ExportTransitGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4168 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4169) = &input.transit_gateway_route_table_id {
        scope_4168.string(var_4169);
    }
    #[allow(unused_mut)]
    let mut scope_4170 = writer.prefix("Filter");
    if let Some(var_4171) = &input.filters {
        let mut list_4173 = scope_4170.start_list(true, Some("Filter"));
        for item_4172 in var_4171 {
            #[allow(unused_mut)]
            let mut entry_4174 = list_4173.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4174, item_4172)?;
        }
        list_4173.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4175 = writer.prefix("S3Bucket");
    if let Some(var_4176) = &input.s3_bucket {
        scope_4175.string(var_4176);
    }
    #[allow(unused_mut)]
    let mut scope_4177 = writer.prefix("DryRun");
    if let Some(var_4178) = &input.dry_run {
        scope_4177.boolean(*var_4178);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_associated_enclave_certificate_iam_roles(
    input: &crate::input::GetAssociatedEnclaveCertificateIamRolesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetAssociatedEnclaveCertificateIamRoles",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4179 = writer.prefix("CertificateArn");
    if let Some(var_4180) = &input.certificate_arn {
        scope_4179.string(var_4180);
    }
    #[allow(unused_mut)]
    let mut scope_4181 = writer.prefix("DryRun");
    if let Some(var_4182) = &input.dry_run {
        scope_4181.boolean(*var_4182);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_associated_ipv6_pool_cidrs(
    input: &crate::input::GetAssociatedIpv6PoolCidrsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetAssociatedIpv6PoolCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4183 = writer.prefix("PoolId");
    if let Some(var_4184) = &input.pool_id {
        scope_4183.string(var_4184);
    }
    #[allow(unused_mut)]
    let mut scope_4185 = writer.prefix("NextToken");
    if let Some(var_4186) = &input.next_token {
        scope_4185.string(var_4186);
    }
    #[allow(unused_mut)]
    let mut scope_4187 = writer.prefix("MaxResults");
    if let Some(var_4188) = &input.max_results {
        scope_4187.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4188).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4189 = writer.prefix("DryRun");
    if let Some(var_4190) = &input.dry_run {
        scope_4189.boolean(*var_4190);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_capacity_reservation_usage(
    input: &crate::input::GetCapacityReservationUsageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetCapacityReservationUsage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4191 = writer.prefix("CapacityReservationId");
    if let Some(var_4192) = &input.capacity_reservation_id {
        scope_4191.string(var_4192);
    }
    #[allow(unused_mut)]
    let mut scope_4193 = writer.prefix("NextToken");
    if let Some(var_4194) = &input.next_token {
        scope_4193.string(var_4194);
    }
    #[allow(unused_mut)]
    let mut scope_4195 = writer.prefix("MaxResults");
    if let Some(var_4196) = &input.max_results {
        scope_4195.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4196).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4197 = writer.prefix("DryRun");
    if let Some(var_4198) = &input.dry_run {
        scope_4197.boolean(*var_4198);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_coip_pool_usage(
    input: &crate::input::GetCoipPoolUsageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetCoipPoolUsage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4199 = writer.prefix("PoolId");
    if let Some(var_4200) = &input.pool_id {
        scope_4199.string(var_4200);
    }
    #[allow(unused_mut)]
    let mut scope_4201 = writer.prefix("Filter");
    if let Some(var_4202) = &input.filters {
        let mut list_4204 = scope_4201.start_list(true, Some("Filter"));
        for item_4203 in var_4202 {
            #[allow(unused_mut)]
            let mut entry_4205 = list_4204.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4205, item_4203)?;
        }
        list_4204.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4206 = writer.prefix("MaxResults");
    if let Some(var_4207) = &input.max_results {
        scope_4206.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4207).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4208 = writer.prefix("NextToken");
    if let Some(var_4209) = &input.next_token {
        scope_4208.string(var_4209);
    }
    #[allow(unused_mut)]
    let mut scope_4210 = writer.prefix("DryRun");
    if let Some(var_4211) = &input.dry_run {
        scope_4210.boolean(*var_4211);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_console_output(
    input: &crate::input::GetConsoleOutputInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetConsoleOutput", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4212 = writer.prefix("InstanceId");
    if let Some(var_4213) = &input.instance_id {
        scope_4212.string(var_4213);
    }
    #[allow(unused_mut)]
    let mut scope_4214 = writer.prefix("DryRun");
    if let Some(var_4215) = &input.dry_run {
        scope_4214.boolean(*var_4215);
    }
    #[allow(unused_mut)]
    let mut scope_4216 = writer.prefix("Latest");
    if let Some(var_4217) = &input.latest {
        scope_4216.boolean(*var_4217);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_console_screenshot(
    input: &crate::input::GetConsoleScreenshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetConsoleScreenshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4218 = writer.prefix("DryRun");
    if let Some(var_4219) = &input.dry_run {
        scope_4218.boolean(*var_4219);
    }
    #[allow(unused_mut)]
    let mut scope_4220 = writer.prefix("InstanceId");
    if let Some(var_4221) = &input.instance_id {
        scope_4220.string(var_4221);
    }
    #[allow(unused_mut)]
    let mut scope_4222 = writer.prefix("WakeUp");
    if let Some(var_4223) = &input.wake_up {
        scope_4222.boolean(*var_4223);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_default_credit_specification(
    input: &crate::input::GetDefaultCreditSpecificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetDefaultCreditSpecification", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4224 = writer.prefix("DryRun");
    if let Some(var_4225) = &input.dry_run {
        scope_4224.boolean(*var_4225);
    }
    #[allow(unused_mut)]
    let mut scope_4226 = writer.prefix("InstanceFamily");
    if let Some(var_4227) = &input.instance_family {
        scope_4226.string(var_4227.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ebs_default_kms_key_id(
    input: &crate::input::GetEbsDefaultKmsKeyIdInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4228 = writer.prefix("DryRun");
    if let Some(var_4229) = &input.dry_run {
        scope_4228.boolean(*var_4229);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ebs_encryption_by_default(
    input: &crate::input::GetEbsEncryptionByDefaultInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4230 = writer.prefix("DryRun");
    if let Some(var_4231) = &input.dry_run {
        scope_4230.boolean(*var_4231);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_flow_logs_integration_template(
    input: &crate::input::GetFlowLogsIntegrationTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetFlowLogsIntegrationTemplate",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4232 = writer.prefix("DryRun");
    if let Some(var_4233) = &input.dry_run {
        scope_4232.boolean(*var_4233);
    }
    #[allow(unused_mut)]
    let mut scope_4234 = writer.prefix("FlowLogId");
    if let Some(var_4235) = &input.flow_log_id {
        scope_4234.string(var_4235);
    }
    #[allow(unused_mut)]
    let mut scope_4236 = writer.prefix("ConfigDeliveryS3DestinationArn");
    if let Some(var_4237) = &input.config_delivery_s3_destination_arn {
        scope_4236.string(var_4237);
    }
    #[allow(unused_mut)]
    let mut scope_4238 = writer.prefix("IntegrateService");
    if let Some(var_4239) = &input.integrate_services {
        crate::query_ser::serialize_structure_crate_model_integrate_services(scope_4238, var_4239)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_groups_for_capacity_reservation(
    input: &crate::input::GetGroupsForCapacityReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetGroupsForCapacityReservation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4240 = writer.prefix("CapacityReservationId");
    if let Some(var_4241) = &input.capacity_reservation_id {
        scope_4240.string(var_4241);
    }
    #[allow(unused_mut)]
    let mut scope_4242 = writer.prefix("NextToken");
    if let Some(var_4243) = &input.next_token {
        scope_4242.string(var_4243);
    }
    #[allow(unused_mut)]
    let mut scope_4244 = writer.prefix("MaxResults");
    if let Some(var_4245) = &input.max_results {
        scope_4244.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4245).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4246 = writer.prefix("DryRun");
    if let Some(var_4247) = &input.dry_run {
        scope_4246.boolean(*var_4247);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_host_reservation_purchase_preview(
    input: &crate::input::GetHostReservationPurchasePreviewInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetHostReservationPurchasePreview",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4248 = writer.prefix("HostIdSet");
    if let Some(var_4249) = &input.host_id_set {
        let mut list_4251 = scope_4248.start_list(true, Some("item"));
        for item_4250 in var_4249 {
            #[allow(unused_mut)]
            let mut entry_4252 = list_4251.entry();
            entry_4252.string(item_4250);
        }
        list_4251.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4253 = writer.prefix("OfferingId");
    if let Some(var_4254) = &input.offering_id {
        scope_4253.string(var_4254);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_instance_types_from_instance_requirements(
    input: &crate::input::GetInstanceTypesFromInstanceRequirementsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetInstanceTypesFromInstanceRequirements",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4255 = writer.prefix("DryRun");
    if let Some(var_4256) = &input.dry_run {
        scope_4255.boolean(*var_4256);
    }
    #[allow(unused_mut)]
    let mut scope_4257 = writer.prefix("ArchitectureType");
    if let Some(var_4258) = &input.architecture_types {
        let mut list_4260 = scope_4257.start_list(true, Some("item"));
        for item_4259 in var_4258 {
            #[allow(unused_mut)]
            let mut entry_4261 = list_4260.entry();
            entry_4261.string(item_4259.as_str());
        }
        list_4260.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4262 = writer.prefix("VirtualizationType");
    if let Some(var_4263) = &input.virtualization_types {
        let mut list_4265 = scope_4262.start_list(true, Some("item"));
        for item_4264 in var_4263 {
            #[allow(unused_mut)]
            let mut entry_4266 = list_4265.entry();
            entry_4266.string(item_4264.as_str());
        }
        list_4265.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4267 = writer.prefix("InstanceRequirements");
    if let Some(var_4268) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_request(
            scope_4267, var_4268,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4269 = writer.prefix("MaxResults");
    if let Some(var_4270) = &input.max_results {
        scope_4269.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4270).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4271 = writer.prefix("NextToken");
    if let Some(var_4272) = &input.next_token {
        scope_4271.string(var_4272);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_instance_uefi_data(
    input: &crate::input::GetInstanceUefiDataInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetInstanceUefiData", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4273 = writer.prefix("InstanceId");
    if let Some(var_4274) = &input.instance_id {
        scope_4273.string(var_4274);
    }
    #[allow(unused_mut)]
    let mut scope_4275 = writer.prefix("DryRun");
    if let Some(var_4276) = &input.dry_run {
        scope_4275.boolean(*var_4276);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ipam_address_history(
    input: &crate::input::GetIpamAddressHistoryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetIpamAddressHistory", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4277 = writer.prefix("DryRun");
    if let Some(var_4278) = &input.dry_run {
        scope_4277.boolean(*var_4278);
    }
    #[allow(unused_mut)]
    let mut scope_4279 = writer.prefix("Cidr");
    if let Some(var_4280) = &input.cidr {
        scope_4279.string(var_4280);
    }
    #[allow(unused_mut)]
    let mut scope_4281 = writer.prefix("IpamScopeId");
    if let Some(var_4282) = &input.ipam_scope_id {
        scope_4281.string(var_4282);
    }
    #[allow(unused_mut)]
    let mut scope_4283 = writer.prefix("VpcId");
    if let Some(var_4284) = &input.vpc_id {
        scope_4283.string(var_4284);
    }
    #[allow(unused_mut)]
    let mut scope_4285 = writer.prefix("StartTime");
    if let Some(var_4286) = &input.start_time {
        scope_4285.date_time(var_4286, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4287 = writer.prefix("EndTime");
    if let Some(var_4288) = &input.end_time {
        scope_4287.date_time(var_4288, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4289 = writer.prefix("MaxResults");
    if let Some(var_4290) = &input.max_results {
        scope_4289.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4290).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4291 = writer.prefix("NextToken");
    if let Some(var_4292) = &input.next_token {
        scope_4291.string(var_4292);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ipam_pool_allocations(
    input: &crate::input::GetIpamPoolAllocationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetIpamPoolAllocations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4293 = writer.prefix("DryRun");
    if let Some(var_4294) = &input.dry_run {
        scope_4293.boolean(*var_4294);
    }
    #[allow(unused_mut)]
    let mut scope_4295 = writer.prefix("IpamPoolId");
    if let Some(var_4296) = &input.ipam_pool_id {
        scope_4295.string(var_4296);
    }
    #[allow(unused_mut)]
    let mut scope_4297 = writer.prefix("IpamPoolAllocationId");
    if let Some(var_4298) = &input.ipam_pool_allocation_id {
        scope_4297.string(var_4298);
    }
    #[allow(unused_mut)]
    let mut scope_4299 = writer.prefix("Filter");
    if let Some(var_4300) = &input.filters {
        let mut list_4302 = scope_4299.start_list(true, Some("Filter"));
        for item_4301 in var_4300 {
            #[allow(unused_mut)]
            let mut entry_4303 = list_4302.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4303, item_4301)?;
        }
        list_4302.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4304 = writer.prefix("MaxResults");
    if let Some(var_4305) = &input.max_results {
        scope_4304.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4305).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4306 = writer.prefix("NextToken");
    if let Some(var_4307) = &input.next_token {
        scope_4306.string(var_4307);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ipam_pool_cidrs(
    input: &crate::input::GetIpamPoolCidrsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetIpamPoolCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4308 = writer.prefix("DryRun");
    if let Some(var_4309) = &input.dry_run {
        scope_4308.boolean(*var_4309);
    }
    #[allow(unused_mut)]
    let mut scope_4310 = writer.prefix("IpamPoolId");
    if let Some(var_4311) = &input.ipam_pool_id {
        scope_4310.string(var_4311);
    }
    #[allow(unused_mut)]
    let mut scope_4312 = writer.prefix("Filter");
    if let Some(var_4313) = &input.filters {
        let mut list_4315 = scope_4312.start_list(true, Some("Filter"));
        for item_4314 in var_4313 {
            #[allow(unused_mut)]
            let mut entry_4316 = list_4315.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4316, item_4314)?;
        }
        list_4315.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4317 = writer.prefix("MaxResults");
    if let Some(var_4318) = &input.max_results {
        scope_4317.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4318).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4319 = writer.prefix("NextToken");
    if let Some(var_4320) = &input.next_token {
        scope_4319.string(var_4320);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ipam_resource_cidrs(
    input: &crate::input::GetIpamResourceCidrsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetIpamResourceCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4321 = writer.prefix("DryRun");
    if let Some(var_4322) = &input.dry_run {
        scope_4321.boolean(*var_4322);
    }
    #[allow(unused_mut)]
    let mut scope_4323 = writer.prefix("Filter");
    if let Some(var_4324) = &input.filters {
        let mut list_4326 = scope_4323.start_list(true, Some("Filter"));
        for item_4325 in var_4324 {
            #[allow(unused_mut)]
            let mut entry_4327 = list_4326.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4327, item_4325)?;
        }
        list_4326.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4328 = writer.prefix("MaxResults");
    if let Some(var_4329) = &input.max_results {
        scope_4328.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4329).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4330 = writer.prefix("NextToken");
    if let Some(var_4331) = &input.next_token {
        scope_4330.string(var_4331);
    }
    #[allow(unused_mut)]
    let mut scope_4332 = writer.prefix("IpamScopeId");
    if let Some(var_4333) = &input.ipam_scope_id {
        scope_4332.string(var_4333);
    }
    #[allow(unused_mut)]
    let mut scope_4334 = writer.prefix("IpamPoolId");
    if let Some(var_4335) = &input.ipam_pool_id {
        scope_4334.string(var_4335);
    }
    #[allow(unused_mut)]
    let mut scope_4336 = writer.prefix("ResourceId");
    if let Some(var_4337) = &input.resource_id {
        scope_4336.string(var_4337);
    }
    #[allow(unused_mut)]
    let mut scope_4338 = writer.prefix("ResourceType");
    if let Some(var_4339) = &input.resource_type {
        scope_4338.string(var_4339.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4340 = writer.prefix("ResourceTag");
    if let Some(var_4341) = &input.resource_tag {
        crate::query_ser::serialize_structure_crate_model_request_ipam_resource_tag(
            scope_4340, var_4341,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4342 = writer.prefix("ResourceOwner");
    if let Some(var_4343) = &input.resource_owner {
        scope_4342.string(var_4343);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_launch_template_data(
    input: &crate::input::GetLaunchTemplateDataInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetLaunchTemplateData", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4344 = writer.prefix("DryRun");
    if let Some(var_4345) = &input.dry_run {
        scope_4344.boolean(*var_4345);
    }
    #[allow(unused_mut)]
    let mut scope_4346 = writer.prefix("InstanceId");
    if let Some(var_4347) = &input.instance_id {
        scope_4346.string(var_4347);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_managed_prefix_list_associations(
    input: &crate::input::GetManagedPrefixListAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetManagedPrefixListAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4348 = writer.prefix("DryRun");
    if let Some(var_4349) = &input.dry_run {
        scope_4348.boolean(*var_4349);
    }
    #[allow(unused_mut)]
    let mut scope_4350 = writer.prefix("PrefixListId");
    if let Some(var_4351) = &input.prefix_list_id {
        scope_4350.string(var_4351);
    }
    #[allow(unused_mut)]
    let mut scope_4352 = writer.prefix("MaxResults");
    if let Some(var_4353) = &input.max_results {
        scope_4352.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4353).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4354 = writer.prefix("NextToken");
    if let Some(var_4355) = &input.next_token {
        scope_4354.string(var_4355);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_managed_prefix_list_entries(
    input: &crate::input::GetManagedPrefixListEntriesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetManagedPrefixListEntries", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4356 = writer.prefix("DryRun");
    if let Some(var_4357) = &input.dry_run {
        scope_4356.boolean(*var_4357);
    }
    #[allow(unused_mut)]
    let mut scope_4358 = writer.prefix("PrefixListId");
    if let Some(var_4359) = &input.prefix_list_id {
        scope_4358.string(var_4359);
    }
    #[allow(unused_mut)]
    let mut scope_4360 = writer.prefix("TargetVersion");
    if let Some(var_4361) = &input.target_version {
        scope_4360.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4361).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4362 = writer.prefix("MaxResults");
    if let Some(var_4363) = &input.max_results {
        scope_4362.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4363).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4364 = writer.prefix("NextToken");
    if let Some(var_4365) = &input.next_token {
        scope_4364.string(var_4365);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_network_insights_access_scope_analysis_findings(
    input: &crate::input::GetNetworkInsightsAccessScopeAnalysisFindingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetNetworkInsightsAccessScopeAnalysisFindings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4366 = writer.prefix("NetworkInsightsAccessScopeAnalysisId");
    if let Some(var_4367) = &input.network_insights_access_scope_analysis_id {
        scope_4366.string(var_4367);
    }
    #[allow(unused_mut)]
    let mut scope_4368 = writer.prefix("MaxResults");
    if let Some(var_4369) = &input.max_results {
        scope_4368.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4369).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4370 = writer.prefix("NextToken");
    if let Some(var_4371) = &input.next_token {
        scope_4370.string(var_4371);
    }
    #[allow(unused_mut)]
    let mut scope_4372 = writer.prefix("DryRun");
    if let Some(var_4373) = &input.dry_run {
        scope_4372.boolean(*var_4373);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_network_insights_access_scope_content(
    input: &crate::input::GetNetworkInsightsAccessScopeContentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetNetworkInsightsAccessScopeContent",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4374 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_4375) = &input.network_insights_access_scope_id {
        scope_4374.string(var_4375);
    }
    #[allow(unused_mut)]
    let mut scope_4376 = writer.prefix("DryRun");
    if let Some(var_4377) = &input.dry_run {
        scope_4376.boolean(*var_4377);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_password_data(
    input: &crate::input::GetPasswordDataInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetPasswordData", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4378 = writer.prefix("InstanceId");
    if let Some(var_4379) = &input.instance_id {
        scope_4378.string(var_4379);
    }
    #[allow(unused_mut)]
    let mut scope_4380 = writer.prefix("DryRun");
    if let Some(var_4381) = &input.dry_run {
        scope_4380.boolean(*var_4381);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_reserved_instances_exchange_quote(
    input: &crate::input::GetReservedInstancesExchangeQuoteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetReservedInstancesExchangeQuote",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4382 = writer.prefix("DryRun");
    if let Some(var_4383) = &input.dry_run {
        scope_4382.boolean(*var_4383);
    }
    #[allow(unused_mut)]
    let mut scope_4384 = writer.prefix("ReservedInstanceId");
    if let Some(var_4385) = &input.reserved_instance_ids {
        let mut list_4387 = scope_4384.start_list(true, Some("ReservedInstanceId"));
        for item_4386 in var_4385 {
            #[allow(unused_mut)]
            let mut entry_4388 = list_4387.entry();
            entry_4388.string(item_4386);
        }
        list_4387.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4389 = writer.prefix("TargetConfiguration");
    if let Some(var_4390) = &input.target_configurations {
        let mut list_4392 = scope_4389.start_list(true, Some("TargetConfigurationRequest"));
        for item_4391 in var_4390 {
            #[allow(unused_mut)]
            let mut entry_4393 = list_4392.entry();
            crate::query_ser::serialize_structure_crate_model_target_configuration_request(
                entry_4393, item_4391,
            )?;
        }
        list_4392.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_serial_console_access_status(
    input: &crate::input::GetSerialConsoleAccessStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetSerialConsoleAccessStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4394 = writer.prefix("DryRun");
    if let Some(var_4395) = &input.dry_run {
        scope_4394.boolean(*var_4395);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_spot_placement_scores(
    input: &crate::input::GetSpotPlacementScoresInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetSpotPlacementScores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4396 = writer.prefix("InstanceType");
    if let Some(var_4397) = &input.instance_types {
        let mut list_4399 = scope_4396.start_list(true, None);
        for item_4398 in var_4397 {
            #[allow(unused_mut)]
            let mut entry_4400 = list_4399.entry();
            entry_4400.string(item_4398);
        }
        list_4399.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4401 = writer.prefix("TargetCapacity");
    if let Some(var_4402) = &input.target_capacity {
        scope_4401.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4402).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4403 = writer.prefix("TargetCapacityUnitType");
    if let Some(var_4404) = &input.target_capacity_unit_type {
        scope_4403.string(var_4404.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4405 = writer.prefix("SingleAvailabilityZone");
    if let Some(var_4406) = &input.single_availability_zone {
        scope_4405.boolean(*var_4406);
    }
    #[allow(unused_mut)]
    let mut scope_4407 = writer.prefix("RegionName");
    if let Some(var_4408) = &input.region_names {
        let mut list_4410 = scope_4407.start_list(true, None);
        for item_4409 in var_4408 {
            #[allow(unused_mut)]
            let mut entry_4411 = list_4410.entry();
            entry_4411.string(item_4409);
        }
        list_4410.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4412 = writer.prefix("InstanceRequirementsWithMetadata");
    if let Some(var_4413) = &input.instance_requirements_with_metadata {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_with_metadata_request(scope_4412, var_4413)?;
    }
    #[allow(unused_mut)]
    let mut scope_4414 = writer.prefix("DryRun");
    if let Some(var_4415) = &input.dry_run {
        scope_4414.boolean(*var_4415);
    }
    #[allow(unused_mut)]
    let mut scope_4416 = writer.prefix("MaxResults");
    if let Some(var_4417) = &input.max_results {
        scope_4416.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4417).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4418 = writer.prefix("NextToken");
    if let Some(var_4419) = &input.next_token {
        scope_4418.string(var_4419);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_subnet_cidr_reservations(
    input: &crate::input::GetSubnetCidrReservationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetSubnetCidrReservations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4420 = writer.prefix("Filter");
    if let Some(var_4421) = &input.filters {
        let mut list_4423 = scope_4420.start_list(true, Some("Filter"));
        for item_4422 in var_4421 {
            #[allow(unused_mut)]
            let mut entry_4424 = list_4423.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4424, item_4422)?;
        }
        list_4423.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4425 = writer.prefix("SubnetId");
    if let Some(var_4426) = &input.subnet_id {
        scope_4425.string(var_4426);
    }
    #[allow(unused_mut)]
    let mut scope_4427 = writer.prefix("DryRun");
    if let Some(var_4428) = &input.dry_run {
        scope_4427.boolean(*var_4428);
    }
    #[allow(unused_mut)]
    let mut scope_4429 = writer.prefix("NextToken");
    if let Some(var_4430) = &input.next_token {
        scope_4429.string(var_4430);
    }
    #[allow(unused_mut)]
    let mut scope_4431 = writer.prefix("MaxResults");
    if let Some(var_4432) = &input.max_results {
        scope_4431.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4432).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_attachment_propagations(
    input: &crate::input::GetTransitGatewayAttachmentPropagationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayAttachmentPropagations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4433 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4434) = &input.transit_gateway_attachment_id {
        scope_4433.string(var_4434);
    }
    #[allow(unused_mut)]
    let mut scope_4435 = writer.prefix("Filter");
    if let Some(var_4436) = &input.filters {
        let mut list_4438 = scope_4435.start_list(true, Some("Filter"));
        for item_4437 in var_4436 {
            #[allow(unused_mut)]
            let mut entry_4439 = list_4438.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4439, item_4437)?;
        }
        list_4438.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4440 = writer.prefix("MaxResults");
    if let Some(var_4441) = &input.max_results {
        scope_4440.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4441).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4442 = writer.prefix("NextToken");
    if let Some(var_4443) = &input.next_token {
        scope_4442.string(var_4443);
    }
    #[allow(unused_mut)]
    let mut scope_4444 = writer.prefix("DryRun");
    if let Some(var_4445) = &input.dry_run {
        scope_4444.boolean(*var_4445);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_multicast_domain_associations(
    input: &crate::input::GetTransitGatewayMulticastDomainAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayMulticastDomainAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4446 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_4447) = &input.transit_gateway_multicast_domain_id {
        scope_4446.string(var_4447);
    }
    #[allow(unused_mut)]
    let mut scope_4448 = writer.prefix("Filter");
    if let Some(var_4449) = &input.filters {
        let mut list_4451 = scope_4448.start_list(true, Some("Filter"));
        for item_4450 in var_4449 {
            #[allow(unused_mut)]
            let mut entry_4452 = list_4451.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4452, item_4450)?;
        }
        list_4451.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4453 = writer.prefix("MaxResults");
    if let Some(var_4454) = &input.max_results {
        scope_4453.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4454).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4455 = writer.prefix("NextToken");
    if let Some(var_4456) = &input.next_token {
        scope_4455.string(var_4456);
    }
    #[allow(unused_mut)]
    let mut scope_4457 = writer.prefix("DryRun");
    if let Some(var_4458) = &input.dry_run {
        scope_4457.boolean(*var_4458);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_prefix_list_references(
    input: &crate::input::GetTransitGatewayPrefixListReferencesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayPrefixListReferences",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4459 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4460) = &input.transit_gateway_route_table_id {
        scope_4459.string(var_4460);
    }
    #[allow(unused_mut)]
    let mut scope_4461 = writer.prefix("Filter");
    if let Some(var_4462) = &input.filters {
        let mut list_4464 = scope_4461.start_list(true, Some("Filter"));
        for item_4463 in var_4462 {
            #[allow(unused_mut)]
            let mut entry_4465 = list_4464.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4465, item_4463)?;
        }
        list_4464.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4466 = writer.prefix("MaxResults");
    if let Some(var_4467) = &input.max_results {
        scope_4466.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4467).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4468 = writer.prefix("NextToken");
    if let Some(var_4469) = &input.next_token {
        scope_4468.string(var_4469);
    }
    #[allow(unused_mut)]
    let mut scope_4470 = writer.prefix("DryRun");
    if let Some(var_4471) = &input.dry_run {
        scope_4470.boolean(*var_4471);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_route_table_associations(
    input: &crate::input::GetTransitGatewayRouteTableAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayRouteTableAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4472 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4473) = &input.transit_gateway_route_table_id {
        scope_4472.string(var_4473);
    }
    #[allow(unused_mut)]
    let mut scope_4474 = writer.prefix("Filter");
    if let Some(var_4475) = &input.filters {
        let mut list_4477 = scope_4474.start_list(true, Some("Filter"));
        for item_4476 in var_4475 {
            #[allow(unused_mut)]
            let mut entry_4478 = list_4477.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4478, item_4476)?;
        }
        list_4477.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4479 = writer.prefix("MaxResults");
    if let Some(var_4480) = &input.max_results {
        scope_4479.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4480).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4481 = writer.prefix("NextToken");
    if let Some(var_4482) = &input.next_token {
        scope_4481.string(var_4482);
    }
    #[allow(unused_mut)]
    let mut scope_4483 = writer.prefix("DryRun");
    if let Some(var_4484) = &input.dry_run {
        scope_4483.boolean(*var_4484);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_route_table_propagations(
    input: &crate::input::GetTransitGatewayRouteTablePropagationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayRouteTablePropagations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4485 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4486) = &input.transit_gateway_route_table_id {
        scope_4485.string(var_4486);
    }
    #[allow(unused_mut)]
    let mut scope_4487 = writer.prefix("Filter");
    if let Some(var_4488) = &input.filters {
        let mut list_4490 = scope_4487.start_list(true, Some("Filter"));
        for item_4489 in var_4488 {
            #[allow(unused_mut)]
            let mut entry_4491 = list_4490.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4491, item_4489)?;
        }
        list_4490.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4492 = writer.prefix("MaxResults");
    if let Some(var_4493) = &input.max_results {
        scope_4492.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4493).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4494 = writer.prefix("NextToken");
    if let Some(var_4495) = &input.next_token {
        scope_4494.string(var_4495);
    }
    #[allow(unused_mut)]
    let mut scope_4496 = writer.prefix("DryRun");
    if let Some(var_4497) = &input.dry_run {
        scope_4496.boolean(*var_4497);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_vpn_connection_device_sample_configuration(
    input: &crate::input::GetVpnConnectionDeviceSampleConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetVpnConnectionDeviceSampleConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4498 = writer.prefix("VpnConnectionId");
    if let Some(var_4499) = &input.vpn_connection_id {
        scope_4498.string(var_4499);
    }
    #[allow(unused_mut)]
    let mut scope_4500 = writer.prefix("VpnConnectionDeviceTypeId");
    if let Some(var_4501) = &input.vpn_connection_device_type_id {
        scope_4500.string(var_4501);
    }
    #[allow(unused_mut)]
    let mut scope_4502 = writer.prefix("InternetKeyExchangeVersion");
    if let Some(var_4503) = &input.internet_key_exchange_version {
        scope_4502.string(var_4503);
    }
    #[allow(unused_mut)]
    let mut scope_4504 = writer.prefix("DryRun");
    if let Some(var_4505) = &input.dry_run {
        scope_4504.boolean(*var_4505);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_vpn_connection_device_types(
    input: &crate::input::GetVpnConnectionDeviceTypesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetVpnConnectionDeviceTypes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4506 = writer.prefix("MaxResults");
    if let Some(var_4507) = &input.max_results {
        scope_4506.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4507).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4508 = writer.prefix("NextToken");
    if let Some(var_4509) = &input.next_token {
        scope_4508.string(var_4509);
    }
    #[allow(unused_mut)]
    let mut scope_4510 = writer.prefix("DryRun");
    if let Some(var_4511) = &input.dry_run {
        scope_4510.boolean(*var_4511);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_client_vpn_client_certificate_revocation_list(
    input: &crate::input::ImportClientVpnClientCertificateRevocationListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ImportClientVpnClientCertificateRevocationList",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4512 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4513) = &input.client_vpn_endpoint_id {
        scope_4512.string(var_4513);
    }
    #[allow(unused_mut)]
    let mut scope_4514 = writer.prefix("CertificateRevocationList");
    if let Some(var_4515) = &input.certificate_revocation_list {
        scope_4514.string(var_4515);
    }
    #[allow(unused_mut)]
    let mut scope_4516 = writer.prefix("DryRun");
    if let Some(var_4517) = &input.dry_run {
        scope_4516.boolean(*var_4517);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_image(
    input: &crate::input::ImportImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4518 = writer.prefix("Architecture");
    if let Some(var_4519) = &input.architecture {
        scope_4518.string(var_4519);
    }
    #[allow(unused_mut)]
    let mut scope_4520 = writer.prefix("ClientData");
    if let Some(var_4521) = &input.client_data {
        crate::query_ser::serialize_structure_crate_model_client_data(scope_4520, var_4521)?;
    }
    #[allow(unused_mut)]
    let mut scope_4522 = writer.prefix("ClientToken");
    if let Some(var_4523) = &input.client_token {
        scope_4522.string(var_4523);
    }
    #[allow(unused_mut)]
    let mut scope_4524 = writer.prefix("Description");
    if let Some(var_4525) = &input.description {
        scope_4524.string(var_4525);
    }
    #[allow(unused_mut)]
    let mut scope_4526 = writer.prefix("DiskContainer");
    if let Some(var_4527) = &input.disk_containers {
        let mut list_4529 = scope_4526.start_list(true, Some("item"));
        for item_4528 in var_4527 {
            #[allow(unused_mut)]
            let mut entry_4530 = list_4529.entry();
            crate::query_ser::serialize_structure_crate_model_image_disk_container(
                entry_4530, item_4528,
            )?;
        }
        list_4529.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4531 = writer.prefix("DryRun");
    if let Some(var_4532) = &input.dry_run {
        scope_4531.boolean(*var_4532);
    }
    #[allow(unused_mut)]
    let mut scope_4533 = writer.prefix("Encrypted");
    if let Some(var_4534) = &input.encrypted {
        scope_4533.boolean(*var_4534);
    }
    #[allow(unused_mut)]
    let mut scope_4535 = writer.prefix("Hypervisor");
    if let Some(var_4536) = &input.hypervisor {
        scope_4535.string(var_4536);
    }
    #[allow(unused_mut)]
    let mut scope_4537 = writer.prefix("KmsKeyId");
    if let Some(var_4538) = &input.kms_key_id {
        scope_4537.string(var_4538);
    }
    #[allow(unused_mut)]
    let mut scope_4539 = writer.prefix("LicenseType");
    if let Some(var_4540) = &input.license_type {
        scope_4539.string(var_4540);
    }
    #[allow(unused_mut)]
    let mut scope_4541 = writer.prefix("Platform");
    if let Some(var_4542) = &input.platform {
        scope_4541.string(var_4542);
    }
    #[allow(unused_mut)]
    let mut scope_4543 = writer.prefix("RoleName");
    if let Some(var_4544) = &input.role_name {
        scope_4543.string(var_4544);
    }
    #[allow(unused_mut)]
    let mut scope_4545 = writer.prefix("LicenseSpecifications");
    if let Some(var_4546) = &input.license_specifications {
        let mut list_4548 = scope_4545.start_list(true, Some("item"));
        for item_4547 in var_4546 {
            #[allow(unused_mut)]
            let mut entry_4549 = list_4548.entry();
            crate::query_ser::serialize_structure_crate_model_import_image_license_configuration_request(entry_4549, item_4547)?;
        }
        list_4548.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4550 = writer.prefix("TagSpecification");
    if let Some(var_4551) = &input.tag_specifications {
        let mut list_4553 = scope_4550.start_list(true, Some("item"));
        for item_4552 in var_4551 {
            #[allow(unused_mut)]
            let mut entry_4554 = list_4553.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4554, item_4552,
            )?;
        }
        list_4553.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4555 = writer.prefix("UsageOperation");
    if let Some(var_4556) = &input.usage_operation {
        scope_4555.string(var_4556);
    }
    #[allow(unused_mut)]
    let mut scope_4557 = writer.prefix("BootMode");
    if let Some(var_4558) = &input.boot_mode {
        scope_4557.string(var_4558.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_instance(
    input: &crate::input::ImportInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4559 = writer.prefix("Description");
    if let Some(var_4560) = &input.description {
        scope_4559.string(var_4560);
    }
    #[allow(unused_mut)]
    let mut scope_4561 = writer.prefix("DiskImage");
    if let Some(var_4562) = &input.disk_images {
        let mut list_4564 = scope_4561.start_list(true, None);
        for item_4563 in var_4562 {
            #[allow(unused_mut)]
            let mut entry_4565 = list_4564.entry();
            crate::query_ser::serialize_structure_crate_model_disk_image(entry_4565, item_4563)?;
        }
        list_4564.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4566 = writer.prefix("DryRun");
    if let Some(var_4567) = &input.dry_run {
        scope_4566.boolean(*var_4567);
    }
    #[allow(unused_mut)]
    let mut scope_4568 = writer.prefix("LaunchSpecification");
    if let Some(var_4569) = &input.launch_specification {
        crate::query_ser::serialize_structure_crate_model_import_instance_launch_specification(
            scope_4568, var_4569,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4570 = writer.prefix("Platform");
    if let Some(var_4571) = &input.platform {
        scope_4570.string(var_4571.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_key_pair(
    input: &crate::input::ImportKeyPairInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4572 = writer.prefix("DryRun");
    if let Some(var_4573) = &input.dry_run {
        scope_4572.boolean(*var_4573);
    }
    #[allow(unused_mut)]
    let mut scope_4574 = writer.prefix("KeyName");
    if let Some(var_4575) = &input.key_name {
        scope_4574.string(var_4575);
    }
    #[allow(unused_mut)]
    let mut scope_4576 = writer.prefix("PublicKeyMaterial");
    if let Some(var_4577) = &input.public_key_material {
        scope_4576.string(&aws_smithy_types::base64::encode(var_4577));
    }
    #[allow(unused_mut)]
    let mut scope_4578 = writer.prefix("TagSpecification");
    if let Some(var_4579) = &input.tag_specifications {
        let mut list_4581 = scope_4578.start_list(true, Some("item"));
        for item_4580 in var_4579 {
            #[allow(unused_mut)]
            let mut entry_4582 = list_4581.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4582, item_4580,
            )?;
        }
        list_4581.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_snapshot(
    input: &crate::input::ImportSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4583 = writer.prefix("ClientData");
    if let Some(var_4584) = &input.client_data {
        crate::query_ser::serialize_structure_crate_model_client_data(scope_4583, var_4584)?;
    }
    #[allow(unused_mut)]
    let mut scope_4585 = writer.prefix("ClientToken");
    if let Some(var_4586) = &input.client_token {
        scope_4585.string(var_4586);
    }
    #[allow(unused_mut)]
    let mut scope_4587 = writer.prefix("Description");
    if let Some(var_4588) = &input.description {
        scope_4587.string(var_4588);
    }
    #[allow(unused_mut)]
    let mut scope_4589 = writer.prefix("DiskContainer");
    if let Some(var_4590) = &input.disk_container {
        crate::query_ser::serialize_structure_crate_model_snapshot_disk_container(
            scope_4589, var_4590,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4591 = writer.prefix("DryRun");
    if let Some(var_4592) = &input.dry_run {
        scope_4591.boolean(*var_4592);
    }
    #[allow(unused_mut)]
    let mut scope_4593 = writer.prefix("Encrypted");
    if let Some(var_4594) = &input.encrypted {
        scope_4593.boolean(*var_4594);
    }
    #[allow(unused_mut)]
    let mut scope_4595 = writer.prefix("KmsKeyId");
    if let Some(var_4596) = &input.kms_key_id {
        scope_4595.string(var_4596);
    }
    #[allow(unused_mut)]
    let mut scope_4597 = writer.prefix("RoleName");
    if let Some(var_4598) = &input.role_name {
        scope_4597.string(var_4598);
    }
    #[allow(unused_mut)]
    let mut scope_4599 = writer.prefix("TagSpecification");
    if let Some(var_4600) = &input.tag_specifications {
        let mut list_4602 = scope_4599.start_list(true, Some("item"));
        for item_4601 in var_4600 {
            #[allow(unused_mut)]
            let mut entry_4603 = list_4602.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4603, item_4601,
            )?;
        }
        list_4602.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_volume(
    input: &crate::input::ImportVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4604 = writer.prefix("AvailabilityZone");
    if let Some(var_4605) = &input.availability_zone {
        scope_4604.string(var_4605);
    }
    #[allow(unused_mut)]
    let mut scope_4606 = writer.prefix("Description");
    if let Some(var_4607) = &input.description {
        scope_4606.string(var_4607);
    }
    #[allow(unused_mut)]
    let mut scope_4608 = writer.prefix("DryRun");
    if let Some(var_4609) = &input.dry_run {
        scope_4608.boolean(*var_4609);
    }
    #[allow(unused_mut)]
    let mut scope_4610 = writer.prefix("Image");
    if let Some(var_4611) = &input.image {
        crate::query_ser::serialize_structure_crate_model_disk_image_detail(scope_4610, var_4611)?;
    }
    #[allow(unused_mut)]
    let mut scope_4612 = writer.prefix("Volume");
    if let Some(var_4613) = &input.volume {
        crate::query_ser::serialize_structure_crate_model_volume_detail(scope_4612, var_4613)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_images_in_recycle_bin(
    input: &crate::input::ListImagesInRecycleBinInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ListImagesInRecycleBin", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4614 = writer.prefix("ImageId");
    if let Some(var_4615) = &input.image_ids {
        let mut list_4617 = scope_4614.start_list(true, Some("ImageId"));
        for item_4616 in var_4615 {
            #[allow(unused_mut)]
            let mut entry_4618 = list_4617.entry();
            entry_4618.string(item_4616);
        }
        list_4617.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4619 = writer.prefix("NextToken");
    if let Some(var_4620) = &input.next_token {
        scope_4619.string(var_4620);
    }
    #[allow(unused_mut)]
    let mut scope_4621 = writer.prefix("MaxResults");
    if let Some(var_4622) = &input.max_results {
        scope_4621.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4622).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4623 = writer.prefix("DryRun");
    if let Some(var_4624) = &input.dry_run {
        scope_4623.boolean(*var_4624);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_snapshots_in_recycle_bin(
    input: &crate::input::ListSnapshotsInRecycleBinInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ListSnapshotsInRecycleBin", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4625 = writer.prefix("MaxResults");
    if let Some(var_4626) = &input.max_results {
        scope_4625.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4626).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4627 = writer.prefix("NextToken");
    if let Some(var_4628) = &input.next_token {
        scope_4627.string(var_4628);
    }
    #[allow(unused_mut)]
    let mut scope_4629 = writer.prefix("SnapshotId");
    if let Some(var_4630) = &input.snapshot_ids {
        let mut list_4632 = scope_4629.start_list(true, Some("SnapshotId"));
        for item_4631 in var_4630 {
            #[allow(unused_mut)]
            let mut entry_4633 = list_4632.entry();
            entry_4633.string(item_4631);
        }
        list_4632.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4634 = writer.prefix("DryRun");
    if let Some(var_4635) = &input.dry_run {
        scope_4634.boolean(*var_4635);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_address_attribute(
    input: &crate::input::ModifyAddressAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyAddressAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4636 = writer.prefix("AllocationId");
    if let Some(var_4637) = &input.allocation_id {
        scope_4636.string(var_4637);
    }
    #[allow(unused_mut)]
    let mut scope_4638 = writer.prefix("DomainName");
    if let Some(var_4639) = &input.domain_name {
        scope_4638.string(var_4639);
    }
    #[allow(unused_mut)]
    let mut scope_4640 = writer.prefix("DryRun");
    if let Some(var_4641) = &input.dry_run {
        scope_4640.boolean(*var_4641);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_availability_zone_group(
    input: &crate::input::ModifyAvailabilityZoneGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyAvailabilityZoneGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4642 = writer.prefix("GroupName");
    if let Some(var_4643) = &input.group_name {
        scope_4642.string(var_4643);
    }
    #[allow(unused_mut)]
    let mut scope_4644 = writer.prefix("OptInStatus");
    if let Some(var_4645) = &input.opt_in_status {
        scope_4644.string(var_4645.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4646 = writer.prefix("DryRun");
    if let Some(var_4647) = &input.dry_run {
        scope_4646.boolean(*var_4647);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_capacity_reservation(
    input: &crate::input::ModifyCapacityReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4648 = writer.prefix("CapacityReservationId");
    if let Some(var_4649) = &input.capacity_reservation_id {
        scope_4648.string(var_4649);
    }
    #[allow(unused_mut)]
    let mut scope_4650 = writer.prefix("InstanceCount");
    if let Some(var_4651) = &input.instance_count {
        scope_4650.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4651).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4652 = writer.prefix("EndDate");
    if let Some(var_4653) = &input.end_date {
        scope_4652.date_time(var_4653, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4654 = writer.prefix("EndDateType");
    if let Some(var_4655) = &input.end_date_type {
        scope_4654.string(var_4655.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4656 = writer.prefix("Accept");
    if let Some(var_4657) = &input.accept {
        scope_4656.boolean(*var_4657);
    }
    #[allow(unused_mut)]
    let mut scope_4658 = writer.prefix("DryRun");
    if let Some(var_4659) = &input.dry_run {
        scope_4658.boolean(*var_4659);
    }
    #[allow(unused_mut)]
    let mut scope_4660 = writer.prefix("AdditionalInfo");
    if let Some(var_4661) = &input.additional_info {
        scope_4660.string(var_4661);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_capacity_reservation_fleet(
    input: &crate::input::ModifyCapacityReservationFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyCapacityReservationFleet",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4662 = writer.prefix("CapacityReservationFleetId");
    if let Some(var_4663) = &input.capacity_reservation_fleet_id {
        scope_4662.string(var_4663);
    }
    #[allow(unused_mut)]
    let mut scope_4664 = writer.prefix("TotalTargetCapacity");
    if let Some(var_4665) = &input.total_target_capacity {
        scope_4664.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4665).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4666 = writer.prefix("EndDate");
    if let Some(var_4667) = &input.end_date {
        scope_4666.date_time(var_4667, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4668 = writer.prefix("DryRun");
    if let Some(var_4669) = &input.dry_run {
        scope_4668.boolean(*var_4669);
    }
    #[allow(unused_mut)]
    let mut scope_4670 = writer.prefix("RemoveEndDate");
    if let Some(var_4671) = &input.remove_end_date {
        scope_4670.boolean(*var_4671);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_client_vpn_endpoint(
    input: &crate::input::ModifyClientVpnEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4672 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4673) = &input.client_vpn_endpoint_id {
        scope_4672.string(var_4673);
    }
    #[allow(unused_mut)]
    let mut scope_4674 = writer.prefix("ServerCertificateArn");
    if let Some(var_4675) = &input.server_certificate_arn {
        scope_4674.string(var_4675);
    }
    #[allow(unused_mut)]
    let mut scope_4676 = writer.prefix("ConnectionLogOptions");
    if let Some(var_4677) = &input.connection_log_options {
        crate::query_ser::serialize_structure_crate_model_connection_log_options(
            scope_4676, var_4677,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4678 = writer.prefix("DnsServers");
    if let Some(var_4679) = &input.dns_servers {
        crate::query_ser::serialize_structure_crate_model_dns_servers_options_modify_structure(
            scope_4678, var_4679,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4680 = writer.prefix("VpnPort");
    if let Some(var_4681) = &input.vpn_port {
        scope_4680.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4681).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4682 = writer.prefix("Description");
    if let Some(var_4683) = &input.description {
        scope_4682.string(var_4683);
    }
    #[allow(unused_mut)]
    let mut scope_4684 = writer.prefix("SplitTunnel");
    if let Some(var_4685) = &input.split_tunnel {
        scope_4684.boolean(*var_4685);
    }
    #[allow(unused_mut)]
    let mut scope_4686 = writer.prefix("DryRun");
    if let Some(var_4687) = &input.dry_run {
        scope_4686.boolean(*var_4687);
    }
    #[allow(unused_mut)]
    let mut scope_4688 = writer.prefix("SecurityGroupId");
    if let Some(var_4689) = &input.security_group_ids {
        let mut list_4691 = scope_4688.start_list(true, Some("item"));
        for item_4690 in var_4689 {
            #[allow(unused_mut)]
            let mut entry_4692 = list_4691.entry();
            entry_4692.string(item_4690);
        }
        list_4691.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4693 = writer.prefix("VpcId");
    if let Some(var_4694) = &input.vpc_id {
        scope_4693.string(var_4694);
    }
    #[allow(unused_mut)]
    let mut scope_4695 = writer.prefix("SelfServicePortal");
    if let Some(var_4696) = &input.self_service_portal {
        scope_4695.string(var_4696.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4697 = writer.prefix("ClientConnectOptions");
    if let Some(var_4698) = &input.client_connect_options {
        crate::query_ser::serialize_structure_crate_model_client_connect_options(
            scope_4697, var_4698,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4699 = writer.prefix("SessionTimeoutHours");
    if let Some(var_4700) = &input.session_timeout_hours {
        scope_4699.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4700).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4701 = writer.prefix("ClientLoginBannerOptions");
    if let Some(var_4702) = &input.client_login_banner_options {
        crate::query_ser::serialize_structure_crate_model_client_login_banner_options(
            scope_4701, var_4702,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_default_credit_specification(
    input: &crate::input::ModifyDefaultCreditSpecificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyDefaultCreditSpecification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4703 = writer.prefix("DryRun");
    if let Some(var_4704) = &input.dry_run {
        scope_4703.boolean(*var_4704);
    }
    #[allow(unused_mut)]
    let mut scope_4705 = writer.prefix("InstanceFamily");
    if let Some(var_4706) = &input.instance_family {
        scope_4705.string(var_4706.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4707 = writer.prefix("CpuCredits");
    if let Some(var_4708) = &input.cpu_credits {
        scope_4707.string(var_4708);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ebs_default_kms_key_id(
    input: &crate::input::ModifyEbsDefaultKmsKeyIdInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4709 = writer.prefix("KmsKeyId");
    if let Some(var_4710) = &input.kms_key_id {
        scope_4709.string(var_4710);
    }
    #[allow(unused_mut)]
    let mut scope_4711 = writer.prefix("DryRun");
    if let Some(var_4712) = &input.dry_run {
        scope_4711.boolean(*var_4712);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_fleet(
    input: &crate::input::ModifyFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4713 = writer.prefix("DryRun");
    if let Some(var_4714) = &input.dry_run {
        scope_4713.boolean(*var_4714);
    }
    #[allow(unused_mut)]
    let mut scope_4715 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_4716) = &input.excess_capacity_termination_policy {
        scope_4715.string(var_4716.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4717 = writer.prefix("LaunchTemplateConfig");
    if let Some(var_4718) = &input.launch_template_configs {
        let mut list_4720 = scope_4717.start_list(true, Some("item"));
        for item_4719 in var_4718 {
            #[allow(unused_mut)]
            let mut entry_4721 = list_4720.entry();
            crate::query_ser::serialize_structure_crate_model_fleet_launch_template_config_request(
                entry_4721, item_4719,
            )?;
        }
        list_4720.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4722 = writer.prefix("FleetId");
    if let Some(var_4723) = &input.fleet_id {
        scope_4722.string(var_4723);
    }
    #[allow(unused_mut)]
    let mut scope_4724 = writer.prefix("TargetCapacitySpecification");
    if let Some(var_4725) = &input.target_capacity_specification {
        crate::query_ser::serialize_structure_crate_model_target_capacity_specification_request(
            scope_4724, var_4725,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4726 = writer.prefix("Context");
    if let Some(var_4727) = &input.context {
        scope_4726.string(var_4727);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_fpga_image_attribute(
    input: &crate::input::ModifyFpgaImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4728 = writer.prefix("DryRun");
    if let Some(var_4729) = &input.dry_run {
        scope_4728.boolean(*var_4729);
    }
    #[allow(unused_mut)]
    let mut scope_4730 = writer.prefix("FpgaImageId");
    if let Some(var_4731) = &input.fpga_image_id {
        scope_4730.string(var_4731);
    }
    #[allow(unused_mut)]
    let mut scope_4732 = writer.prefix("Attribute");
    if let Some(var_4733) = &input.attribute {
        scope_4732.string(var_4733.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4734 = writer.prefix("OperationType");
    if let Some(var_4735) = &input.operation_type {
        scope_4734.string(var_4735.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4736 = writer.prefix("UserId");
    if let Some(var_4737) = &input.user_ids {
        let mut list_4739 = scope_4736.start_list(true, Some("UserId"));
        for item_4738 in var_4737 {
            #[allow(unused_mut)]
            let mut entry_4740 = list_4739.entry();
            entry_4740.string(item_4738);
        }
        list_4739.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4741 = writer.prefix("UserGroup");
    if let Some(var_4742) = &input.user_groups {
        let mut list_4744 = scope_4741.start_list(true, Some("UserGroup"));
        for item_4743 in var_4742 {
            #[allow(unused_mut)]
            let mut entry_4745 = list_4744.entry();
            entry_4745.string(item_4743);
        }
        list_4744.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4746 = writer.prefix("ProductCode");
    if let Some(var_4747) = &input.product_codes {
        let mut list_4749 = scope_4746.start_list(true, Some("ProductCode"));
        for item_4748 in var_4747 {
            #[allow(unused_mut)]
            let mut entry_4750 = list_4749.entry();
            entry_4750.string(item_4748);
        }
        list_4749.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4751 = writer.prefix("LoadPermission");
    if let Some(var_4752) = &input.load_permission {
        crate::query_ser::serialize_structure_crate_model_load_permission_modifications(
            scope_4751, var_4752,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4753 = writer.prefix("Description");
    if let Some(var_4754) = &input.description {
        scope_4753.string(var_4754);
    }
    #[allow(unused_mut)]
    let mut scope_4755 = writer.prefix("Name");
    if let Some(var_4756) = &input.name {
        scope_4755.string(var_4756);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_hosts(
    input: &crate::input::ModifyHostsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4757 = writer.prefix("AutoPlacement");
    if let Some(var_4758) = &input.auto_placement {
        scope_4757.string(var_4758.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4759 = writer.prefix("HostId");
    if let Some(var_4760) = &input.host_ids {
        let mut list_4762 = scope_4759.start_list(true, Some("item"));
        for item_4761 in var_4760 {
            #[allow(unused_mut)]
            let mut entry_4763 = list_4762.entry();
            entry_4763.string(item_4761);
        }
        list_4762.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4764 = writer.prefix("HostRecovery");
    if let Some(var_4765) = &input.host_recovery {
        scope_4764.string(var_4765.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4766 = writer.prefix("InstanceType");
    if let Some(var_4767) = &input.instance_type {
        scope_4766.string(var_4767);
    }
    #[allow(unused_mut)]
    let mut scope_4768 = writer.prefix("InstanceFamily");
    if let Some(var_4769) = &input.instance_family {
        scope_4768.string(var_4769);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_identity_id_format(
    input: &crate::input::ModifyIdentityIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyIdentityIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4770 = writer.prefix("PrincipalArn");
    if let Some(var_4771) = &input.principal_arn {
        scope_4770.string(var_4771);
    }
    #[allow(unused_mut)]
    let mut scope_4772 = writer.prefix("Resource");
    if let Some(var_4773) = &input.resource {
        scope_4772.string(var_4773);
    }
    #[allow(unused_mut)]
    let mut scope_4774 = writer.prefix("UseLongIds");
    if let Some(var_4775) = &input.use_long_ids {
        scope_4774.boolean(*var_4775);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_id_format(
    input: &crate::input::ModifyIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4776 = writer.prefix("Resource");
    if let Some(var_4777) = &input.resource {
        scope_4776.string(var_4777);
    }
    #[allow(unused_mut)]
    let mut scope_4778 = writer.prefix("UseLongIds");
    if let Some(var_4779) = &input.use_long_ids {
        scope_4778.boolean(*var_4779);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_image_attribute(
    input: &crate::input::ModifyImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4780 = writer.prefix("Attribute");
    if let Some(var_4781) = &input.attribute {
        scope_4780.string(var_4781);
    }
    #[allow(unused_mut)]
    let mut scope_4782 = writer.prefix("Description");
    if let Some(var_4783) = &input.description {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4782, var_4783)?;
    }
    #[allow(unused_mut)]
    let mut scope_4784 = writer.prefix("ImageId");
    if let Some(var_4785) = &input.image_id {
        scope_4784.string(var_4785);
    }
    #[allow(unused_mut)]
    let mut scope_4786 = writer.prefix("LaunchPermission");
    if let Some(var_4787) = &input.launch_permission {
        crate::query_ser::serialize_structure_crate_model_launch_permission_modifications(
            scope_4786, var_4787,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4788 = writer.prefix("OperationType");
    if let Some(var_4789) = &input.operation_type {
        scope_4788.string(var_4789.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4790 = writer.prefix("ProductCode");
    if let Some(var_4791) = &input.product_codes {
        let mut list_4793 = scope_4790.start_list(true, Some("ProductCode"));
        for item_4792 in var_4791 {
            #[allow(unused_mut)]
            let mut entry_4794 = list_4793.entry();
            entry_4794.string(item_4792);
        }
        list_4793.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4795 = writer.prefix("UserGroup");
    if let Some(var_4796) = &input.user_groups {
        let mut list_4798 = scope_4795.start_list(true, Some("UserGroup"));
        for item_4797 in var_4796 {
            #[allow(unused_mut)]
            let mut entry_4799 = list_4798.entry();
            entry_4799.string(item_4797);
        }
        list_4798.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4800 = writer.prefix("UserId");
    if let Some(var_4801) = &input.user_ids {
        let mut list_4803 = scope_4800.start_list(true, Some("UserId"));
        for item_4802 in var_4801 {
            #[allow(unused_mut)]
            let mut entry_4804 = list_4803.entry();
            entry_4804.string(item_4802);
        }
        list_4803.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4805 = writer.prefix("Value");
    if let Some(var_4806) = &input.value {
        scope_4805.string(var_4806);
    }
    #[allow(unused_mut)]
    let mut scope_4807 = writer.prefix("DryRun");
    if let Some(var_4808) = &input.dry_run {
        scope_4807.boolean(*var_4808);
    }
    #[allow(unused_mut)]
    let mut scope_4809 = writer.prefix("OrganizationArn");
    if let Some(var_4810) = &input.organization_arns {
        let mut list_4812 = scope_4809.start_list(true, Some("OrganizationArn"));
        for item_4811 in var_4810 {
            #[allow(unused_mut)]
            let mut entry_4813 = list_4812.entry();
            entry_4813.string(item_4811);
        }
        list_4812.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4814 = writer.prefix("OrganizationalUnitArn");
    if let Some(var_4815) = &input.organizational_unit_arns {
        let mut list_4817 = scope_4814.start_list(true, Some("OrganizationalUnitArn"));
        for item_4816 in var_4815 {
            #[allow(unused_mut)]
            let mut entry_4818 = list_4817.entry();
            entry_4818.string(item_4816);
        }
        list_4817.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_attribute(
    input: &crate::input::ModifyInstanceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4819 = writer.prefix("SourceDestCheck");
    if let Some(var_4820) = &input.source_dest_check {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4819, var_4820,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4821 = writer.prefix("Attribute");
    if let Some(var_4822) = &input.attribute {
        scope_4821.string(var_4822.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4823 = writer.prefix("BlockDeviceMapping");
    if let Some(var_4824) = &input.block_device_mappings {
        let mut list_4826 = scope_4823.start_list(true, Some("item"));
        for item_4825 in var_4824 {
            #[allow(unused_mut)]
            let mut entry_4827 = list_4826.entry();
            crate::query_ser::serialize_structure_crate_model_instance_block_device_mapping_specification(entry_4827, item_4825)?;
        }
        list_4826.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4828 = writer.prefix("DisableApiTermination");
    if let Some(var_4829) = &input.disable_api_termination {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4828, var_4829,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4830 = writer.prefix("DryRun");
    if let Some(var_4831) = &input.dry_run {
        scope_4830.boolean(*var_4831);
    }
    #[allow(unused_mut)]
    let mut scope_4832 = writer.prefix("EbsOptimized");
    if let Some(var_4833) = &input.ebs_optimized {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4832, var_4833,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4834 = writer.prefix("EnaSupport");
    if let Some(var_4835) = &input.ena_support {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4834, var_4835,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4836 = writer.prefix("GroupId");
    if let Some(var_4837) = &input.groups {
        let mut list_4839 = scope_4836.start_list(true, Some("groupId"));
        for item_4838 in var_4837 {
            #[allow(unused_mut)]
            let mut entry_4840 = list_4839.entry();
            entry_4840.string(item_4838);
        }
        list_4839.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4841 = writer.prefix("InstanceId");
    if let Some(var_4842) = &input.instance_id {
        scope_4841.string(var_4842);
    }
    #[allow(unused_mut)]
    let mut scope_4843 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_4844) = &input.instance_initiated_shutdown_behavior {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4843, var_4844)?;
    }
    #[allow(unused_mut)]
    let mut scope_4845 = writer.prefix("InstanceType");
    if let Some(var_4846) = &input.instance_type {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4845, var_4846)?;
    }
    #[allow(unused_mut)]
    let mut scope_4847 = writer.prefix("Kernel");
    if let Some(var_4848) = &input.kernel {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4847, var_4848)?;
    }
    #[allow(unused_mut)]
    let mut scope_4849 = writer.prefix("Ramdisk");
    if let Some(var_4850) = &input.ramdisk {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4849, var_4850)?;
    }
    #[allow(unused_mut)]
    let mut scope_4851 = writer.prefix("SriovNetSupport");
    if let Some(var_4852) = &input.sriov_net_support {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4851, var_4852)?;
    }
    #[allow(unused_mut)]
    let mut scope_4853 = writer.prefix("UserData");
    if let Some(var_4854) = &input.user_data {
        crate::query_ser::serialize_structure_crate_model_blob_attribute_value(
            scope_4853, var_4854,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4855 = writer.prefix("Value");
    if let Some(var_4856) = &input.value {
        scope_4855.string(var_4856);
    }
    #[allow(unused_mut)]
    let mut scope_4857 = writer.prefix("DisableApiStop");
    if let Some(var_4858) = &input.disable_api_stop {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4857, var_4858,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_capacity_reservation_attributes(
    input: &crate::input::ModifyInstanceCapacityReservationAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyInstanceCapacityReservationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4859 = writer.prefix("InstanceId");
    if let Some(var_4860) = &input.instance_id {
        scope_4859.string(var_4860);
    }
    #[allow(unused_mut)]
    let mut scope_4861 = writer.prefix("CapacityReservationSpecification");
    if let Some(var_4862) = &input.capacity_reservation_specification {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_specification(
            scope_4861, var_4862,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4863 = writer.prefix("DryRun");
    if let Some(var_4864) = &input.dry_run {
        scope_4863.boolean(*var_4864);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_credit_specification(
    input: &crate::input::ModifyInstanceCreditSpecificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyInstanceCreditSpecification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4865 = writer.prefix("DryRun");
    if let Some(var_4866) = &input.dry_run {
        scope_4865.boolean(*var_4866);
    }
    #[allow(unused_mut)]
    let mut scope_4867 = writer.prefix("ClientToken");
    if let Some(var_4868) = &input.client_token {
        scope_4867.string(var_4868);
    }
    #[allow(unused_mut)]
    let mut scope_4869 = writer.prefix("InstanceCreditSpecification");
    if let Some(var_4870) = &input.instance_credit_specifications {
        let mut list_4872 = scope_4869.start_list(true, Some("item"));
        for item_4871 in var_4870 {
            #[allow(unused_mut)]
            let mut entry_4873 = list_4872.entry();
            crate::query_ser::serialize_structure_crate_model_instance_credit_specification_request(entry_4873, item_4871)?;
        }
        list_4872.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_event_start_time(
    input: &crate::input::ModifyInstanceEventStartTimeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceEventStartTime", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4874 = writer.prefix("DryRun");
    if let Some(var_4875) = &input.dry_run {
        scope_4874.boolean(*var_4875);
    }
    #[allow(unused_mut)]
    let mut scope_4876 = writer.prefix("InstanceId");
    if let Some(var_4877) = &input.instance_id {
        scope_4876.string(var_4877);
    }
    #[allow(unused_mut)]
    let mut scope_4878 = writer.prefix("InstanceEventId");
    if let Some(var_4879) = &input.instance_event_id {
        scope_4878.string(var_4879);
    }
    #[allow(unused_mut)]
    let mut scope_4880 = writer.prefix("NotBefore");
    if let Some(var_4881) = &input.not_before {
        scope_4880.date_time(var_4881, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_event_window(
    input: &crate::input::ModifyInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4882 = writer.prefix("DryRun");
    if let Some(var_4883) = &input.dry_run {
        scope_4882.boolean(*var_4883);
    }
    #[allow(unused_mut)]
    let mut scope_4884 = writer.prefix("Name");
    if let Some(var_4885) = &input.name {
        scope_4884.string(var_4885);
    }
    #[allow(unused_mut)]
    let mut scope_4886 = writer.prefix("InstanceEventWindowId");
    if let Some(var_4887) = &input.instance_event_window_id {
        scope_4886.string(var_4887);
    }
    #[allow(unused_mut)]
    let mut scope_4888 = writer.prefix("TimeRange");
    if let Some(var_4889) = &input.time_ranges {
        let mut list_4891 = scope_4888.start_list(true, None);
        for item_4890 in var_4889 {
            #[allow(unused_mut)]
            let mut entry_4892 = list_4891.entry();
            crate::query_ser::serialize_structure_crate_model_instance_event_window_time_range_request(entry_4892, item_4890)?;
        }
        list_4891.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4893 = writer.prefix("CronExpression");
    if let Some(var_4894) = &input.cron_expression {
        scope_4893.string(var_4894);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_maintenance_options(
    input: &crate::input::ModifyInstanceMaintenanceOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyInstanceMaintenanceOptions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4895 = writer.prefix("InstanceId");
    if let Some(var_4896) = &input.instance_id {
        scope_4895.string(var_4896);
    }
    #[allow(unused_mut)]
    let mut scope_4897 = writer.prefix("AutoRecovery");
    if let Some(var_4898) = &input.auto_recovery {
        scope_4897.string(var_4898.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4899 = writer.prefix("DryRun");
    if let Some(var_4900) = &input.dry_run {
        scope_4899.boolean(*var_4900);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_metadata_options(
    input: &crate::input::ModifyInstanceMetadataOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceMetadataOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4901 = writer.prefix("InstanceId");
    if let Some(var_4902) = &input.instance_id {
        scope_4901.string(var_4902);
    }
    #[allow(unused_mut)]
    let mut scope_4903 = writer.prefix("HttpTokens");
    if let Some(var_4904) = &input.http_tokens {
        scope_4903.string(var_4904.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4905 = writer.prefix("HttpPutResponseHopLimit");
    if let Some(var_4906) = &input.http_put_response_hop_limit {
        scope_4905.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4906).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4907 = writer.prefix("HttpEndpoint");
    if let Some(var_4908) = &input.http_endpoint {
        scope_4907.string(var_4908.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4909 = writer.prefix("DryRun");
    if let Some(var_4910) = &input.dry_run {
        scope_4909.boolean(*var_4910);
    }
    #[allow(unused_mut)]
    let mut scope_4911 = writer.prefix("HttpProtocolIpv6");
    if let Some(var_4912) = &input.http_protocol_ipv6 {
        scope_4911.string(var_4912.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4913 = writer.prefix("InstanceMetadataTags");
    if let Some(var_4914) = &input.instance_metadata_tags {
        scope_4913.string(var_4914.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_placement(
    input: &crate::input::ModifyInstancePlacementInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstancePlacement", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4915 = writer.prefix("Affinity");
    if let Some(var_4916) = &input.affinity {
        scope_4915.string(var_4916.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4917 = writer.prefix("GroupName");
    if let Some(var_4918) = &input.group_name {
        scope_4917.string(var_4918);
    }
    #[allow(unused_mut)]
    let mut scope_4919 = writer.prefix("HostId");
    if let Some(var_4920) = &input.host_id {
        scope_4919.string(var_4920);
    }
    #[allow(unused_mut)]
    let mut scope_4921 = writer.prefix("InstanceId");
    if let Some(var_4922) = &input.instance_id {
        scope_4921.string(var_4922);
    }
    #[allow(unused_mut)]
    let mut scope_4923 = writer.prefix("Tenancy");
    if let Some(var_4924) = &input.tenancy {
        scope_4923.string(var_4924.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4925 = writer.prefix("PartitionNumber");
    if let Some(var_4926) = &input.partition_number {
        scope_4925.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4926).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4927 = writer.prefix("HostResourceGroupArn");
    if let Some(var_4928) = &input.host_resource_group_arn {
        scope_4927.string(var_4928);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ipam(
    input: &crate::input::ModifyIpamInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIpam", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4929 = writer.prefix("DryRun");
    if let Some(var_4930) = &input.dry_run {
        scope_4929.boolean(*var_4930);
    }
    #[allow(unused_mut)]
    let mut scope_4931 = writer.prefix("IpamId");
    if let Some(var_4932) = &input.ipam_id {
        scope_4931.string(var_4932);
    }
    #[allow(unused_mut)]
    let mut scope_4933 = writer.prefix("Description");
    if let Some(var_4934) = &input.description {
        scope_4933.string(var_4934);
    }
    #[allow(unused_mut)]
    let mut scope_4935 = writer.prefix("AddOperatingRegion");
    if let Some(var_4936) = &input.add_operating_regions {
        let mut list_4938 = scope_4935.start_list(true, None);
        for item_4937 in var_4936 {
            #[allow(unused_mut)]
            let mut entry_4939 = list_4938.entry();
            crate::query_ser::serialize_structure_crate_model_add_ipam_operating_region(
                entry_4939, item_4937,
            )?;
        }
        list_4938.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4940 = writer.prefix("RemoveOperatingRegion");
    if let Some(var_4941) = &input.remove_operating_regions {
        let mut list_4943 = scope_4940.start_list(true, None);
        for item_4942 in var_4941 {
            #[allow(unused_mut)]
            let mut entry_4944 = list_4943.entry();
            crate::query_ser::serialize_structure_crate_model_remove_ipam_operating_region(
                entry_4944, item_4942,
            )?;
        }
        list_4943.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ipam_pool(
    input: &crate::input::ModifyIpamPoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIpamPool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4945 = writer.prefix("DryRun");
    if let Some(var_4946) = &input.dry_run {
        scope_4945.boolean(*var_4946);
    }
    #[allow(unused_mut)]
    let mut scope_4947 = writer.prefix("IpamPoolId");
    if let Some(var_4948) = &input.ipam_pool_id {
        scope_4947.string(var_4948);
    }
    #[allow(unused_mut)]
    let mut scope_4949 = writer.prefix("Description");
    if let Some(var_4950) = &input.description {
        scope_4949.string(var_4950);
    }
    #[allow(unused_mut)]
    let mut scope_4951 = writer.prefix("AutoImport");
    if let Some(var_4952) = &input.auto_import {
        scope_4951.boolean(*var_4952);
    }
    #[allow(unused_mut)]
    let mut scope_4953 = writer.prefix("AllocationMinNetmaskLength");
    if let Some(var_4954) = &input.allocation_min_netmask_length {
        scope_4953.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4954).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4955 = writer.prefix("AllocationMaxNetmaskLength");
    if let Some(var_4956) = &input.allocation_max_netmask_length {
        scope_4955.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4956).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4957 = writer.prefix("AllocationDefaultNetmaskLength");
    if let Some(var_4958) = &input.allocation_default_netmask_length {
        scope_4957.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4958).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4959 = writer.prefix("ClearAllocationDefaultNetmaskLength");
    if let Some(var_4960) = &input.clear_allocation_default_netmask_length {
        scope_4959.boolean(*var_4960);
    }
    #[allow(unused_mut)]
    let mut scope_4961 = writer.prefix("AddAllocationResourceTag");
    if let Some(var_4962) = &input.add_allocation_resource_tags {
        let mut list_4964 = scope_4961.start_list(true, Some("item"));
        for item_4963 in var_4962 {
            #[allow(unused_mut)]
            let mut entry_4965 = list_4964.entry();
            crate::query_ser::serialize_structure_crate_model_request_ipam_resource_tag(
                entry_4965, item_4963,
            )?;
        }
        list_4964.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4966 = writer.prefix("RemoveAllocationResourceTag");
    if let Some(var_4967) = &input.remove_allocation_resource_tags {
        let mut list_4969 = scope_4966.start_list(true, Some("item"));
        for item_4968 in var_4967 {
            #[allow(unused_mut)]
            let mut entry_4970 = list_4969.entry();
            crate::query_ser::serialize_structure_crate_model_request_ipam_resource_tag(
                entry_4970, item_4968,
            )?;
        }
        list_4969.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ipam_resource_cidr(
    input: &crate::input::ModifyIpamResourceCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyIpamResourceCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4971 = writer.prefix("DryRun");
    if let Some(var_4972) = &input.dry_run {
        scope_4971.boolean(*var_4972);
    }
    #[allow(unused_mut)]
    let mut scope_4973 = writer.prefix("ResourceId");
    if let Some(var_4974) = &input.resource_id {
        scope_4973.string(var_4974);
    }
    #[allow(unused_mut)]
    let mut scope_4975 = writer.prefix("ResourceCidr");
    if let Some(var_4976) = &input.resource_cidr {
        scope_4975.string(var_4976);
    }
    #[allow(unused_mut)]
    let mut scope_4977 = writer.prefix("ResourceRegion");
    if let Some(var_4978) = &input.resource_region {
        scope_4977.string(var_4978);
    }
    #[allow(unused_mut)]
    let mut scope_4979 = writer.prefix("CurrentIpamScopeId");
    if let Some(var_4980) = &input.current_ipam_scope_id {
        scope_4979.string(var_4980);
    }
    #[allow(unused_mut)]
    let mut scope_4981 = writer.prefix("DestinationIpamScopeId");
    if let Some(var_4982) = &input.destination_ipam_scope_id {
        scope_4981.string(var_4982);
    }
    #[allow(unused_mut)]
    let mut scope_4983 = writer.prefix("Monitored");
    if let Some(var_4984) = &input.monitored {
        scope_4983.boolean(*var_4984);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ipam_scope(
    input: &crate::input::ModifyIpamScopeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIpamScope", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4985 = writer.prefix("DryRun");
    if let Some(var_4986) = &input.dry_run {
        scope_4985.boolean(*var_4986);
    }
    #[allow(unused_mut)]
    let mut scope_4987 = writer.prefix("IpamScopeId");
    if let Some(var_4988) = &input.ipam_scope_id {
        scope_4987.string(var_4988);
    }
    #[allow(unused_mut)]
    let mut scope_4989 = writer.prefix("Description");
    if let Some(var_4990) = &input.description {
        scope_4989.string(var_4990);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_launch_template(
    input: &crate::input::ModifyLaunchTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4991 = writer.prefix("DryRun");
    if let Some(var_4992) = &input.dry_run {
        scope_4991.boolean(*var_4992);
    }
    #[allow(unused_mut)]
    let mut scope_4993 = writer.prefix("ClientToken");
    if let Some(var_4994) = &input.client_token {
        scope_4993.string(var_4994);
    }
    #[allow(unused_mut)]
    let mut scope_4995 = writer.prefix("LaunchTemplateId");
    if let Some(var_4996) = &input.launch_template_id {
        scope_4995.string(var_4996);
    }
    #[allow(unused_mut)]
    let mut scope_4997 = writer.prefix("LaunchTemplateName");
    if let Some(var_4998) = &input.launch_template_name {
        scope_4997.string(var_4998);
    }
    #[allow(unused_mut)]
    let mut scope_4999 = writer.prefix("SetDefaultVersion");
    if let Some(var_5000) = &input.default_version {
        scope_4999.string(var_5000);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_managed_prefix_list(
    input: &crate::input::ModifyManagedPrefixListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5001 = writer.prefix("DryRun");
    if let Some(var_5002) = &input.dry_run {
        scope_5001.boolean(*var_5002);
    }
    #[allow(unused_mut)]
    let mut scope_5003 = writer.prefix("PrefixListId");
    if let Some(var_5004) = &input.prefix_list_id {
        scope_5003.string(var_5004);
    }
    #[allow(unused_mut)]
    let mut scope_5005 = writer.prefix("CurrentVersion");
    if let Some(var_5006) = &input.current_version {
        scope_5005.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5006).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5007 = writer.prefix("PrefixListName");
    if let Some(var_5008) = &input.prefix_list_name {
        scope_5007.string(var_5008);
    }
    #[allow(unused_mut)]
    let mut scope_5009 = writer.prefix("AddEntry");
    if let Some(var_5010) = &input.add_entries {
        let mut list_5012 = scope_5009.start_list(true, None);
        for item_5011 in var_5010 {
            #[allow(unused_mut)]
            let mut entry_5013 = list_5012.entry();
            crate::query_ser::serialize_structure_crate_model_add_prefix_list_entry(
                entry_5013, item_5011,
            )?;
        }
        list_5012.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5014 = writer.prefix("RemoveEntry");
    if let Some(var_5015) = &input.remove_entries {
        let mut list_5017 = scope_5014.start_list(true, None);
        for item_5016 in var_5015 {
            #[allow(unused_mut)]
            let mut entry_5018 = list_5017.entry();
            crate::query_ser::serialize_structure_crate_model_remove_prefix_list_entry(
                entry_5018, item_5016,
            )?;
        }
        list_5017.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5019 = writer.prefix("MaxEntries");
    if let Some(var_5020) = &input.max_entries {
        scope_5019.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5020).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_network_interface_attribute(
    input: &crate::input::ModifyNetworkInterfaceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyNetworkInterfaceAttribute",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5021 = writer.prefix("Attachment");
    if let Some(var_5022) = &input.attachment {
        crate::query_ser::serialize_structure_crate_model_network_interface_attachment_changes(
            scope_5021, var_5022,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5023 = writer.prefix("Description");
    if let Some(var_5024) = &input.description {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_5023, var_5024)?;
    }
    #[allow(unused_mut)]
    let mut scope_5025 = writer.prefix("DryRun");
    if let Some(var_5026) = &input.dry_run {
        scope_5025.boolean(*var_5026);
    }
    #[allow(unused_mut)]
    let mut scope_5027 = writer.prefix("SecurityGroupId");
    if let Some(var_5028) = &input.groups {
        let mut list_5030 = scope_5027.start_list(true, Some("SecurityGroupId"));
        for item_5029 in var_5028 {
            #[allow(unused_mut)]
            let mut entry_5031 = list_5030.entry();
            entry_5031.string(item_5029);
        }
        list_5030.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5032 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5033) = &input.network_interface_id {
        scope_5032.string(var_5033);
    }
    #[allow(unused_mut)]
    let mut scope_5034 = writer.prefix("SourceDestCheck");
    if let Some(var_5035) = &input.source_dest_check {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5034, var_5035,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_private_dns_name_options(
    input: &crate::input::ModifyPrivateDnsNameOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyPrivateDnsNameOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5036 = writer.prefix("DryRun");
    if let Some(var_5037) = &input.dry_run {
        scope_5036.boolean(*var_5037);
    }
    #[allow(unused_mut)]
    let mut scope_5038 = writer.prefix("InstanceId");
    if let Some(var_5039) = &input.instance_id {
        scope_5038.string(var_5039);
    }
    #[allow(unused_mut)]
    let mut scope_5040 = writer.prefix("PrivateDnsHostnameType");
    if let Some(var_5041) = &input.private_dns_hostname_type {
        scope_5040.string(var_5041.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5042 = writer.prefix("EnableResourceNameDnsARecord");
    if let Some(var_5043) = &input.enable_resource_name_dns_a_record {
        scope_5042.boolean(*var_5043);
    }
    #[allow(unused_mut)]
    let mut scope_5044 = writer.prefix("EnableResourceNameDnsAAAARecord");
    if let Some(var_5045) = &input.enable_resource_name_dns_aaaa_record {
        scope_5044.boolean(*var_5045);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_reserved_instances(
    input: &crate::input::ModifyReservedInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5046 = writer.prefix("ReservedInstancesId");
    if let Some(var_5047) = &input.reserved_instances_ids {
        let mut list_5049 = scope_5046.start_list(true, Some("ReservedInstancesId"));
        for item_5048 in var_5047 {
            #[allow(unused_mut)]
            let mut entry_5050 = list_5049.entry();
            entry_5050.string(item_5048);
        }
        list_5049.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5051 = writer.prefix("ClientToken");
    if let Some(var_5052) = &input.client_token {
        scope_5051.string(var_5052);
    }
    #[allow(unused_mut)]
    let mut scope_5053 = writer.prefix("ReservedInstancesConfigurationSetItemType");
    if let Some(var_5054) = &input.target_configurations {
        let mut list_5056 = scope_5053.start_list(true, Some("item"));
        for item_5055 in var_5054 {
            #[allow(unused_mut)]
            let mut entry_5057 = list_5056.entry();
            crate::query_ser::serialize_structure_crate_model_reserved_instances_configuration(
                entry_5057, item_5055,
            )?;
        }
        list_5056.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_security_group_rules(
    input: &crate::input::ModifySecurityGroupRulesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySecurityGroupRules", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5058 = writer.prefix("GroupId");
    if let Some(var_5059) = &input.group_id {
        scope_5058.string(var_5059);
    }
    #[allow(unused_mut)]
    let mut scope_5060 = writer.prefix("SecurityGroupRule");
    if let Some(var_5061) = &input.security_group_rules {
        let mut list_5063 = scope_5060.start_list(true, Some("item"));
        for item_5062 in var_5061 {
            #[allow(unused_mut)]
            let mut entry_5064 = list_5063.entry();
            crate::query_ser::serialize_structure_crate_model_security_group_rule_update(
                entry_5064, item_5062,
            )?;
        }
        list_5063.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5065 = writer.prefix("DryRun");
    if let Some(var_5066) = &input.dry_run {
        scope_5065.boolean(*var_5066);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_snapshot_attribute(
    input: &crate::input::ModifySnapshotAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5067 = writer.prefix("Attribute");
    if let Some(var_5068) = &input.attribute {
        scope_5067.string(var_5068.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5069 = writer.prefix("CreateVolumePermission");
    if let Some(var_5070) = &input.create_volume_permission {
        crate::query_ser::serialize_structure_crate_model_create_volume_permission_modifications(
            scope_5069, var_5070,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5071 = writer.prefix("UserGroup");
    if let Some(var_5072) = &input.group_names {
        let mut list_5074 = scope_5071.start_list(true, Some("GroupName"));
        for item_5073 in var_5072 {
            #[allow(unused_mut)]
            let mut entry_5075 = list_5074.entry();
            entry_5075.string(item_5073);
        }
        list_5074.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5076 = writer.prefix("OperationType");
    if let Some(var_5077) = &input.operation_type {
        scope_5076.string(var_5077.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5078 = writer.prefix("SnapshotId");
    if let Some(var_5079) = &input.snapshot_id {
        scope_5078.string(var_5079);
    }
    #[allow(unused_mut)]
    let mut scope_5080 = writer.prefix("UserId");
    if let Some(var_5081) = &input.user_ids {
        let mut list_5083 = scope_5080.start_list(true, Some("UserId"));
        for item_5082 in var_5081 {
            #[allow(unused_mut)]
            let mut entry_5084 = list_5083.entry();
            entry_5084.string(item_5082);
        }
        list_5083.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5085 = writer.prefix("DryRun");
    if let Some(var_5086) = &input.dry_run {
        scope_5085.boolean(*var_5086);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_snapshot_tier(
    input: &crate::input::ModifySnapshotTierInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySnapshotTier", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5087 = writer.prefix("SnapshotId");
    if let Some(var_5088) = &input.snapshot_id {
        scope_5087.string(var_5088);
    }
    #[allow(unused_mut)]
    let mut scope_5089 = writer.prefix("StorageTier");
    if let Some(var_5090) = &input.storage_tier {
        scope_5089.string(var_5090.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5091 = writer.prefix("DryRun");
    if let Some(var_5092) = &input.dry_run {
        scope_5091.boolean(*var_5092);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_spot_fleet_request(
    input: &crate::input::ModifySpotFleetRequestInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySpotFleetRequest", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5093 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_5094) = &input.excess_capacity_termination_policy {
        scope_5093.string(var_5094.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5095 = writer.prefix("LaunchTemplateConfig");
    if let Some(var_5096) = &input.launch_template_configs {
        let mut list_5098 = scope_5095.start_list(true, Some("item"));
        for item_5097 in var_5096 {
            #[allow(unused_mut)]
            let mut entry_5099 = list_5098.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_config(
                entry_5099, item_5097,
            )?;
        }
        list_5098.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5100 = writer.prefix("SpotFleetRequestId");
    if let Some(var_5101) = &input.spot_fleet_request_id {
        scope_5100.string(var_5101);
    }
    #[allow(unused_mut)]
    let mut scope_5102 = writer.prefix("TargetCapacity");
    if let Some(var_5103) = &input.target_capacity {
        scope_5102.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5103).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5104 = writer.prefix("OnDemandTargetCapacity");
    if let Some(var_5105) = &input.on_demand_target_capacity {
        scope_5104.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5105).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5106 = writer.prefix("Context");
    if let Some(var_5107) = &input.context {
        scope_5106.string(var_5107);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_subnet_attribute(
    input: &crate::input::ModifySubnetAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySubnetAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5108 = writer.prefix("AssignIpv6AddressOnCreation");
    if let Some(var_5109) = &input.assign_ipv6_address_on_creation {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5108, var_5109,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5110 = writer.prefix("MapPublicIpOnLaunch");
    if let Some(var_5111) = &input.map_public_ip_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5110, var_5111,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5112 = writer.prefix("SubnetId");
    if let Some(var_5113) = &input.subnet_id {
        scope_5112.string(var_5113);
    }
    #[allow(unused_mut)]
    let mut scope_5114 = writer.prefix("MapCustomerOwnedIpOnLaunch");
    if let Some(var_5115) = &input.map_customer_owned_ip_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5114, var_5115,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5116 = writer.prefix("CustomerOwnedIpv4Pool");
    if let Some(var_5117) = &input.customer_owned_ipv4_pool {
        scope_5116.string(var_5117);
    }
    #[allow(unused_mut)]
    let mut scope_5118 = writer.prefix("EnableDns64");
    if let Some(var_5119) = &input.enable_dns64 {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5118, var_5119,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5120 = writer.prefix("PrivateDnsHostnameTypeOnLaunch");
    if let Some(var_5121) = &input.private_dns_hostname_type_on_launch {
        scope_5120.string(var_5121.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5122 = writer.prefix("EnableResourceNameDnsARecordOnLaunch");
    if let Some(var_5123) = &input.enable_resource_name_dns_a_record_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5122, var_5123,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5124 = writer.prefix("EnableResourceNameDnsAAAARecordOnLaunch");
    if let Some(var_5125) = &input.enable_resource_name_dns_aaaa_record_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5124, var_5125,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5126 = writer.prefix("EnableLniAtDeviceIndex");
    if let Some(var_5127) = &input.enable_lni_at_device_index {
        scope_5126.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5127).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5128 = writer.prefix("DisableLniAtDeviceIndex");
    if let Some(var_5129) = &input.disable_lni_at_device_index {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5128, var_5129,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_traffic_mirror_filter_network_services(
    input: &crate::input::ModifyTrafficMirrorFilterNetworkServicesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyTrafficMirrorFilterNetworkServices",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5130 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_5131) = &input.traffic_mirror_filter_id {
        scope_5130.string(var_5131);
    }
    #[allow(unused_mut)]
    let mut scope_5132 = writer.prefix("AddNetworkService");
    if let Some(var_5133) = &input.add_network_services {
        let mut list_5135 = scope_5132.start_list(true, Some("item"));
        for item_5134 in var_5133 {
            #[allow(unused_mut)]
            let mut entry_5136 = list_5135.entry();
            entry_5136.string(item_5134.as_str());
        }
        list_5135.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5137 = writer.prefix("RemoveNetworkService");
    if let Some(var_5138) = &input.remove_network_services {
        let mut list_5140 = scope_5137.start_list(true, Some("item"));
        for item_5139 in var_5138 {
            #[allow(unused_mut)]
            let mut entry_5141 = list_5140.entry();
            entry_5141.string(item_5139.as_str());
        }
        list_5140.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5142 = writer.prefix("DryRun");
    if let Some(var_5143) = &input.dry_run {
        scope_5142.boolean(*var_5143);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_traffic_mirror_filter_rule(
    input: &crate::input::ModifyTrafficMirrorFilterRuleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5144 = writer.prefix("TrafficMirrorFilterRuleId");
    if let Some(var_5145) = &input.traffic_mirror_filter_rule_id {
        scope_5144.string(var_5145);
    }
    #[allow(unused_mut)]
    let mut scope_5146 = writer.prefix("TrafficDirection");
    if let Some(var_5147) = &input.traffic_direction {
        scope_5146.string(var_5147.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5148 = writer.prefix("RuleNumber");
    if let Some(var_5149) = &input.rule_number {
        scope_5148.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5149).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5150 = writer.prefix("RuleAction");
    if let Some(var_5151) = &input.rule_action {
        scope_5150.string(var_5151.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5152 = writer.prefix("DestinationPortRange");
    if let Some(var_5153) = &input.destination_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_5152, var_5153,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5154 = writer.prefix("SourcePortRange");
    if let Some(var_5155) = &input.source_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_5154, var_5155,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5156 = writer.prefix("Protocol");
    if let Some(var_5157) = &input.protocol {
        scope_5156.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5157).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5158 = writer.prefix("DestinationCidrBlock");
    if let Some(var_5159) = &input.destination_cidr_block {
        scope_5158.string(var_5159);
    }
    #[allow(unused_mut)]
    let mut scope_5160 = writer.prefix("SourceCidrBlock");
    if let Some(var_5161) = &input.source_cidr_block {
        scope_5160.string(var_5161);
    }
    #[allow(unused_mut)]
    let mut scope_5162 = writer.prefix("Description");
    if let Some(var_5163) = &input.description {
        scope_5162.string(var_5163);
    }
    #[allow(unused_mut)]
    let mut scope_5164 = writer.prefix("RemoveField");
    if let Some(var_5165) = &input.remove_fields {
        let mut list_5167 = scope_5164.start_list(true, None);
        for item_5166 in var_5165 {
            #[allow(unused_mut)]
            let mut entry_5168 = list_5167.entry();
            entry_5168.string(item_5166.as_str());
        }
        list_5167.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5169 = writer.prefix("DryRun");
    if let Some(var_5170) = &input.dry_run {
        scope_5169.boolean(*var_5170);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_traffic_mirror_session(
    input: &crate::input::ModifyTrafficMirrorSessionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5171 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_5172) = &input.traffic_mirror_session_id {
        scope_5171.string(var_5172);
    }
    #[allow(unused_mut)]
    let mut scope_5173 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_5174) = &input.traffic_mirror_target_id {
        scope_5173.string(var_5174);
    }
    #[allow(unused_mut)]
    let mut scope_5175 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_5176) = &input.traffic_mirror_filter_id {
        scope_5175.string(var_5176);
    }
    #[allow(unused_mut)]
    let mut scope_5177 = writer.prefix("PacketLength");
    if let Some(var_5178) = &input.packet_length {
        scope_5177.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5178).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5179 = writer.prefix("SessionNumber");
    if let Some(var_5180) = &input.session_number {
        scope_5179.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5180).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5181 = writer.prefix("VirtualNetworkId");
    if let Some(var_5182) = &input.virtual_network_id {
        scope_5181.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5182).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5183 = writer.prefix("Description");
    if let Some(var_5184) = &input.description {
        scope_5183.string(var_5184);
    }
    #[allow(unused_mut)]
    let mut scope_5185 = writer.prefix("RemoveField");
    if let Some(var_5186) = &input.remove_fields {
        let mut list_5188 = scope_5185.start_list(true, None);
        for item_5187 in var_5186 {
            #[allow(unused_mut)]
            let mut entry_5189 = list_5188.entry();
            entry_5189.string(item_5187.as_str());
        }
        list_5188.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5190 = writer.prefix("DryRun");
    if let Some(var_5191) = &input.dry_run {
        scope_5190.boolean(*var_5191);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_transit_gateway(
    input: &crate::input::ModifyTransitGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5192 = writer.prefix("TransitGatewayId");
    if let Some(var_5193) = &input.transit_gateway_id {
        scope_5192.string(var_5193);
    }
    #[allow(unused_mut)]
    let mut scope_5194 = writer.prefix("Description");
    if let Some(var_5195) = &input.description {
        scope_5194.string(var_5195);
    }
    #[allow(unused_mut)]
    let mut scope_5196 = writer.prefix("Options");
    if let Some(var_5197) = &input.options {
        crate::query_ser::serialize_structure_crate_model_modify_transit_gateway_options(
            scope_5196, var_5197,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5198 = writer.prefix("DryRun");
    if let Some(var_5199) = &input.dry_run {
        scope_5198.boolean(*var_5199);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_transit_gateway_prefix_list_reference(
    input: &crate::input::ModifyTransitGatewayPrefixListReferenceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyTransitGatewayPrefixListReference",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5200 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_5201) = &input.transit_gateway_route_table_id {
        scope_5200.string(var_5201);
    }
    #[allow(unused_mut)]
    let mut scope_5202 = writer.prefix("PrefixListId");
    if let Some(var_5203) = &input.prefix_list_id {
        scope_5202.string(var_5203);
    }
    #[allow(unused_mut)]
    let mut scope_5204 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5205) = &input.transit_gateway_attachment_id {
        scope_5204.string(var_5205);
    }
    #[allow(unused_mut)]
    let mut scope_5206 = writer.prefix("Blackhole");
    if let Some(var_5207) = &input.blackhole {
        scope_5206.boolean(*var_5207);
    }
    #[allow(unused_mut)]
    let mut scope_5208 = writer.prefix("DryRun");
    if let Some(var_5209) = &input.dry_run {
        scope_5208.boolean(*var_5209);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_transit_gateway_vpc_attachment(
    input: &crate::input::ModifyTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5210 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5211) = &input.transit_gateway_attachment_id {
        scope_5210.string(var_5211);
    }
    #[allow(unused_mut)]
    let mut scope_5212 = writer.prefix("AddSubnetIds");
    if let Some(var_5213) = &input.add_subnet_ids {
        let mut list_5215 = scope_5212.start_list(true, Some("item"));
        for item_5214 in var_5213 {
            #[allow(unused_mut)]
            let mut entry_5216 = list_5215.entry();
            entry_5216.string(item_5214);
        }
        list_5215.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5217 = writer.prefix("RemoveSubnetIds");
    if let Some(var_5218) = &input.remove_subnet_ids {
        let mut list_5220 = scope_5217.start_list(true, Some("item"));
        for item_5219 in var_5218 {
            #[allow(unused_mut)]
            let mut entry_5221 = list_5220.entry();
            entry_5221.string(item_5219);
        }
        list_5220.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5222 = writer.prefix("Options");
    if let Some(var_5223) = &input.options {
        crate::query_ser::serialize_structure_crate_model_modify_transit_gateway_vpc_attachment_request_options(scope_5222, var_5223)?;
    }
    #[allow(unused_mut)]
    let mut scope_5224 = writer.prefix("DryRun");
    if let Some(var_5225) = &input.dry_run {
        scope_5224.boolean(*var_5225);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_volume(
    input: &crate::input::ModifyVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5226 = writer.prefix("DryRun");
    if let Some(var_5227) = &input.dry_run {
        scope_5226.boolean(*var_5227);
    }
    #[allow(unused_mut)]
    let mut scope_5228 = writer.prefix("VolumeId");
    if let Some(var_5229) = &input.volume_id {
        scope_5228.string(var_5229);
    }
    #[allow(unused_mut)]
    let mut scope_5230 = writer.prefix("Size");
    if let Some(var_5231) = &input.size {
        scope_5230.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5231).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5232 = writer.prefix("VolumeType");
    if let Some(var_5233) = &input.volume_type {
        scope_5232.string(var_5233.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5234 = writer.prefix("Iops");
    if let Some(var_5235) = &input.iops {
        scope_5234.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5235).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5236 = writer.prefix("Throughput");
    if let Some(var_5237) = &input.throughput {
        scope_5236.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5237).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5238 = writer.prefix("MultiAttachEnabled");
    if let Some(var_5239) = &input.multi_attach_enabled {
        scope_5238.boolean(*var_5239);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_volume_attribute(
    input: &crate::input::ModifyVolumeAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVolumeAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5240 = writer.prefix("AutoEnableIO");
    if let Some(var_5241) = &input.auto_enable_io {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5240, var_5241,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5242 = writer.prefix("VolumeId");
    if let Some(var_5243) = &input.volume_id {
        scope_5242.string(var_5243);
    }
    #[allow(unused_mut)]
    let mut scope_5244 = writer.prefix("DryRun");
    if let Some(var_5245) = &input.dry_run {
        scope_5244.boolean(*var_5245);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_attribute(
    input: &crate::input::ModifyVpcAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5246 = writer.prefix("EnableDnsHostnames");
    if let Some(var_5247) = &input.enable_dns_hostnames {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5246, var_5247,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5248 = writer.prefix("EnableDnsSupport");
    if let Some(var_5249) = &input.enable_dns_support {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5248, var_5249,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5250 = writer.prefix("VpcId");
    if let Some(var_5251) = &input.vpc_id {
        scope_5250.string(var_5251);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint(
    input: &crate::input::ModifyVpcEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5252 = writer.prefix("DryRun");
    if let Some(var_5253) = &input.dry_run {
        scope_5252.boolean(*var_5253);
    }
    #[allow(unused_mut)]
    let mut scope_5254 = writer.prefix("VpcEndpointId");
    if let Some(var_5255) = &input.vpc_endpoint_id {
        scope_5254.string(var_5255);
    }
    #[allow(unused_mut)]
    let mut scope_5256 = writer.prefix("ResetPolicy");
    if let Some(var_5257) = &input.reset_policy {
        scope_5256.boolean(*var_5257);
    }
    #[allow(unused_mut)]
    let mut scope_5258 = writer.prefix("PolicyDocument");
    if let Some(var_5259) = &input.policy_document {
        scope_5258.string(var_5259);
    }
    #[allow(unused_mut)]
    let mut scope_5260 = writer.prefix("AddRouteTableId");
    if let Some(var_5261) = &input.add_route_table_ids {
        let mut list_5263 = scope_5260.start_list(true, Some("item"));
        for item_5262 in var_5261 {
            #[allow(unused_mut)]
            let mut entry_5264 = list_5263.entry();
            entry_5264.string(item_5262);
        }
        list_5263.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5265 = writer.prefix("RemoveRouteTableId");
    if let Some(var_5266) = &input.remove_route_table_ids {
        let mut list_5268 = scope_5265.start_list(true, Some("item"));
        for item_5267 in var_5266 {
            #[allow(unused_mut)]
            let mut entry_5269 = list_5268.entry();
            entry_5269.string(item_5267);
        }
        list_5268.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5270 = writer.prefix("AddSubnetId");
    if let Some(var_5271) = &input.add_subnet_ids {
        let mut list_5273 = scope_5270.start_list(true, Some("item"));
        for item_5272 in var_5271 {
            #[allow(unused_mut)]
            let mut entry_5274 = list_5273.entry();
            entry_5274.string(item_5272);
        }
        list_5273.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5275 = writer.prefix("RemoveSubnetId");
    if let Some(var_5276) = &input.remove_subnet_ids {
        let mut list_5278 = scope_5275.start_list(true, Some("item"));
        for item_5277 in var_5276 {
            #[allow(unused_mut)]
            let mut entry_5279 = list_5278.entry();
            entry_5279.string(item_5277);
        }
        list_5278.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5280 = writer.prefix("AddSecurityGroupId");
    if let Some(var_5281) = &input.add_security_group_ids {
        let mut list_5283 = scope_5280.start_list(true, Some("item"));
        for item_5282 in var_5281 {
            #[allow(unused_mut)]
            let mut entry_5284 = list_5283.entry();
            entry_5284.string(item_5282);
        }
        list_5283.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5285 = writer.prefix("RemoveSecurityGroupId");
    if let Some(var_5286) = &input.remove_security_group_ids {
        let mut list_5288 = scope_5285.start_list(true, Some("item"));
        for item_5287 in var_5286 {
            #[allow(unused_mut)]
            let mut entry_5289 = list_5288.entry();
            entry_5289.string(item_5287);
        }
        list_5288.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5290 = writer.prefix("IpAddressType");
    if let Some(var_5291) = &input.ip_address_type {
        scope_5290.string(var_5291.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5292 = writer.prefix("DnsOptions");
    if let Some(var_5293) = &input.dns_options {
        crate::query_ser::serialize_structure_crate_model_dns_options_specification(
            scope_5292, var_5293,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5294 = writer.prefix("PrivateDnsEnabled");
    if let Some(var_5295) = &input.private_dns_enabled {
        scope_5294.boolean(*var_5295);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_connection_notification(
    input: &crate::input::ModifyVpcEndpointConnectionNotificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointConnectionNotification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5296 = writer.prefix("DryRun");
    if let Some(var_5297) = &input.dry_run {
        scope_5296.boolean(*var_5297);
    }
    #[allow(unused_mut)]
    let mut scope_5298 = writer.prefix("ConnectionNotificationId");
    if let Some(var_5299) = &input.connection_notification_id {
        scope_5298.string(var_5299);
    }
    #[allow(unused_mut)]
    let mut scope_5300 = writer.prefix("ConnectionNotificationArn");
    if let Some(var_5301) = &input.connection_notification_arn {
        scope_5300.string(var_5301);
    }
    #[allow(unused_mut)]
    let mut scope_5302 = writer.prefix("ConnectionEvents");
    if let Some(var_5303) = &input.connection_events {
        let mut list_5305 = scope_5302.start_list(true, Some("item"));
        for item_5304 in var_5303 {
            #[allow(unused_mut)]
            let mut entry_5306 = list_5305.entry();
            entry_5306.string(item_5304);
        }
        list_5305.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_service_configuration(
    input: &crate::input::ModifyVpcEndpointServiceConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointServiceConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5307 = writer.prefix("DryRun");
    if let Some(var_5308) = &input.dry_run {
        scope_5307.boolean(*var_5308);
    }
    #[allow(unused_mut)]
    let mut scope_5309 = writer.prefix("ServiceId");
    if let Some(var_5310) = &input.service_id {
        scope_5309.string(var_5310);
    }
    #[allow(unused_mut)]
    let mut scope_5311 = writer.prefix("PrivateDnsName");
    if let Some(var_5312) = &input.private_dns_name {
        scope_5311.string(var_5312);
    }
    #[allow(unused_mut)]
    let mut scope_5313 = writer.prefix("RemovePrivateDnsName");
    if let Some(var_5314) = &input.remove_private_dns_name {
        scope_5313.boolean(*var_5314);
    }
    #[allow(unused_mut)]
    let mut scope_5315 = writer.prefix("AcceptanceRequired");
    if let Some(var_5316) = &input.acceptance_required {
        scope_5315.boolean(*var_5316);
    }
    #[allow(unused_mut)]
    let mut scope_5317 = writer.prefix("AddNetworkLoadBalancerArn");
    if let Some(var_5318) = &input.add_network_load_balancer_arns {
        let mut list_5320 = scope_5317.start_list(true, Some("item"));
        for item_5319 in var_5318 {
            #[allow(unused_mut)]
            let mut entry_5321 = list_5320.entry();
            entry_5321.string(item_5319);
        }
        list_5320.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5322 = writer.prefix("RemoveNetworkLoadBalancerArn");
    if let Some(var_5323) = &input.remove_network_load_balancer_arns {
        let mut list_5325 = scope_5322.start_list(true, Some("item"));
        for item_5324 in var_5323 {
            #[allow(unused_mut)]
            let mut entry_5326 = list_5325.entry();
            entry_5326.string(item_5324);
        }
        list_5325.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5327 = writer.prefix("AddGatewayLoadBalancerArn");
    if let Some(var_5328) = &input.add_gateway_load_balancer_arns {
        let mut list_5330 = scope_5327.start_list(true, Some("item"));
        for item_5329 in var_5328 {
            #[allow(unused_mut)]
            let mut entry_5331 = list_5330.entry();
            entry_5331.string(item_5329);
        }
        list_5330.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5332 = writer.prefix("RemoveGatewayLoadBalancerArn");
    if let Some(var_5333) = &input.remove_gateway_load_balancer_arns {
        let mut list_5335 = scope_5332.start_list(true, Some("item"));
        for item_5334 in var_5333 {
            #[allow(unused_mut)]
            let mut entry_5336 = list_5335.entry();
            entry_5336.string(item_5334);
        }
        list_5335.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5337 = writer.prefix("AddSupportedIpAddressType");
    if let Some(var_5338) = &input.add_supported_ip_address_types {
        let mut list_5340 = scope_5337.start_list(true, Some("item"));
        for item_5339 in var_5338 {
            #[allow(unused_mut)]
            let mut entry_5341 = list_5340.entry();
            entry_5341.string(item_5339);
        }
        list_5340.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5342 = writer.prefix("RemoveSupportedIpAddressType");
    if let Some(var_5343) = &input.remove_supported_ip_address_types {
        let mut list_5345 = scope_5342.start_list(true, Some("item"));
        for item_5344 in var_5343 {
            #[allow(unused_mut)]
            let mut entry_5346 = list_5345.entry();
            entry_5346.string(item_5344);
        }
        list_5345.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_service_payer_responsibility(
    input: &crate::input::ModifyVpcEndpointServicePayerResponsibilityInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointServicePayerResponsibility",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5347 = writer.prefix("DryRun");
    if let Some(var_5348) = &input.dry_run {
        scope_5347.boolean(*var_5348);
    }
    #[allow(unused_mut)]
    let mut scope_5349 = writer.prefix("ServiceId");
    if let Some(var_5350) = &input.service_id {
        scope_5349.string(var_5350);
    }
    #[allow(unused_mut)]
    let mut scope_5351 = writer.prefix("PayerResponsibility");
    if let Some(var_5352) = &input.payer_responsibility {
        scope_5351.string(var_5352.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_service_permissions(
    input: &crate::input::ModifyVpcEndpointServicePermissionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointServicePermissions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5353 = writer.prefix("DryRun");
    if let Some(var_5354) = &input.dry_run {
        scope_5353.boolean(*var_5354);
    }
    #[allow(unused_mut)]
    let mut scope_5355 = writer.prefix("ServiceId");
    if let Some(var_5356) = &input.service_id {
        scope_5355.string(var_5356);
    }
    #[allow(unused_mut)]
    let mut scope_5357 = writer.prefix("AddAllowedPrincipals");
    if let Some(var_5358) = &input.add_allowed_principals {
        let mut list_5360 = scope_5357.start_list(true, Some("item"));
        for item_5359 in var_5358 {
            #[allow(unused_mut)]
            let mut entry_5361 = list_5360.entry();
            entry_5361.string(item_5359);
        }
        list_5360.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5362 = writer.prefix("RemoveAllowedPrincipals");
    if let Some(var_5363) = &input.remove_allowed_principals {
        let mut list_5365 = scope_5362.start_list(true, Some("item"));
        for item_5364 in var_5363 {
            #[allow(unused_mut)]
            let mut entry_5366 = list_5365.entry();
            entry_5366.string(item_5364);
        }
        list_5365.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_peering_connection_options(
    input: &crate::input::ModifyVpcPeeringConnectionOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcPeeringConnectionOptions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5367 = writer.prefix("AccepterPeeringConnectionOptions");
    if let Some(var_5368) = &input.accepter_peering_connection_options {
        crate::query_ser::serialize_structure_crate_model_peering_connection_options_request(
            scope_5367, var_5368,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5369 = writer.prefix("DryRun");
    if let Some(var_5370) = &input.dry_run {
        scope_5369.boolean(*var_5370);
    }
    #[allow(unused_mut)]
    let mut scope_5371 = writer.prefix("RequesterPeeringConnectionOptions");
    if let Some(var_5372) = &input.requester_peering_connection_options {
        crate::query_ser::serialize_structure_crate_model_peering_connection_options_request(
            scope_5371, var_5372,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5373 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_5374) = &input.vpc_peering_connection_id {
        scope_5373.string(var_5374);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_tenancy(
    input: &crate::input::ModifyVpcTenancyInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcTenancy", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5375 = writer.prefix("VpcId");
    if let Some(var_5376) = &input.vpc_id {
        scope_5375.string(var_5376);
    }
    #[allow(unused_mut)]
    let mut scope_5377 = writer.prefix("InstanceTenancy");
    if let Some(var_5378) = &input.instance_tenancy {
        scope_5377.string(var_5378.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5379 = writer.prefix("DryRun");
    if let Some(var_5380) = &input.dry_run {
        scope_5379.boolean(*var_5380);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_connection(
    input: &crate::input::ModifyVpnConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5381 = writer.prefix("VpnConnectionId");
    if let Some(var_5382) = &input.vpn_connection_id {
        scope_5381.string(var_5382);
    }
    #[allow(unused_mut)]
    let mut scope_5383 = writer.prefix("TransitGatewayId");
    if let Some(var_5384) = &input.transit_gateway_id {
        scope_5383.string(var_5384);
    }
    #[allow(unused_mut)]
    let mut scope_5385 = writer.prefix("CustomerGatewayId");
    if let Some(var_5386) = &input.customer_gateway_id {
        scope_5385.string(var_5386);
    }
    #[allow(unused_mut)]
    let mut scope_5387 = writer.prefix("VpnGatewayId");
    if let Some(var_5388) = &input.vpn_gateway_id {
        scope_5387.string(var_5388);
    }
    #[allow(unused_mut)]
    let mut scope_5389 = writer.prefix("DryRun");
    if let Some(var_5390) = &input.dry_run {
        scope_5389.boolean(*var_5390);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_connection_options(
    input: &crate::input::ModifyVpnConnectionOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnConnectionOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5391 = writer.prefix("VpnConnectionId");
    if let Some(var_5392) = &input.vpn_connection_id {
        scope_5391.string(var_5392);
    }
    #[allow(unused_mut)]
    let mut scope_5393 = writer.prefix("LocalIpv4NetworkCidr");
    if let Some(var_5394) = &input.local_ipv4_network_cidr {
        scope_5393.string(var_5394);
    }
    #[allow(unused_mut)]
    let mut scope_5395 = writer.prefix("RemoteIpv4NetworkCidr");
    if let Some(var_5396) = &input.remote_ipv4_network_cidr {
        scope_5395.string(var_5396);
    }
    #[allow(unused_mut)]
    let mut scope_5397 = writer.prefix("LocalIpv6NetworkCidr");
    if let Some(var_5398) = &input.local_ipv6_network_cidr {
        scope_5397.string(var_5398);
    }
    #[allow(unused_mut)]
    let mut scope_5399 = writer.prefix("RemoteIpv6NetworkCidr");
    if let Some(var_5400) = &input.remote_ipv6_network_cidr {
        scope_5399.string(var_5400);
    }
    #[allow(unused_mut)]
    let mut scope_5401 = writer.prefix("DryRun");
    if let Some(var_5402) = &input.dry_run {
        scope_5401.boolean(*var_5402);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_tunnel_certificate(
    input: &crate::input::ModifyVpnTunnelCertificateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnTunnelCertificate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5403 = writer.prefix("VpnConnectionId");
    if let Some(var_5404) = &input.vpn_connection_id {
        scope_5403.string(var_5404);
    }
    #[allow(unused_mut)]
    let mut scope_5405 = writer.prefix("VpnTunnelOutsideIpAddress");
    if let Some(var_5406) = &input.vpn_tunnel_outside_ip_address {
        scope_5405.string(var_5406);
    }
    #[allow(unused_mut)]
    let mut scope_5407 = writer.prefix("DryRun");
    if let Some(var_5408) = &input.dry_run {
        scope_5407.boolean(*var_5408);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_tunnel_options(
    input: &crate::input::ModifyVpnTunnelOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnTunnelOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5409 = writer.prefix("VpnConnectionId");
    if let Some(var_5410) = &input.vpn_connection_id {
        scope_5409.string(var_5410);
    }
    #[allow(unused_mut)]
    let mut scope_5411 = writer.prefix("VpnTunnelOutsideIpAddress");
    if let Some(var_5412) = &input.vpn_tunnel_outside_ip_address {
        scope_5411.string(var_5412);
    }
    #[allow(unused_mut)]
    let mut scope_5413 = writer.prefix("TunnelOptions");
    if let Some(var_5414) = &input.tunnel_options {
        crate::query_ser::serialize_structure_crate_model_modify_vpn_tunnel_options_specification(
            scope_5413, var_5414,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5415 = writer.prefix("DryRun");
    if let Some(var_5416) = &input.dry_run {
        scope_5415.boolean(*var_5416);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_monitor_instances(
    input: &crate::input::MonitorInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "MonitorInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5417 = writer.prefix("InstanceId");
    if let Some(var_5418) = &input.instance_ids {
        let mut list_5420 = scope_5417.start_list(true, Some("InstanceId"));
        for item_5419 in var_5418 {
            #[allow(unused_mut)]
            let mut entry_5421 = list_5420.entry();
            entry_5421.string(item_5419);
        }
        list_5420.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5422 = writer.prefix("DryRun");
    if let Some(var_5423) = &input.dry_run {
        scope_5422.boolean(*var_5423);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_move_address_to_vpc(
    input: &crate::input::MoveAddressToVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "MoveAddressToVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5424 = writer.prefix("DryRun");
    if let Some(var_5425) = &input.dry_run {
        scope_5424.boolean(*var_5425);
    }
    #[allow(unused_mut)]
    let mut scope_5426 = writer.prefix("PublicIp");
    if let Some(var_5427) = &input.public_ip {
        scope_5426.string(var_5427);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_move_byoip_cidr_to_ipam(
    input: &crate::input::MoveByoipCidrToIpamInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "MoveByoipCidrToIpam", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5428 = writer.prefix("DryRun");
    if let Some(var_5429) = &input.dry_run {
        scope_5428.boolean(*var_5429);
    }
    #[allow(unused_mut)]
    let mut scope_5430 = writer.prefix("Cidr");
    if let Some(var_5431) = &input.cidr {
        scope_5430.string(var_5431);
    }
    #[allow(unused_mut)]
    let mut scope_5432 = writer.prefix("IpamPoolId");
    if let Some(var_5433) = &input.ipam_pool_id {
        scope_5432.string(var_5433);
    }
    #[allow(unused_mut)]
    let mut scope_5434 = writer.prefix("IpamPoolOwner");
    if let Some(var_5435) = &input.ipam_pool_owner {
        scope_5434.string(var_5435);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_provision_byoip_cidr(
    input: &crate::input::ProvisionByoipCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ProvisionByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5436 = writer.prefix("Cidr");
    if let Some(var_5437) = &input.cidr {
        scope_5436.string(var_5437);
    }
    #[allow(unused_mut)]
    let mut scope_5438 = writer.prefix("CidrAuthorizationContext");
    if let Some(var_5439) = &input.cidr_authorization_context {
        crate::query_ser::serialize_structure_crate_model_cidr_authorization_context(
            scope_5438, var_5439,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5440 = writer.prefix("PubliclyAdvertisable");
    if let Some(var_5441) = &input.publicly_advertisable {
        scope_5440.boolean(*var_5441);
    }
    #[allow(unused_mut)]
    let mut scope_5442 = writer.prefix("Description");
    if let Some(var_5443) = &input.description {
        scope_5442.string(var_5443);
    }
    #[allow(unused_mut)]
    let mut scope_5444 = writer.prefix("DryRun");
    if let Some(var_5445) = &input.dry_run {
        scope_5444.boolean(*var_5445);
    }
    #[allow(unused_mut)]
    let mut scope_5446 = writer.prefix("PoolTagSpecification");
    if let Some(var_5447) = &input.pool_tag_specifications {
        let mut list_5449 = scope_5446.start_list(true, Some("item"));
        for item_5448 in var_5447 {
            #[allow(unused_mut)]
            let mut entry_5450 = list_5449.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5450, item_5448,
            )?;
        }
        list_5449.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5451 = writer.prefix("MultiRegion");
    if let Some(var_5452) = &input.multi_region {
        scope_5451.boolean(*var_5452);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_provision_ipam_pool_cidr(
    input: &crate::input::ProvisionIpamPoolCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ProvisionIpamPoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5453 = writer.prefix("DryRun");
    if let Some(var_5454) = &input.dry_run {
        scope_5453.boolean(*var_5454);
    }
    #[allow(unused_mut)]
    let mut scope_5455 = writer.prefix("IpamPoolId");
    if let Some(var_5456) = &input.ipam_pool_id {
        scope_5455.string(var_5456);
    }
    #[allow(unused_mut)]
    let mut scope_5457 = writer.prefix("Cidr");
    if let Some(var_5458) = &input.cidr {
        scope_5457.string(var_5458);
    }
    #[allow(unused_mut)]
    let mut scope_5459 = writer.prefix("CidrAuthorizationContext");
    if let Some(var_5460) = &input.cidr_authorization_context {
        crate::query_ser::serialize_structure_crate_model_ipam_cidr_authorization_context(
            scope_5459, var_5460,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_provision_public_ipv4_pool_cidr(
    input: &crate::input::ProvisionPublicIpv4PoolCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ProvisionPublicIpv4PoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5461 = writer.prefix("DryRun");
    if let Some(var_5462) = &input.dry_run {
        scope_5461.boolean(*var_5462);
    }
    #[allow(unused_mut)]
    let mut scope_5463 = writer.prefix("IpamPoolId");
    if let Some(var_5464) = &input.ipam_pool_id {
        scope_5463.string(var_5464);
    }
    #[allow(unused_mut)]
    let mut scope_5465 = writer.prefix("PoolId");
    if let Some(var_5466) = &input.pool_id {
        scope_5465.string(var_5466);
    }
    #[allow(unused_mut)]
    let mut scope_5467 = writer.prefix("NetmaskLength");
    if let Some(var_5468) = &input.netmask_length {
        scope_5467.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5468).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_host_reservation(
    input: &crate::input::PurchaseHostReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "PurchaseHostReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5469 = writer.prefix("ClientToken");
    if let Some(var_5470) = &input.client_token {
        scope_5469.string(var_5470);
    }
    #[allow(unused_mut)]
    let mut scope_5471 = writer.prefix("CurrencyCode");
    if let Some(var_5472) = &input.currency_code {
        scope_5471.string(var_5472.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5473 = writer.prefix("HostIdSet");
    if let Some(var_5474) = &input.host_id_set {
        let mut list_5476 = scope_5473.start_list(true, Some("item"));
        for item_5475 in var_5474 {
            #[allow(unused_mut)]
            let mut entry_5477 = list_5476.entry();
            entry_5477.string(item_5475);
        }
        list_5476.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5478 = writer.prefix("LimitPrice");
    if let Some(var_5479) = &input.limit_price {
        scope_5478.string(var_5479);
    }
    #[allow(unused_mut)]
    let mut scope_5480 = writer.prefix("OfferingId");
    if let Some(var_5481) = &input.offering_id {
        scope_5480.string(var_5481);
    }
    #[allow(unused_mut)]
    let mut scope_5482 = writer.prefix("TagSpecification");
    if let Some(var_5483) = &input.tag_specifications {
        let mut list_5485 = scope_5482.start_list(true, Some("item"));
        for item_5484 in var_5483 {
            #[allow(unused_mut)]
            let mut entry_5486 = list_5485.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5486, item_5484,
            )?;
        }
        list_5485.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_reserved_instances_offering(
    input: &crate::input::PurchaseReservedInstancesOfferingInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "PurchaseReservedInstancesOffering",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5487 = writer.prefix("InstanceCount");
    if let Some(var_5488) = &input.instance_count {
        scope_5487.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5488).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5489 = writer.prefix("ReservedInstancesOfferingId");
    if let Some(var_5490) = &input.reserved_instances_offering_id {
        scope_5489.string(var_5490);
    }
    #[allow(unused_mut)]
    let mut scope_5491 = writer.prefix("DryRun");
    if let Some(var_5492) = &input.dry_run {
        scope_5491.boolean(*var_5492);
    }
    #[allow(unused_mut)]
    let mut scope_5493 = writer.prefix("LimitPrice");
    if let Some(var_5494) = &input.limit_price {
        crate::query_ser::serialize_structure_crate_model_reserved_instance_limit_price(
            scope_5493, var_5494,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5495 = writer.prefix("PurchaseTime");
    if let Some(var_5496) = &input.purchase_time {
        scope_5495.date_time(var_5496, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_scheduled_instances(
    input: &crate::input::PurchaseScheduledInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "PurchaseScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5497 = writer.prefix("ClientToken");
    if let Some(var_5498) = &input.client_token {
        scope_5497.string(var_5498);
    }
    #[allow(unused_mut)]
    let mut scope_5499 = writer.prefix("DryRun");
    if let Some(var_5500) = &input.dry_run {
        scope_5499.boolean(*var_5500);
    }
    #[allow(unused_mut)]
    let mut scope_5501 = writer.prefix("PurchaseRequest");
    if let Some(var_5502) = &input.purchase_requests {
        let mut list_5504 = scope_5501.start_list(true, Some("PurchaseRequest"));
        for item_5503 in var_5502 {
            #[allow(unused_mut)]
            let mut entry_5505 = list_5504.entry();
            crate::query_ser::serialize_structure_crate_model_purchase_request(
                entry_5505, item_5503,
            )?;
        }
        list_5504.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reboot_instances(
    input: &crate::input::RebootInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RebootInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5506 = writer.prefix("InstanceId");
    if let Some(var_5507) = &input.instance_ids {
        let mut list_5509 = scope_5506.start_list(true, Some("InstanceId"));
        for item_5508 in var_5507 {
            #[allow(unused_mut)]
            let mut entry_5510 = list_5509.entry();
            entry_5510.string(item_5508);
        }
        list_5509.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5511 = writer.prefix("DryRun");
    if let Some(var_5512) = &input.dry_run {
        scope_5511.boolean(*var_5512);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_image(
    input: &crate::input::RegisterImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RegisterImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5513 = writer.prefix("ImageLocation");
    if let Some(var_5514) = &input.image_location {
        scope_5513.string(var_5514);
    }
    #[allow(unused_mut)]
    let mut scope_5515 = writer.prefix("Architecture");
    if let Some(var_5516) = &input.architecture {
        scope_5515.string(var_5516.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5517 = writer.prefix("BlockDeviceMapping");
    if let Some(var_5518) = &input.block_device_mappings {
        let mut list_5520 = scope_5517.start_list(true, Some("BlockDeviceMapping"));
        for item_5519 in var_5518 {
            #[allow(unused_mut)]
            let mut entry_5521 = list_5520.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_5521, item_5519,
            )?;
        }
        list_5520.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5522 = writer.prefix("Description");
    if let Some(var_5523) = &input.description {
        scope_5522.string(var_5523);
    }
    #[allow(unused_mut)]
    let mut scope_5524 = writer.prefix("DryRun");
    if let Some(var_5525) = &input.dry_run {
        scope_5524.boolean(*var_5525);
    }
    #[allow(unused_mut)]
    let mut scope_5526 = writer.prefix("EnaSupport");
    if let Some(var_5527) = &input.ena_support {
        scope_5526.boolean(*var_5527);
    }
    #[allow(unused_mut)]
    let mut scope_5528 = writer.prefix("KernelId");
    if let Some(var_5529) = &input.kernel_id {
        scope_5528.string(var_5529);
    }
    #[allow(unused_mut)]
    let mut scope_5530 = writer.prefix("Name");
    if let Some(var_5531) = &input.name {
        scope_5530.string(var_5531);
    }
    #[allow(unused_mut)]
    let mut scope_5532 = writer.prefix("BillingProduct");
    if let Some(var_5533) = &input.billing_products {
        let mut list_5535 = scope_5532.start_list(true, Some("item"));
        for item_5534 in var_5533 {
            #[allow(unused_mut)]
            let mut entry_5536 = list_5535.entry();
            entry_5536.string(item_5534);
        }
        list_5535.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5537 = writer.prefix("RamdiskId");
    if let Some(var_5538) = &input.ramdisk_id {
        scope_5537.string(var_5538);
    }
    #[allow(unused_mut)]
    let mut scope_5539 = writer.prefix("RootDeviceName");
    if let Some(var_5540) = &input.root_device_name {
        scope_5539.string(var_5540);
    }
    #[allow(unused_mut)]
    let mut scope_5541 = writer.prefix("SriovNetSupport");
    if let Some(var_5542) = &input.sriov_net_support {
        scope_5541.string(var_5542);
    }
    #[allow(unused_mut)]
    let mut scope_5543 = writer.prefix("VirtualizationType");
    if let Some(var_5544) = &input.virtualization_type {
        scope_5543.string(var_5544);
    }
    #[allow(unused_mut)]
    let mut scope_5545 = writer.prefix("BootMode");
    if let Some(var_5546) = &input.boot_mode {
        scope_5545.string(var_5546.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5547 = writer.prefix("TpmSupport");
    if let Some(var_5548) = &input.tpm_support {
        scope_5547.string(var_5548.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5549 = writer.prefix("UefiData");
    if let Some(var_5550) = &input.uefi_data {
        scope_5549.string(var_5550);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_instance_event_notification_attributes(
    input: &crate::input::RegisterInstanceEventNotificationAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RegisterInstanceEventNotificationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5551 = writer.prefix("DryRun");
    if let Some(var_5552) = &input.dry_run {
        scope_5551.boolean(*var_5552);
    }
    #[allow(unused_mut)]
    let mut scope_5553 = writer.prefix("InstanceTagAttribute");
    if let Some(var_5554) = &input.instance_tag_attribute {
        crate::query_ser::serialize_structure_crate_model_register_instance_tag_attribute_request(
            scope_5553, var_5554,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_transit_gateway_multicast_group_members(
    input: &crate::input::RegisterTransitGatewayMulticastGroupMembersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RegisterTransitGatewayMulticastGroupMembers",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5555 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_5556) = &input.transit_gateway_multicast_domain_id {
        scope_5555.string(var_5556);
    }
    #[allow(unused_mut)]
    let mut scope_5557 = writer.prefix("GroupIpAddress");
    if let Some(var_5558) = &input.group_ip_address {
        scope_5557.string(var_5558);
    }
    #[allow(unused_mut)]
    let mut scope_5559 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_5560) = &input.network_interface_ids {
        let mut list_5562 = scope_5559.start_list(true, Some("item"));
        for item_5561 in var_5560 {
            #[allow(unused_mut)]
            let mut entry_5563 = list_5562.entry();
            entry_5563.string(item_5561);
        }
        list_5562.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5564 = writer.prefix("DryRun");
    if let Some(var_5565) = &input.dry_run {
        scope_5564.boolean(*var_5565);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_transit_gateway_multicast_group_sources(
    input: &crate::input::RegisterTransitGatewayMulticastGroupSourcesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RegisterTransitGatewayMulticastGroupSources",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5566 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_5567) = &input.transit_gateway_multicast_domain_id {
        scope_5566.string(var_5567);
    }
    #[allow(unused_mut)]
    let mut scope_5568 = writer.prefix("GroupIpAddress");
    if let Some(var_5569) = &input.group_ip_address {
        scope_5568.string(var_5569);
    }
    #[allow(unused_mut)]
    let mut scope_5570 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_5571) = &input.network_interface_ids {
        let mut list_5573 = scope_5570.start_list(true, Some("item"));
        for item_5572 in var_5571 {
            #[allow(unused_mut)]
            let mut entry_5574 = list_5573.entry();
            entry_5574.string(item_5572);
        }
        list_5573.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5575 = writer.prefix("DryRun");
    if let Some(var_5576) = &input.dry_run {
        scope_5575.boolean(*var_5576);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_transit_gateway_multicast_domain_associations(
    input: &crate::input::RejectTransitGatewayMulticastDomainAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RejectTransitGatewayMulticastDomainAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5577 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_5578) = &input.transit_gateway_multicast_domain_id {
        scope_5577.string(var_5578);
    }
    #[allow(unused_mut)]
    let mut scope_5579 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5580) = &input.transit_gateway_attachment_id {
        scope_5579.string(var_5580);
    }
    #[allow(unused_mut)]
    let mut scope_5581 = writer.prefix("SubnetIds");
    if let Some(var_5582) = &input.subnet_ids {
        let mut list_5584 = scope_5581.start_list(true, Some("item"));
        for item_5583 in var_5582 {
            #[allow(unused_mut)]
            let mut entry_5585 = list_5584.entry();
            entry_5585.string(item_5583);
        }
        list_5584.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5586 = writer.prefix("DryRun");
    if let Some(var_5587) = &input.dry_run {
        scope_5586.boolean(*var_5587);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_transit_gateway_peering_attachment(
    input: &crate::input::RejectTransitGatewayPeeringAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RejectTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5588 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5589) = &input.transit_gateway_attachment_id {
        scope_5588.string(var_5589);
    }
    #[allow(unused_mut)]
    let mut scope_5590 = writer.prefix("DryRun");
    if let Some(var_5591) = &input.dry_run {
        scope_5590.boolean(*var_5591);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_transit_gateway_vpc_attachment(
    input: &crate::input::RejectTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RejectTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5592 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5593) = &input.transit_gateway_attachment_id {
        scope_5592.string(var_5593);
    }
    #[allow(unused_mut)]
    let mut scope_5594 = writer.prefix("DryRun");
    if let Some(var_5595) = &input.dry_run {
        scope_5594.boolean(*var_5595);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_vpc_endpoint_connections(
    input: &crate::input::RejectVpcEndpointConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RejectVpcEndpointConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5596 = writer.prefix("DryRun");
    if let Some(var_5597) = &input.dry_run {
        scope_5596.boolean(*var_5597);
    }
    #[allow(unused_mut)]
    let mut scope_5598 = writer.prefix("ServiceId");
    if let Some(var_5599) = &input.service_id {
        scope_5598.string(var_5599);
    }
    #[allow(unused_mut)]
    let mut scope_5600 = writer.prefix("VpcEndpointId");
    if let Some(var_5601) = &input.vpc_endpoint_ids {
        let mut list_5603 = scope_5600.start_list(true, Some("item"));
        for item_5602 in var_5601 {
            #[allow(unused_mut)]
            let mut entry_5604 = list_5603.entry();
            entry_5604.string(item_5602);
        }
        list_5603.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_vpc_peering_connection(
    input: &crate::input::RejectVpcPeeringConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RejectVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5605 = writer.prefix("DryRun");
    if let Some(var_5606) = &input.dry_run {
        scope_5605.boolean(*var_5606);
    }
    #[allow(unused_mut)]
    let mut scope_5607 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_5608) = &input.vpc_peering_connection_id {
        scope_5607.string(var_5608);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_release_address(
    input: &crate::input::ReleaseAddressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReleaseAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5609 = writer.prefix("AllocationId");
    if let Some(var_5610) = &input.allocation_id {
        scope_5609.string(var_5610);
    }
    #[allow(unused_mut)]
    let mut scope_5611 = writer.prefix("PublicIp");
    if let Some(var_5612) = &input.public_ip {
        scope_5611.string(var_5612);
    }
    #[allow(unused_mut)]
    let mut scope_5613 = writer.prefix("NetworkBorderGroup");
    if let Some(var_5614) = &input.network_border_group {
        scope_5613.string(var_5614);
    }
    #[allow(unused_mut)]
    let mut scope_5615 = writer.prefix("DryRun");
    if let Some(var_5616) = &input.dry_run {
        scope_5615.boolean(*var_5616);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_release_hosts(
    input: &crate::input::ReleaseHostsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReleaseHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5617 = writer.prefix("HostId");
    if let Some(var_5618) = &input.host_ids {
        let mut list_5620 = scope_5617.start_list(true, Some("item"));
        for item_5619 in var_5618 {
            #[allow(unused_mut)]
            let mut entry_5621 = list_5620.entry();
            entry_5621.string(item_5619);
        }
        list_5620.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_release_ipam_pool_allocation(
    input: &crate::input::ReleaseIpamPoolAllocationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReleaseIpamPoolAllocation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5622 = writer.prefix("DryRun");
    if let Some(var_5623) = &input.dry_run {
        scope_5622.boolean(*var_5623);
    }
    #[allow(unused_mut)]
    let mut scope_5624 = writer.prefix("IpamPoolId");
    if let Some(var_5625) = &input.ipam_pool_id {
        scope_5624.string(var_5625);
    }
    #[allow(unused_mut)]
    let mut scope_5626 = writer.prefix("Cidr");
    if let Some(var_5627) = &input.cidr {
        scope_5626.string(var_5627);
    }
    #[allow(unused_mut)]
    let mut scope_5628 = writer.prefix("IpamPoolAllocationId");
    if let Some(var_5629) = &input.ipam_pool_allocation_id {
        scope_5628.string(var_5629);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_iam_instance_profile_association(
    input: &crate::input::ReplaceIamInstanceProfileAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ReplaceIamInstanceProfileAssociation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5630 = writer.prefix("IamInstanceProfile");
    if let Some(var_5631) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_5630, var_5631,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5632 = writer.prefix("AssociationId");
    if let Some(var_5633) = &input.association_id {
        scope_5632.string(var_5633);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_network_acl_association(
    input: &crate::input::ReplaceNetworkAclAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReplaceNetworkAclAssociation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5634 = writer.prefix("AssociationId");
    if let Some(var_5635) = &input.association_id {
        scope_5634.string(var_5635);
    }
    #[allow(unused_mut)]
    let mut scope_5636 = writer.prefix("DryRun");
    if let Some(var_5637) = &input.dry_run {
        scope_5636.boolean(*var_5637);
    }
    #[allow(unused_mut)]
    let mut scope_5638 = writer.prefix("NetworkAclId");
    if let Some(var_5639) = &input.network_acl_id {
        scope_5638.string(var_5639);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_network_acl_entry(
    input: &crate::input::ReplaceNetworkAclEntryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReplaceNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5640 = writer.prefix("CidrBlock");
    if let Some(var_5641) = &input.cidr_block {
        scope_5640.string(var_5641);
    }
    #[allow(unused_mut)]
    let mut scope_5642 = writer.prefix("DryRun");
    if let Some(var_5643) = &input.dry_run {
        scope_5642.boolean(*var_5643);
    }
    #[allow(unused_mut)]
    let mut scope_5644 = writer.prefix("Egress");
    if let Some(var_5645) = &input.egress {
        scope_5644.boolean(*var_5645);
    }
    #[allow(unused_mut)]
    let mut scope_5646 = writer.prefix("Icmp");
    if let Some(var_5647) = &input.icmp_type_code {
        crate::query_ser::serialize_structure_crate_model_icmp_type_code(scope_5646, var_5647)?;
    }
    #[allow(unused_mut)]
    let mut scope_5648 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_5649) = &input.ipv6_cidr_block {
        scope_5648.string(var_5649);
    }
    #[allow(unused_mut)]
    let mut scope_5650 = writer.prefix("NetworkAclId");
    if let Some(var_5651) = &input.network_acl_id {
        scope_5650.string(var_5651);
    }
    #[allow(unused_mut)]
    let mut scope_5652 = writer.prefix("PortRange");
    if let Some(var_5653) = &input.port_range {
        crate::query_ser::serialize_structure_crate_model_port_range(scope_5652, var_5653)?;
    }
    #[allow(unused_mut)]
    let mut scope_5654 = writer.prefix("Protocol");
    if let Some(var_5655) = &input.protocol {
        scope_5654.string(var_5655);
    }
    #[allow(unused_mut)]
    let mut scope_5656 = writer.prefix("RuleAction");
    if let Some(var_5657) = &input.rule_action {
        scope_5656.string(var_5657.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5658 = writer.prefix("RuleNumber");
    if let Some(var_5659) = &input.rule_number {
        scope_5658.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5659).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_route(
    input: &crate::input::ReplaceRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReplaceRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5660 = writer.prefix("DestinationCidrBlock");
    if let Some(var_5661) = &input.destination_cidr_block {
        scope_5660.string(var_5661);
    }
    #[allow(unused_mut)]
    let mut scope_5662 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_5663) = &input.destination_ipv6_cidr_block {
        scope_5662.string(var_5663);
    }
    #[allow(unused_mut)]
    let mut scope_5664 = writer.prefix("DestinationPrefixListId");
    if let Some(var_5665) = &input.destination_prefix_list_id {
        scope_5664.string(var_5665);
    }
    #[allow(unused_mut)]
    let mut scope_5666 = writer.prefix("DryRun");
    if let Some(var_5667) = &input.dry_run {
        scope_5666.boolean(*var_5667);
    }
    #[allow(unused_mut)]
    let mut scope_5668 = writer.prefix("VpcEndpointId");
    if let Some(var_5669) = &input.vpc_endpoint_id {
        scope_5668.string(var_5669);
    }
    #[allow(unused_mut)]
    let mut scope_5670 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_5671) = &input.egress_only_internet_gateway_id {
        scope_5670.string(var_5671);
    }
    #[allow(unused_mut)]
    let mut scope_5672 = writer.prefix("GatewayId");
    if let Some(var_5673) = &input.gateway_id {
        scope_5672.string(var_5673);
    }
    #[allow(unused_mut)]
    let mut scope_5674 = writer.prefix("InstanceId");
    if let Some(var_5675) = &input.instance_id {
        scope_5674.string(var_5675);
    }
    #[allow(unused_mut)]
    let mut scope_5676 = writer.prefix("LocalTarget");
    if let Some(var_5677) = &input.local_target {
        scope_5676.boolean(*var_5677);
    }
    #[allow(unused_mut)]
    let mut scope_5678 = writer.prefix("NatGatewayId");
    if let Some(var_5679) = &input.nat_gateway_id {
        scope_5678.string(var_5679);
    }
    #[allow(unused_mut)]
    let mut scope_5680 = writer.prefix("TransitGatewayId");
    if let Some(var_5681) = &input.transit_gateway_id {
        scope_5680.string(var_5681);
    }
    #[allow(unused_mut)]
    let mut scope_5682 = writer.prefix("LocalGatewayId");
    if let Some(var_5683) = &input.local_gateway_id {
        scope_5682.string(var_5683);
    }
    #[allow(unused_mut)]
    let mut scope_5684 = writer.prefix("CarrierGatewayId");
    if let Some(var_5685) = &input.carrier_gateway_id {
        scope_5684.string(var_5685);
    }
    #[allow(unused_mut)]
    let mut scope_5686 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5687) = &input.network_interface_id {
        scope_5686.string(var_5687);
    }
    #[allow(unused_mut)]
    let mut scope_5688 = writer.prefix("RouteTableId");
    if let Some(var_5689) = &input.route_table_id {
        scope_5688.string(var_5689);
    }
    #[allow(unused_mut)]
    let mut scope_5690 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_5691) = &input.vpc_peering_connection_id {
        scope_5690.string(var_5691);
    }
    #[allow(unused_mut)]
    let mut scope_5692 = writer.prefix("CoreNetworkArn");
    if let Some(var_5693) = &input.core_network_arn {
        scope_5692.string(var_5693);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_route_table_association(
    input: &crate::input::ReplaceRouteTableAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReplaceRouteTableAssociation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5694 = writer.prefix("AssociationId");
    if let Some(var_5695) = &input.association_id {
        scope_5694.string(var_5695);
    }
    #[allow(unused_mut)]
    let mut scope_5696 = writer.prefix("DryRun");
    if let Some(var_5697) = &input.dry_run {
        scope_5696.boolean(*var_5697);
    }
    #[allow(unused_mut)]
    let mut scope_5698 = writer.prefix("RouteTableId");
    if let Some(var_5699) = &input.route_table_id {
        scope_5698.string(var_5699);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_transit_gateway_route(
    input: &crate::input::ReplaceTransitGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReplaceTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5700 = writer.prefix("DestinationCidrBlock");
    if let Some(var_5701) = &input.destination_cidr_block {
        scope_5700.string(var_5701);
    }
    #[allow(unused_mut)]
    let mut scope_5702 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_5703) = &input.transit_gateway_route_table_id {
        scope_5702.string(var_5703);
    }
    #[allow(unused_mut)]
    let mut scope_5704 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5705) = &input.transit_gateway_attachment_id {
        scope_5704.string(var_5705);
    }
    #[allow(unused_mut)]
    let mut scope_5706 = writer.prefix("Blackhole");
    if let Some(var_5707) = &input.blackhole {
        scope_5706.boolean(*var_5707);
    }
    #[allow(unused_mut)]
    let mut scope_5708 = writer.prefix("DryRun");
    if let Some(var_5709) = &input.dry_run {
        scope_5708.boolean(*var_5709);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_report_instance_status(
    input: &crate::input::ReportInstanceStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReportInstanceStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5710 = writer.prefix("Description");
    if let Some(var_5711) = &input.description {
        scope_5710.string(var_5711);
    }
    #[allow(unused_mut)]
    let mut scope_5712 = writer.prefix("DryRun");
    if let Some(var_5713) = &input.dry_run {
        scope_5712.boolean(*var_5713);
    }
    #[allow(unused_mut)]
    let mut scope_5714 = writer.prefix("EndTime");
    if let Some(var_5715) = &input.end_time {
        scope_5714.date_time(var_5715, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_5716 = writer.prefix("InstanceId");
    if let Some(var_5717) = &input.instances {
        let mut list_5719 = scope_5716.start_list(true, Some("InstanceId"));
        for item_5718 in var_5717 {
            #[allow(unused_mut)]
            let mut entry_5720 = list_5719.entry();
            entry_5720.string(item_5718);
        }
        list_5719.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5721 = writer.prefix("ReasonCode");
    if let Some(var_5722) = &input.reason_codes {
        let mut list_5724 = scope_5721.start_list(true, Some("item"));
        for item_5723 in var_5722 {
            #[allow(unused_mut)]
            let mut entry_5725 = list_5724.entry();
            entry_5725.string(item_5723.as_str());
        }
        list_5724.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5726 = writer.prefix("StartTime");
    if let Some(var_5727) = &input.start_time {
        scope_5726.date_time(var_5727, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_5728 = writer.prefix("Status");
    if let Some(var_5729) = &input.status {
        scope_5728.string(var_5729.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_request_spot_fleet(
    input: &crate::input::RequestSpotFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RequestSpotFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5730 = writer.prefix("DryRun");
    if let Some(var_5731) = &input.dry_run {
        scope_5730.boolean(*var_5731);
    }
    #[allow(unused_mut)]
    let mut scope_5732 = writer.prefix("SpotFleetRequestConfig");
    if let Some(var_5733) = &input.spot_fleet_request_config {
        crate::query_ser::serialize_structure_crate_model_spot_fleet_request_config_data(
            scope_5732, var_5733,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_request_spot_instances(
    input: &crate::input::RequestSpotInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RequestSpotInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5734 = writer.prefix("AvailabilityZoneGroup");
    if let Some(var_5735) = &input.availability_zone_group {
        scope_5734.string(var_5735);
    }
    #[allow(unused_mut)]
    let mut scope_5736 = writer.prefix("BlockDurationMinutes");
    if let Some(var_5737) = &input.block_duration_minutes {
        scope_5736.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5737).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5738 = writer.prefix("ClientToken");
    if let Some(var_5739) = &input.client_token {
        scope_5738.string(var_5739);
    }
    #[allow(unused_mut)]
    let mut scope_5740 = writer.prefix("DryRun");
    if let Some(var_5741) = &input.dry_run {
        scope_5740.boolean(*var_5741);
    }
    #[allow(unused_mut)]
    let mut scope_5742 = writer.prefix("InstanceCount");
    if let Some(var_5743) = &input.instance_count {
        scope_5742.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5743).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5744 = writer.prefix("LaunchGroup");
    if let Some(var_5745) = &input.launch_group {
        scope_5744.string(var_5745);
    }
    #[allow(unused_mut)]
    let mut scope_5746 = writer.prefix("LaunchSpecification");
    if let Some(var_5747) = &input.launch_specification {
        crate::query_ser::serialize_structure_crate_model_request_spot_launch_specification(
            scope_5746, var_5747,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5748 = writer.prefix("SpotPrice");
    if let Some(var_5749) = &input.spot_price {
        scope_5748.string(var_5749);
    }
    #[allow(unused_mut)]
    let mut scope_5750 = writer.prefix("Type");
    if let Some(var_5751) = &input.r#type {
        scope_5750.string(var_5751.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5752 = writer.prefix("ValidFrom");
    if let Some(var_5753) = &input.valid_from {
        scope_5752.date_time(var_5753, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_5754 = writer.prefix("ValidUntil");
    if let Some(var_5755) = &input.valid_until {
        scope_5754.date_time(var_5755, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_5756 = writer.prefix("TagSpecification");
    if let Some(var_5757) = &input.tag_specifications {
        let mut list_5759 = scope_5756.start_list(true, Some("item"));
        for item_5758 in var_5757 {
            #[allow(unused_mut)]
            let mut entry_5760 = list_5759.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5760, item_5758,
            )?;
        }
        list_5759.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5761 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_5762) = &input.instance_interruption_behavior {
        scope_5761.string(var_5762.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_address_attribute(
    input: &crate::input::ResetAddressAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetAddressAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5763 = writer.prefix("AllocationId");
    if let Some(var_5764) = &input.allocation_id {
        scope_5763.string(var_5764);
    }
    #[allow(unused_mut)]
    let mut scope_5765 = writer.prefix("Attribute");
    if let Some(var_5766) = &input.attribute {
        scope_5765.string(var_5766.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5767 = writer.prefix("DryRun");
    if let Some(var_5768) = &input.dry_run {
        scope_5767.boolean(*var_5768);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_ebs_default_kms_key_id(
    input: &crate::input::ResetEbsDefaultKmsKeyIdInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5769 = writer.prefix("DryRun");
    if let Some(var_5770) = &input.dry_run {
        scope_5769.boolean(*var_5770);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_fpga_image_attribute(
    input: &crate::input::ResetFpgaImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5771 = writer.prefix("DryRun");
    if let Some(var_5772) = &input.dry_run {
        scope_5771.boolean(*var_5772);
    }
    #[allow(unused_mut)]
    let mut scope_5773 = writer.prefix("FpgaImageId");
    if let Some(var_5774) = &input.fpga_image_id {
        scope_5773.string(var_5774);
    }
    #[allow(unused_mut)]
    let mut scope_5775 = writer.prefix("Attribute");
    if let Some(var_5776) = &input.attribute {
        scope_5775.string(var_5776.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_image_attribute(
    input: &crate::input::ResetImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5777 = writer.prefix("Attribute");
    if let Some(var_5778) = &input.attribute {
        scope_5777.string(var_5778.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5779 = writer.prefix("ImageId");
    if let Some(var_5780) = &input.image_id {
        scope_5779.string(var_5780);
    }
    #[allow(unused_mut)]
    let mut scope_5781 = writer.prefix("DryRun");
    if let Some(var_5782) = &input.dry_run {
        scope_5781.boolean(*var_5782);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_instance_attribute(
    input: &crate::input::ResetInstanceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5783 = writer.prefix("Attribute");
    if let Some(var_5784) = &input.attribute {
        scope_5783.string(var_5784.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5785 = writer.prefix("DryRun");
    if let Some(var_5786) = &input.dry_run {
        scope_5785.boolean(*var_5786);
    }
    #[allow(unused_mut)]
    let mut scope_5787 = writer.prefix("InstanceId");
    if let Some(var_5788) = &input.instance_id {
        scope_5787.string(var_5788);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_network_interface_attribute(
    input: &crate::input::ResetNetworkInterfaceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ResetNetworkInterfaceAttribute",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5789 = writer.prefix("DryRun");
    if let Some(var_5790) = &input.dry_run {
        scope_5789.boolean(*var_5790);
    }
    #[allow(unused_mut)]
    let mut scope_5791 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5792) = &input.network_interface_id {
        scope_5791.string(var_5792);
    }
    #[allow(unused_mut)]
    let mut scope_5793 = writer.prefix("SourceDestCheck");
    if let Some(var_5794) = &input.source_dest_check {
        scope_5793.string(var_5794);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_snapshot_attribute(
    input: &crate::input::ResetSnapshotAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetSnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5795 = writer.prefix("Attribute");
    if let Some(var_5796) = &input.attribute {
        scope_5795.string(var_5796.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5797 = writer.prefix("SnapshotId");
    if let Some(var_5798) = &input.snapshot_id {
        scope_5797.string(var_5798);
    }
    #[allow(unused_mut)]
    let mut scope_5799 = writer.prefix("DryRun");
    if let Some(var_5800) = &input.dry_run {
        scope_5799.boolean(*var_5800);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_address_to_classic(
    input: &crate::input::RestoreAddressToClassicInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreAddressToClassic", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5801 = writer.prefix("DryRun");
    if let Some(var_5802) = &input.dry_run {
        scope_5801.boolean(*var_5802);
    }
    #[allow(unused_mut)]
    let mut scope_5803 = writer.prefix("PublicIp");
    if let Some(var_5804) = &input.public_ip {
        scope_5803.string(var_5804);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_image_from_recycle_bin(
    input: &crate::input::RestoreImageFromRecycleBinInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreImageFromRecycleBin", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5805 = writer.prefix("ImageId");
    if let Some(var_5806) = &input.image_id {
        scope_5805.string(var_5806);
    }
    #[allow(unused_mut)]
    let mut scope_5807 = writer.prefix("DryRun");
    if let Some(var_5808) = &input.dry_run {
        scope_5807.boolean(*var_5808);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_managed_prefix_list_version(
    input: &crate::input::RestoreManagedPrefixListVersionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RestoreManagedPrefixListVersion",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5809 = writer.prefix("DryRun");
    if let Some(var_5810) = &input.dry_run {
        scope_5809.boolean(*var_5810);
    }
    #[allow(unused_mut)]
    let mut scope_5811 = writer.prefix("PrefixListId");
    if let Some(var_5812) = &input.prefix_list_id {
        scope_5811.string(var_5812);
    }
    #[allow(unused_mut)]
    let mut scope_5813 = writer.prefix("PreviousVersion");
    if let Some(var_5814) = &input.previous_version {
        scope_5813.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5814).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5815 = writer.prefix("CurrentVersion");
    if let Some(var_5816) = &input.current_version {
        scope_5815.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5816).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_snapshot_from_recycle_bin(
    input: &crate::input::RestoreSnapshotFromRecycleBinInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreSnapshotFromRecycleBin", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5817 = writer.prefix("SnapshotId");
    if let Some(var_5818) = &input.snapshot_id {
        scope_5817.string(var_5818);
    }
    #[allow(unused_mut)]
    let mut scope_5819 = writer.prefix("DryRun");
    if let Some(var_5820) = &input.dry_run {
        scope_5819.boolean(*var_5820);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_snapshot_tier(
    input: &crate::input::RestoreSnapshotTierInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreSnapshotTier", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5821 = writer.prefix("SnapshotId");
    if let Some(var_5822) = &input.snapshot_id {
        scope_5821.string(var_5822);
    }
    #[allow(unused_mut)]
    let mut scope_5823 = writer.prefix("TemporaryRestoreDays");
    if let Some(var_5824) = &input.temporary_restore_days {
        scope_5823.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5824).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5825 = writer.prefix("PermanentRestore");
    if let Some(var_5826) = &input.permanent_restore {
        scope_5825.boolean(*var_5826);
    }
    #[allow(unused_mut)]
    let mut scope_5827 = writer.prefix("DryRun");
    if let Some(var_5828) = &input.dry_run {
        scope_5827.boolean(*var_5828);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_client_vpn_ingress(
    input: &crate::input::RevokeClientVpnIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RevokeClientVpnIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5829 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_5830) = &input.client_vpn_endpoint_id {
        scope_5829.string(var_5830);
    }
    #[allow(unused_mut)]
    let mut scope_5831 = writer.prefix("TargetNetworkCidr");
    if let Some(var_5832) = &input.target_network_cidr {
        scope_5831.string(var_5832);
    }
    #[allow(unused_mut)]
    let mut scope_5833 = writer.prefix("AccessGroupId");
    if let Some(var_5834) = &input.access_group_id {
        scope_5833.string(var_5834);
    }
    #[allow(unused_mut)]
    let mut scope_5835 = writer.prefix("RevokeAllGroups");
    if let Some(var_5836) = &input.revoke_all_groups {
        scope_5835.boolean(*var_5836);
    }
    #[allow(unused_mut)]
    let mut scope_5837 = writer.prefix("DryRun");
    if let Some(var_5838) = &input.dry_run {
        scope_5837.boolean(*var_5838);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_security_group_egress(
    input: &crate::input::RevokeSecurityGroupEgressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RevokeSecurityGroupEgress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5839 = writer.prefix("DryRun");
    if let Some(var_5840) = &input.dry_run {
        scope_5839.boolean(*var_5840);
    }
    #[allow(unused_mut)]
    let mut scope_5841 = writer.prefix("GroupId");
    if let Some(var_5842) = &input.group_id {
        scope_5841.string(var_5842);
    }
    #[allow(unused_mut)]
    let mut scope_5843 = writer.prefix("IpPermissions");
    if let Some(var_5844) = &input.ip_permissions {
        let mut list_5846 = scope_5843.start_list(true, Some("item"));
        for item_5845 in var_5844 {
            #[allow(unused_mut)]
            let mut entry_5847 = list_5846.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_5847, item_5845)?;
        }
        list_5846.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5848 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_5849) = &input.security_group_rule_ids {
        let mut list_5851 = scope_5848.start_list(true, Some("item"));
        for item_5850 in var_5849 {
            #[allow(unused_mut)]
            let mut entry_5852 = list_5851.entry();
            entry_5852.string(item_5850);
        }
        list_5851.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5853 = writer.prefix("CidrIp");
    if let Some(var_5854) = &input.cidr_ip {
        scope_5853.string(var_5854);
    }
    #[allow(unused_mut)]
    let mut scope_5855 = writer.prefix("FromPort");
    if let Some(var_5856) = &input.from_port {
        scope_5855.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5856).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5857 = writer.prefix("IpProtocol");
    if let Some(var_5858) = &input.ip_protocol {
        scope_5857.string(var_5858);
    }
    #[allow(unused_mut)]
    let mut scope_5859 = writer.prefix("ToPort");
    if let Some(var_5860) = &input.to_port {
        scope_5859.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5860).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5861 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_5862) = &input.source_security_group_name {
        scope_5861.string(var_5862);
    }
    #[allow(unused_mut)]
    let mut scope_5863 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_5864) = &input.source_security_group_owner_id {
        scope_5863.string(var_5864);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_security_group_ingress(
    input: &crate::input::RevokeSecurityGroupIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RevokeSecurityGroupIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5865 = writer.prefix("CidrIp");
    if let Some(var_5866) = &input.cidr_ip {
        scope_5865.string(var_5866);
    }
    #[allow(unused_mut)]
    let mut scope_5867 = writer.prefix("FromPort");
    if let Some(var_5868) = &input.from_port {
        scope_5867.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5868).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5869 = writer.prefix("GroupId");
    if let Some(var_5870) = &input.group_id {
        scope_5869.string(var_5870);
    }
    #[allow(unused_mut)]
    let mut scope_5871 = writer.prefix("GroupName");
    if let Some(var_5872) = &input.group_name {
        scope_5871.string(var_5872);
    }
    #[allow(unused_mut)]
    let mut scope_5873 = writer.prefix("IpPermissions");
    if let Some(var_5874) = &input.ip_permissions {
        let mut list_5876 = scope_5873.start_list(true, Some("item"));
        for item_5875 in var_5874 {
            #[allow(unused_mut)]
            let mut entry_5877 = list_5876.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_5877, item_5875)?;
        }
        list_5876.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5878 = writer.prefix("IpProtocol");
    if let Some(var_5879) = &input.ip_protocol {
        scope_5878.string(var_5879);
    }
    #[allow(unused_mut)]
    let mut scope_5880 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_5881) = &input.source_security_group_name {
        scope_5880.string(var_5881);
    }
    #[allow(unused_mut)]
    let mut scope_5882 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_5883) = &input.source_security_group_owner_id {
        scope_5882.string(var_5883);
    }
    #[allow(unused_mut)]
    let mut scope_5884 = writer.prefix("ToPort");
    if let Some(var_5885) = &input.to_port {
        scope_5884.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5885).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5886 = writer.prefix("DryRun");
    if let Some(var_5887) = &input.dry_run {
        scope_5886.boolean(*var_5887);
    }
    #[allow(unused_mut)]
    let mut scope_5888 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_5889) = &input.security_group_rule_ids {
        let mut list_5891 = scope_5888.start_list(true, Some("item"));
        for item_5890 in var_5889 {
            #[allow(unused_mut)]
            let mut entry_5892 = list_5891.entry();
            entry_5892.string(item_5890);
        }
        list_5891.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_run_instances(
    input: &crate::input::RunInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RunInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5893 = writer.prefix("BlockDeviceMapping");
    if let Some(var_5894) = &input.block_device_mappings {
        let mut list_5896 = scope_5893.start_list(true, Some("BlockDeviceMapping"));
        for item_5895 in var_5894 {
            #[allow(unused_mut)]
            let mut entry_5897 = list_5896.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_5897, item_5895,
            )?;
        }
        list_5896.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5898 = writer.prefix("ImageId");
    if let Some(var_5899) = &input.image_id {
        scope_5898.string(var_5899);
    }
    #[allow(unused_mut)]
    let mut scope_5900 = writer.prefix("InstanceType");
    if let Some(var_5901) = &input.instance_type {
        scope_5900.string(var_5901.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5902 = writer.prefix("Ipv6AddressCount");
    if let Some(var_5903) = &input.ipv6_address_count {
        scope_5902.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5903).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5904 = writer.prefix("Ipv6Address");
    if let Some(var_5905) = &input.ipv6_addresses {
        let mut list_5907 = scope_5904.start_list(true, Some("item"));
        for item_5906 in var_5905 {
            #[allow(unused_mut)]
            let mut entry_5908 = list_5907.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address(
                entry_5908, item_5906,
            )?;
        }
        list_5907.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5909 = writer.prefix("KernelId");
    if let Some(var_5910) = &input.kernel_id {
        scope_5909.string(var_5910);
    }
    #[allow(unused_mut)]
    let mut scope_5911 = writer.prefix("KeyName");
    if let Some(var_5912) = &input.key_name {
        scope_5911.string(var_5912);
    }
    #[allow(unused_mut)]
    let mut scope_5913 = writer.prefix("MaxCount");
    if let Some(var_5914) = &input.max_count {
        scope_5913.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5914).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5915 = writer.prefix("MinCount");
    if let Some(var_5916) = &input.min_count {
        scope_5915.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5916).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5917 = writer.prefix("Monitoring");
    if let Some(var_5918) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_run_instances_monitoring_enabled(
            scope_5917, var_5918,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5919 = writer.prefix("Placement");
    if let Some(var_5920) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_placement(scope_5919, var_5920)?;
    }
    #[allow(unused_mut)]
    let mut scope_5921 = writer.prefix("RamdiskId");
    if let Some(var_5922) = &input.ramdisk_id {
        scope_5921.string(var_5922);
    }
    #[allow(unused_mut)]
    let mut scope_5923 = writer.prefix("SecurityGroupId");
    if let Some(var_5924) = &input.security_group_ids {
        let mut list_5926 = scope_5923.start_list(true, Some("SecurityGroupId"));
        for item_5925 in var_5924 {
            #[allow(unused_mut)]
            let mut entry_5927 = list_5926.entry();
            entry_5927.string(item_5925);
        }
        list_5926.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5928 = writer.prefix("SecurityGroup");
    if let Some(var_5929) = &input.security_groups {
        let mut list_5931 = scope_5928.start_list(true, Some("SecurityGroup"));
        for item_5930 in var_5929 {
            #[allow(unused_mut)]
            let mut entry_5932 = list_5931.entry();
            entry_5932.string(item_5930);
        }
        list_5931.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5933 = writer.prefix("SubnetId");
    if let Some(var_5934) = &input.subnet_id {
        scope_5933.string(var_5934);
    }
    #[allow(unused_mut)]
    let mut scope_5935 = writer.prefix("UserData");
    if let Some(var_5936) = &input.user_data {
        scope_5935.string(var_5936);
    }
    #[allow(unused_mut)]
    let mut scope_5937 = writer.prefix("AdditionalInfo");
    if let Some(var_5938) = &input.additional_info {
        scope_5937.string(var_5938);
    }
    #[allow(unused_mut)]
    let mut scope_5939 = writer.prefix("ClientToken");
    if let Some(var_5940) = &input.client_token {
        scope_5939.string(var_5940);
    }
    #[allow(unused_mut)]
    let mut scope_5941 = writer.prefix("DisableApiTermination");
    if let Some(var_5942) = &input.disable_api_termination {
        scope_5941.boolean(*var_5942);
    }
    #[allow(unused_mut)]
    let mut scope_5943 = writer.prefix("DryRun");
    if let Some(var_5944) = &input.dry_run {
        scope_5943.boolean(*var_5944);
    }
    #[allow(unused_mut)]
    let mut scope_5945 = writer.prefix("EbsOptimized");
    if let Some(var_5946) = &input.ebs_optimized {
        scope_5945.boolean(*var_5946);
    }
    #[allow(unused_mut)]
    let mut scope_5947 = writer.prefix("IamInstanceProfile");
    if let Some(var_5948) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_5947, var_5948,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5949 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_5950) = &input.instance_initiated_shutdown_behavior {
        scope_5949.string(var_5950.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5951 = writer.prefix("NetworkInterface");
    if let Some(var_5952) = &input.network_interfaces {
        let mut list_5954 = scope_5951.start_list(true, Some("item"));
        for item_5953 in var_5952 {
            #[allow(unused_mut)]
            let mut entry_5955 = list_5954.entry();
            crate::query_ser::serialize_structure_crate_model_instance_network_interface_specification(entry_5955, item_5953)?;
        }
        list_5954.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5956 = writer.prefix("PrivateIpAddress");
    if let Some(var_5957) = &input.private_ip_address {
        scope_5956.string(var_5957);
    }
    #[allow(unused_mut)]
    let mut scope_5958 = writer.prefix("ElasticGpuSpecification");
    if let Some(var_5959) = &input.elastic_gpu_specification {
        let mut list_5961 = scope_5958.start_list(true, Some("item"));
        for item_5960 in var_5959 {
            #[allow(unused_mut)]
            let mut entry_5962 = list_5961.entry();
            crate::query_ser::serialize_structure_crate_model_elastic_gpu_specification(
                entry_5962, item_5960,
            )?;
        }
        list_5961.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5963 = writer.prefix("ElasticInferenceAccelerator");
    if let Some(var_5964) = &input.elastic_inference_accelerators {
        let mut list_5966 = scope_5963.start_list(true, Some("item"));
        for item_5965 in var_5964 {
            #[allow(unused_mut)]
            let mut entry_5967 = list_5966.entry();
            crate::query_ser::serialize_structure_crate_model_elastic_inference_accelerator(
                entry_5967, item_5965,
            )?;
        }
        list_5966.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5968 = writer.prefix("TagSpecification");
    if let Some(var_5969) = &input.tag_specifications {
        let mut list_5971 = scope_5968.start_list(true, Some("item"));
        for item_5970 in var_5969 {
            #[allow(unused_mut)]
            let mut entry_5972 = list_5971.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5972, item_5970,
            )?;
        }
        list_5971.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5973 = writer.prefix("LaunchTemplate");
    if let Some(var_5974) = &input.launch_template {
        crate::query_ser::serialize_structure_crate_model_launch_template_specification(
            scope_5973, var_5974,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5975 = writer.prefix("InstanceMarketOptions");
    if let Some(var_5976) = &input.instance_market_options {
        crate::query_ser::serialize_structure_crate_model_instance_market_options_request(
            scope_5975, var_5976,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5977 = writer.prefix("CreditSpecification");
    if let Some(var_5978) = &input.credit_specification {
        crate::query_ser::serialize_structure_crate_model_credit_specification_request(
            scope_5977, var_5978,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5979 = writer.prefix("CpuOptions");
    if let Some(var_5980) = &input.cpu_options {
        crate::query_ser::serialize_structure_crate_model_cpu_options_request(
            scope_5979, var_5980,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5981 = writer.prefix("CapacityReservationSpecification");
    if let Some(var_5982) = &input.capacity_reservation_specification {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_specification(
            scope_5981, var_5982,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5983 = writer.prefix("HibernationOptions");
    if let Some(var_5984) = &input.hibernation_options {
        crate::query_ser::serialize_structure_crate_model_hibernation_options_request(
            scope_5983, var_5984,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5985 = writer.prefix("LicenseSpecification");
    if let Some(var_5986) = &input.license_specifications {
        let mut list_5988 = scope_5985.start_list(true, Some("item"));
        for item_5987 in var_5986 {
            #[allow(unused_mut)]
            let mut entry_5989 = list_5988.entry();
            crate::query_ser::serialize_structure_crate_model_license_configuration_request(
                entry_5989, item_5987,
            )?;
        }
        list_5988.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5990 = writer.prefix("MetadataOptions");
    if let Some(var_5991) = &input.metadata_options {
        crate::query_ser::serialize_structure_crate_model_instance_metadata_options_request(
            scope_5990, var_5991,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5992 = writer.prefix("EnclaveOptions");
    if let Some(var_5993) = &input.enclave_options {
        crate::query_ser::serialize_structure_crate_model_enclave_options_request(
            scope_5992, var_5993,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5994 = writer.prefix("PrivateDnsNameOptions");
    if let Some(var_5995) = &input.private_dns_name_options {
        crate::query_ser::serialize_structure_crate_model_private_dns_name_options_request(
            scope_5994, var_5995,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5996 = writer.prefix("MaintenanceOptions");
    if let Some(var_5997) = &input.maintenance_options {
        crate::query_ser::serialize_structure_crate_model_instance_maintenance_options_request(
            scope_5996, var_5997,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5998 = writer.prefix("DisableApiStop");
    if let Some(var_5999) = &input.disable_api_stop {
        scope_5998.boolean(*var_5999);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_run_scheduled_instances(
    input: &crate::input::RunScheduledInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RunScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6000 = writer.prefix("ClientToken");
    if let Some(var_6001) = &input.client_token {
        scope_6000.string(var_6001);
    }
    #[allow(unused_mut)]
    let mut scope_6002 = writer.prefix("DryRun");
    if let Some(var_6003) = &input.dry_run {
        scope_6002.boolean(*var_6003);
    }
    #[allow(unused_mut)]
    let mut scope_6004 = writer.prefix("InstanceCount");
    if let Some(var_6005) = &input.instance_count {
        scope_6004.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_6005).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_6006 = writer.prefix("LaunchSpecification");
    if let Some(var_6007) = &input.launch_specification {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_launch_specification(
            scope_6006, var_6007,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_6008 = writer.prefix("ScheduledInstanceId");
    if let Some(var_6009) = &input.scheduled_instance_id {
        scope_6008.string(var_6009);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_search_local_gateway_routes(
    input: &crate::input::SearchLocalGatewayRoutesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "SearchLocalGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6010 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_6011) = &input.local_gateway_route_table_id {
        scope_6010.string(var_6011);
    }
    #[allow(unused_mut)]
    let mut scope_6012 = writer.prefix("Filter");
    if let Some(var_6013) = &input.filters {
        let mut list_6015 = scope_6012.start_list(true, Some("Filter"));
        for item_6014 in var_6013 {
            #[allow(unused_mut)]
            let mut entry_6016 = list_6015.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_6016, item_6014)?;
        }
        list_6015.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6017 = writer.prefix("MaxResults");
    if let Some(var_6018) = &input.max_results {
        scope_6017.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_6018).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_6019 = writer.prefix("NextToken");
    if let Some(var_6020) = &input.next_token {
        scope_6019.string(var_6020);
    }
    #[allow(unused_mut)]
    let mut scope_6021 = writer.prefix("DryRun");
    if let Some(var_6022) = &input.dry_run {
        scope_6021.boolean(*var_6022);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_search_transit_gateway_multicast_groups(
    input: &crate::input::SearchTransitGatewayMulticastGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "SearchTransitGatewayMulticastGroups",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_6023 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_6024) = &input.transit_gateway_multicast_domain_id {
        scope_6023.string(var_6024);
    }
    #[allow(unused_mut)]
    let mut scope_6025 = writer.prefix("Filter");
    if let Some(var_6026) = &input.filters {
        let mut list_6028 = scope_6025.start_list(true, Some("Filter"));
        for item_6027 in var_6026 {
            #[allow(unused_mut)]
            let mut entry_6029 = list_6028.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_6029, item_6027)?;
        }
        list_6028.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6030 = writer.prefix("MaxResults");
    if let Some(var_6031) = &input.max_results {
        scope_6030.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_6031).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_6032 = writer.prefix("NextToken");
    if let Some(var_6033) = &input.next_token {
        scope_6032.string(var_6033);
    }
    #[allow(unused_mut)]
    let mut scope_6034 = writer.prefix("DryRun");
    if let Some(var_6035) = &input.dry_run {
        scope_6034.boolean(*var_6035);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_search_transit_gateway_routes(
    input: &crate::input::SearchTransitGatewayRoutesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "SearchTransitGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6036 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_6037) = &input.transit_gateway_route_table_id {
        scope_6036.string(var_6037);
    }
    #[allow(unused_mut)]
    let mut scope_6038 = writer.prefix("Filter");
    if let Some(var_6039) = &input.filters {
        let mut list_6041 = scope_6038.start_list(true, Some("Filter"));
        for item_6040 in var_6039 {
            #[allow(unused_mut)]
            let mut entry_6042 = list_6041.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_6042, item_6040)?;
        }
        list_6041.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6043 = writer.prefix("MaxResults");
    if let Some(var_6044) = &input.max_results {
        scope_6043.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_6044).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_6045 = writer.prefix("DryRun");
    if let Some(var_6046) = &input.dry_run {
        scope_6045.boolean(*var_6046);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_send_diagnostic_interrupt(
    input: &crate::input::SendDiagnosticInterruptInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "SendDiagnosticInterrupt", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6047 = writer.prefix("InstanceId");
    if let Some(var_6048) = &input.instance_id {
        scope_6047.string(var_6048);
    }
    #[allow(unused_mut)]
    let mut scope_6049 = writer.prefix("DryRun");
    if let Some(var_6050) = &input.dry_run {
        scope_6049.boolean(*var_6050);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_instances(
    input: &crate::input::StartInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StartInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6051 = writer.prefix("InstanceId");
    if let Some(var_6052) = &input.instance_ids {
        let mut list_6054 = scope_6051.start_list(true, Some("InstanceId"));
        for item_6053 in var_6052 {
            #[allow(unused_mut)]
            let mut entry_6055 = list_6054.entry();
            entry_6055.string(item_6053);
        }
        list_6054.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6056 = writer.prefix("AdditionalInfo");
    if let Some(var_6057) = &input.additional_info {
        scope_6056.string(var_6057);
    }
    #[allow(unused_mut)]
    let mut scope_6058 = writer.prefix("DryRun");
    if let Some(var_6059) = &input.dry_run {
        scope_6058.boolean(*var_6059);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_network_insights_access_scope_analysis(
    input: &crate::input::StartNetworkInsightsAccessScopeAnalysisInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "StartNetworkInsightsAccessScopeAnalysis",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_6060 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_6061) = &input.network_insights_access_scope_id {
        scope_6060.string(var_6061);
    }
    #[allow(unused_mut)]
    let mut scope_6062 = writer.prefix("DryRun");
    if let Some(var_6063) = &input.dry_run {
        scope_6062.boolean(*var_6063);
    }
    #[allow(unused_mut)]
    let mut scope_6064 = writer.prefix("TagSpecification");
    if let Some(var_6065) = &input.tag_specifications {
        let mut list_6067 = scope_6064.start_list(true, Some("item"));
        for item_6066 in var_6065 {
            #[allow(unused_mut)]
            let mut entry_6068 = list_6067.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_6068, item_6066,
            )?;
        }
        list_6067.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6069 = writer.prefix("ClientToken");
    if let Some(var_6070) = &input.client_token {
        scope_6069.string(var_6070);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_network_insights_analysis(
    input: &crate::input::StartNetworkInsightsAnalysisInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "StartNetworkInsightsAnalysis", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6071 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_6072) = &input.network_insights_path_id {
        scope_6071.string(var_6072);
    }
    #[allow(unused_mut)]
    let mut scope_6073 = writer.prefix("FilterInArn");
    if let Some(var_6074) = &input.filter_in_arns {
        let mut list_6076 = scope_6073.start_list(true, Some("item"));
        for item_6075 in var_6074 {
            #[allow(unused_mut)]
            let mut entry_6077 = list_6076.entry();
            entry_6077.string(item_6075);
        }
        list_6076.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6078 = writer.prefix("DryRun");
    if let Some(var_6079) = &input.dry_run {
        scope_6078.boolean(*var_6079);
    }
    #[allow(unused_mut)]
    let mut scope_6080 = writer.prefix("TagSpecification");
    if let Some(var_6081) = &input.tag_specifications {
        let mut list_6083 = scope_6080.start_list(true, Some("item"));
        for item_6082 in var_6081 {
            #[allow(unused_mut)]
            let mut entry_6084 = list_6083.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_6084, item_6082,
            )?;
        }
        list_6083.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6085 = writer.prefix("ClientToken");
    if let Some(var_6086) = &input.client_token {
        scope_6085.string(var_6086);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_vpc_endpoint_service_private_dns_verification(
    input: &crate::input::StartVpcEndpointServicePrivateDnsVerificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "StartVpcEndpointServicePrivateDnsVerification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_6087 = writer.prefix("DryRun");
    if let Some(var_6088) = &input.dry_run {
        scope_6087.boolean(*var_6088);
    }
    #[allow(unused_mut)]
    let mut scope_6089 = writer.prefix("ServiceId");
    if let Some(var_6090) = &input.service_id {
        scope_6089.string(var_6090);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_stop_instances(
    input: &crate::input::StopInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StopInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6091 = writer.prefix("InstanceId");
    if let Some(var_6092) = &input.instance_ids {
        let mut list_6094 = scope_6091.start_list(true, Some("InstanceId"));
        for item_6093 in var_6092 {
            #[allow(unused_mut)]
            let mut entry_6095 = list_6094.entry();
            entry_6095.string(item_6093);
        }
        list_6094.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6096 = writer.prefix("Hibernate");
    if let Some(var_6097) = &input.hibernate {
        scope_6096.boolean(*var_6097);
    }
    #[allow(unused_mut)]
    let mut scope_6098 = writer.prefix("DryRun");
    if let Some(var_6099) = &input.dry_run {
        scope_6098.boolean(*var_6099);
    }
    #[allow(unused_mut)]
    let mut scope_6100 = writer.prefix("Force");
    if let Some(var_6101) = &input.force {
        scope_6100.boolean(*var_6101);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_terminate_client_vpn_connections(
    input: &crate::input::TerminateClientVpnConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "TerminateClientVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6102 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_6103) = &input.client_vpn_endpoint_id {
        scope_6102.string(var_6103);
    }
    #[allow(unused_mut)]
    let mut scope_6104 = writer.prefix("ConnectionId");
    if let Some(var_6105) = &input.connection_id {
        scope_6104.string(var_6105);
    }
    #[allow(unused_mut)]
    let mut scope_6106 = writer.prefix("Username");
    if let Some(var_6107) = &input.username {
        scope_6106.string(var_6107);
    }
    #[allow(unused_mut)]
    let mut scope_6108 = writer.prefix("DryRun");
    if let Some(var_6109) = &input.dry_run {
        scope_6108.boolean(*var_6109);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_terminate_instances(
    input: &crate::input::TerminateInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "TerminateInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6110 = writer.prefix("InstanceId");
    if let Some(var_6111) = &input.instance_ids {
        let mut list_6113 = scope_6110.start_list(true, Some("InstanceId"));
        for item_6112 in var_6111 {
            #[allow(unused_mut)]
            let mut entry_6114 = list_6113.entry();
            entry_6114.string(item_6112);
        }
        list_6113.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6115 = writer.prefix("DryRun");
    if let Some(var_6116) = &input.dry_run {
        scope_6115.boolean(*var_6116);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_unassign_ipv6_addresses(
    input: &crate::input::UnassignIpv6AddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UnassignIpv6Addresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6117 = writer.prefix("Ipv6Addresses");
    if let Some(var_6118) = &input.ipv6_addresses {
        let mut list_6120 = scope_6117.start_list(true, Some("item"));
        for item_6119 in var_6118 {
            #[allow(unused_mut)]
            let mut entry_6121 = list_6120.entry();
            entry_6121.string(item_6119);
        }
        list_6120.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6122 = writer.prefix("Ipv6Prefix");
    if let Some(var_6123) = &input.ipv6_prefixes {
        let mut list_6125 = scope_6122.start_list(true, Some("item"));
        for item_6124 in var_6123 {
            #[allow(unused_mut)]
            let mut entry_6126 = list_6125.entry();
            entry_6126.string(item_6124);
        }
        list_6125.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6127 = writer.prefix("NetworkInterfaceId");
    if let Some(var_6128) = &input.network_interface_id {
        scope_6127.string(var_6128);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_unassign_private_ip_addresses(
    input: &crate::input::UnassignPrivateIpAddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UnassignPrivateIpAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6129 = writer.prefix("NetworkInterfaceId");
    if let Some(var_6130) = &input.network_interface_id {
        scope_6129.string(var_6130);
    }
    #[allow(unused_mut)]
    let mut scope_6131 = writer.prefix("PrivateIpAddress");
    if let Some(var_6132) = &input.private_ip_addresses {
        let mut list_6134 = scope_6131.start_list(true, Some("PrivateIpAddress"));
        for item_6133 in var_6132 {
            #[allow(unused_mut)]
            let mut entry_6135 = list_6134.entry();
            entry_6135.string(item_6133);
        }
        list_6134.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6136 = writer.prefix("Ipv4Prefix");
    if let Some(var_6137) = &input.ipv4_prefixes {
        let mut list_6139 = scope_6136.start_list(true, Some("item"));
        for item_6138 in var_6137 {
            #[allow(unused_mut)]
            let mut entry_6140 = list_6139.entry();
            entry_6140.string(item_6138);
        }
        list_6139.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_unmonitor_instances(
    input: &crate::input::UnmonitorInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UnmonitorInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6141 = writer.prefix("InstanceId");
    if let Some(var_6142) = &input.instance_ids {
        let mut list_6144 = scope_6141.start_list(true, Some("InstanceId"));
        for item_6143 in var_6142 {
            #[allow(unused_mut)]
            let mut entry_6145 = list_6144.entry();
            entry_6145.string(item_6143);
        }
        list_6144.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6146 = writer.prefix("DryRun");
    if let Some(var_6147) = &input.dry_run {
        scope_6146.boolean(*var_6147);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_security_group_rule_descriptions_egress(
    input: &crate::input::UpdateSecurityGroupRuleDescriptionsEgressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "UpdateSecurityGroupRuleDescriptionsEgress",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_6148 = writer.prefix("DryRun");
    if let Some(var_6149) = &input.dry_run {
        scope_6148.boolean(*var_6149);
    }
    #[allow(unused_mut)]
    let mut scope_6150 = writer.prefix("GroupId");
    if let Some(var_6151) = &input.group_id {
        scope_6150.string(var_6151);
    }
    #[allow(unused_mut)]
    let mut scope_6152 = writer.prefix("GroupName");
    if let Some(var_6153) = &input.group_name {
        scope_6152.string(var_6153);
    }
    #[allow(unused_mut)]
    let mut scope_6154 = writer.prefix("IpPermissions");
    if let Some(var_6155) = &input.ip_permissions {
        let mut list_6157 = scope_6154.start_list(true, Some("item"));
        for item_6156 in var_6155 {
            #[allow(unused_mut)]
            let mut entry_6158 = list_6157.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_6158, item_6156)?;
        }
        list_6157.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6159 = writer.prefix("SecurityGroupRuleDescription");
    if let Some(var_6160) = &input.security_group_rule_descriptions {
        let mut list_6162 = scope_6159.start_list(true, Some("item"));
        for item_6161 in var_6160 {
            #[allow(unused_mut)]
            let mut entry_6163 = list_6162.entry();
            crate::query_ser::serialize_structure_crate_model_security_group_rule_description(
                entry_6163, item_6161,
            )?;
        }
        list_6162.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_security_group_rule_descriptions_ingress(
    input: &crate::input::UpdateSecurityGroupRuleDescriptionsIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "UpdateSecurityGroupRuleDescriptionsIngress",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_6164 = writer.prefix("DryRun");
    if let Some(var_6165) = &input.dry_run {
        scope_6164.boolean(*var_6165);
    }
    #[allow(unused_mut)]
    let mut scope_6166 = writer.prefix("GroupId");
    if let Some(var_6167) = &input.group_id {
        scope_6166.string(var_6167);
    }
    #[allow(unused_mut)]
    let mut scope_6168 = writer.prefix("GroupName");
    if let Some(var_6169) = &input.group_name {
        scope_6168.string(var_6169);
    }
    #[allow(unused_mut)]
    let mut scope_6170 = writer.prefix("IpPermissions");
    if let Some(var_6171) = &input.ip_permissions {
        let mut list_6173 = scope_6170.start_list(true, Some("item"));
        for item_6172 in var_6171 {
            #[allow(unused_mut)]
            let mut entry_6174 = list_6173.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_6174, item_6172)?;
        }
        list_6173.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6175 = writer.prefix("SecurityGroupRuleDescription");
    if let Some(var_6176) = &input.security_group_rule_descriptions {
        let mut list_6178 = scope_6175.start_list(true, Some("item"));
        for item_6177 in var_6176 {
            #[allow(unused_mut)]
            let mut entry_6179 = list_6178.entry();
            crate::query_ser::serialize_structure_crate_model_security_group_rule_description(
                entry_6179, item_6177,
            )?;
        }
        list_6178.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_withdraw_byoip_cidr(
    input: &crate::input::WithdrawByoipCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "WithdrawByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6180 = writer.prefix("Cidr");
    if let Some(var_6181) = &input.cidr {
        scope_6180.string(var_6181);
    }
    #[allow(unused_mut)]
    let mut scope_6182 = writer.prefix("DryRun");
    if let Some(var_6183) = &input.dry_run {
        scope_6182.boolean(*var_6183);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
