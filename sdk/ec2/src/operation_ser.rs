// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_crate_operation_accept_reserved_instances_exchange_quote(
    input: &crate::input::AcceptReservedInstancesExchangeQuoteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AcceptReservedInstancesExchangeQuote",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("DryRun");
    if let Some(var_2) = &input.dry_run {
        scope_1.boolean(*var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("ReservedInstanceId");
    if let Some(var_4) = &input.reserved_instance_ids {
        let mut list_6 = scope_3.start_list(true, Some("ReservedInstanceId"));
        for item_5 in var_4 {
            #[allow(unused_mut)]
            let mut entry_7 = list_6.entry();
            entry_7.string(item_5);
        }
        list_6.finish();
    }
    #[allow(unused_mut)]
    let mut scope_8 = writer.prefix("TargetConfiguration");
    if let Some(var_9) = &input.target_configurations {
        let mut list_11 = scope_8.start_list(true, Some("TargetConfigurationRequest"));
        for item_10 in var_9 {
            #[allow(unused_mut)]
            let mut entry_12 = list_11.entry();
            crate::query_ser::serialize_structure_crate_model_target_configuration_request(
                entry_12, item_10,
            )?;
        }
        list_11.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_transit_gateway_multicast_domain_associations(
    input: &crate::input::AcceptTransitGatewayMulticastDomainAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AcceptTransitGatewayMulticastDomainAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_14) = &input.transit_gateway_multicast_domain_id {
        scope_13.string(var_14);
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_16) = &input.transit_gateway_attachment_id {
        scope_15.string(var_16);
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("SubnetIds");
    if let Some(var_18) = &input.subnet_ids {
        let mut list_20 = scope_17.start_list(true, Some("item"));
        for item_19 in var_18 {
            #[allow(unused_mut)]
            let mut entry_21 = list_20.entry();
            entry_21.string(item_19);
        }
        list_20.finish();
    }
    #[allow(unused_mut)]
    let mut scope_22 = writer.prefix("DryRun");
    if let Some(var_23) = &input.dry_run {
        scope_22.boolean(*var_23);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_transit_gateway_peering_attachment(
    input: &crate::input::AcceptTransitGatewayPeeringAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AcceptTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_24 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_25) = &input.transit_gateway_attachment_id {
        scope_24.string(var_25);
    }
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("DryRun");
    if let Some(var_27) = &input.dry_run {
        scope_26.boolean(*var_27);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_transit_gateway_vpc_attachment(
    input: &crate::input::AcceptTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AcceptTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_28 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_29) = &input.transit_gateway_attachment_id {
        scope_28.string(var_29);
    }
    #[allow(unused_mut)]
    let mut scope_30 = writer.prefix("DryRun");
    if let Some(var_31) = &input.dry_run {
        scope_30.boolean(*var_31);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_vpc_endpoint_connections(
    input: &crate::input::AcceptVpcEndpointConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AcceptVpcEndpointConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_32 = writer.prefix("DryRun");
    if let Some(var_33) = &input.dry_run {
        scope_32.boolean(*var_33);
    }
    #[allow(unused_mut)]
    let mut scope_34 = writer.prefix("ServiceId");
    if let Some(var_35) = &input.service_id {
        scope_34.string(var_35);
    }
    #[allow(unused_mut)]
    let mut scope_36 = writer.prefix("VpcEndpointId");
    if let Some(var_37) = &input.vpc_endpoint_ids {
        let mut list_39 = scope_36.start_list(true, Some("item"));
        for item_38 in var_37 {
            #[allow(unused_mut)]
            let mut entry_40 = list_39.entry();
            entry_40.string(item_38);
        }
        list_39.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_vpc_peering_connection(
    input: &crate::input::AcceptVpcPeeringConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AcceptVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_41 = writer.prefix("DryRun");
    if let Some(var_42) = &input.dry_run {
        scope_41.boolean(*var_42);
    }
    #[allow(unused_mut)]
    let mut scope_43 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_44) = &input.vpc_peering_connection_id {
        scope_43.string(var_44);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_advertise_byoip_cidr(
    input: &crate::input::AdvertiseByoipCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AdvertiseByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_45 = writer.prefix("Cidr");
    if let Some(var_46) = &input.cidr {
        scope_45.string(var_46);
    }
    #[allow(unused_mut)]
    let mut scope_47 = writer.prefix("DryRun");
    if let Some(var_48) = &input.dry_run {
        scope_47.boolean(*var_48);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_allocate_address(
    input: &crate::input::AllocateAddressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AllocateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_49 = writer.prefix("Domain");
    if let Some(var_50) = &input.domain {
        scope_49.string(var_50.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_51 = writer.prefix("Address");
    if let Some(var_52) = &input.address {
        scope_51.string(var_52);
    }
    #[allow(unused_mut)]
    let mut scope_53 = writer.prefix("PublicIpv4Pool");
    if let Some(var_54) = &input.public_ipv4_pool {
        scope_53.string(var_54);
    }
    #[allow(unused_mut)]
    let mut scope_55 = writer.prefix("NetworkBorderGroup");
    if let Some(var_56) = &input.network_border_group {
        scope_55.string(var_56);
    }
    #[allow(unused_mut)]
    let mut scope_57 = writer.prefix("CustomerOwnedIpv4Pool");
    if let Some(var_58) = &input.customer_owned_ipv4_pool {
        scope_57.string(var_58);
    }
    #[allow(unused_mut)]
    let mut scope_59 = writer.prefix("DryRun");
    if let Some(var_60) = &input.dry_run {
        scope_59.boolean(*var_60);
    }
    #[allow(unused_mut)]
    let mut scope_61 = writer.prefix("TagSpecification");
    if let Some(var_62) = &input.tag_specifications {
        let mut list_64 = scope_61.start_list(true, Some("item"));
        for item_63 in var_62 {
            #[allow(unused_mut)]
            let mut entry_65 = list_64.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_65, item_63)?;
        }
        list_64.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_allocate_hosts(
    input: &crate::input::AllocateHostsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AllocateHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_66 = writer.prefix("AutoPlacement");
    if let Some(var_67) = &input.auto_placement {
        scope_66.string(var_67.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_68 = writer.prefix("AvailabilityZone");
    if let Some(var_69) = &input.availability_zone {
        scope_68.string(var_69);
    }
    #[allow(unused_mut)]
    let mut scope_70 = writer.prefix("ClientToken");
    if let Some(var_71) = &input.client_token {
        scope_70.string(var_71);
    }
    #[allow(unused_mut)]
    let mut scope_72 = writer.prefix("InstanceType");
    if let Some(var_73) = &input.instance_type {
        scope_72.string(var_73);
    }
    #[allow(unused_mut)]
    let mut scope_74 = writer.prefix("InstanceFamily");
    if let Some(var_75) = &input.instance_family {
        scope_74.string(var_75);
    }
    #[allow(unused_mut)]
    let mut scope_76 = writer.prefix("Quantity");
    if let Some(var_77) = &input.quantity {
        scope_76.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_77).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_78 = writer.prefix("TagSpecification");
    if let Some(var_79) = &input.tag_specifications {
        let mut list_81 = scope_78.start_list(true, Some("item"));
        for item_80 in var_79 {
            #[allow(unused_mut)]
            let mut entry_82 = list_81.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_82, item_80)?;
        }
        list_81.finish();
    }
    #[allow(unused_mut)]
    let mut scope_83 = writer.prefix("HostRecovery");
    if let Some(var_84) = &input.host_recovery {
        scope_83.string(var_84.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_85 = writer.prefix("OutpostArn");
    if let Some(var_86) = &input.outpost_arn {
        scope_85.string(var_86);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_allocate_ipam_pool_cidr(
    input: &crate::input::AllocateIpamPoolCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AllocateIpamPoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_87 = writer.prefix("DryRun");
    if let Some(var_88) = &input.dry_run {
        scope_87.boolean(*var_88);
    }
    #[allow(unused_mut)]
    let mut scope_89 = writer.prefix("IpamPoolId");
    if let Some(var_90) = &input.ipam_pool_id {
        scope_89.string(var_90);
    }
    #[allow(unused_mut)]
    let mut scope_91 = writer.prefix("Cidr");
    if let Some(var_92) = &input.cidr {
        scope_91.string(var_92);
    }
    #[allow(unused_mut)]
    let mut scope_93 = writer.prefix("NetmaskLength");
    if let Some(var_94) = &input.netmask_length {
        scope_93.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_94).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_95 = writer.prefix("ClientToken");
    if let Some(var_96) = &input.client_token {
        scope_95.string(var_96);
    }
    #[allow(unused_mut)]
    let mut scope_97 = writer.prefix("Description");
    if let Some(var_98) = &input.description {
        scope_97.string(var_98);
    }
    #[allow(unused_mut)]
    let mut scope_99 = writer.prefix("PreviewNextCidr");
    if let Some(var_100) = &input.preview_next_cidr {
        scope_99.boolean(*var_100);
    }
    #[allow(unused_mut)]
    let mut scope_101 = writer.prefix("DisallowedCidr");
    if let Some(var_102) = &input.disallowed_cidrs {
        let mut list_104 = scope_101.start_list(true, Some("item"));
        for item_103 in var_102 {
            #[allow(unused_mut)]
            let mut entry_105 = list_104.entry();
            entry_105.string(item_103);
        }
        list_104.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_apply_security_groups_to_client_vpn_target_network(
    input: &crate::input::ApplySecurityGroupsToClientVpnTargetNetworkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ApplySecurityGroupsToClientVpnTargetNetwork",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_106 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_107) = &input.client_vpn_endpoint_id {
        scope_106.string(var_107);
    }
    #[allow(unused_mut)]
    let mut scope_108 = writer.prefix("VpcId");
    if let Some(var_109) = &input.vpc_id {
        scope_108.string(var_109);
    }
    #[allow(unused_mut)]
    let mut scope_110 = writer.prefix("SecurityGroupId");
    if let Some(var_111) = &input.security_group_ids {
        let mut list_113 = scope_110.start_list(true, Some("item"));
        for item_112 in var_111 {
            #[allow(unused_mut)]
            let mut entry_114 = list_113.entry();
            entry_114.string(item_112);
        }
        list_113.finish();
    }
    #[allow(unused_mut)]
    let mut scope_115 = writer.prefix("DryRun");
    if let Some(var_116) = &input.dry_run {
        scope_115.boolean(*var_116);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_assign_ipv6_addresses(
    input: &crate::input::AssignIpv6AddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssignIpv6Addresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_117 = writer.prefix("Ipv6AddressCount");
    if let Some(var_118) = &input.ipv6_address_count {
        scope_117.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_118).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_119 = writer.prefix("Ipv6Addresses");
    if let Some(var_120) = &input.ipv6_addresses {
        let mut list_122 = scope_119.start_list(true, Some("item"));
        for item_121 in var_120 {
            #[allow(unused_mut)]
            let mut entry_123 = list_122.entry();
            entry_123.string(item_121);
        }
        list_122.finish();
    }
    #[allow(unused_mut)]
    let mut scope_124 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_125) = &input.ipv6_prefix_count {
        scope_124.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_125).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_126 = writer.prefix("Ipv6Prefix");
    if let Some(var_127) = &input.ipv6_prefixes {
        let mut list_129 = scope_126.start_list(true, Some("item"));
        for item_128 in var_127 {
            #[allow(unused_mut)]
            let mut entry_130 = list_129.entry();
            entry_130.string(item_128);
        }
        list_129.finish();
    }
    #[allow(unused_mut)]
    let mut scope_131 = writer.prefix("NetworkInterfaceId");
    if let Some(var_132) = &input.network_interface_id {
        scope_131.string(var_132);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_assign_private_ip_addresses(
    input: &crate::input::AssignPrivateIpAddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssignPrivateIpAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_133 = writer.prefix("AllowReassignment");
    if let Some(var_134) = &input.allow_reassignment {
        scope_133.boolean(*var_134);
    }
    #[allow(unused_mut)]
    let mut scope_135 = writer.prefix("NetworkInterfaceId");
    if let Some(var_136) = &input.network_interface_id {
        scope_135.string(var_136);
    }
    #[allow(unused_mut)]
    let mut scope_137 = writer.prefix("PrivateIpAddress");
    if let Some(var_138) = &input.private_ip_addresses {
        let mut list_140 = scope_137.start_list(true, Some("PrivateIpAddress"));
        for item_139 in var_138 {
            #[allow(unused_mut)]
            let mut entry_141 = list_140.entry();
            entry_141.string(item_139);
        }
        list_140.finish();
    }
    #[allow(unused_mut)]
    let mut scope_142 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_143) = &input.secondary_private_ip_address_count {
        scope_142.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_143).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_144 = writer.prefix("Ipv4Prefix");
    if let Some(var_145) = &input.ipv4_prefixes {
        let mut list_147 = scope_144.start_list(true, Some("item"));
        for item_146 in var_145 {
            #[allow(unused_mut)]
            let mut entry_148 = list_147.entry();
            entry_148.string(item_146);
        }
        list_147.finish();
    }
    #[allow(unused_mut)]
    let mut scope_149 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_150) = &input.ipv4_prefix_count {
        scope_149.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_150).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_address(
    input: &crate::input::AssociateAddressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AssociateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_151 = writer.prefix("AllocationId");
    if let Some(var_152) = &input.allocation_id {
        scope_151.string(var_152);
    }
    #[allow(unused_mut)]
    let mut scope_153 = writer.prefix("InstanceId");
    if let Some(var_154) = &input.instance_id {
        scope_153.string(var_154);
    }
    #[allow(unused_mut)]
    let mut scope_155 = writer.prefix("PublicIp");
    if let Some(var_156) = &input.public_ip {
        scope_155.string(var_156);
    }
    #[allow(unused_mut)]
    let mut scope_157 = writer.prefix("AllowReassociation");
    if let Some(var_158) = &input.allow_reassociation {
        scope_157.boolean(*var_158);
    }
    #[allow(unused_mut)]
    let mut scope_159 = writer.prefix("DryRun");
    if let Some(var_160) = &input.dry_run {
        scope_159.boolean(*var_160);
    }
    #[allow(unused_mut)]
    let mut scope_161 = writer.prefix("NetworkInterfaceId");
    if let Some(var_162) = &input.network_interface_id {
        scope_161.string(var_162);
    }
    #[allow(unused_mut)]
    let mut scope_163 = writer.prefix("PrivateIpAddress");
    if let Some(var_164) = &input.private_ip_address {
        scope_163.string(var_164);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_client_vpn_target_network(
    input: &crate::input::AssociateClientVpnTargetNetworkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateClientVpnTargetNetwork",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_165 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_166) = &input.client_vpn_endpoint_id {
        scope_165.string(var_166);
    }
    #[allow(unused_mut)]
    let mut scope_167 = writer.prefix("SubnetId");
    if let Some(var_168) = &input.subnet_id {
        scope_167.string(var_168);
    }
    #[allow(unused_mut)]
    let mut scope_169 = writer.prefix("ClientToken");
    if let Some(var_170) = &input.client_token {
        scope_169.string(var_170);
    }
    #[allow(unused_mut)]
    let mut scope_171 = writer.prefix("DryRun");
    if let Some(var_172) = &input.dry_run {
        scope_171.boolean(*var_172);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_dhcp_options(
    input: &crate::input::AssociateDhcpOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_173 = writer.prefix("DhcpOptionsId");
    if let Some(var_174) = &input.dhcp_options_id {
        scope_173.string(var_174);
    }
    #[allow(unused_mut)]
    let mut scope_175 = writer.prefix("VpcId");
    if let Some(var_176) = &input.vpc_id {
        scope_175.string(var_176);
    }
    #[allow(unused_mut)]
    let mut scope_177 = writer.prefix("DryRun");
    if let Some(var_178) = &input.dry_run {
        scope_177.boolean(*var_178);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_enclave_certificate_iam_role(
    input: &crate::input::AssociateEnclaveCertificateIamRoleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateEnclaveCertificateIamRole",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_179 = writer.prefix("CertificateArn");
    if let Some(var_180) = &input.certificate_arn {
        scope_179.string(var_180);
    }
    #[allow(unused_mut)]
    let mut scope_181 = writer.prefix("RoleArn");
    if let Some(var_182) = &input.role_arn {
        scope_181.string(var_182);
    }
    #[allow(unused_mut)]
    let mut scope_183 = writer.prefix("DryRun");
    if let Some(var_184) = &input.dry_run {
        scope_183.boolean(*var_184);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_iam_instance_profile(
    input: &crate::input::AssociateIamInstanceProfileInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateIamInstanceProfile", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_185 = writer.prefix("IamInstanceProfile");
    if let Some(var_186) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_185, var_186,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_187 = writer.prefix("InstanceId");
    if let Some(var_188) = &input.instance_id {
        scope_187.string(var_188);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_instance_event_window(
    input: &crate::input::AssociateInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_189 = writer.prefix("DryRun");
    if let Some(var_190) = &input.dry_run {
        scope_189.boolean(*var_190);
    }
    #[allow(unused_mut)]
    let mut scope_191 = writer.prefix("InstanceEventWindowId");
    if let Some(var_192) = &input.instance_event_window_id {
        scope_191.string(var_192);
    }
    #[allow(unused_mut)]
    let mut scope_193 = writer.prefix("AssociationTarget");
    if let Some(var_194) = &input.association_target {
        crate::query_ser::serialize_structure_crate_model_instance_event_window_association_request(scope_193, var_194)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_route_table(
    input: &crate::input::AssociateRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_195 = writer.prefix("DryRun");
    if let Some(var_196) = &input.dry_run {
        scope_195.boolean(*var_196);
    }
    #[allow(unused_mut)]
    let mut scope_197 = writer.prefix("RouteTableId");
    if let Some(var_198) = &input.route_table_id {
        scope_197.string(var_198);
    }
    #[allow(unused_mut)]
    let mut scope_199 = writer.prefix("SubnetId");
    if let Some(var_200) = &input.subnet_id {
        scope_199.string(var_200);
    }
    #[allow(unused_mut)]
    let mut scope_201 = writer.prefix("GatewayId");
    if let Some(var_202) = &input.gateway_id {
        scope_201.string(var_202);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_subnet_cidr_block(
    input: &crate::input::AssociateSubnetCidrBlockInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateSubnetCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_203 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_204) = &input.ipv6_cidr_block {
        scope_203.string(var_204);
    }
    #[allow(unused_mut)]
    let mut scope_205 = writer.prefix("SubnetId");
    if let Some(var_206) = &input.subnet_id {
        scope_205.string(var_206);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_transit_gateway_multicast_domain(
    input: &crate::input::AssociateTransitGatewayMulticastDomainInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_207 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_208) = &input.transit_gateway_multicast_domain_id {
        scope_207.string(var_208);
    }
    #[allow(unused_mut)]
    let mut scope_209 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_210) = &input.transit_gateway_attachment_id {
        scope_209.string(var_210);
    }
    #[allow(unused_mut)]
    let mut scope_211 = writer.prefix("SubnetIds");
    if let Some(var_212) = &input.subnet_ids {
        let mut list_214 = scope_211.start_list(true, Some("item"));
        for item_213 in var_212 {
            #[allow(unused_mut)]
            let mut entry_215 = list_214.entry();
            entry_215.string(item_213);
        }
        list_214.finish();
    }
    #[allow(unused_mut)]
    let mut scope_216 = writer.prefix("DryRun");
    if let Some(var_217) = &input.dry_run {
        scope_216.boolean(*var_217);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_transit_gateway_route_table(
    input: &crate::input::AssociateTransitGatewayRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_218 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_219) = &input.transit_gateway_route_table_id {
        scope_218.string(var_219);
    }
    #[allow(unused_mut)]
    let mut scope_220 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_221) = &input.transit_gateway_attachment_id {
        scope_220.string(var_221);
    }
    #[allow(unused_mut)]
    let mut scope_222 = writer.prefix("DryRun");
    if let Some(var_223) = &input.dry_run {
        scope_222.boolean(*var_223);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_trunk_interface(
    input: &crate::input::AssociateTrunkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateTrunkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_224 = writer.prefix("BranchInterfaceId");
    if let Some(var_225) = &input.branch_interface_id {
        scope_224.string(var_225);
    }
    #[allow(unused_mut)]
    let mut scope_226 = writer.prefix("TrunkInterfaceId");
    if let Some(var_227) = &input.trunk_interface_id {
        scope_226.string(var_227);
    }
    #[allow(unused_mut)]
    let mut scope_228 = writer.prefix("VlanId");
    if let Some(var_229) = &input.vlan_id {
        scope_228.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_229).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_230 = writer.prefix("GreKey");
    if let Some(var_231) = &input.gre_key {
        scope_230.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_231).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_232 = writer.prefix("ClientToken");
    if let Some(var_233) = &input.client_token {
        scope_232.string(var_233);
    }
    #[allow(unused_mut)]
    let mut scope_234 = writer.prefix("DryRun");
    if let Some(var_235) = &input.dry_run {
        scope_234.boolean(*var_235);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_vpc_cidr_block(
    input: &crate::input::AssociateVpcCidrBlockInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateVpcCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_236 = writer.prefix("AmazonProvidedIpv6CidrBlock");
    if let Some(var_237) = &input.amazon_provided_ipv6_cidr_block {
        scope_236.boolean(*var_237);
    }
    #[allow(unused_mut)]
    let mut scope_238 = writer.prefix("CidrBlock");
    if let Some(var_239) = &input.cidr_block {
        scope_238.string(var_239);
    }
    #[allow(unused_mut)]
    let mut scope_240 = writer.prefix("VpcId");
    if let Some(var_241) = &input.vpc_id {
        scope_240.string(var_241);
    }
    #[allow(unused_mut)]
    let mut scope_242 = writer.prefix("Ipv6CidrBlockNetworkBorderGroup");
    if let Some(var_243) = &input.ipv6_cidr_block_network_border_group {
        scope_242.string(var_243);
    }
    #[allow(unused_mut)]
    let mut scope_244 = writer.prefix("Ipv6Pool");
    if let Some(var_245) = &input.ipv6_pool {
        scope_244.string(var_245);
    }
    #[allow(unused_mut)]
    let mut scope_246 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_247) = &input.ipv6_cidr_block {
        scope_246.string(var_247);
    }
    #[allow(unused_mut)]
    let mut scope_248 = writer.prefix("Ipv4IpamPoolId");
    if let Some(var_249) = &input.ipv4_ipam_pool_id {
        scope_248.string(var_249);
    }
    #[allow(unused_mut)]
    let mut scope_250 = writer.prefix("Ipv4NetmaskLength");
    if let Some(var_251) = &input.ipv4_netmask_length {
        scope_250.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_251).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_252 = writer.prefix("Ipv6IpamPoolId");
    if let Some(var_253) = &input.ipv6_ipam_pool_id {
        scope_252.string(var_253);
    }
    #[allow(unused_mut)]
    let mut scope_254 = writer.prefix("Ipv6NetmaskLength");
    if let Some(var_255) = &input.ipv6_netmask_length {
        scope_254.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_255).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_classic_link_vpc(
    input: &crate::input::AttachClassicLinkVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AttachClassicLinkVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_256 = writer.prefix("DryRun");
    if let Some(var_257) = &input.dry_run {
        scope_256.boolean(*var_257);
    }
    #[allow(unused_mut)]
    let mut scope_258 = writer.prefix("SecurityGroupId");
    if let Some(var_259) = &input.groups {
        let mut list_261 = scope_258.start_list(true, Some("groupId"));
        for item_260 in var_259 {
            #[allow(unused_mut)]
            let mut entry_262 = list_261.entry();
            entry_262.string(item_260);
        }
        list_261.finish();
    }
    #[allow(unused_mut)]
    let mut scope_263 = writer.prefix("InstanceId");
    if let Some(var_264) = &input.instance_id {
        scope_263.string(var_264);
    }
    #[allow(unused_mut)]
    let mut scope_265 = writer.prefix("VpcId");
    if let Some(var_266) = &input.vpc_id {
        scope_265.string(var_266);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_internet_gateway(
    input: &crate::input::AttachInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AttachInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_267 = writer.prefix("DryRun");
    if let Some(var_268) = &input.dry_run {
        scope_267.boolean(*var_268);
    }
    #[allow(unused_mut)]
    let mut scope_269 = writer.prefix("InternetGatewayId");
    if let Some(var_270) = &input.internet_gateway_id {
        scope_269.string(var_270);
    }
    #[allow(unused_mut)]
    let mut scope_271 = writer.prefix("VpcId");
    if let Some(var_272) = &input.vpc_id {
        scope_271.string(var_272);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_network_interface(
    input: &crate::input::AttachNetworkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AttachNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_273 = writer.prefix("DeviceIndex");
    if let Some(var_274) = &input.device_index {
        scope_273.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_274).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_275 = writer.prefix("DryRun");
    if let Some(var_276) = &input.dry_run {
        scope_275.boolean(*var_276);
    }
    #[allow(unused_mut)]
    let mut scope_277 = writer.prefix("InstanceId");
    if let Some(var_278) = &input.instance_id {
        scope_277.string(var_278);
    }
    #[allow(unused_mut)]
    let mut scope_279 = writer.prefix("NetworkInterfaceId");
    if let Some(var_280) = &input.network_interface_id {
        scope_279.string(var_280);
    }
    #[allow(unused_mut)]
    let mut scope_281 = writer.prefix("NetworkCardIndex");
    if let Some(var_282) = &input.network_card_index {
        scope_281.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_282).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_volume(
    input: &crate::input::AttachVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AttachVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_283 = writer.prefix("Device");
    if let Some(var_284) = &input.device {
        scope_283.string(var_284);
    }
    #[allow(unused_mut)]
    let mut scope_285 = writer.prefix("InstanceId");
    if let Some(var_286) = &input.instance_id {
        scope_285.string(var_286);
    }
    #[allow(unused_mut)]
    let mut scope_287 = writer.prefix("VolumeId");
    if let Some(var_288) = &input.volume_id {
        scope_287.string(var_288);
    }
    #[allow(unused_mut)]
    let mut scope_289 = writer.prefix("DryRun");
    if let Some(var_290) = &input.dry_run {
        scope_289.boolean(*var_290);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_vpn_gateway(
    input: &crate::input::AttachVpnGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AttachVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_291 = writer.prefix("VpcId");
    if let Some(var_292) = &input.vpc_id {
        scope_291.string(var_292);
    }
    #[allow(unused_mut)]
    let mut scope_293 = writer.prefix("VpnGatewayId");
    if let Some(var_294) = &input.vpn_gateway_id {
        scope_293.string(var_294);
    }
    #[allow(unused_mut)]
    let mut scope_295 = writer.prefix("DryRun");
    if let Some(var_296) = &input.dry_run {
        scope_295.boolean(*var_296);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_client_vpn_ingress(
    input: &crate::input::AuthorizeClientVpnIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeClientVpnIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_297 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_298) = &input.client_vpn_endpoint_id {
        scope_297.string(var_298);
    }
    #[allow(unused_mut)]
    let mut scope_299 = writer.prefix("TargetNetworkCidr");
    if let Some(var_300) = &input.target_network_cidr {
        scope_299.string(var_300);
    }
    #[allow(unused_mut)]
    let mut scope_301 = writer.prefix("AccessGroupId");
    if let Some(var_302) = &input.access_group_id {
        scope_301.string(var_302);
    }
    #[allow(unused_mut)]
    let mut scope_303 = writer.prefix("AuthorizeAllGroups");
    if let Some(var_304) = &input.authorize_all_groups {
        scope_303.boolean(*var_304);
    }
    #[allow(unused_mut)]
    let mut scope_305 = writer.prefix("Description");
    if let Some(var_306) = &input.description {
        scope_305.string(var_306);
    }
    #[allow(unused_mut)]
    let mut scope_307 = writer.prefix("ClientToken");
    if let Some(var_308) = &input.client_token {
        scope_307.string(var_308);
    }
    #[allow(unused_mut)]
    let mut scope_309 = writer.prefix("DryRun");
    if let Some(var_310) = &input.dry_run {
        scope_309.boolean(*var_310);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_security_group_egress(
    input: &crate::input::AuthorizeSecurityGroupEgressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeSecurityGroupEgress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_311 = writer.prefix("DryRun");
    if let Some(var_312) = &input.dry_run {
        scope_311.boolean(*var_312);
    }
    #[allow(unused_mut)]
    let mut scope_313 = writer.prefix("GroupId");
    if let Some(var_314) = &input.group_id {
        scope_313.string(var_314);
    }
    #[allow(unused_mut)]
    let mut scope_315 = writer.prefix("IpPermissions");
    if let Some(var_316) = &input.ip_permissions {
        let mut list_318 = scope_315.start_list(true, Some("item"));
        for item_317 in var_316 {
            #[allow(unused_mut)]
            let mut entry_319 = list_318.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_319, item_317)?;
        }
        list_318.finish();
    }
    #[allow(unused_mut)]
    let mut scope_320 = writer.prefix("TagSpecification");
    if let Some(var_321) = &input.tag_specifications {
        let mut list_323 = scope_320.start_list(true, Some("item"));
        for item_322 in var_321 {
            #[allow(unused_mut)]
            let mut entry_324 = list_323.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_324, item_322,
            )?;
        }
        list_323.finish();
    }
    #[allow(unused_mut)]
    let mut scope_325 = writer.prefix("CidrIp");
    if let Some(var_326) = &input.cidr_ip {
        scope_325.string(var_326);
    }
    #[allow(unused_mut)]
    let mut scope_327 = writer.prefix("FromPort");
    if let Some(var_328) = &input.from_port {
        scope_327.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_328).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_329 = writer.prefix("IpProtocol");
    if let Some(var_330) = &input.ip_protocol {
        scope_329.string(var_330);
    }
    #[allow(unused_mut)]
    let mut scope_331 = writer.prefix("ToPort");
    if let Some(var_332) = &input.to_port {
        scope_331.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_332).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_333 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_334) = &input.source_security_group_name {
        scope_333.string(var_334);
    }
    #[allow(unused_mut)]
    let mut scope_335 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_336) = &input.source_security_group_owner_id {
        scope_335.string(var_336);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_security_group_ingress(
    input: &crate::input::AuthorizeSecurityGroupIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeSecurityGroupIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_337 = writer.prefix("CidrIp");
    if let Some(var_338) = &input.cidr_ip {
        scope_337.string(var_338);
    }
    #[allow(unused_mut)]
    let mut scope_339 = writer.prefix("FromPort");
    if let Some(var_340) = &input.from_port {
        scope_339.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_340).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_341 = writer.prefix("GroupId");
    if let Some(var_342) = &input.group_id {
        scope_341.string(var_342);
    }
    #[allow(unused_mut)]
    let mut scope_343 = writer.prefix("GroupName");
    if let Some(var_344) = &input.group_name {
        scope_343.string(var_344);
    }
    #[allow(unused_mut)]
    let mut scope_345 = writer.prefix("IpPermissions");
    if let Some(var_346) = &input.ip_permissions {
        let mut list_348 = scope_345.start_list(true, Some("item"));
        for item_347 in var_346 {
            #[allow(unused_mut)]
            let mut entry_349 = list_348.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_349, item_347)?;
        }
        list_348.finish();
    }
    #[allow(unused_mut)]
    let mut scope_350 = writer.prefix("IpProtocol");
    if let Some(var_351) = &input.ip_protocol {
        scope_350.string(var_351);
    }
    #[allow(unused_mut)]
    let mut scope_352 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_353) = &input.source_security_group_name {
        scope_352.string(var_353);
    }
    #[allow(unused_mut)]
    let mut scope_354 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_355) = &input.source_security_group_owner_id {
        scope_354.string(var_355);
    }
    #[allow(unused_mut)]
    let mut scope_356 = writer.prefix("ToPort");
    if let Some(var_357) = &input.to_port {
        scope_356.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_357).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_358 = writer.prefix("DryRun");
    if let Some(var_359) = &input.dry_run {
        scope_358.boolean(*var_359);
    }
    #[allow(unused_mut)]
    let mut scope_360 = writer.prefix("TagSpecification");
    if let Some(var_361) = &input.tag_specifications {
        let mut list_363 = scope_360.start_list(true, Some("item"));
        for item_362 in var_361 {
            #[allow(unused_mut)]
            let mut entry_364 = list_363.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_364, item_362,
            )?;
        }
        list_363.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_bundle_instance(
    input: &crate::input::BundleInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "BundleInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_365 = writer.prefix("InstanceId");
    if let Some(var_366) = &input.instance_id {
        scope_365.string(var_366);
    }
    #[allow(unused_mut)]
    let mut scope_367 = writer.prefix("Storage");
    if let Some(var_368) = &input.storage {
        crate::query_ser::serialize_structure_crate_model_storage(scope_367, var_368)?;
    }
    #[allow(unused_mut)]
    let mut scope_369 = writer.prefix("DryRun");
    if let Some(var_370) = &input.dry_run {
        scope_369.boolean(*var_370);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_bundle_task(
    input: &crate::input::CancelBundleTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelBundleTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_371 = writer.prefix("BundleId");
    if let Some(var_372) = &input.bundle_id {
        scope_371.string(var_372);
    }
    #[allow(unused_mut)]
    let mut scope_373 = writer.prefix("DryRun");
    if let Some(var_374) = &input.dry_run {
        scope_373.boolean(*var_374);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_capacity_reservation(
    input: &crate::input::CancelCapacityReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CancelCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_375 = writer.prefix("CapacityReservationId");
    if let Some(var_376) = &input.capacity_reservation_id {
        scope_375.string(var_376);
    }
    #[allow(unused_mut)]
    let mut scope_377 = writer.prefix("DryRun");
    if let Some(var_378) = &input.dry_run {
        scope_377.boolean(*var_378);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_capacity_reservation_fleets(
    input: &crate::input::CancelCapacityReservationFleetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CancelCapacityReservationFleets",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_379 = writer.prefix("DryRun");
    if let Some(var_380) = &input.dry_run {
        scope_379.boolean(*var_380);
    }
    #[allow(unused_mut)]
    let mut scope_381 = writer.prefix("CapacityReservationFleetId");
    if let Some(var_382) = &input.capacity_reservation_fleet_ids {
        let mut list_384 = scope_381.start_list(true, Some("item"));
        for item_383 in var_382 {
            #[allow(unused_mut)]
            let mut entry_385 = list_384.entry();
            entry_385.string(item_383);
        }
        list_384.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_conversion_task(
    input: &crate::input::CancelConversionTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CancelConversionTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_386 = writer.prefix("ConversionTaskId");
    if let Some(var_387) = &input.conversion_task_id {
        scope_386.string(var_387);
    }
    #[allow(unused_mut)]
    let mut scope_388 = writer.prefix("DryRun");
    if let Some(var_389) = &input.dry_run {
        scope_388.boolean(*var_389);
    }
    #[allow(unused_mut)]
    let mut scope_390 = writer.prefix("ReasonMessage");
    if let Some(var_391) = &input.reason_message {
        scope_390.string(var_391);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_export_task(
    input: &crate::input::CancelExportTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelExportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_392 = writer.prefix("ExportTaskId");
    if let Some(var_393) = &input.export_task_id {
        scope_392.string(var_393);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_import_task(
    input: &crate::input::CancelImportTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelImportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_394 = writer.prefix("CancelReason");
    if let Some(var_395) = &input.cancel_reason {
        scope_394.string(var_395);
    }
    #[allow(unused_mut)]
    let mut scope_396 = writer.prefix("DryRun");
    if let Some(var_397) = &input.dry_run {
        scope_396.boolean(*var_397);
    }
    #[allow(unused_mut)]
    let mut scope_398 = writer.prefix("ImportTaskId");
    if let Some(var_399) = &input.import_task_id {
        scope_398.string(var_399);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_reserved_instances_listing(
    input: &crate::input::CancelReservedInstancesListingInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CancelReservedInstancesListing",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_400 = writer.prefix("ReservedInstancesListingId");
    if let Some(var_401) = &input.reserved_instances_listing_id {
        scope_400.string(var_401);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_spot_fleet_requests(
    input: &crate::input::CancelSpotFleetRequestsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CancelSpotFleetRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_402 = writer.prefix("DryRun");
    if let Some(var_403) = &input.dry_run {
        scope_402.boolean(*var_403);
    }
    #[allow(unused_mut)]
    let mut scope_404 = writer.prefix("SpotFleetRequestId");
    if let Some(var_405) = &input.spot_fleet_request_ids {
        let mut list_407 = scope_404.start_list(true, Some("item"));
        for item_406 in var_405 {
            #[allow(unused_mut)]
            let mut entry_408 = list_407.entry();
            entry_408.string(item_406);
        }
        list_407.finish();
    }
    #[allow(unused_mut)]
    let mut scope_409 = writer.prefix("TerminateInstances");
    if let Some(var_410) = &input.terminate_instances {
        scope_409.boolean(*var_410);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_spot_instance_requests(
    input: &crate::input::CancelSpotInstanceRequestsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CancelSpotInstanceRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_411 = writer.prefix("DryRun");
    if let Some(var_412) = &input.dry_run {
        scope_411.boolean(*var_412);
    }
    #[allow(unused_mut)]
    let mut scope_413 = writer.prefix("SpotInstanceRequestId");
    if let Some(var_414) = &input.spot_instance_request_ids {
        let mut list_416 = scope_413.start_list(true, Some("SpotInstanceRequestId"));
        for item_415 in var_414 {
            #[allow(unused_mut)]
            let mut entry_417 = list_416.entry();
            entry_417.string(item_415);
        }
        list_416.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_confirm_product_instance(
    input: &crate::input::ConfirmProductInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ConfirmProductInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_418 = writer.prefix("InstanceId");
    if let Some(var_419) = &input.instance_id {
        scope_418.string(var_419);
    }
    #[allow(unused_mut)]
    let mut scope_420 = writer.prefix("ProductCode");
    if let Some(var_421) = &input.product_code {
        scope_420.string(var_421);
    }
    #[allow(unused_mut)]
    let mut scope_422 = writer.prefix("DryRun");
    if let Some(var_423) = &input.dry_run {
        scope_422.boolean(*var_423);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_fpga_image(
    input: &crate::input::CopyFpgaImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopyFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_424 = writer.prefix("DryRun");
    if let Some(var_425) = &input.dry_run {
        scope_424.boolean(*var_425);
    }
    #[allow(unused_mut)]
    let mut scope_426 = writer.prefix("SourceFpgaImageId");
    if let Some(var_427) = &input.source_fpga_image_id {
        scope_426.string(var_427);
    }
    #[allow(unused_mut)]
    let mut scope_428 = writer.prefix("Description");
    if let Some(var_429) = &input.description {
        scope_428.string(var_429);
    }
    #[allow(unused_mut)]
    let mut scope_430 = writer.prefix("Name");
    if let Some(var_431) = &input.name {
        scope_430.string(var_431);
    }
    #[allow(unused_mut)]
    let mut scope_432 = writer.prefix("SourceRegion");
    if let Some(var_433) = &input.source_region {
        scope_432.string(var_433);
    }
    #[allow(unused_mut)]
    let mut scope_434 = writer.prefix("ClientToken");
    if let Some(var_435) = &input.client_token {
        scope_434.string(var_435);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_image(
    input: &crate::input::CopyImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopyImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_436 = writer.prefix("ClientToken");
    if let Some(var_437) = &input.client_token {
        scope_436.string(var_437);
    }
    #[allow(unused_mut)]
    let mut scope_438 = writer.prefix("Description");
    if let Some(var_439) = &input.description {
        scope_438.string(var_439);
    }
    #[allow(unused_mut)]
    let mut scope_440 = writer.prefix("Encrypted");
    if let Some(var_441) = &input.encrypted {
        scope_440.boolean(*var_441);
    }
    #[allow(unused_mut)]
    let mut scope_442 = writer.prefix("KmsKeyId");
    if let Some(var_443) = &input.kms_key_id {
        scope_442.string(var_443);
    }
    #[allow(unused_mut)]
    let mut scope_444 = writer.prefix("Name");
    if let Some(var_445) = &input.name {
        scope_444.string(var_445);
    }
    #[allow(unused_mut)]
    let mut scope_446 = writer.prefix("SourceImageId");
    if let Some(var_447) = &input.source_image_id {
        scope_446.string(var_447);
    }
    #[allow(unused_mut)]
    let mut scope_448 = writer.prefix("SourceRegion");
    if let Some(var_449) = &input.source_region {
        scope_448.string(var_449);
    }
    #[allow(unused_mut)]
    let mut scope_450 = writer.prefix("DestinationOutpostArn");
    if let Some(var_451) = &input.destination_outpost_arn {
        scope_450.string(var_451);
    }
    #[allow(unused_mut)]
    let mut scope_452 = writer.prefix("DryRun");
    if let Some(var_453) = &input.dry_run {
        scope_452.boolean(*var_453);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_snapshot(
    input: &crate::input::CopySnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopySnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_454 = writer.prefix("Description");
    if let Some(var_455) = &input.description {
        scope_454.string(var_455);
    }
    #[allow(unused_mut)]
    let mut scope_456 = writer.prefix("DestinationOutpostArn");
    if let Some(var_457) = &input.destination_outpost_arn {
        scope_456.string(var_457);
    }
    #[allow(unused_mut)]
    let mut scope_458 = writer.prefix("DestinationRegion");
    if let Some(var_459) = &input.destination_region {
        scope_458.string(var_459);
    }
    #[allow(unused_mut)]
    let mut scope_460 = writer.prefix("Encrypted");
    if let Some(var_461) = &input.encrypted {
        scope_460.boolean(*var_461);
    }
    #[allow(unused_mut)]
    let mut scope_462 = writer.prefix("KmsKeyId");
    if let Some(var_463) = &input.kms_key_id {
        scope_462.string(var_463);
    }
    #[allow(unused_mut)]
    let mut scope_464 = writer.prefix("PresignedUrl");
    if let Some(var_465) = &input.presigned_url {
        scope_464.string(var_465);
    }
    #[allow(unused_mut)]
    let mut scope_466 = writer.prefix("SourceRegion");
    if let Some(var_467) = &input.source_region {
        scope_466.string(var_467);
    }
    #[allow(unused_mut)]
    let mut scope_468 = writer.prefix("SourceSnapshotId");
    if let Some(var_469) = &input.source_snapshot_id {
        scope_468.string(var_469);
    }
    #[allow(unused_mut)]
    let mut scope_470 = writer.prefix("TagSpecification");
    if let Some(var_471) = &input.tag_specifications {
        let mut list_473 = scope_470.start_list(true, Some("item"));
        for item_472 in var_471 {
            #[allow(unused_mut)]
            let mut entry_474 = list_473.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_474, item_472,
            )?;
        }
        list_473.finish();
    }
    #[allow(unused_mut)]
    let mut scope_475 = writer.prefix("DryRun");
    if let Some(var_476) = &input.dry_run {
        scope_475.boolean(*var_476);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_capacity_reservation(
    input: &crate::input::CreateCapacityReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_477 = writer.prefix("ClientToken");
    if let Some(var_478) = &input.client_token {
        scope_477.string(var_478);
    }
    #[allow(unused_mut)]
    let mut scope_479 = writer.prefix("InstanceType");
    if let Some(var_480) = &input.instance_type {
        scope_479.string(var_480);
    }
    #[allow(unused_mut)]
    let mut scope_481 = writer.prefix("InstancePlatform");
    if let Some(var_482) = &input.instance_platform {
        scope_481.string(var_482.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_483 = writer.prefix("AvailabilityZone");
    if let Some(var_484) = &input.availability_zone {
        scope_483.string(var_484);
    }
    #[allow(unused_mut)]
    let mut scope_485 = writer.prefix("AvailabilityZoneId");
    if let Some(var_486) = &input.availability_zone_id {
        scope_485.string(var_486);
    }
    #[allow(unused_mut)]
    let mut scope_487 = writer.prefix("Tenancy");
    if let Some(var_488) = &input.tenancy {
        scope_487.string(var_488.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_489 = writer.prefix("InstanceCount");
    if let Some(var_490) = &input.instance_count {
        scope_489.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_490).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_491 = writer.prefix("EbsOptimized");
    if let Some(var_492) = &input.ebs_optimized {
        scope_491.boolean(*var_492);
    }
    #[allow(unused_mut)]
    let mut scope_493 = writer.prefix("EphemeralStorage");
    if let Some(var_494) = &input.ephemeral_storage {
        scope_493.boolean(*var_494);
    }
    #[allow(unused_mut)]
    let mut scope_495 = writer.prefix("EndDate");
    if let Some(var_496) = &input.end_date {
        scope_495.date_time(var_496, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_497 = writer.prefix("EndDateType");
    if let Some(var_498) = &input.end_date_type {
        scope_497.string(var_498.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_499 = writer.prefix("InstanceMatchCriteria");
    if let Some(var_500) = &input.instance_match_criteria {
        scope_499.string(var_500.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_501 = writer.prefix("TagSpecifications");
    if let Some(var_502) = &input.tag_specifications {
        let mut list_504 = scope_501.start_list(true, Some("item"));
        for item_503 in var_502 {
            #[allow(unused_mut)]
            let mut entry_505 = list_504.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_505, item_503,
            )?;
        }
        list_504.finish();
    }
    #[allow(unused_mut)]
    let mut scope_506 = writer.prefix("DryRun");
    if let Some(var_507) = &input.dry_run {
        scope_506.boolean(*var_507);
    }
    #[allow(unused_mut)]
    let mut scope_508 = writer.prefix("OutpostArn");
    if let Some(var_509) = &input.outpost_arn {
        scope_508.string(var_509);
    }
    #[allow(unused_mut)]
    let mut scope_510 = writer.prefix("PlacementGroupArn");
    if let Some(var_511) = &input.placement_group_arn {
        scope_510.string(var_511);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_capacity_reservation_fleet(
    input: &crate::input::CreateCapacityReservationFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateCapacityReservationFleet",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_512 = writer.prefix("AllocationStrategy");
    if let Some(var_513) = &input.allocation_strategy {
        scope_512.string(var_513);
    }
    #[allow(unused_mut)]
    let mut scope_514 = writer.prefix("ClientToken");
    if let Some(var_515) = &input.client_token {
        scope_514.string(var_515);
    }
    #[allow(unused_mut)]
    let mut scope_516 = writer.prefix("InstanceTypeSpecification");
    if let Some(var_517) = &input.instance_type_specifications {
        let mut list_519 = scope_516.start_list(true, None);
        for item_518 in var_517 {
            #[allow(unused_mut)]
            let mut entry_520 = list_519.entry();
            crate::query_ser::serialize_structure_crate_model_reservation_fleet_instance_specification(entry_520, item_518)?;
        }
        list_519.finish();
    }
    #[allow(unused_mut)]
    let mut scope_521 = writer.prefix("Tenancy");
    if let Some(var_522) = &input.tenancy {
        scope_521.string(var_522.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_523 = writer.prefix("TotalTargetCapacity");
    if let Some(var_524) = &input.total_target_capacity {
        scope_523.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_524).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_525 = writer.prefix("EndDate");
    if let Some(var_526) = &input.end_date {
        scope_525.date_time(var_526, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_527 = writer.prefix("InstanceMatchCriteria");
    if let Some(var_528) = &input.instance_match_criteria {
        scope_527.string(var_528.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_529 = writer.prefix("TagSpecification");
    if let Some(var_530) = &input.tag_specifications {
        let mut list_532 = scope_529.start_list(true, Some("item"));
        for item_531 in var_530 {
            #[allow(unused_mut)]
            let mut entry_533 = list_532.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_533, item_531,
            )?;
        }
        list_532.finish();
    }
    #[allow(unused_mut)]
    let mut scope_534 = writer.prefix("DryRun");
    if let Some(var_535) = &input.dry_run {
        scope_534.boolean(*var_535);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_carrier_gateway(
    input: &crate::input::CreateCarrierGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCarrierGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_536 = writer.prefix("VpcId");
    if let Some(var_537) = &input.vpc_id {
        scope_536.string(var_537);
    }
    #[allow(unused_mut)]
    let mut scope_538 = writer.prefix("TagSpecification");
    if let Some(var_539) = &input.tag_specifications {
        let mut list_541 = scope_538.start_list(true, Some("item"));
        for item_540 in var_539 {
            #[allow(unused_mut)]
            let mut entry_542 = list_541.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_542, item_540,
            )?;
        }
        list_541.finish();
    }
    #[allow(unused_mut)]
    let mut scope_543 = writer.prefix("DryRun");
    if let Some(var_544) = &input.dry_run {
        scope_543.boolean(*var_544);
    }
    #[allow(unused_mut)]
    let mut scope_545 = writer.prefix("ClientToken");
    if let Some(var_546) = &input.client_token {
        scope_545.string(var_546);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_client_vpn_endpoint(
    input: &crate::input::CreateClientVpnEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_547 = writer.prefix("ClientCidrBlock");
    if let Some(var_548) = &input.client_cidr_block {
        scope_547.string(var_548);
    }
    #[allow(unused_mut)]
    let mut scope_549 = writer.prefix("ServerCertificateArn");
    if let Some(var_550) = &input.server_certificate_arn {
        scope_549.string(var_550);
    }
    #[allow(unused_mut)]
    let mut scope_551 = writer.prefix("Authentication");
    if let Some(var_552) = &input.authentication_options {
        let mut list_554 = scope_551.start_list(true, None);
        for item_553 in var_552 {
            #[allow(unused_mut)]
            let mut entry_555 = list_554.entry();
            crate::query_ser::serialize_structure_crate_model_client_vpn_authentication_request(
                entry_555, item_553,
            )?;
        }
        list_554.finish();
    }
    #[allow(unused_mut)]
    let mut scope_556 = writer.prefix("ConnectionLogOptions");
    if let Some(var_557) = &input.connection_log_options {
        crate::query_ser::serialize_structure_crate_model_connection_log_options(
            scope_556, var_557,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_558 = writer.prefix("DnsServers");
    if let Some(var_559) = &input.dns_servers {
        let mut list_561 = scope_558.start_list(true, Some("item"));
        for item_560 in var_559 {
            #[allow(unused_mut)]
            let mut entry_562 = list_561.entry();
            entry_562.string(item_560);
        }
        list_561.finish();
    }
    #[allow(unused_mut)]
    let mut scope_563 = writer.prefix("TransportProtocol");
    if let Some(var_564) = &input.transport_protocol {
        scope_563.string(var_564.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_565 = writer.prefix("VpnPort");
    if let Some(var_566) = &input.vpn_port {
        scope_565.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_566).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_567 = writer.prefix("Description");
    if let Some(var_568) = &input.description {
        scope_567.string(var_568);
    }
    #[allow(unused_mut)]
    let mut scope_569 = writer.prefix("SplitTunnel");
    if let Some(var_570) = &input.split_tunnel {
        scope_569.boolean(*var_570);
    }
    #[allow(unused_mut)]
    let mut scope_571 = writer.prefix("DryRun");
    if let Some(var_572) = &input.dry_run {
        scope_571.boolean(*var_572);
    }
    #[allow(unused_mut)]
    let mut scope_573 = writer.prefix("ClientToken");
    if let Some(var_574) = &input.client_token {
        scope_573.string(var_574);
    }
    #[allow(unused_mut)]
    let mut scope_575 = writer.prefix("TagSpecification");
    if let Some(var_576) = &input.tag_specifications {
        let mut list_578 = scope_575.start_list(true, Some("item"));
        for item_577 in var_576 {
            #[allow(unused_mut)]
            let mut entry_579 = list_578.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_579, item_577,
            )?;
        }
        list_578.finish();
    }
    #[allow(unused_mut)]
    let mut scope_580 = writer.prefix("SecurityGroupId");
    if let Some(var_581) = &input.security_group_ids {
        let mut list_583 = scope_580.start_list(true, Some("item"));
        for item_582 in var_581 {
            #[allow(unused_mut)]
            let mut entry_584 = list_583.entry();
            entry_584.string(item_582);
        }
        list_583.finish();
    }
    #[allow(unused_mut)]
    let mut scope_585 = writer.prefix("VpcId");
    if let Some(var_586) = &input.vpc_id {
        scope_585.string(var_586);
    }
    #[allow(unused_mut)]
    let mut scope_587 = writer.prefix("SelfServicePortal");
    if let Some(var_588) = &input.self_service_portal {
        scope_587.string(var_588.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_589 = writer.prefix("ClientConnectOptions");
    if let Some(var_590) = &input.client_connect_options {
        crate::query_ser::serialize_structure_crate_model_client_connect_options(
            scope_589, var_590,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_591 = writer.prefix("SessionTimeoutHours");
    if let Some(var_592) = &input.session_timeout_hours {
        scope_591.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_592).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_593 = writer.prefix("ClientLoginBannerOptions");
    if let Some(var_594) = &input.client_login_banner_options {
        crate::query_ser::serialize_structure_crate_model_client_login_banner_options(
            scope_593, var_594,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_client_vpn_route(
    input: &crate::input::CreateClientVpnRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateClientVpnRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_595 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_596) = &input.client_vpn_endpoint_id {
        scope_595.string(var_596);
    }
    #[allow(unused_mut)]
    let mut scope_597 = writer.prefix("DestinationCidrBlock");
    if let Some(var_598) = &input.destination_cidr_block {
        scope_597.string(var_598);
    }
    #[allow(unused_mut)]
    let mut scope_599 = writer.prefix("TargetVpcSubnetId");
    if let Some(var_600) = &input.target_vpc_subnet_id {
        scope_599.string(var_600);
    }
    #[allow(unused_mut)]
    let mut scope_601 = writer.prefix("Description");
    if let Some(var_602) = &input.description {
        scope_601.string(var_602);
    }
    #[allow(unused_mut)]
    let mut scope_603 = writer.prefix("ClientToken");
    if let Some(var_604) = &input.client_token {
        scope_603.string(var_604);
    }
    #[allow(unused_mut)]
    let mut scope_605 = writer.prefix("DryRun");
    if let Some(var_606) = &input.dry_run {
        scope_605.boolean(*var_606);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_customer_gateway(
    input: &crate::input::CreateCustomerGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCustomerGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_607 = writer.prefix("BgpAsn");
    if let Some(var_608) = &input.bgp_asn {
        scope_607.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_608).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_609 = writer.prefix("PublicIp");
    if let Some(var_610) = &input.public_ip {
        scope_609.string(var_610);
    }
    #[allow(unused_mut)]
    let mut scope_611 = writer.prefix("CertificateArn");
    if let Some(var_612) = &input.certificate_arn {
        scope_611.string(var_612);
    }
    #[allow(unused_mut)]
    let mut scope_613 = writer.prefix("Type");
    if let Some(var_614) = &input.r#type {
        scope_613.string(var_614.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_615 = writer.prefix("TagSpecification");
    if let Some(var_616) = &input.tag_specifications {
        let mut list_618 = scope_615.start_list(true, Some("item"));
        for item_617 in var_616 {
            #[allow(unused_mut)]
            let mut entry_619 = list_618.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_619, item_617,
            )?;
        }
        list_618.finish();
    }
    #[allow(unused_mut)]
    let mut scope_620 = writer.prefix("DeviceName");
    if let Some(var_621) = &input.device_name {
        scope_620.string(var_621);
    }
    #[allow(unused_mut)]
    let mut scope_622 = writer.prefix("IpAddress");
    if let Some(var_623) = &input.ip_address {
        scope_622.string(var_623);
    }
    #[allow(unused_mut)]
    let mut scope_624 = writer.prefix("DryRun");
    if let Some(var_625) = &input.dry_run {
        scope_624.boolean(*var_625);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_default_subnet(
    input: &crate::input::CreateDefaultSubnetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDefaultSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_626 = writer.prefix("AvailabilityZone");
    if let Some(var_627) = &input.availability_zone {
        scope_626.string(var_627);
    }
    #[allow(unused_mut)]
    let mut scope_628 = writer.prefix("DryRun");
    if let Some(var_629) = &input.dry_run {
        scope_628.boolean(*var_629);
    }
    #[allow(unused_mut)]
    let mut scope_630 = writer.prefix("Ipv6Native");
    if let Some(var_631) = &input.ipv6_native {
        scope_630.boolean(*var_631);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_default_vpc(
    input: &crate::input::CreateDefaultVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateDefaultVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_632 = writer.prefix("DryRun");
    if let Some(var_633) = &input.dry_run {
        scope_632.boolean(*var_633);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_dhcp_options(
    input: &crate::input::CreateDhcpOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_634 = writer.prefix("DhcpConfiguration");
    if let Some(var_635) = &input.dhcp_configurations {
        let mut list_637 = scope_634.start_list(true, Some("item"));
        for item_636 in var_635 {
            #[allow(unused_mut)]
            let mut entry_638 = list_637.entry();
            crate::query_ser::serialize_structure_crate_model_new_dhcp_configuration(
                entry_638, item_636,
            )?;
        }
        list_637.finish();
    }
    #[allow(unused_mut)]
    let mut scope_639 = writer.prefix("TagSpecification");
    if let Some(var_640) = &input.tag_specifications {
        let mut list_642 = scope_639.start_list(true, Some("item"));
        for item_641 in var_640 {
            #[allow(unused_mut)]
            let mut entry_643 = list_642.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_643, item_641,
            )?;
        }
        list_642.finish();
    }
    #[allow(unused_mut)]
    let mut scope_644 = writer.prefix("DryRun");
    if let Some(var_645) = &input.dry_run {
        scope_644.boolean(*var_645);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_egress_only_internet_gateway(
    input: &crate::input::CreateEgressOnlyInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateEgressOnlyInternetGateway",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_646 = writer.prefix("ClientToken");
    if let Some(var_647) = &input.client_token {
        scope_646.string(var_647);
    }
    #[allow(unused_mut)]
    let mut scope_648 = writer.prefix("DryRun");
    if let Some(var_649) = &input.dry_run {
        scope_648.boolean(*var_649);
    }
    #[allow(unused_mut)]
    let mut scope_650 = writer.prefix("VpcId");
    if let Some(var_651) = &input.vpc_id {
        scope_650.string(var_651);
    }
    #[allow(unused_mut)]
    let mut scope_652 = writer.prefix("TagSpecification");
    if let Some(var_653) = &input.tag_specifications {
        let mut list_655 = scope_652.start_list(true, Some("item"));
        for item_654 in var_653 {
            #[allow(unused_mut)]
            let mut entry_656 = list_655.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_656, item_654,
            )?;
        }
        list_655.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_fleet(
    input: &crate::input::CreateFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_657 = writer.prefix("DryRun");
    if let Some(var_658) = &input.dry_run {
        scope_657.boolean(*var_658);
    }
    #[allow(unused_mut)]
    let mut scope_659 = writer.prefix("ClientToken");
    if let Some(var_660) = &input.client_token {
        scope_659.string(var_660);
    }
    #[allow(unused_mut)]
    let mut scope_661 = writer.prefix("SpotOptions");
    if let Some(var_662) = &input.spot_options {
        crate::query_ser::serialize_structure_crate_model_spot_options_request(scope_661, var_662)?;
    }
    #[allow(unused_mut)]
    let mut scope_663 = writer.prefix("OnDemandOptions");
    if let Some(var_664) = &input.on_demand_options {
        crate::query_ser::serialize_structure_crate_model_on_demand_options_request(
            scope_663, var_664,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_665 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_666) = &input.excess_capacity_termination_policy {
        scope_665.string(var_666.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_667 = writer.prefix("LaunchTemplateConfigs");
    if let Some(var_668) = &input.launch_template_configs {
        let mut list_670 = scope_667.start_list(true, Some("item"));
        for item_669 in var_668 {
            #[allow(unused_mut)]
            let mut entry_671 = list_670.entry();
            crate::query_ser::serialize_structure_crate_model_fleet_launch_template_config_request(
                entry_671, item_669,
            )?;
        }
        list_670.finish();
    }
    #[allow(unused_mut)]
    let mut scope_672 = writer.prefix("TargetCapacitySpecification");
    if let Some(var_673) = &input.target_capacity_specification {
        crate::query_ser::serialize_structure_crate_model_target_capacity_specification_request(
            scope_672, var_673,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_674 = writer.prefix("TerminateInstancesWithExpiration");
    if let Some(var_675) = &input.terminate_instances_with_expiration {
        scope_674.boolean(*var_675);
    }
    #[allow(unused_mut)]
    let mut scope_676 = writer.prefix("Type");
    if let Some(var_677) = &input.r#type {
        scope_676.string(var_677.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_678 = writer.prefix("ValidFrom");
    if let Some(var_679) = &input.valid_from {
        scope_678.date_time(var_679, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_680 = writer.prefix("ValidUntil");
    if let Some(var_681) = &input.valid_until {
        scope_680.date_time(var_681, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_682 = writer.prefix("ReplaceUnhealthyInstances");
    if let Some(var_683) = &input.replace_unhealthy_instances {
        scope_682.boolean(*var_683);
    }
    #[allow(unused_mut)]
    let mut scope_684 = writer.prefix("TagSpecification");
    if let Some(var_685) = &input.tag_specifications {
        let mut list_687 = scope_684.start_list(true, Some("item"));
        for item_686 in var_685 {
            #[allow(unused_mut)]
            let mut entry_688 = list_687.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_688, item_686,
            )?;
        }
        list_687.finish();
    }
    #[allow(unused_mut)]
    let mut scope_689 = writer.prefix("Context");
    if let Some(var_690) = &input.context {
        scope_689.string(var_690);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_flow_logs(
    input: &crate::input::CreateFlowLogsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_691 = writer.prefix("DryRun");
    if let Some(var_692) = &input.dry_run {
        scope_691.boolean(*var_692);
    }
    #[allow(unused_mut)]
    let mut scope_693 = writer.prefix("ClientToken");
    if let Some(var_694) = &input.client_token {
        scope_693.string(var_694);
    }
    #[allow(unused_mut)]
    let mut scope_695 = writer.prefix("DeliverLogsPermissionArn");
    if let Some(var_696) = &input.deliver_logs_permission_arn {
        scope_695.string(var_696);
    }
    #[allow(unused_mut)]
    let mut scope_697 = writer.prefix("LogGroupName");
    if let Some(var_698) = &input.log_group_name {
        scope_697.string(var_698);
    }
    #[allow(unused_mut)]
    let mut scope_699 = writer.prefix("ResourceId");
    if let Some(var_700) = &input.resource_ids {
        let mut list_702 = scope_699.start_list(true, Some("item"));
        for item_701 in var_700 {
            #[allow(unused_mut)]
            let mut entry_703 = list_702.entry();
            entry_703.string(item_701);
        }
        list_702.finish();
    }
    #[allow(unused_mut)]
    let mut scope_704 = writer.prefix("ResourceType");
    if let Some(var_705) = &input.resource_type {
        scope_704.string(var_705.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_706 = writer.prefix("TrafficType");
    if let Some(var_707) = &input.traffic_type {
        scope_706.string(var_707.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_708 = writer.prefix("LogDestinationType");
    if let Some(var_709) = &input.log_destination_type {
        scope_708.string(var_709.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_710 = writer.prefix("LogDestination");
    if let Some(var_711) = &input.log_destination {
        scope_710.string(var_711);
    }
    #[allow(unused_mut)]
    let mut scope_712 = writer.prefix("LogFormat");
    if let Some(var_713) = &input.log_format {
        scope_712.string(var_713);
    }
    #[allow(unused_mut)]
    let mut scope_714 = writer.prefix("TagSpecification");
    if let Some(var_715) = &input.tag_specifications {
        let mut list_717 = scope_714.start_list(true, Some("item"));
        for item_716 in var_715 {
            #[allow(unused_mut)]
            let mut entry_718 = list_717.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_718, item_716,
            )?;
        }
        list_717.finish();
    }
    #[allow(unused_mut)]
    let mut scope_719 = writer.prefix("MaxAggregationInterval");
    if let Some(var_720) = &input.max_aggregation_interval {
        scope_719.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_720).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_721 = writer.prefix("DestinationOptions");
    if let Some(var_722) = &input.destination_options {
        crate::query_ser::serialize_structure_crate_model_destination_options_request(
            scope_721, var_722,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_fpga_image(
    input: &crate::input::CreateFpgaImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_723 = writer.prefix("DryRun");
    if let Some(var_724) = &input.dry_run {
        scope_723.boolean(*var_724);
    }
    #[allow(unused_mut)]
    let mut scope_725 = writer.prefix("InputStorageLocation");
    if let Some(var_726) = &input.input_storage_location {
        crate::query_ser::serialize_structure_crate_model_storage_location(scope_725, var_726)?;
    }
    #[allow(unused_mut)]
    let mut scope_727 = writer.prefix("LogsStorageLocation");
    if let Some(var_728) = &input.logs_storage_location {
        crate::query_ser::serialize_structure_crate_model_storage_location(scope_727, var_728)?;
    }
    #[allow(unused_mut)]
    let mut scope_729 = writer.prefix("Description");
    if let Some(var_730) = &input.description {
        scope_729.string(var_730);
    }
    #[allow(unused_mut)]
    let mut scope_731 = writer.prefix("Name");
    if let Some(var_732) = &input.name {
        scope_731.string(var_732);
    }
    #[allow(unused_mut)]
    let mut scope_733 = writer.prefix("ClientToken");
    if let Some(var_734) = &input.client_token {
        scope_733.string(var_734);
    }
    #[allow(unused_mut)]
    let mut scope_735 = writer.prefix("TagSpecification");
    if let Some(var_736) = &input.tag_specifications {
        let mut list_738 = scope_735.start_list(true, Some("item"));
        for item_737 in var_736 {
            #[allow(unused_mut)]
            let mut entry_739 = list_738.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_739, item_737,
            )?;
        }
        list_738.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_image(
    input: &crate::input::CreateImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_740 = writer.prefix("BlockDeviceMapping");
    if let Some(var_741) = &input.block_device_mappings {
        let mut list_743 = scope_740.start_list(true, Some("BlockDeviceMapping"));
        for item_742 in var_741 {
            #[allow(unused_mut)]
            let mut entry_744 = list_743.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_744, item_742,
            )?;
        }
        list_743.finish();
    }
    #[allow(unused_mut)]
    let mut scope_745 = writer.prefix("Description");
    if let Some(var_746) = &input.description {
        scope_745.string(var_746);
    }
    #[allow(unused_mut)]
    let mut scope_747 = writer.prefix("DryRun");
    if let Some(var_748) = &input.dry_run {
        scope_747.boolean(*var_748);
    }
    #[allow(unused_mut)]
    let mut scope_749 = writer.prefix("InstanceId");
    if let Some(var_750) = &input.instance_id {
        scope_749.string(var_750);
    }
    #[allow(unused_mut)]
    let mut scope_751 = writer.prefix("Name");
    if let Some(var_752) = &input.name {
        scope_751.string(var_752);
    }
    #[allow(unused_mut)]
    let mut scope_753 = writer.prefix("NoReboot");
    if let Some(var_754) = &input.no_reboot {
        scope_753.boolean(*var_754);
    }
    #[allow(unused_mut)]
    let mut scope_755 = writer.prefix("TagSpecification");
    if let Some(var_756) = &input.tag_specifications {
        let mut list_758 = scope_755.start_list(true, Some("item"));
        for item_757 in var_756 {
            #[allow(unused_mut)]
            let mut entry_759 = list_758.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_759, item_757,
            )?;
        }
        list_758.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_instance_event_window(
    input: &crate::input::CreateInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_760 = writer.prefix("DryRun");
    if let Some(var_761) = &input.dry_run {
        scope_760.boolean(*var_761);
    }
    #[allow(unused_mut)]
    let mut scope_762 = writer.prefix("Name");
    if let Some(var_763) = &input.name {
        scope_762.string(var_763);
    }
    #[allow(unused_mut)]
    let mut scope_764 = writer.prefix("TimeRange");
    if let Some(var_765) = &input.time_ranges {
        let mut list_767 = scope_764.start_list(true, None);
        for item_766 in var_765 {
            #[allow(unused_mut)]
            let mut entry_768 = list_767.entry();
            crate::query_ser::serialize_structure_crate_model_instance_event_window_time_range_request(entry_768, item_766)?;
        }
        list_767.finish();
    }
    #[allow(unused_mut)]
    let mut scope_769 = writer.prefix("CronExpression");
    if let Some(var_770) = &input.cron_expression {
        scope_769.string(var_770);
    }
    #[allow(unused_mut)]
    let mut scope_771 = writer.prefix("TagSpecification");
    if let Some(var_772) = &input.tag_specifications {
        let mut list_774 = scope_771.start_list(true, Some("item"));
        for item_773 in var_772 {
            #[allow(unused_mut)]
            let mut entry_775 = list_774.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_775, item_773,
            )?;
        }
        list_774.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_instance_export_task(
    input: &crate::input::CreateInstanceExportTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateInstanceExportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_776 = writer.prefix("Description");
    if let Some(var_777) = &input.description {
        scope_776.string(var_777);
    }
    #[allow(unused_mut)]
    let mut scope_778 = writer.prefix("ExportToS3");
    if let Some(var_779) = &input.export_to_s3_task {
        crate::query_ser::serialize_structure_crate_model_export_to_s3_task_specification(
            scope_778, var_779,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_780 = writer.prefix("InstanceId");
    if let Some(var_781) = &input.instance_id {
        scope_780.string(var_781);
    }
    #[allow(unused_mut)]
    let mut scope_782 = writer.prefix("TargetEnvironment");
    if let Some(var_783) = &input.target_environment {
        scope_782.string(var_783.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_784 = writer.prefix("TagSpecification");
    if let Some(var_785) = &input.tag_specifications {
        let mut list_787 = scope_784.start_list(true, Some("item"));
        for item_786 in var_785 {
            #[allow(unused_mut)]
            let mut entry_788 = list_787.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_788, item_786,
            )?;
        }
        list_787.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_internet_gateway(
    input: &crate::input::CreateInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_789 = writer.prefix("TagSpecification");
    if let Some(var_790) = &input.tag_specifications {
        let mut list_792 = scope_789.start_list(true, Some("item"));
        for item_791 in var_790 {
            #[allow(unused_mut)]
            let mut entry_793 = list_792.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_793, item_791,
            )?;
        }
        list_792.finish();
    }
    #[allow(unused_mut)]
    let mut scope_794 = writer.prefix("DryRun");
    if let Some(var_795) = &input.dry_run {
        scope_794.boolean(*var_795);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_ipam(
    input: &crate::input::CreateIpamInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateIpam", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_796 = writer.prefix("DryRun");
    if let Some(var_797) = &input.dry_run {
        scope_796.boolean(*var_797);
    }
    #[allow(unused_mut)]
    let mut scope_798 = writer.prefix("Description");
    if let Some(var_799) = &input.description {
        scope_798.string(var_799);
    }
    #[allow(unused_mut)]
    let mut scope_800 = writer.prefix("OperatingRegion");
    if let Some(var_801) = &input.operating_regions {
        let mut list_803 = scope_800.start_list(true, None);
        for item_802 in var_801 {
            #[allow(unused_mut)]
            let mut entry_804 = list_803.entry();
            crate::query_ser::serialize_structure_crate_model_add_ipam_operating_region(
                entry_804, item_802,
            )?;
        }
        list_803.finish();
    }
    #[allow(unused_mut)]
    let mut scope_805 = writer.prefix("TagSpecification");
    if let Some(var_806) = &input.tag_specifications {
        let mut list_808 = scope_805.start_list(true, Some("item"));
        for item_807 in var_806 {
            #[allow(unused_mut)]
            let mut entry_809 = list_808.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_809, item_807,
            )?;
        }
        list_808.finish();
    }
    #[allow(unused_mut)]
    let mut scope_810 = writer.prefix("ClientToken");
    if let Some(var_811) = &input.client_token {
        scope_810.string(var_811);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_ipam_pool(
    input: &crate::input::CreateIpamPoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateIpamPool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_812 = writer.prefix("DryRun");
    if let Some(var_813) = &input.dry_run {
        scope_812.boolean(*var_813);
    }
    #[allow(unused_mut)]
    let mut scope_814 = writer.prefix("IpamScopeId");
    if let Some(var_815) = &input.ipam_scope_id {
        scope_814.string(var_815);
    }
    #[allow(unused_mut)]
    let mut scope_816 = writer.prefix("Locale");
    if let Some(var_817) = &input.locale {
        scope_816.string(var_817);
    }
    #[allow(unused_mut)]
    let mut scope_818 = writer.prefix("SourceIpamPoolId");
    if let Some(var_819) = &input.source_ipam_pool_id {
        scope_818.string(var_819);
    }
    #[allow(unused_mut)]
    let mut scope_820 = writer.prefix("Description");
    if let Some(var_821) = &input.description {
        scope_820.string(var_821);
    }
    #[allow(unused_mut)]
    let mut scope_822 = writer.prefix("AddressFamily");
    if let Some(var_823) = &input.address_family {
        scope_822.string(var_823.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_824 = writer.prefix("AutoImport");
    if let Some(var_825) = &input.auto_import {
        scope_824.boolean(*var_825);
    }
    #[allow(unused_mut)]
    let mut scope_826 = writer.prefix("PubliclyAdvertisable");
    if let Some(var_827) = &input.publicly_advertisable {
        scope_826.boolean(*var_827);
    }
    #[allow(unused_mut)]
    let mut scope_828 = writer.prefix("AllocationMinNetmaskLength");
    if let Some(var_829) = &input.allocation_min_netmask_length {
        scope_828.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_829).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_830 = writer.prefix("AllocationMaxNetmaskLength");
    if let Some(var_831) = &input.allocation_max_netmask_length {
        scope_830.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_831).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_832 = writer.prefix("AllocationDefaultNetmaskLength");
    if let Some(var_833) = &input.allocation_default_netmask_length {
        scope_832.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_833).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_834 = writer.prefix("AllocationResourceTag");
    if let Some(var_835) = &input.allocation_resource_tags {
        let mut list_837 = scope_834.start_list(true, Some("item"));
        for item_836 in var_835 {
            #[allow(unused_mut)]
            let mut entry_838 = list_837.entry();
            crate::query_ser::serialize_structure_crate_model_request_ipam_resource_tag(
                entry_838, item_836,
            )?;
        }
        list_837.finish();
    }
    #[allow(unused_mut)]
    let mut scope_839 = writer.prefix("TagSpecification");
    if let Some(var_840) = &input.tag_specifications {
        let mut list_842 = scope_839.start_list(true, Some("item"));
        for item_841 in var_840 {
            #[allow(unused_mut)]
            let mut entry_843 = list_842.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_843, item_841,
            )?;
        }
        list_842.finish();
    }
    #[allow(unused_mut)]
    let mut scope_844 = writer.prefix("ClientToken");
    if let Some(var_845) = &input.client_token {
        scope_844.string(var_845);
    }
    #[allow(unused_mut)]
    let mut scope_846 = writer.prefix("AwsService");
    if let Some(var_847) = &input.aws_service {
        scope_846.string(var_847.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_ipam_scope(
    input: &crate::input::CreateIpamScopeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateIpamScope", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_848 = writer.prefix("DryRun");
    if let Some(var_849) = &input.dry_run {
        scope_848.boolean(*var_849);
    }
    #[allow(unused_mut)]
    let mut scope_850 = writer.prefix("IpamId");
    if let Some(var_851) = &input.ipam_id {
        scope_850.string(var_851);
    }
    #[allow(unused_mut)]
    let mut scope_852 = writer.prefix("Description");
    if let Some(var_853) = &input.description {
        scope_852.string(var_853);
    }
    #[allow(unused_mut)]
    let mut scope_854 = writer.prefix("TagSpecification");
    if let Some(var_855) = &input.tag_specifications {
        let mut list_857 = scope_854.start_list(true, Some("item"));
        for item_856 in var_855 {
            #[allow(unused_mut)]
            let mut entry_858 = list_857.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_858, item_856,
            )?;
        }
        list_857.finish();
    }
    #[allow(unused_mut)]
    let mut scope_859 = writer.prefix("ClientToken");
    if let Some(var_860) = &input.client_token {
        scope_859.string(var_860);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_key_pair(
    input: &crate::input::CreateKeyPairInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_861 = writer.prefix("KeyName");
    if let Some(var_862) = &input.key_name {
        scope_861.string(var_862);
    }
    #[allow(unused_mut)]
    let mut scope_863 = writer.prefix("DryRun");
    if let Some(var_864) = &input.dry_run {
        scope_863.boolean(*var_864);
    }
    #[allow(unused_mut)]
    let mut scope_865 = writer.prefix("KeyType");
    if let Some(var_866) = &input.key_type {
        scope_865.string(var_866.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_867 = writer.prefix("TagSpecification");
    if let Some(var_868) = &input.tag_specifications {
        let mut list_870 = scope_867.start_list(true, Some("item"));
        for item_869 in var_868 {
            #[allow(unused_mut)]
            let mut entry_871 = list_870.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_871, item_869,
            )?;
        }
        list_870.finish();
    }
    #[allow(unused_mut)]
    let mut scope_872 = writer.prefix("KeyFormat");
    if let Some(var_873) = &input.key_format {
        scope_872.string(var_873.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_launch_template(
    input: &crate::input::CreateLaunchTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_874 = writer.prefix("DryRun");
    if let Some(var_875) = &input.dry_run {
        scope_874.boolean(*var_875);
    }
    #[allow(unused_mut)]
    let mut scope_876 = writer.prefix("ClientToken");
    if let Some(var_877) = &input.client_token {
        scope_876.string(var_877);
    }
    #[allow(unused_mut)]
    let mut scope_878 = writer.prefix("LaunchTemplateName");
    if let Some(var_879) = &input.launch_template_name {
        scope_878.string(var_879);
    }
    #[allow(unused_mut)]
    let mut scope_880 = writer.prefix("VersionDescription");
    if let Some(var_881) = &input.version_description {
        scope_880.string(var_881);
    }
    #[allow(unused_mut)]
    let mut scope_882 = writer.prefix("LaunchTemplateData");
    if let Some(var_883) = &input.launch_template_data {
        crate::query_ser::serialize_structure_crate_model_request_launch_template_data(
            scope_882, var_883,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_884 = writer.prefix("TagSpecification");
    if let Some(var_885) = &input.tag_specifications {
        let mut list_887 = scope_884.start_list(true, Some("item"));
        for item_886 in var_885 {
            #[allow(unused_mut)]
            let mut entry_888 = list_887.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_888, item_886,
            )?;
        }
        list_887.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_launch_template_version(
    input: &crate::input::CreateLaunchTemplateVersionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateLaunchTemplateVersion", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_889 = writer.prefix("DryRun");
    if let Some(var_890) = &input.dry_run {
        scope_889.boolean(*var_890);
    }
    #[allow(unused_mut)]
    let mut scope_891 = writer.prefix("ClientToken");
    if let Some(var_892) = &input.client_token {
        scope_891.string(var_892);
    }
    #[allow(unused_mut)]
    let mut scope_893 = writer.prefix("LaunchTemplateId");
    if let Some(var_894) = &input.launch_template_id {
        scope_893.string(var_894);
    }
    #[allow(unused_mut)]
    let mut scope_895 = writer.prefix("LaunchTemplateName");
    if let Some(var_896) = &input.launch_template_name {
        scope_895.string(var_896);
    }
    #[allow(unused_mut)]
    let mut scope_897 = writer.prefix("SourceVersion");
    if let Some(var_898) = &input.source_version {
        scope_897.string(var_898);
    }
    #[allow(unused_mut)]
    let mut scope_899 = writer.prefix("VersionDescription");
    if let Some(var_900) = &input.version_description {
        scope_899.string(var_900);
    }
    #[allow(unused_mut)]
    let mut scope_901 = writer.prefix("LaunchTemplateData");
    if let Some(var_902) = &input.launch_template_data {
        crate::query_ser::serialize_structure_crate_model_request_launch_template_data(
            scope_901, var_902,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_local_gateway_route(
    input: &crate::input::CreateLocalGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateLocalGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_903 = writer.prefix("DestinationCidrBlock");
    if let Some(var_904) = &input.destination_cidr_block {
        scope_903.string(var_904);
    }
    #[allow(unused_mut)]
    let mut scope_905 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_906) = &input.local_gateway_route_table_id {
        scope_905.string(var_906);
    }
    #[allow(unused_mut)]
    let mut scope_907 = writer.prefix("LocalGatewayVirtualInterfaceGroupId");
    if let Some(var_908) = &input.local_gateway_virtual_interface_group_id {
        scope_907.string(var_908);
    }
    #[allow(unused_mut)]
    let mut scope_909 = writer.prefix("DryRun");
    if let Some(var_910) = &input.dry_run {
        scope_909.boolean(*var_910);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_local_gateway_route_table_vpc_association(
    input: &crate::input::CreateLocalGatewayRouteTableVpcAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateLocalGatewayRouteTableVpcAssociation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_911 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_912) = &input.local_gateway_route_table_id {
        scope_911.string(var_912);
    }
    #[allow(unused_mut)]
    let mut scope_913 = writer.prefix("VpcId");
    if let Some(var_914) = &input.vpc_id {
        scope_913.string(var_914);
    }
    #[allow(unused_mut)]
    let mut scope_915 = writer.prefix("TagSpecification");
    if let Some(var_916) = &input.tag_specifications {
        let mut list_918 = scope_915.start_list(true, Some("item"));
        for item_917 in var_916 {
            #[allow(unused_mut)]
            let mut entry_919 = list_918.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_919, item_917,
            )?;
        }
        list_918.finish();
    }
    #[allow(unused_mut)]
    let mut scope_920 = writer.prefix("DryRun");
    if let Some(var_921) = &input.dry_run {
        scope_920.boolean(*var_921);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_managed_prefix_list(
    input: &crate::input::CreateManagedPrefixListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_922 = writer.prefix("DryRun");
    if let Some(var_923) = &input.dry_run {
        scope_922.boolean(*var_923);
    }
    #[allow(unused_mut)]
    let mut scope_924 = writer.prefix("PrefixListName");
    if let Some(var_925) = &input.prefix_list_name {
        scope_924.string(var_925);
    }
    #[allow(unused_mut)]
    let mut scope_926 = writer.prefix("Entry");
    if let Some(var_927) = &input.entries {
        let mut list_929 = scope_926.start_list(true, None);
        for item_928 in var_927 {
            #[allow(unused_mut)]
            let mut entry_930 = list_929.entry();
            crate::query_ser::serialize_structure_crate_model_add_prefix_list_entry(
                entry_930, item_928,
            )?;
        }
        list_929.finish();
    }
    #[allow(unused_mut)]
    let mut scope_931 = writer.prefix("MaxEntries");
    if let Some(var_932) = &input.max_entries {
        scope_931.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_932).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_933 = writer.prefix("TagSpecification");
    if let Some(var_934) = &input.tag_specifications {
        let mut list_936 = scope_933.start_list(true, Some("item"));
        for item_935 in var_934 {
            #[allow(unused_mut)]
            let mut entry_937 = list_936.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_937, item_935,
            )?;
        }
        list_936.finish();
    }
    #[allow(unused_mut)]
    let mut scope_938 = writer.prefix("AddressFamily");
    if let Some(var_939) = &input.address_family {
        scope_938.string(var_939);
    }
    #[allow(unused_mut)]
    let mut scope_940 = writer.prefix("ClientToken");
    if let Some(var_941) = &input.client_token {
        scope_940.string(var_941);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_nat_gateway(
    input: &crate::input::CreateNatGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateNatGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_942 = writer.prefix("AllocationId");
    if let Some(var_943) = &input.allocation_id {
        scope_942.string(var_943);
    }
    #[allow(unused_mut)]
    let mut scope_944 = writer.prefix("ClientToken");
    if let Some(var_945) = &input.client_token {
        scope_944.string(var_945);
    }
    #[allow(unused_mut)]
    let mut scope_946 = writer.prefix("DryRun");
    if let Some(var_947) = &input.dry_run {
        scope_946.boolean(*var_947);
    }
    #[allow(unused_mut)]
    let mut scope_948 = writer.prefix("SubnetId");
    if let Some(var_949) = &input.subnet_id {
        scope_948.string(var_949);
    }
    #[allow(unused_mut)]
    let mut scope_950 = writer.prefix("TagSpecification");
    if let Some(var_951) = &input.tag_specifications {
        let mut list_953 = scope_950.start_list(true, Some("item"));
        for item_952 in var_951 {
            #[allow(unused_mut)]
            let mut entry_954 = list_953.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_954, item_952,
            )?;
        }
        list_953.finish();
    }
    #[allow(unused_mut)]
    let mut scope_955 = writer.prefix("ConnectivityType");
    if let Some(var_956) = &input.connectivity_type {
        scope_955.string(var_956.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_acl(
    input: &crate::input::CreateNetworkAclInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkAcl", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_957 = writer.prefix("DryRun");
    if let Some(var_958) = &input.dry_run {
        scope_957.boolean(*var_958);
    }
    #[allow(unused_mut)]
    let mut scope_959 = writer.prefix("VpcId");
    if let Some(var_960) = &input.vpc_id {
        scope_959.string(var_960);
    }
    #[allow(unused_mut)]
    let mut scope_961 = writer.prefix("TagSpecification");
    if let Some(var_962) = &input.tag_specifications {
        let mut list_964 = scope_961.start_list(true, Some("item"));
        for item_963 in var_962 {
            #[allow(unused_mut)]
            let mut entry_965 = list_964.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_965, item_963,
            )?;
        }
        list_964.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_acl_entry(
    input: &crate::input::CreateNetworkAclEntryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_966 = writer.prefix("CidrBlock");
    if let Some(var_967) = &input.cidr_block {
        scope_966.string(var_967);
    }
    #[allow(unused_mut)]
    let mut scope_968 = writer.prefix("DryRun");
    if let Some(var_969) = &input.dry_run {
        scope_968.boolean(*var_969);
    }
    #[allow(unused_mut)]
    let mut scope_970 = writer.prefix("Egress");
    if let Some(var_971) = &input.egress {
        scope_970.boolean(*var_971);
    }
    #[allow(unused_mut)]
    let mut scope_972 = writer.prefix("Icmp");
    if let Some(var_973) = &input.icmp_type_code {
        crate::query_ser::serialize_structure_crate_model_icmp_type_code(scope_972, var_973)?;
    }
    #[allow(unused_mut)]
    let mut scope_974 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_975) = &input.ipv6_cidr_block {
        scope_974.string(var_975);
    }
    #[allow(unused_mut)]
    let mut scope_976 = writer.prefix("NetworkAclId");
    if let Some(var_977) = &input.network_acl_id {
        scope_976.string(var_977);
    }
    #[allow(unused_mut)]
    let mut scope_978 = writer.prefix("PortRange");
    if let Some(var_979) = &input.port_range {
        crate::query_ser::serialize_structure_crate_model_port_range(scope_978, var_979)?;
    }
    #[allow(unused_mut)]
    let mut scope_980 = writer.prefix("Protocol");
    if let Some(var_981) = &input.protocol {
        scope_980.string(var_981);
    }
    #[allow(unused_mut)]
    let mut scope_982 = writer.prefix("RuleAction");
    if let Some(var_983) = &input.rule_action {
        scope_982.string(var_983.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_984 = writer.prefix("RuleNumber");
    if let Some(var_985) = &input.rule_number {
        scope_984.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_985).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_insights_access_scope(
    input: &crate::input::CreateNetworkInsightsAccessScopeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateNetworkInsightsAccessScope",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_986 = writer.prefix("MatchPath");
    if let Some(var_987) = &input.match_paths {
        let mut list_989 = scope_986.start_list(true, Some("item"));
        for item_988 in var_987 {
            #[allow(unused_mut)]
            let mut entry_990 = list_989.entry();
            crate::query_ser::serialize_structure_crate_model_access_scope_path_request(
                entry_990, item_988,
            )?;
        }
        list_989.finish();
    }
    #[allow(unused_mut)]
    let mut scope_991 = writer.prefix("ExcludePath");
    if let Some(var_992) = &input.exclude_paths {
        let mut list_994 = scope_991.start_list(true, Some("item"));
        for item_993 in var_992 {
            #[allow(unused_mut)]
            let mut entry_995 = list_994.entry();
            crate::query_ser::serialize_structure_crate_model_access_scope_path_request(
                entry_995, item_993,
            )?;
        }
        list_994.finish();
    }
    #[allow(unused_mut)]
    let mut scope_996 = writer.prefix("ClientToken");
    if let Some(var_997) = &input.client_token {
        scope_996.string(var_997);
    }
    #[allow(unused_mut)]
    let mut scope_998 = writer.prefix("TagSpecification");
    if let Some(var_999) = &input.tag_specifications {
        let mut list_1001 = scope_998.start_list(true, Some("item"));
        for item_1000 in var_999 {
            #[allow(unused_mut)]
            let mut entry_1002 = list_1001.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1002, item_1000,
            )?;
        }
        list_1001.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1003 = writer.prefix("DryRun");
    if let Some(var_1004) = &input.dry_run {
        scope_1003.boolean(*var_1004);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_insights_path(
    input: &crate::input::CreateNetworkInsightsPathInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkInsightsPath", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1005 = writer.prefix("SourceIp");
    if let Some(var_1006) = &input.source_ip {
        scope_1005.string(var_1006);
    }
    #[allow(unused_mut)]
    let mut scope_1007 = writer.prefix("DestinationIp");
    if let Some(var_1008) = &input.destination_ip {
        scope_1007.string(var_1008);
    }
    #[allow(unused_mut)]
    let mut scope_1009 = writer.prefix("Source");
    if let Some(var_1010) = &input.source {
        scope_1009.string(var_1010);
    }
    #[allow(unused_mut)]
    let mut scope_1011 = writer.prefix("Destination");
    if let Some(var_1012) = &input.destination {
        scope_1011.string(var_1012);
    }
    #[allow(unused_mut)]
    let mut scope_1013 = writer.prefix("Protocol");
    if let Some(var_1014) = &input.protocol {
        scope_1013.string(var_1014.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1015 = writer.prefix("DestinationPort");
    if let Some(var_1016) = &input.destination_port {
        scope_1015.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1016).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1017 = writer.prefix("TagSpecification");
    if let Some(var_1018) = &input.tag_specifications {
        let mut list_1020 = scope_1017.start_list(true, Some("item"));
        for item_1019 in var_1018 {
            #[allow(unused_mut)]
            let mut entry_1021 = list_1020.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1021, item_1019,
            )?;
        }
        list_1020.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1022 = writer.prefix("DryRun");
    if let Some(var_1023) = &input.dry_run {
        scope_1022.boolean(*var_1023);
    }
    #[allow(unused_mut)]
    let mut scope_1024 = writer.prefix("ClientToken");
    if let Some(var_1025) = &input.client_token {
        scope_1024.string(var_1025);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_interface(
    input: &crate::input::CreateNetworkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1026 = writer.prefix("Description");
    if let Some(var_1027) = &input.description {
        scope_1026.string(var_1027);
    }
    #[allow(unused_mut)]
    let mut scope_1028 = writer.prefix("DryRun");
    if let Some(var_1029) = &input.dry_run {
        scope_1028.boolean(*var_1029);
    }
    #[allow(unused_mut)]
    let mut scope_1030 = writer.prefix("SecurityGroupId");
    if let Some(var_1031) = &input.groups {
        let mut list_1033 = scope_1030.start_list(true, Some("SecurityGroupId"));
        for item_1032 in var_1031 {
            #[allow(unused_mut)]
            let mut entry_1034 = list_1033.entry();
            entry_1034.string(item_1032);
        }
        list_1033.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1035 = writer.prefix("Ipv6AddressCount");
    if let Some(var_1036) = &input.ipv6_address_count {
        scope_1035.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1036).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1037 = writer.prefix("Ipv6Addresses");
    if let Some(var_1038) = &input.ipv6_addresses {
        let mut list_1040 = scope_1037.start_list(true, Some("item"));
        for item_1039 in var_1038 {
            #[allow(unused_mut)]
            let mut entry_1041 = list_1040.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address(
                entry_1041, item_1039,
            )?;
        }
        list_1040.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1042 = writer.prefix("PrivateIpAddress");
    if let Some(var_1043) = &input.private_ip_address {
        scope_1042.string(var_1043);
    }
    #[allow(unused_mut)]
    let mut scope_1044 = writer.prefix("PrivateIpAddresses");
    if let Some(var_1045) = &input.private_ip_addresses {
        let mut list_1047 = scope_1044.start_list(true, Some("item"));
        for item_1046 in var_1045 {
            #[allow(unused_mut)]
            let mut entry_1048 = list_1047.entry();
            crate::query_ser::serialize_structure_crate_model_private_ip_address_specification(
                entry_1048, item_1046,
            )?;
        }
        list_1047.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1049 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_1050) = &input.secondary_private_ip_address_count {
        scope_1049.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1050).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1051 = writer.prefix("Ipv4Prefix");
    if let Some(var_1052) = &input.ipv4_prefixes {
        let mut list_1054 = scope_1051.start_list(true, Some("item"));
        for item_1053 in var_1052 {
            #[allow(unused_mut)]
            let mut entry_1055 = list_1054.entry();
            crate::query_ser::serialize_structure_crate_model_ipv4_prefix_specification_request(
                entry_1055, item_1053,
            )?;
        }
        list_1054.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1056 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_1057) = &input.ipv4_prefix_count {
        scope_1056.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1057).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1058 = writer.prefix("Ipv6Prefix");
    if let Some(var_1059) = &input.ipv6_prefixes {
        let mut list_1061 = scope_1058.start_list(true, Some("item"));
        for item_1060 in var_1059 {
            #[allow(unused_mut)]
            let mut entry_1062 = list_1061.entry();
            crate::query_ser::serialize_structure_crate_model_ipv6_prefix_specification_request(
                entry_1062, item_1060,
            )?;
        }
        list_1061.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1063 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_1064) = &input.ipv6_prefix_count {
        scope_1063.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1064).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1065 = writer.prefix("InterfaceType");
    if let Some(var_1066) = &input.interface_type {
        scope_1065.string(var_1066.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1067 = writer.prefix("SubnetId");
    if let Some(var_1068) = &input.subnet_id {
        scope_1067.string(var_1068);
    }
    #[allow(unused_mut)]
    let mut scope_1069 = writer.prefix("TagSpecification");
    if let Some(var_1070) = &input.tag_specifications {
        let mut list_1072 = scope_1069.start_list(true, Some("item"));
        for item_1071 in var_1070 {
            #[allow(unused_mut)]
            let mut entry_1073 = list_1072.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1073, item_1071,
            )?;
        }
        list_1072.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1074 = writer.prefix("ClientToken");
    if let Some(var_1075) = &input.client_token {
        scope_1074.string(var_1075);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_interface_permission(
    input: &crate::input::CreateNetworkInterfacePermissionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateNetworkInterfacePermission",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1076 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1077) = &input.network_interface_id {
        scope_1076.string(var_1077);
    }
    #[allow(unused_mut)]
    let mut scope_1078 = writer.prefix("AwsAccountId");
    if let Some(var_1079) = &input.aws_account_id {
        scope_1078.string(var_1079);
    }
    #[allow(unused_mut)]
    let mut scope_1080 = writer.prefix("AwsService");
    if let Some(var_1081) = &input.aws_service {
        scope_1080.string(var_1081);
    }
    #[allow(unused_mut)]
    let mut scope_1082 = writer.prefix("Permission");
    if let Some(var_1083) = &input.permission {
        scope_1082.string(var_1083.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1084 = writer.prefix("DryRun");
    if let Some(var_1085) = &input.dry_run {
        scope_1084.boolean(*var_1085);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_placement_group(
    input: &crate::input::CreatePlacementGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreatePlacementGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1086 = writer.prefix("DryRun");
    if let Some(var_1087) = &input.dry_run {
        scope_1086.boolean(*var_1087);
    }
    #[allow(unused_mut)]
    let mut scope_1088 = writer.prefix("GroupName");
    if let Some(var_1089) = &input.group_name {
        scope_1088.string(var_1089);
    }
    #[allow(unused_mut)]
    let mut scope_1090 = writer.prefix("Strategy");
    if let Some(var_1091) = &input.strategy {
        scope_1090.string(var_1091.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1092 = writer.prefix("PartitionCount");
    if let Some(var_1093) = &input.partition_count {
        scope_1092.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1093).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1094 = writer.prefix("TagSpecification");
    if let Some(var_1095) = &input.tag_specifications {
        let mut list_1097 = scope_1094.start_list(true, Some("item"));
        for item_1096 in var_1095 {
            #[allow(unused_mut)]
            let mut entry_1098 = list_1097.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1098, item_1096,
            )?;
        }
        list_1097.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1099 = writer.prefix("SpreadLevel");
    if let Some(var_1100) = &input.spread_level {
        scope_1099.string(var_1100.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_public_ipv4_pool(
    input: &crate::input::CreatePublicIpv4PoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreatePublicIpv4Pool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1101 = writer.prefix("DryRun");
    if let Some(var_1102) = &input.dry_run {
        scope_1101.boolean(*var_1102);
    }
    #[allow(unused_mut)]
    let mut scope_1103 = writer.prefix("TagSpecification");
    if let Some(var_1104) = &input.tag_specifications {
        let mut list_1106 = scope_1103.start_list(true, Some("item"));
        for item_1105 in var_1104 {
            #[allow(unused_mut)]
            let mut entry_1107 = list_1106.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1107, item_1105,
            )?;
        }
        list_1106.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_replace_root_volume_task(
    input: &crate::input::CreateReplaceRootVolumeTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateReplaceRootVolumeTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1108 = writer.prefix("InstanceId");
    if let Some(var_1109) = &input.instance_id {
        scope_1108.string(var_1109);
    }
    #[allow(unused_mut)]
    let mut scope_1110 = writer.prefix("SnapshotId");
    if let Some(var_1111) = &input.snapshot_id {
        scope_1110.string(var_1111);
    }
    #[allow(unused_mut)]
    let mut scope_1112 = writer.prefix("ClientToken");
    if let Some(var_1113) = &input.client_token {
        scope_1112.string(var_1113);
    }
    #[allow(unused_mut)]
    let mut scope_1114 = writer.prefix("DryRun");
    if let Some(var_1115) = &input.dry_run {
        scope_1114.boolean(*var_1115);
    }
    #[allow(unused_mut)]
    let mut scope_1116 = writer.prefix("TagSpecification");
    if let Some(var_1117) = &input.tag_specifications {
        let mut list_1119 = scope_1116.start_list(true, Some("item"));
        for item_1118 in var_1117 {
            #[allow(unused_mut)]
            let mut entry_1120 = list_1119.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1120, item_1118,
            )?;
        }
        list_1119.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_reserved_instances_listing(
    input: &crate::input::CreateReservedInstancesListingInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateReservedInstancesListing",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1121 = writer.prefix("ClientToken");
    if let Some(var_1122) = &input.client_token {
        scope_1121.string(var_1122);
    }
    #[allow(unused_mut)]
    let mut scope_1123 = writer.prefix("InstanceCount");
    if let Some(var_1124) = &input.instance_count {
        scope_1123.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1124).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1125 = writer.prefix("PriceSchedules");
    if let Some(var_1126) = &input.price_schedules {
        let mut list_1128 = scope_1125.start_list(true, Some("item"));
        for item_1127 in var_1126 {
            #[allow(unused_mut)]
            let mut entry_1129 = list_1128.entry();
            crate::query_ser::serialize_structure_crate_model_price_schedule_specification(
                entry_1129, item_1127,
            )?;
        }
        list_1128.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1130 = writer.prefix("ReservedInstancesId");
    if let Some(var_1131) = &input.reserved_instances_id {
        scope_1130.string(var_1131);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_restore_image_task(
    input: &crate::input::CreateRestoreImageTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateRestoreImageTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1132 = writer.prefix("Bucket");
    if let Some(var_1133) = &input.bucket {
        scope_1132.string(var_1133);
    }
    #[allow(unused_mut)]
    let mut scope_1134 = writer.prefix("ObjectKey");
    if let Some(var_1135) = &input.object_key {
        scope_1134.string(var_1135);
    }
    #[allow(unused_mut)]
    let mut scope_1136 = writer.prefix("Name");
    if let Some(var_1137) = &input.name {
        scope_1136.string(var_1137);
    }
    #[allow(unused_mut)]
    let mut scope_1138 = writer.prefix("TagSpecification");
    if let Some(var_1139) = &input.tag_specifications {
        let mut list_1141 = scope_1138.start_list(true, Some("item"));
        for item_1140 in var_1139 {
            #[allow(unused_mut)]
            let mut entry_1142 = list_1141.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1142, item_1140,
            )?;
        }
        list_1141.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1143 = writer.prefix("DryRun");
    if let Some(var_1144) = &input.dry_run {
        scope_1143.boolean(*var_1144);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_route(
    input: &crate::input::CreateRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1145 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1146) = &input.destination_cidr_block {
        scope_1145.string(var_1146);
    }
    #[allow(unused_mut)]
    let mut scope_1147 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_1148) = &input.destination_ipv6_cidr_block {
        scope_1147.string(var_1148);
    }
    #[allow(unused_mut)]
    let mut scope_1149 = writer.prefix("DestinationPrefixListId");
    if let Some(var_1150) = &input.destination_prefix_list_id {
        scope_1149.string(var_1150);
    }
    #[allow(unused_mut)]
    let mut scope_1151 = writer.prefix("DryRun");
    if let Some(var_1152) = &input.dry_run {
        scope_1151.boolean(*var_1152);
    }
    #[allow(unused_mut)]
    let mut scope_1153 = writer.prefix("VpcEndpointId");
    if let Some(var_1154) = &input.vpc_endpoint_id {
        scope_1153.string(var_1154);
    }
    #[allow(unused_mut)]
    let mut scope_1155 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_1156) = &input.egress_only_internet_gateway_id {
        scope_1155.string(var_1156);
    }
    #[allow(unused_mut)]
    let mut scope_1157 = writer.prefix("GatewayId");
    if let Some(var_1158) = &input.gateway_id {
        scope_1157.string(var_1158);
    }
    #[allow(unused_mut)]
    let mut scope_1159 = writer.prefix("InstanceId");
    if let Some(var_1160) = &input.instance_id {
        scope_1159.string(var_1160);
    }
    #[allow(unused_mut)]
    let mut scope_1161 = writer.prefix("NatGatewayId");
    if let Some(var_1162) = &input.nat_gateway_id {
        scope_1161.string(var_1162);
    }
    #[allow(unused_mut)]
    let mut scope_1163 = writer.prefix("TransitGatewayId");
    if let Some(var_1164) = &input.transit_gateway_id {
        scope_1163.string(var_1164);
    }
    #[allow(unused_mut)]
    let mut scope_1165 = writer.prefix("LocalGatewayId");
    if let Some(var_1166) = &input.local_gateway_id {
        scope_1165.string(var_1166);
    }
    #[allow(unused_mut)]
    let mut scope_1167 = writer.prefix("CarrierGatewayId");
    if let Some(var_1168) = &input.carrier_gateway_id {
        scope_1167.string(var_1168);
    }
    #[allow(unused_mut)]
    let mut scope_1169 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1170) = &input.network_interface_id {
        scope_1169.string(var_1170);
    }
    #[allow(unused_mut)]
    let mut scope_1171 = writer.prefix("RouteTableId");
    if let Some(var_1172) = &input.route_table_id {
        scope_1171.string(var_1172);
    }
    #[allow(unused_mut)]
    let mut scope_1173 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_1174) = &input.vpc_peering_connection_id {
        scope_1173.string(var_1174);
    }
    #[allow(unused_mut)]
    let mut scope_1175 = writer.prefix("CoreNetworkArn");
    if let Some(var_1176) = &input.core_network_arn {
        scope_1175.string(var_1176);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_route_table(
    input: &crate::input::CreateRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1177 = writer.prefix("DryRun");
    if let Some(var_1178) = &input.dry_run {
        scope_1177.boolean(*var_1178);
    }
    #[allow(unused_mut)]
    let mut scope_1179 = writer.prefix("VpcId");
    if let Some(var_1180) = &input.vpc_id {
        scope_1179.string(var_1180);
    }
    #[allow(unused_mut)]
    let mut scope_1181 = writer.prefix("TagSpecification");
    if let Some(var_1182) = &input.tag_specifications {
        let mut list_1184 = scope_1181.start_list(true, Some("item"));
        for item_1183 in var_1182 {
            #[allow(unused_mut)]
            let mut entry_1185 = list_1184.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1185, item_1183,
            )?;
        }
        list_1184.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_security_group(
    input: &crate::input::CreateSecurityGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateSecurityGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1186 = writer.prefix("GroupDescription");
    if let Some(var_1187) = &input.description {
        scope_1186.string(var_1187);
    }
    #[allow(unused_mut)]
    let mut scope_1188 = writer.prefix("GroupName");
    if let Some(var_1189) = &input.group_name {
        scope_1188.string(var_1189);
    }
    #[allow(unused_mut)]
    let mut scope_1190 = writer.prefix("VpcId");
    if let Some(var_1191) = &input.vpc_id {
        scope_1190.string(var_1191);
    }
    #[allow(unused_mut)]
    let mut scope_1192 = writer.prefix("TagSpecification");
    if let Some(var_1193) = &input.tag_specifications {
        let mut list_1195 = scope_1192.start_list(true, Some("item"));
        for item_1194 in var_1193 {
            #[allow(unused_mut)]
            let mut entry_1196 = list_1195.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1196, item_1194,
            )?;
        }
        list_1195.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1197 = writer.prefix("DryRun");
    if let Some(var_1198) = &input.dry_run {
        scope_1197.boolean(*var_1198);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_snapshot(
    input: &crate::input::CreateSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1199 = writer.prefix("Description");
    if let Some(var_1200) = &input.description {
        scope_1199.string(var_1200);
    }
    #[allow(unused_mut)]
    let mut scope_1201 = writer.prefix("OutpostArn");
    if let Some(var_1202) = &input.outpost_arn {
        scope_1201.string(var_1202);
    }
    #[allow(unused_mut)]
    let mut scope_1203 = writer.prefix("VolumeId");
    if let Some(var_1204) = &input.volume_id {
        scope_1203.string(var_1204);
    }
    #[allow(unused_mut)]
    let mut scope_1205 = writer.prefix("TagSpecification");
    if let Some(var_1206) = &input.tag_specifications {
        let mut list_1208 = scope_1205.start_list(true, Some("item"));
        for item_1207 in var_1206 {
            #[allow(unused_mut)]
            let mut entry_1209 = list_1208.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1209, item_1207,
            )?;
        }
        list_1208.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1210 = writer.prefix("DryRun");
    if let Some(var_1211) = &input.dry_run {
        scope_1210.boolean(*var_1211);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_snapshots(
    input: &crate::input::CreateSnapshotsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSnapshots", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1212 = writer.prefix("Description");
    if let Some(var_1213) = &input.description {
        scope_1212.string(var_1213);
    }
    #[allow(unused_mut)]
    let mut scope_1214 = writer.prefix("InstanceSpecification");
    if let Some(var_1215) = &input.instance_specification {
        crate::query_ser::serialize_structure_crate_model_instance_specification(
            scope_1214, var_1215,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1216 = writer.prefix("OutpostArn");
    if let Some(var_1217) = &input.outpost_arn {
        scope_1216.string(var_1217);
    }
    #[allow(unused_mut)]
    let mut scope_1218 = writer.prefix("TagSpecification");
    if let Some(var_1219) = &input.tag_specifications {
        let mut list_1221 = scope_1218.start_list(true, Some("item"));
        for item_1220 in var_1219 {
            #[allow(unused_mut)]
            let mut entry_1222 = list_1221.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1222, item_1220,
            )?;
        }
        list_1221.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1223 = writer.prefix("DryRun");
    if let Some(var_1224) = &input.dry_run {
        scope_1223.boolean(*var_1224);
    }
    #[allow(unused_mut)]
    let mut scope_1225 = writer.prefix("CopyTagsFromSource");
    if let Some(var_1226) = &input.copy_tags_from_source {
        scope_1225.string(var_1226.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_spot_datafeed_subscription(
    input: &crate::input::CreateSpotDatafeedSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateSpotDatafeedSubscription",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1227 = writer.prefix("Bucket");
    if let Some(var_1228) = &input.bucket {
        scope_1227.string(var_1228);
    }
    #[allow(unused_mut)]
    let mut scope_1229 = writer.prefix("DryRun");
    if let Some(var_1230) = &input.dry_run {
        scope_1229.boolean(*var_1230);
    }
    #[allow(unused_mut)]
    let mut scope_1231 = writer.prefix("Prefix");
    if let Some(var_1232) = &input.prefix {
        scope_1231.string(var_1232);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_store_image_task(
    input: &crate::input::CreateStoreImageTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateStoreImageTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1233 = writer.prefix("ImageId");
    if let Some(var_1234) = &input.image_id {
        scope_1233.string(var_1234);
    }
    #[allow(unused_mut)]
    let mut scope_1235 = writer.prefix("Bucket");
    if let Some(var_1236) = &input.bucket {
        scope_1235.string(var_1236);
    }
    #[allow(unused_mut)]
    let mut scope_1237 = writer.prefix("S3ObjectTag");
    if let Some(var_1238) = &input.s3_object_tags {
        let mut list_1240 = scope_1237.start_list(true, Some("item"));
        for item_1239 in var_1238 {
            #[allow(unused_mut)]
            let mut entry_1241 = list_1240.entry();
            crate::query_ser::serialize_structure_crate_model_s3_object_tag(entry_1241, item_1239)?;
        }
        list_1240.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1242 = writer.prefix("DryRun");
    if let Some(var_1243) = &input.dry_run {
        scope_1242.boolean(*var_1243);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_subnet(
    input: &crate::input::CreateSubnetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1244 = writer.prefix("TagSpecification");
    if let Some(var_1245) = &input.tag_specifications {
        let mut list_1247 = scope_1244.start_list(true, Some("item"));
        for item_1246 in var_1245 {
            #[allow(unused_mut)]
            let mut entry_1248 = list_1247.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1248, item_1246,
            )?;
        }
        list_1247.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1249 = writer.prefix("AvailabilityZone");
    if let Some(var_1250) = &input.availability_zone {
        scope_1249.string(var_1250);
    }
    #[allow(unused_mut)]
    let mut scope_1251 = writer.prefix("AvailabilityZoneId");
    if let Some(var_1252) = &input.availability_zone_id {
        scope_1251.string(var_1252);
    }
    #[allow(unused_mut)]
    let mut scope_1253 = writer.prefix("CidrBlock");
    if let Some(var_1254) = &input.cidr_block {
        scope_1253.string(var_1254);
    }
    #[allow(unused_mut)]
    let mut scope_1255 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_1256) = &input.ipv6_cidr_block {
        scope_1255.string(var_1256);
    }
    #[allow(unused_mut)]
    let mut scope_1257 = writer.prefix("OutpostArn");
    if let Some(var_1258) = &input.outpost_arn {
        scope_1257.string(var_1258);
    }
    #[allow(unused_mut)]
    let mut scope_1259 = writer.prefix("VpcId");
    if let Some(var_1260) = &input.vpc_id {
        scope_1259.string(var_1260);
    }
    #[allow(unused_mut)]
    let mut scope_1261 = writer.prefix("DryRun");
    if let Some(var_1262) = &input.dry_run {
        scope_1261.boolean(*var_1262);
    }
    #[allow(unused_mut)]
    let mut scope_1263 = writer.prefix("Ipv6Native");
    if let Some(var_1264) = &input.ipv6_native {
        scope_1263.boolean(*var_1264);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_subnet_cidr_reservation(
    input: &crate::input::CreateSubnetCidrReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateSubnetCidrReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1265 = writer.prefix("SubnetId");
    if let Some(var_1266) = &input.subnet_id {
        scope_1265.string(var_1266);
    }
    #[allow(unused_mut)]
    let mut scope_1267 = writer.prefix("Cidr");
    if let Some(var_1268) = &input.cidr {
        scope_1267.string(var_1268);
    }
    #[allow(unused_mut)]
    let mut scope_1269 = writer.prefix("ReservationType");
    if let Some(var_1270) = &input.reservation_type {
        scope_1269.string(var_1270.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1271 = writer.prefix("Description");
    if let Some(var_1272) = &input.description {
        scope_1271.string(var_1272);
    }
    #[allow(unused_mut)]
    let mut scope_1273 = writer.prefix("DryRun");
    if let Some(var_1274) = &input.dry_run {
        scope_1273.boolean(*var_1274);
    }
    #[allow(unused_mut)]
    let mut scope_1275 = writer.prefix("TagSpecification");
    if let Some(var_1276) = &input.tag_specifications {
        let mut list_1278 = scope_1275.start_list(true, Some("item"));
        for item_1277 in var_1276 {
            #[allow(unused_mut)]
            let mut entry_1279 = list_1278.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1279, item_1277,
            )?;
        }
        list_1278.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_tags(
    input: &crate::input::CreateTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1280 = writer.prefix("DryRun");
    if let Some(var_1281) = &input.dry_run {
        scope_1280.boolean(*var_1281);
    }
    #[allow(unused_mut)]
    let mut scope_1282 = writer.prefix("ResourceId");
    if let Some(var_1283) = &input.resources {
        let mut list_1285 = scope_1282.start_list(true, None);
        for item_1284 in var_1283 {
            #[allow(unused_mut)]
            let mut entry_1286 = list_1285.entry();
            entry_1286.string(item_1284);
        }
        list_1285.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1287 = writer.prefix("Tag");
    if let Some(var_1288) = &input.tags {
        let mut list_1290 = scope_1287.start_list(true, Some("item"));
        for item_1289 in var_1288 {
            #[allow(unused_mut)]
            let mut entry_1291 = list_1290.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1291, item_1289)?;
        }
        list_1290.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_filter(
    input: &crate::input::CreateTrafficMirrorFilterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorFilter", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1292 = writer.prefix("Description");
    if let Some(var_1293) = &input.description {
        scope_1292.string(var_1293);
    }
    #[allow(unused_mut)]
    let mut scope_1294 = writer.prefix("TagSpecification");
    if let Some(var_1295) = &input.tag_specifications {
        let mut list_1297 = scope_1294.start_list(true, Some("item"));
        for item_1296 in var_1295 {
            #[allow(unused_mut)]
            let mut entry_1298 = list_1297.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1298, item_1296,
            )?;
        }
        list_1297.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1299 = writer.prefix("DryRun");
    if let Some(var_1300) = &input.dry_run {
        scope_1299.boolean(*var_1300);
    }
    #[allow(unused_mut)]
    let mut scope_1301 = writer.prefix("ClientToken");
    if let Some(var_1302) = &input.client_token {
        scope_1301.string(var_1302);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_filter_rule(
    input: &crate::input::CreateTrafficMirrorFilterRuleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1303 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1304) = &input.traffic_mirror_filter_id {
        scope_1303.string(var_1304);
    }
    #[allow(unused_mut)]
    let mut scope_1305 = writer.prefix("TrafficDirection");
    if let Some(var_1306) = &input.traffic_direction {
        scope_1305.string(var_1306.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1307 = writer.prefix("RuleNumber");
    if let Some(var_1308) = &input.rule_number {
        scope_1307.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1308).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1309 = writer.prefix("RuleAction");
    if let Some(var_1310) = &input.rule_action {
        scope_1309.string(var_1310.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1311 = writer.prefix("DestinationPortRange");
    if let Some(var_1312) = &input.destination_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_1311, var_1312,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1313 = writer.prefix("SourcePortRange");
    if let Some(var_1314) = &input.source_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_1313, var_1314,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1315 = writer.prefix("Protocol");
    if let Some(var_1316) = &input.protocol {
        scope_1315.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1316).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1317 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1318) = &input.destination_cidr_block {
        scope_1317.string(var_1318);
    }
    #[allow(unused_mut)]
    let mut scope_1319 = writer.prefix("SourceCidrBlock");
    if let Some(var_1320) = &input.source_cidr_block {
        scope_1319.string(var_1320);
    }
    #[allow(unused_mut)]
    let mut scope_1321 = writer.prefix("Description");
    if let Some(var_1322) = &input.description {
        scope_1321.string(var_1322);
    }
    #[allow(unused_mut)]
    let mut scope_1323 = writer.prefix("DryRun");
    if let Some(var_1324) = &input.dry_run {
        scope_1323.boolean(*var_1324);
    }
    #[allow(unused_mut)]
    let mut scope_1325 = writer.prefix("ClientToken");
    if let Some(var_1326) = &input.client_token {
        scope_1325.string(var_1326);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_session(
    input: &crate::input::CreateTrafficMirrorSessionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1327 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1328) = &input.network_interface_id {
        scope_1327.string(var_1328);
    }
    #[allow(unused_mut)]
    let mut scope_1329 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_1330) = &input.traffic_mirror_target_id {
        scope_1329.string(var_1330);
    }
    #[allow(unused_mut)]
    let mut scope_1331 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1332) = &input.traffic_mirror_filter_id {
        scope_1331.string(var_1332);
    }
    #[allow(unused_mut)]
    let mut scope_1333 = writer.prefix("PacketLength");
    if let Some(var_1334) = &input.packet_length {
        scope_1333.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1334).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1335 = writer.prefix("SessionNumber");
    if let Some(var_1336) = &input.session_number {
        scope_1335.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1336).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1337 = writer.prefix("VirtualNetworkId");
    if let Some(var_1338) = &input.virtual_network_id {
        scope_1337.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1338).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1339 = writer.prefix("Description");
    if let Some(var_1340) = &input.description {
        scope_1339.string(var_1340);
    }
    #[allow(unused_mut)]
    let mut scope_1341 = writer.prefix("TagSpecification");
    if let Some(var_1342) = &input.tag_specifications {
        let mut list_1344 = scope_1341.start_list(true, Some("item"));
        for item_1343 in var_1342 {
            #[allow(unused_mut)]
            let mut entry_1345 = list_1344.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1345, item_1343,
            )?;
        }
        list_1344.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1346 = writer.prefix("DryRun");
    if let Some(var_1347) = &input.dry_run {
        scope_1346.boolean(*var_1347);
    }
    #[allow(unused_mut)]
    let mut scope_1348 = writer.prefix("ClientToken");
    if let Some(var_1349) = &input.client_token {
        scope_1348.string(var_1349);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_target(
    input: &crate::input::CreateTrafficMirrorTargetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorTarget", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1350 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1351) = &input.network_interface_id {
        scope_1350.string(var_1351);
    }
    #[allow(unused_mut)]
    let mut scope_1352 = writer.prefix("NetworkLoadBalancerArn");
    if let Some(var_1353) = &input.network_load_balancer_arn {
        scope_1352.string(var_1353);
    }
    #[allow(unused_mut)]
    let mut scope_1354 = writer.prefix("Description");
    if let Some(var_1355) = &input.description {
        scope_1354.string(var_1355);
    }
    #[allow(unused_mut)]
    let mut scope_1356 = writer.prefix("TagSpecification");
    if let Some(var_1357) = &input.tag_specifications {
        let mut list_1359 = scope_1356.start_list(true, Some("item"));
        for item_1358 in var_1357 {
            #[allow(unused_mut)]
            let mut entry_1360 = list_1359.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1360, item_1358,
            )?;
        }
        list_1359.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1361 = writer.prefix("DryRun");
    if let Some(var_1362) = &input.dry_run {
        scope_1361.boolean(*var_1362);
    }
    #[allow(unused_mut)]
    let mut scope_1363 = writer.prefix("ClientToken");
    if let Some(var_1364) = &input.client_token {
        scope_1363.string(var_1364);
    }
    #[allow(unused_mut)]
    let mut scope_1365 = writer.prefix("GatewayLoadBalancerEndpointId");
    if let Some(var_1366) = &input.gateway_load_balancer_endpoint_id {
        scope_1365.string(var_1366);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway(
    input: &crate::input::CreateTransitGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1367 = writer.prefix("Description");
    if let Some(var_1368) = &input.description {
        scope_1367.string(var_1368);
    }
    #[allow(unused_mut)]
    let mut scope_1369 = writer.prefix("Options");
    if let Some(var_1370) = &input.options {
        crate::query_ser::serialize_structure_crate_model_transit_gateway_request_options(
            scope_1369, var_1370,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1371 = writer.prefix("TagSpecification");
    if let Some(var_1372) = &input.tag_specifications {
        let mut list_1374 = scope_1371.start_list(true, Some("item"));
        for item_1373 in var_1372 {
            #[allow(unused_mut)]
            let mut entry_1375 = list_1374.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1375, item_1373,
            )?;
        }
        list_1374.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1376 = writer.prefix("DryRun");
    if let Some(var_1377) = &input.dry_run {
        scope_1376.boolean(*var_1377);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_connect(
    input: &crate::input::CreateTransitGatewayConnectInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayConnect", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1378 = writer.prefix("TransportTransitGatewayAttachmentId");
    if let Some(var_1379) = &input.transport_transit_gateway_attachment_id {
        scope_1378.string(var_1379);
    }
    #[allow(unused_mut)]
    let mut scope_1380 = writer.prefix("Options");
    if let Some(var_1381) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_connect_request_options(scope_1380, var_1381)?;
    }
    #[allow(unused_mut)]
    let mut scope_1382 = writer.prefix("TagSpecification");
    if let Some(var_1383) = &input.tag_specifications {
        let mut list_1385 = scope_1382.start_list(true, Some("item"));
        for item_1384 in var_1383 {
            #[allow(unused_mut)]
            let mut entry_1386 = list_1385.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1386, item_1384,
            )?;
        }
        list_1385.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1387 = writer.prefix("DryRun");
    if let Some(var_1388) = &input.dry_run {
        scope_1387.boolean(*var_1388);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_connect_peer(
    input: &crate::input::CreateTransitGatewayConnectPeerInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayConnectPeer",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1389 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1390) = &input.transit_gateway_attachment_id {
        scope_1389.string(var_1390);
    }
    #[allow(unused_mut)]
    let mut scope_1391 = writer.prefix("TransitGatewayAddress");
    if let Some(var_1392) = &input.transit_gateway_address {
        scope_1391.string(var_1392);
    }
    #[allow(unused_mut)]
    let mut scope_1393 = writer.prefix("PeerAddress");
    if let Some(var_1394) = &input.peer_address {
        scope_1393.string(var_1394);
    }
    #[allow(unused_mut)]
    let mut scope_1395 = writer.prefix("BgpOptions");
    if let Some(var_1396) = &input.bgp_options {
        crate::query_ser::serialize_structure_crate_model_transit_gateway_connect_request_bgp_options(scope_1395, var_1396)?;
    }
    #[allow(unused_mut)]
    let mut scope_1397 = writer.prefix("InsideCidrBlocks");
    if let Some(var_1398) = &input.inside_cidr_blocks {
        let mut list_1400 = scope_1397.start_list(true, Some("item"));
        for item_1399 in var_1398 {
            #[allow(unused_mut)]
            let mut entry_1401 = list_1400.entry();
            entry_1401.string(item_1399);
        }
        list_1400.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1402 = writer.prefix("TagSpecification");
    if let Some(var_1403) = &input.tag_specifications {
        let mut list_1405 = scope_1402.start_list(true, Some("item"));
        for item_1404 in var_1403 {
            #[allow(unused_mut)]
            let mut entry_1406 = list_1405.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1406, item_1404,
            )?;
        }
        list_1405.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1407 = writer.prefix("DryRun");
    if let Some(var_1408) = &input.dry_run {
        scope_1407.boolean(*var_1408);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_multicast_domain(
    input: &crate::input::CreateTransitGatewayMulticastDomainInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1409 = writer.prefix("TransitGatewayId");
    if let Some(var_1410) = &input.transit_gateway_id {
        scope_1409.string(var_1410);
    }
    #[allow(unused_mut)]
    let mut scope_1411 = writer.prefix("Options");
    if let Some(var_1412) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_multicast_domain_request_options(scope_1411, var_1412)?;
    }
    #[allow(unused_mut)]
    let mut scope_1413 = writer.prefix("TagSpecification");
    if let Some(var_1414) = &input.tag_specifications {
        let mut list_1416 = scope_1413.start_list(true, Some("item"));
        for item_1415 in var_1414 {
            #[allow(unused_mut)]
            let mut entry_1417 = list_1416.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1417, item_1415,
            )?;
        }
        list_1416.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1418 = writer.prefix("DryRun");
    if let Some(var_1419) = &input.dry_run {
        scope_1418.boolean(*var_1419);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_peering_attachment(
    input: &crate::input::CreateTransitGatewayPeeringAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1420 = writer.prefix("TransitGatewayId");
    if let Some(var_1421) = &input.transit_gateway_id {
        scope_1420.string(var_1421);
    }
    #[allow(unused_mut)]
    let mut scope_1422 = writer.prefix("PeerTransitGatewayId");
    if let Some(var_1423) = &input.peer_transit_gateway_id {
        scope_1422.string(var_1423);
    }
    #[allow(unused_mut)]
    let mut scope_1424 = writer.prefix("PeerAccountId");
    if let Some(var_1425) = &input.peer_account_id {
        scope_1424.string(var_1425);
    }
    #[allow(unused_mut)]
    let mut scope_1426 = writer.prefix("PeerRegion");
    if let Some(var_1427) = &input.peer_region {
        scope_1426.string(var_1427);
    }
    #[allow(unused_mut)]
    let mut scope_1428 = writer.prefix("TagSpecification");
    if let Some(var_1429) = &input.tag_specifications {
        let mut list_1431 = scope_1428.start_list(true, Some("item"));
        for item_1430 in var_1429 {
            #[allow(unused_mut)]
            let mut entry_1432 = list_1431.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1432, item_1430,
            )?;
        }
        list_1431.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1433 = writer.prefix("DryRun");
    if let Some(var_1434) = &input.dry_run {
        scope_1433.boolean(*var_1434);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_prefix_list_reference(
    input: &crate::input::CreateTransitGatewayPrefixListReferenceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayPrefixListReference",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1435 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1436) = &input.transit_gateway_route_table_id {
        scope_1435.string(var_1436);
    }
    #[allow(unused_mut)]
    let mut scope_1437 = writer.prefix("PrefixListId");
    if let Some(var_1438) = &input.prefix_list_id {
        scope_1437.string(var_1438);
    }
    #[allow(unused_mut)]
    let mut scope_1439 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1440) = &input.transit_gateway_attachment_id {
        scope_1439.string(var_1440);
    }
    #[allow(unused_mut)]
    let mut scope_1441 = writer.prefix("Blackhole");
    if let Some(var_1442) = &input.blackhole {
        scope_1441.boolean(*var_1442);
    }
    #[allow(unused_mut)]
    let mut scope_1443 = writer.prefix("DryRun");
    if let Some(var_1444) = &input.dry_run {
        scope_1443.boolean(*var_1444);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_route(
    input: &crate::input::CreateTransitGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1445 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1446) = &input.destination_cidr_block {
        scope_1445.string(var_1446);
    }
    #[allow(unused_mut)]
    let mut scope_1447 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1448) = &input.transit_gateway_route_table_id {
        scope_1447.string(var_1448);
    }
    #[allow(unused_mut)]
    let mut scope_1449 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1450) = &input.transit_gateway_attachment_id {
        scope_1449.string(var_1450);
    }
    #[allow(unused_mut)]
    let mut scope_1451 = writer.prefix("Blackhole");
    if let Some(var_1452) = &input.blackhole {
        scope_1451.boolean(*var_1452);
    }
    #[allow(unused_mut)]
    let mut scope_1453 = writer.prefix("DryRun");
    if let Some(var_1454) = &input.dry_run {
        scope_1453.boolean(*var_1454);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_route_table(
    input: &crate::input::CreateTransitGatewayRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1455 = writer.prefix("TransitGatewayId");
    if let Some(var_1456) = &input.transit_gateway_id {
        scope_1455.string(var_1456);
    }
    #[allow(unused_mut)]
    let mut scope_1457 = writer.prefix("TagSpecifications");
    if let Some(var_1458) = &input.tag_specifications {
        let mut list_1460 = scope_1457.start_list(true, Some("item"));
        for item_1459 in var_1458 {
            #[allow(unused_mut)]
            let mut entry_1461 = list_1460.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1461, item_1459,
            )?;
        }
        list_1460.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1462 = writer.prefix("DryRun");
    if let Some(var_1463) = &input.dry_run {
        scope_1462.boolean(*var_1463);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_vpc_attachment(
    input: &crate::input::CreateTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1464 = writer.prefix("TransitGatewayId");
    if let Some(var_1465) = &input.transit_gateway_id {
        scope_1464.string(var_1465);
    }
    #[allow(unused_mut)]
    let mut scope_1466 = writer.prefix("VpcId");
    if let Some(var_1467) = &input.vpc_id {
        scope_1466.string(var_1467);
    }
    #[allow(unused_mut)]
    let mut scope_1468 = writer.prefix("SubnetIds");
    if let Some(var_1469) = &input.subnet_ids {
        let mut list_1471 = scope_1468.start_list(true, Some("item"));
        for item_1470 in var_1469 {
            #[allow(unused_mut)]
            let mut entry_1472 = list_1471.entry();
            entry_1472.string(item_1470);
        }
        list_1471.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1473 = writer.prefix("Options");
    if let Some(var_1474) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_vpc_attachment_request_options(scope_1473, var_1474)?;
    }
    #[allow(unused_mut)]
    let mut scope_1475 = writer.prefix("TagSpecifications");
    if let Some(var_1476) = &input.tag_specifications {
        let mut list_1478 = scope_1475.start_list(true, Some("item"));
        for item_1477 in var_1476 {
            #[allow(unused_mut)]
            let mut entry_1479 = list_1478.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1479, item_1477,
            )?;
        }
        list_1478.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1480 = writer.prefix("DryRun");
    if let Some(var_1481) = &input.dry_run {
        scope_1480.boolean(*var_1481);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_volume(
    input: &crate::input::CreateVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1482 = writer.prefix("AvailabilityZone");
    if let Some(var_1483) = &input.availability_zone {
        scope_1482.string(var_1483);
    }
    #[allow(unused_mut)]
    let mut scope_1484 = writer.prefix("Encrypted");
    if let Some(var_1485) = &input.encrypted {
        scope_1484.boolean(*var_1485);
    }
    #[allow(unused_mut)]
    let mut scope_1486 = writer.prefix("Iops");
    if let Some(var_1487) = &input.iops {
        scope_1486.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1487).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1488 = writer.prefix("KmsKeyId");
    if let Some(var_1489) = &input.kms_key_id {
        scope_1488.string(var_1489);
    }
    #[allow(unused_mut)]
    let mut scope_1490 = writer.prefix("OutpostArn");
    if let Some(var_1491) = &input.outpost_arn {
        scope_1490.string(var_1491);
    }
    #[allow(unused_mut)]
    let mut scope_1492 = writer.prefix("Size");
    if let Some(var_1493) = &input.size {
        scope_1492.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1493).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1494 = writer.prefix("SnapshotId");
    if let Some(var_1495) = &input.snapshot_id {
        scope_1494.string(var_1495);
    }
    #[allow(unused_mut)]
    let mut scope_1496 = writer.prefix("VolumeType");
    if let Some(var_1497) = &input.volume_type {
        scope_1496.string(var_1497.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1498 = writer.prefix("DryRun");
    if let Some(var_1499) = &input.dry_run {
        scope_1498.boolean(*var_1499);
    }
    #[allow(unused_mut)]
    let mut scope_1500 = writer.prefix("TagSpecification");
    if let Some(var_1501) = &input.tag_specifications {
        let mut list_1503 = scope_1500.start_list(true, Some("item"));
        for item_1502 in var_1501 {
            #[allow(unused_mut)]
            let mut entry_1504 = list_1503.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1504, item_1502,
            )?;
        }
        list_1503.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1505 = writer.prefix("MultiAttachEnabled");
    if let Some(var_1506) = &input.multi_attach_enabled {
        scope_1505.boolean(*var_1506);
    }
    #[allow(unused_mut)]
    let mut scope_1507 = writer.prefix("Throughput");
    if let Some(var_1508) = &input.throughput {
        scope_1507.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1508).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1509 = writer.prefix("ClientToken");
    if let Some(var_1510) = &input.client_token {
        scope_1509.string(var_1510);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc(
    input: &crate::input::CreateVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1511 = writer.prefix("CidrBlock");
    if let Some(var_1512) = &input.cidr_block {
        scope_1511.string(var_1512);
    }
    #[allow(unused_mut)]
    let mut scope_1513 = writer.prefix("AmazonProvidedIpv6CidrBlock");
    if let Some(var_1514) = &input.amazon_provided_ipv6_cidr_block {
        scope_1513.boolean(*var_1514);
    }
    #[allow(unused_mut)]
    let mut scope_1515 = writer.prefix("Ipv6Pool");
    if let Some(var_1516) = &input.ipv6_pool {
        scope_1515.string(var_1516);
    }
    #[allow(unused_mut)]
    let mut scope_1517 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_1518) = &input.ipv6_cidr_block {
        scope_1517.string(var_1518);
    }
    #[allow(unused_mut)]
    let mut scope_1519 = writer.prefix("Ipv4IpamPoolId");
    if let Some(var_1520) = &input.ipv4_ipam_pool_id {
        scope_1519.string(var_1520);
    }
    #[allow(unused_mut)]
    let mut scope_1521 = writer.prefix("Ipv4NetmaskLength");
    if let Some(var_1522) = &input.ipv4_netmask_length {
        scope_1521.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1522).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1523 = writer.prefix("Ipv6IpamPoolId");
    if let Some(var_1524) = &input.ipv6_ipam_pool_id {
        scope_1523.string(var_1524);
    }
    #[allow(unused_mut)]
    let mut scope_1525 = writer.prefix("Ipv6NetmaskLength");
    if let Some(var_1526) = &input.ipv6_netmask_length {
        scope_1525.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1526).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1527 = writer.prefix("DryRun");
    if let Some(var_1528) = &input.dry_run {
        scope_1527.boolean(*var_1528);
    }
    #[allow(unused_mut)]
    let mut scope_1529 = writer.prefix("InstanceTenancy");
    if let Some(var_1530) = &input.instance_tenancy {
        scope_1529.string(var_1530.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1531 = writer.prefix("Ipv6CidrBlockNetworkBorderGroup");
    if let Some(var_1532) = &input.ipv6_cidr_block_network_border_group {
        scope_1531.string(var_1532);
    }
    #[allow(unused_mut)]
    let mut scope_1533 = writer.prefix("TagSpecification");
    if let Some(var_1534) = &input.tag_specifications {
        let mut list_1536 = scope_1533.start_list(true, Some("item"));
        for item_1535 in var_1534 {
            #[allow(unused_mut)]
            let mut entry_1537 = list_1536.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1537, item_1535,
            )?;
        }
        list_1536.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_endpoint(
    input: &crate::input::CreateVpcEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateVpcEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1538 = writer.prefix("DryRun");
    if let Some(var_1539) = &input.dry_run {
        scope_1538.boolean(*var_1539);
    }
    #[allow(unused_mut)]
    let mut scope_1540 = writer.prefix("VpcEndpointType");
    if let Some(var_1541) = &input.vpc_endpoint_type {
        scope_1540.string(var_1541.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1542 = writer.prefix("VpcId");
    if let Some(var_1543) = &input.vpc_id {
        scope_1542.string(var_1543);
    }
    #[allow(unused_mut)]
    let mut scope_1544 = writer.prefix("ServiceName");
    if let Some(var_1545) = &input.service_name {
        scope_1544.string(var_1545);
    }
    #[allow(unused_mut)]
    let mut scope_1546 = writer.prefix("PolicyDocument");
    if let Some(var_1547) = &input.policy_document {
        scope_1546.string(var_1547);
    }
    #[allow(unused_mut)]
    let mut scope_1548 = writer.prefix("RouteTableId");
    if let Some(var_1549) = &input.route_table_ids {
        let mut list_1551 = scope_1548.start_list(true, Some("item"));
        for item_1550 in var_1549 {
            #[allow(unused_mut)]
            let mut entry_1552 = list_1551.entry();
            entry_1552.string(item_1550);
        }
        list_1551.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1553 = writer.prefix("SubnetId");
    if let Some(var_1554) = &input.subnet_ids {
        let mut list_1556 = scope_1553.start_list(true, Some("item"));
        for item_1555 in var_1554 {
            #[allow(unused_mut)]
            let mut entry_1557 = list_1556.entry();
            entry_1557.string(item_1555);
        }
        list_1556.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1558 = writer.prefix("SecurityGroupId");
    if let Some(var_1559) = &input.security_group_ids {
        let mut list_1561 = scope_1558.start_list(true, Some("item"));
        for item_1560 in var_1559 {
            #[allow(unused_mut)]
            let mut entry_1562 = list_1561.entry();
            entry_1562.string(item_1560);
        }
        list_1561.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1563 = writer.prefix("IpAddressType");
    if let Some(var_1564) = &input.ip_address_type {
        scope_1563.string(var_1564.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1565 = writer.prefix("DnsOptions");
    if let Some(var_1566) = &input.dns_options {
        crate::query_ser::serialize_structure_crate_model_dns_options_specification(
            scope_1565, var_1566,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1567 = writer.prefix("ClientToken");
    if let Some(var_1568) = &input.client_token {
        scope_1567.string(var_1568);
    }
    #[allow(unused_mut)]
    let mut scope_1569 = writer.prefix("PrivateDnsEnabled");
    if let Some(var_1570) = &input.private_dns_enabled {
        scope_1569.boolean(*var_1570);
    }
    #[allow(unused_mut)]
    let mut scope_1571 = writer.prefix("TagSpecification");
    if let Some(var_1572) = &input.tag_specifications {
        let mut list_1574 = scope_1571.start_list(true, Some("item"));
        for item_1573 in var_1572 {
            #[allow(unused_mut)]
            let mut entry_1575 = list_1574.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1575, item_1573,
            )?;
        }
        list_1574.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_endpoint_connection_notification(
    input: &crate::input::CreateVpcEndpointConnectionNotificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateVpcEndpointConnectionNotification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1576 = writer.prefix("DryRun");
    if let Some(var_1577) = &input.dry_run {
        scope_1576.boolean(*var_1577);
    }
    #[allow(unused_mut)]
    let mut scope_1578 = writer.prefix("ServiceId");
    if let Some(var_1579) = &input.service_id {
        scope_1578.string(var_1579);
    }
    #[allow(unused_mut)]
    let mut scope_1580 = writer.prefix("VpcEndpointId");
    if let Some(var_1581) = &input.vpc_endpoint_id {
        scope_1580.string(var_1581);
    }
    #[allow(unused_mut)]
    let mut scope_1582 = writer.prefix("ConnectionNotificationArn");
    if let Some(var_1583) = &input.connection_notification_arn {
        scope_1582.string(var_1583);
    }
    #[allow(unused_mut)]
    let mut scope_1584 = writer.prefix("ConnectionEvents");
    if let Some(var_1585) = &input.connection_events {
        let mut list_1587 = scope_1584.start_list(true, Some("item"));
        for item_1586 in var_1585 {
            #[allow(unused_mut)]
            let mut entry_1588 = list_1587.entry();
            entry_1588.string(item_1586);
        }
        list_1587.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1589 = writer.prefix("ClientToken");
    if let Some(var_1590) = &input.client_token {
        scope_1589.string(var_1590);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_endpoint_service_configuration(
    input: &crate::input::CreateVpcEndpointServiceConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateVpcEndpointServiceConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1591 = writer.prefix("DryRun");
    if let Some(var_1592) = &input.dry_run {
        scope_1591.boolean(*var_1592);
    }
    #[allow(unused_mut)]
    let mut scope_1593 = writer.prefix("AcceptanceRequired");
    if let Some(var_1594) = &input.acceptance_required {
        scope_1593.boolean(*var_1594);
    }
    #[allow(unused_mut)]
    let mut scope_1595 = writer.prefix("PrivateDnsName");
    if let Some(var_1596) = &input.private_dns_name {
        scope_1595.string(var_1596);
    }
    #[allow(unused_mut)]
    let mut scope_1597 = writer.prefix("NetworkLoadBalancerArn");
    if let Some(var_1598) = &input.network_load_balancer_arns {
        let mut list_1600 = scope_1597.start_list(true, Some("item"));
        for item_1599 in var_1598 {
            #[allow(unused_mut)]
            let mut entry_1601 = list_1600.entry();
            entry_1601.string(item_1599);
        }
        list_1600.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1602 = writer.prefix("GatewayLoadBalancerArn");
    if let Some(var_1603) = &input.gateway_load_balancer_arns {
        let mut list_1605 = scope_1602.start_list(true, Some("item"));
        for item_1604 in var_1603 {
            #[allow(unused_mut)]
            let mut entry_1606 = list_1605.entry();
            entry_1606.string(item_1604);
        }
        list_1605.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1607 = writer.prefix("SupportedIpAddressType");
    if let Some(var_1608) = &input.supported_ip_address_types {
        let mut list_1610 = scope_1607.start_list(true, Some("item"));
        for item_1609 in var_1608 {
            #[allow(unused_mut)]
            let mut entry_1611 = list_1610.entry();
            entry_1611.string(item_1609);
        }
        list_1610.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1612 = writer.prefix("ClientToken");
    if let Some(var_1613) = &input.client_token {
        scope_1612.string(var_1613);
    }
    #[allow(unused_mut)]
    let mut scope_1614 = writer.prefix("TagSpecification");
    if let Some(var_1615) = &input.tag_specifications {
        let mut list_1617 = scope_1614.start_list(true, Some("item"));
        for item_1616 in var_1615 {
            #[allow(unused_mut)]
            let mut entry_1618 = list_1617.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1618, item_1616,
            )?;
        }
        list_1617.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_peering_connection(
    input: &crate::input::CreateVpcPeeringConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1619 = writer.prefix("DryRun");
    if let Some(var_1620) = &input.dry_run {
        scope_1619.boolean(*var_1620);
    }
    #[allow(unused_mut)]
    let mut scope_1621 = writer.prefix("PeerOwnerId");
    if let Some(var_1622) = &input.peer_owner_id {
        scope_1621.string(var_1622);
    }
    #[allow(unused_mut)]
    let mut scope_1623 = writer.prefix("PeerVpcId");
    if let Some(var_1624) = &input.peer_vpc_id {
        scope_1623.string(var_1624);
    }
    #[allow(unused_mut)]
    let mut scope_1625 = writer.prefix("VpcId");
    if let Some(var_1626) = &input.vpc_id {
        scope_1625.string(var_1626);
    }
    #[allow(unused_mut)]
    let mut scope_1627 = writer.prefix("PeerRegion");
    if let Some(var_1628) = &input.peer_region {
        scope_1627.string(var_1628);
    }
    #[allow(unused_mut)]
    let mut scope_1629 = writer.prefix("TagSpecification");
    if let Some(var_1630) = &input.tag_specifications {
        let mut list_1632 = scope_1629.start_list(true, Some("item"));
        for item_1631 in var_1630 {
            #[allow(unused_mut)]
            let mut entry_1633 = list_1632.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1633, item_1631,
            )?;
        }
        list_1632.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpn_connection(
    input: &crate::input::CreateVpnConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1634 = writer.prefix("CustomerGatewayId");
    if let Some(var_1635) = &input.customer_gateway_id {
        scope_1634.string(var_1635);
    }
    #[allow(unused_mut)]
    let mut scope_1636 = writer.prefix("Type");
    if let Some(var_1637) = &input.r#type {
        scope_1636.string(var_1637);
    }
    #[allow(unused_mut)]
    let mut scope_1638 = writer.prefix("VpnGatewayId");
    if let Some(var_1639) = &input.vpn_gateway_id {
        scope_1638.string(var_1639);
    }
    #[allow(unused_mut)]
    let mut scope_1640 = writer.prefix("TransitGatewayId");
    if let Some(var_1641) = &input.transit_gateway_id {
        scope_1640.string(var_1641);
    }
    #[allow(unused_mut)]
    let mut scope_1642 = writer.prefix("DryRun");
    if let Some(var_1643) = &input.dry_run {
        scope_1642.boolean(*var_1643);
    }
    #[allow(unused_mut)]
    let mut scope_1644 = writer.prefix("Options");
    if let Some(var_1645) = &input.options {
        crate::query_ser::serialize_structure_crate_model_vpn_connection_options_specification(
            scope_1644, var_1645,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1646 = writer.prefix("TagSpecification");
    if let Some(var_1647) = &input.tag_specifications {
        let mut list_1649 = scope_1646.start_list(true, Some("item"));
        for item_1648 in var_1647 {
            #[allow(unused_mut)]
            let mut entry_1650 = list_1649.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1650, item_1648,
            )?;
        }
        list_1649.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpn_connection_route(
    input: &crate::input::CreateVpnConnectionRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateVpnConnectionRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1651 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1652) = &input.destination_cidr_block {
        scope_1651.string(var_1652);
    }
    #[allow(unused_mut)]
    let mut scope_1653 = writer.prefix("VpnConnectionId");
    if let Some(var_1654) = &input.vpn_connection_id {
        scope_1653.string(var_1654);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpn_gateway(
    input: &crate::input::CreateVpnGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1655 = writer.prefix("AvailabilityZone");
    if let Some(var_1656) = &input.availability_zone {
        scope_1655.string(var_1656);
    }
    #[allow(unused_mut)]
    let mut scope_1657 = writer.prefix("Type");
    if let Some(var_1658) = &input.r#type {
        scope_1657.string(var_1658.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1659 = writer.prefix("TagSpecification");
    if let Some(var_1660) = &input.tag_specifications {
        let mut list_1662 = scope_1659.start_list(true, Some("item"));
        for item_1661 in var_1660 {
            #[allow(unused_mut)]
            let mut entry_1663 = list_1662.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1663, item_1661,
            )?;
        }
        list_1662.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1664 = writer.prefix("AmazonSideAsn");
    if let Some(var_1665) = &input.amazon_side_asn {
        scope_1664.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1665).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1666 = writer.prefix("DryRun");
    if let Some(var_1667) = &input.dry_run {
        scope_1666.boolean(*var_1667);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_carrier_gateway(
    input: &crate::input::DeleteCarrierGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteCarrierGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1668 = writer.prefix("CarrierGatewayId");
    if let Some(var_1669) = &input.carrier_gateway_id {
        scope_1668.string(var_1669);
    }
    #[allow(unused_mut)]
    let mut scope_1670 = writer.prefix("DryRun");
    if let Some(var_1671) = &input.dry_run {
        scope_1670.boolean(*var_1671);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_client_vpn_endpoint(
    input: &crate::input::DeleteClientVpnEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1672 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1673) = &input.client_vpn_endpoint_id {
        scope_1672.string(var_1673);
    }
    #[allow(unused_mut)]
    let mut scope_1674 = writer.prefix("DryRun");
    if let Some(var_1675) = &input.dry_run {
        scope_1674.boolean(*var_1675);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_client_vpn_route(
    input: &crate::input::DeleteClientVpnRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteClientVpnRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1676 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1677) = &input.client_vpn_endpoint_id {
        scope_1676.string(var_1677);
    }
    #[allow(unused_mut)]
    let mut scope_1678 = writer.prefix("TargetVpcSubnetId");
    if let Some(var_1679) = &input.target_vpc_subnet_id {
        scope_1678.string(var_1679);
    }
    #[allow(unused_mut)]
    let mut scope_1680 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1681) = &input.destination_cidr_block {
        scope_1680.string(var_1681);
    }
    #[allow(unused_mut)]
    let mut scope_1682 = writer.prefix("DryRun");
    if let Some(var_1683) = &input.dry_run {
        scope_1682.boolean(*var_1683);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_customer_gateway(
    input: &crate::input::DeleteCustomerGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteCustomerGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1684 = writer.prefix("CustomerGatewayId");
    if let Some(var_1685) = &input.customer_gateway_id {
        scope_1684.string(var_1685);
    }
    #[allow(unused_mut)]
    let mut scope_1686 = writer.prefix("DryRun");
    if let Some(var_1687) = &input.dry_run {
        scope_1686.boolean(*var_1687);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_dhcp_options(
    input: &crate::input::DeleteDhcpOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1688 = writer.prefix("DhcpOptionsId");
    if let Some(var_1689) = &input.dhcp_options_id {
        scope_1688.string(var_1689);
    }
    #[allow(unused_mut)]
    let mut scope_1690 = writer.prefix("DryRun");
    if let Some(var_1691) = &input.dry_run {
        scope_1690.boolean(*var_1691);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_egress_only_internet_gateway(
    input: &crate::input::DeleteEgressOnlyInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteEgressOnlyInternetGateway",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1692 = writer.prefix("DryRun");
    if let Some(var_1693) = &input.dry_run {
        scope_1692.boolean(*var_1693);
    }
    #[allow(unused_mut)]
    let mut scope_1694 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_1695) = &input.egress_only_internet_gateway_id {
        scope_1694.string(var_1695);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_fleets(
    input: &crate::input::DeleteFleetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteFleets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1696 = writer.prefix("DryRun");
    if let Some(var_1697) = &input.dry_run {
        scope_1696.boolean(*var_1697);
    }
    #[allow(unused_mut)]
    let mut scope_1698 = writer.prefix("FleetId");
    if let Some(var_1699) = &input.fleet_ids {
        let mut list_1701 = scope_1698.start_list(true, None);
        for item_1700 in var_1699 {
            #[allow(unused_mut)]
            let mut entry_1702 = list_1701.entry();
            entry_1702.string(item_1700);
        }
        list_1701.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1703 = writer.prefix("TerminateInstances");
    if let Some(var_1704) = &input.terminate_instances {
        scope_1703.boolean(*var_1704);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_flow_logs(
    input: &crate::input::DeleteFlowLogsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1705 = writer.prefix("DryRun");
    if let Some(var_1706) = &input.dry_run {
        scope_1705.boolean(*var_1706);
    }
    #[allow(unused_mut)]
    let mut scope_1707 = writer.prefix("FlowLogId");
    if let Some(var_1708) = &input.flow_log_ids {
        let mut list_1710 = scope_1707.start_list(true, Some("item"));
        for item_1709 in var_1708 {
            #[allow(unused_mut)]
            let mut entry_1711 = list_1710.entry();
            entry_1711.string(item_1709);
        }
        list_1710.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_fpga_image(
    input: &crate::input::DeleteFpgaImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1712 = writer.prefix("DryRun");
    if let Some(var_1713) = &input.dry_run {
        scope_1712.boolean(*var_1713);
    }
    #[allow(unused_mut)]
    let mut scope_1714 = writer.prefix("FpgaImageId");
    if let Some(var_1715) = &input.fpga_image_id {
        scope_1714.string(var_1715);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_instance_event_window(
    input: &crate::input::DeleteInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1716 = writer.prefix("DryRun");
    if let Some(var_1717) = &input.dry_run {
        scope_1716.boolean(*var_1717);
    }
    #[allow(unused_mut)]
    let mut scope_1718 = writer.prefix("ForceDelete");
    if let Some(var_1719) = &input.force_delete {
        scope_1718.boolean(*var_1719);
    }
    #[allow(unused_mut)]
    let mut scope_1720 = writer.prefix("InstanceEventWindowId");
    if let Some(var_1721) = &input.instance_event_window_id {
        scope_1720.string(var_1721);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_internet_gateway(
    input: &crate::input::DeleteInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1722 = writer.prefix("DryRun");
    if let Some(var_1723) = &input.dry_run {
        scope_1722.boolean(*var_1723);
    }
    #[allow(unused_mut)]
    let mut scope_1724 = writer.prefix("InternetGatewayId");
    if let Some(var_1725) = &input.internet_gateway_id {
        scope_1724.string(var_1725);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_ipam(
    input: &crate::input::DeleteIpamInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteIpam", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1726 = writer.prefix("DryRun");
    if let Some(var_1727) = &input.dry_run {
        scope_1726.boolean(*var_1727);
    }
    #[allow(unused_mut)]
    let mut scope_1728 = writer.prefix("IpamId");
    if let Some(var_1729) = &input.ipam_id {
        scope_1728.string(var_1729);
    }
    #[allow(unused_mut)]
    let mut scope_1730 = writer.prefix("Cascade");
    if let Some(var_1731) = &input.cascade {
        scope_1730.boolean(*var_1731);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_ipam_pool(
    input: &crate::input::DeleteIpamPoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteIpamPool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1732 = writer.prefix("DryRun");
    if let Some(var_1733) = &input.dry_run {
        scope_1732.boolean(*var_1733);
    }
    #[allow(unused_mut)]
    let mut scope_1734 = writer.prefix("IpamPoolId");
    if let Some(var_1735) = &input.ipam_pool_id {
        scope_1734.string(var_1735);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_ipam_scope(
    input: &crate::input::DeleteIpamScopeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteIpamScope", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1736 = writer.prefix("DryRun");
    if let Some(var_1737) = &input.dry_run {
        scope_1736.boolean(*var_1737);
    }
    #[allow(unused_mut)]
    let mut scope_1738 = writer.prefix("IpamScopeId");
    if let Some(var_1739) = &input.ipam_scope_id {
        scope_1738.string(var_1739);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_key_pair(
    input: &crate::input::DeleteKeyPairInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1740 = writer.prefix("KeyName");
    if let Some(var_1741) = &input.key_name {
        scope_1740.string(var_1741);
    }
    #[allow(unused_mut)]
    let mut scope_1742 = writer.prefix("KeyPairId");
    if let Some(var_1743) = &input.key_pair_id {
        scope_1742.string(var_1743);
    }
    #[allow(unused_mut)]
    let mut scope_1744 = writer.prefix("DryRun");
    if let Some(var_1745) = &input.dry_run {
        scope_1744.boolean(*var_1745);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_launch_template(
    input: &crate::input::DeleteLaunchTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1746 = writer.prefix("DryRun");
    if let Some(var_1747) = &input.dry_run {
        scope_1746.boolean(*var_1747);
    }
    #[allow(unused_mut)]
    let mut scope_1748 = writer.prefix("LaunchTemplateId");
    if let Some(var_1749) = &input.launch_template_id {
        scope_1748.string(var_1749);
    }
    #[allow(unused_mut)]
    let mut scope_1750 = writer.prefix("LaunchTemplateName");
    if let Some(var_1751) = &input.launch_template_name {
        scope_1750.string(var_1751);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_launch_template_versions(
    input: &crate::input::DeleteLaunchTemplateVersionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteLaunchTemplateVersions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1752 = writer.prefix("DryRun");
    if let Some(var_1753) = &input.dry_run {
        scope_1752.boolean(*var_1753);
    }
    #[allow(unused_mut)]
    let mut scope_1754 = writer.prefix("LaunchTemplateId");
    if let Some(var_1755) = &input.launch_template_id {
        scope_1754.string(var_1755);
    }
    #[allow(unused_mut)]
    let mut scope_1756 = writer.prefix("LaunchTemplateName");
    if let Some(var_1757) = &input.launch_template_name {
        scope_1756.string(var_1757);
    }
    #[allow(unused_mut)]
    let mut scope_1758 = writer.prefix("LaunchTemplateVersion");
    if let Some(var_1759) = &input.versions {
        let mut list_1761 = scope_1758.start_list(true, Some("item"));
        for item_1760 in var_1759 {
            #[allow(unused_mut)]
            let mut entry_1762 = list_1761.entry();
            entry_1762.string(item_1760);
        }
        list_1761.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_local_gateway_route(
    input: &crate::input::DeleteLocalGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteLocalGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1763 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1764) = &input.destination_cidr_block {
        scope_1763.string(var_1764);
    }
    #[allow(unused_mut)]
    let mut scope_1765 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_1766) = &input.local_gateway_route_table_id {
        scope_1765.string(var_1766);
    }
    #[allow(unused_mut)]
    let mut scope_1767 = writer.prefix("DryRun");
    if let Some(var_1768) = &input.dry_run {
        scope_1767.boolean(*var_1768);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_local_gateway_route_table_vpc_association(
    input: &crate::input::DeleteLocalGatewayRouteTableVpcAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteLocalGatewayRouteTableVpcAssociation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1769 = writer.prefix("LocalGatewayRouteTableVpcAssociationId");
    if let Some(var_1770) = &input.local_gateway_route_table_vpc_association_id {
        scope_1769.string(var_1770);
    }
    #[allow(unused_mut)]
    let mut scope_1771 = writer.prefix("DryRun");
    if let Some(var_1772) = &input.dry_run {
        scope_1771.boolean(*var_1772);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_managed_prefix_list(
    input: &crate::input::DeleteManagedPrefixListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1773 = writer.prefix("DryRun");
    if let Some(var_1774) = &input.dry_run {
        scope_1773.boolean(*var_1774);
    }
    #[allow(unused_mut)]
    let mut scope_1775 = writer.prefix("PrefixListId");
    if let Some(var_1776) = &input.prefix_list_id {
        scope_1775.string(var_1776);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_nat_gateway(
    input: &crate::input::DeleteNatGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteNatGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1777 = writer.prefix("DryRun");
    if let Some(var_1778) = &input.dry_run {
        scope_1777.boolean(*var_1778);
    }
    #[allow(unused_mut)]
    let mut scope_1779 = writer.prefix("NatGatewayId");
    if let Some(var_1780) = &input.nat_gateway_id {
        scope_1779.string(var_1780);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_acl(
    input: &crate::input::DeleteNetworkAclInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkAcl", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1781 = writer.prefix("DryRun");
    if let Some(var_1782) = &input.dry_run {
        scope_1781.boolean(*var_1782);
    }
    #[allow(unused_mut)]
    let mut scope_1783 = writer.prefix("NetworkAclId");
    if let Some(var_1784) = &input.network_acl_id {
        scope_1783.string(var_1784);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_acl_entry(
    input: &crate::input::DeleteNetworkAclEntryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1785 = writer.prefix("DryRun");
    if let Some(var_1786) = &input.dry_run {
        scope_1785.boolean(*var_1786);
    }
    #[allow(unused_mut)]
    let mut scope_1787 = writer.prefix("Egress");
    if let Some(var_1788) = &input.egress {
        scope_1787.boolean(*var_1788);
    }
    #[allow(unused_mut)]
    let mut scope_1789 = writer.prefix("NetworkAclId");
    if let Some(var_1790) = &input.network_acl_id {
        scope_1789.string(var_1790);
    }
    #[allow(unused_mut)]
    let mut scope_1791 = writer.prefix("RuleNumber");
    if let Some(var_1792) = &input.rule_number {
        scope_1791.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1792).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_access_scope(
    input: &crate::input::DeleteNetworkInsightsAccessScopeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteNetworkInsightsAccessScope",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1793 = writer.prefix("DryRun");
    if let Some(var_1794) = &input.dry_run {
        scope_1793.boolean(*var_1794);
    }
    #[allow(unused_mut)]
    let mut scope_1795 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_1796) = &input.network_insights_access_scope_id {
        scope_1795.string(var_1796);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_access_scope_analysis(
    input: &crate::input::DeleteNetworkInsightsAccessScopeAnalysisInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteNetworkInsightsAccessScopeAnalysis",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1797 = writer.prefix("NetworkInsightsAccessScopeAnalysisId");
    if let Some(var_1798) = &input.network_insights_access_scope_analysis_id {
        scope_1797.string(var_1798);
    }
    #[allow(unused_mut)]
    let mut scope_1799 = writer.prefix("DryRun");
    if let Some(var_1800) = &input.dry_run {
        scope_1799.boolean(*var_1800);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_analysis(
    input: &crate::input::DeleteNetworkInsightsAnalysisInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInsightsAnalysis", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1801 = writer.prefix("DryRun");
    if let Some(var_1802) = &input.dry_run {
        scope_1801.boolean(*var_1802);
    }
    #[allow(unused_mut)]
    let mut scope_1803 = writer.prefix("NetworkInsightsAnalysisId");
    if let Some(var_1804) = &input.network_insights_analysis_id {
        scope_1803.string(var_1804);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_path(
    input: &crate::input::DeleteNetworkInsightsPathInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInsightsPath", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1805 = writer.prefix("DryRun");
    if let Some(var_1806) = &input.dry_run {
        scope_1805.boolean(*var_1806);
    }
    #[allow(unused_mut)]
    let mut scope_1807 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_1808) = &input.network_insights_path_id {
        scope_1807.string(var_1808);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_interface(
    input: &crate::input::DeleteNetworkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1809 = writer.prefix("DryRun");
    if let Some(var_1810) = &input.dry_run {
        scope_1809.boolean(*var_1810);
    }
    #[allow(unused_mut)]
    let mut scope_1811 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1812) = &input.network_interface_id {
        scope_1811.string(var_1812);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_interface_permission(
    input: &crate::input::DeleteNetworkInterfacePermissionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteNetworkInterfacePermission",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1813 = writer.prefix("NetworkInterfacePermissionId");
    if let Some(var_1814) = &input.network_interface_permission_id {
        scope_1813.string(var_1814);
    }
    #[allow(unused_mut)]
    let mut scope_1815 = writer.prefix("Force");
    if let Some(var_1816) = &input.force {
        scope_1815.boolean(*var_1816);
    }
    #[allow(unused_mut)]
    let mut scope_1817 = writer.prefix("DryRun");
    if let Some(var_1818) = &input.dry_run {
        scope_1817.boolean(*var_1818);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_placement_group(
    input: &crate::input::DeletePlacementGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeletePlacementGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1819 = writer.prefix("DryRun");
    if let Some(var_1820) = &input.dry_run {
        scope_1819.boolean(*var_1820);
    }
    #[allow(unused_mut)]
    let mut scope_1821 = writer.prefix("GroupName");
    if let Some(var_1822) = &input.group_name {
        scope_1821.string(var_1822);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_public_ipv4_pool(
    input: &crate::input::DeletePublicIpv4PoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeletePublicIpv4Pool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1823 = writer.prefix("DryRun");
    if let Some(var_1824) = &input.dry_run {
        scope_1823.boolean(*var_1824);
    }
    #[allow(unused_mut)]
    let mut scope_1825 = writer.prefix("PoolId");
    if let Some(var_1826) = &input.pool_id {
        scope_1825.string(var_1826);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_queued_reserved_instances(
    input: &crate::input::DeleteQueuedReservedInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteQueuedReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1827 = writer.prefix("DryRun");
    if let Some(var_1828) = &input.dry_run {
        scope_1827.boolean(*var_1828);
    }
    #[allow(unused_mut)]
    let mut scope_1829 = writer.prefix("ReservedInstancesId");
    if let Some(var_1830) = &input.reserved_instances_ids {
        let mut list_1832 = scope_1829.start_list(true, Some("item"));
        for item_1831 in var_1830 {
            #[allow(unused_mut)]
            let mut entry_1833 = list_1832.entry();
            entry_1833.string(item_1831);
        }
        list_1832.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_route(
    input: &crate::input::DeleteRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1834 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1835) = &input.destination_cidr_block {
        scope_1834.string(var_1835);
    }
    #[allow(unused_mut)]
    let mut scope_1836 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_1837) = &input.destination_ipv6_cidr_block {
        scope_1836.string(var_1837);
    }
    #[allow(unused_mut)]
    let mut scope_1838 = writer.prefix("DestinationPrefixListId");
    if let Some(var_1839) = &input.destination_prefix_list_id {
        scope_1838.string(var_1839);
    }
    #[allow(unused_mut)]
    let mut scope_1840 = writer.prefix("DryRun");
    if let Some(var_1841) = &input.dry_run {
        scope_1840.boolean(*var_1841);
    }
    #[allow(unused_mut)]
    let mut scope_1842 = writer.prefix("RouteTableId");
    if let Some(var_1843) = &input.route_table_id {
        scope_1842.string(var_1843);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_route_table(
    input: &crate::input::DeleteRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1844 = writer.prefix("DryRun");
    if let Some(var_1845) = &input.dry_run {
        scope_1844.boolean(*var_1845);
    }
    #[allow(unused_mut)]
    let mut scope_1846 = writer.prefix("RouteTableId");
    if let Some(var_1847) = &input.route_table_id {
        scope_1846.string(var_1847);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_security_group(
    input: &crate::input::DeleteSecurityGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteSecurityGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1848 = writer.prefix("GroupId");
    if let Some(var_1849) = &input.group_id {
        scope_1848.string(var_1849);
    }
    #[allow(unused_mut)]
    let mut scope_1850 = writer.prefix("GroupName");
    if let Some(var_1851) = &input.group_name {
        scope_1850.string(var_1851);
    }
    #[allow(unused_mut)]
    let mut scope_1852 = writer.prefix("DryRun");
    if let Some(var_1853) = &input.dry_run {
        scope_1852.boolean(*var_1853);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_snapshot(
    input: &crate::input::DeleteSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1854 = writer.prefix("SnapshotId");
    if let Some(var_1855) = &input.snapshot_id {
        scope_1854.string(var_1855);
    }
    #[allow(unused_mut)]
    let mut scope_1856 = writer.prefix("DryRun");
    if let Some(var_1857) = &input.dry_run {
        scope_1856.boolean(*var_1857);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_spot_datafeed_subscription(
    input: &crate::input::DeleteSpotDatafeedSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteSpotDatafeedSubscription",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1858 = writer.prefix("DryRun");
    if let Some(var_1859) = &input.dry_run {
        scope_1858.boolean(*var_1859);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_subnet(
    input: &crate::input::DeleteSubnetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1860 = writer.prefix("SubnetId");
    if let Some(var_1861) = &input.subnet_id {
        scope_1860.string(var_1861);
    }
    #[allow(unused_mut)]
    let mut scope_1862 = writer.prefix("DryRun");
    if let Some(var_1863) = &input.dry_run {
        scope_1862.boolean(*var_1863);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_subnet_cidr_reservation(
    input: &crate::input::DeleteSubnetCidrReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteSubnetCidrReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1864 = writer.prefix("SubnetCidrReservationId");
    if let Some(var_1865) = &input.subnet_cidr_reservation_id {
        scope_1864.string(var_1865);
    }
    #[allow(unused_mut)]
    let mut scope_1866 = writer.prefix("DryRun");
    if let Some(var_1867) = &input.dry_run {
        scope_1866.boolean(*var_1867);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_tags(
    input: &crate::input::DeleteTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1868 = writer.prefix("DryRun");
    if let Some(var_1869) = &input.dry_run {
        scope_1868.boolean(*var_1869);
    }
    #[allow(unused_mut)]
    let mut scope_1870 = writer.prefix("ResourceId");
    if let Some(var_1871) = &input.resources {
        let mut list_1873 = scope_1870.start_list(true, None);
        for item_1872 in var_1871 {
            #[allow(unused_mut)]
            let mut entry_1874 = list_1873.entry();
            entry_1874.string(item_1872);
        }
        list_1873.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1875 = writer.prefix("Tag");
    if let Some(var_1876) = &input.tags {
        let mut list_1878 = scope_1875.start_list(true, Some("item"));
        for item_1877 in var_1876 {
            #[allow(unused_mut)]
            let mut entry_1879 = list_1878.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1879, item_1877)?;
        }
        list_1878.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_filter(
    input: &crate::input::DeleteTrafficMirrorFilterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorFilter", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1880 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1881) = &input.traffic_mirror_filter_id {
        scope_1880.string(var_1881);
    }
    #[allow(unused_mut)]
    let mut scope_1882 = writer.prefix("DryRun");
    if let Some(var_1883) = &input.dry_run {
        scope_1882.boolean(*var_1883);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_filter_rule(
    input: &crate::input::DeleteTrafficMirrorFilterRuleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1884 = writer.prefix("TrafficMirrorFilterRuleId");
    if let Some(var_1885) = &input.traffic_mirror_filter_rule_id {
        scope_1884.string(var_1885);
    }
    #[allow(unused_mut)]
    let mut scope_1886 = writer.prefix("DryRun");
    if let Some(var_1887) = &input.dry_run {
        scope_1886.boolean(*var_1887);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_session(
    input: &crate::input::DeleteTrafficMirrorSessionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1888 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_1889) = &input.traffic_mirror_session_id {
        scope_1888.string(var_1889);
    }
    #[allow(unused_mut)]
    let mut scope_1890 = writer.prefix("DryRun");
    if let Some(var_1891) = &input.dry_run {
        scope_1890.boolean(*var_1891);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_target(
    input: &crate::input::DeleteTrafficMirrorTargetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorTarget", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1892 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_1893) = &input.traffic_mirror_target_id {
        scope_1892.string(var_1893);
    }
    #[allow(unused_mut)]
    let mut scope_1894 = writer.prefix("DryRun");
    if let Some(var_1895) = &input.dry_run {
        scope_1894.boolean(*var_1895);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway(
    input: &crate::input::DeleteTransitGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1896 = writer.prefix("TransitGatewayId");
    if let Some(var_1897) = &input.transit_gateway_id {
        scope_1896.string(var_1897);
    }
    #[allow(unused_mut)]
    let mut scope_1898 = writer.prefix("DryRun");
    if let Some(var_1899) = &input.dry_run {
        scope_1898.boolean(*var_1899);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_connect(
    input: &crate::input::DeleteTransitGatewayConnectInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayConnect", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1900 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1901) = &input.transit_gateway_attachment_id {
        scope_1900.string(var_1901);
    }
    #[allow(unused_mut)]
    let mut scope_1902 = writer.prefix("DryRun");
    if let Some(var_1903) = &input.dry_run {
        scope_1902.boolean(*var_1903);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_connect_peer(
    input: &crate::input::DeleteTransitGatewayConnectPeerInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayConnectPeer",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1904 = writer.prefix("TransitGatewayConnectPeerId");
    if let Some(var_1905) = &input.transit_gateway_connect_peer_id {
        scope_1904.string(var_1905);
    }
    #[allow(unused_mut)]
    let mut scope_1906 = writer.prefix("DryRun");
    if let Some(var_1907) = &input.dry_run {
        scope_1906.boolean(*var_1907);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_multicast_domain(
    input: &crate::input::DeleteTransitGatewayMulticastDomainInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1908 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_1909) = &input.transit_gateway_multicast_domain_id {
        scope_1908.string(var_1909);
    }
    #[allow(unused_mut)]
    let mut scope_1910 = writer.prefix("DryRun");
    if let Some(var_1911) = &input.dry_run {
        scope_1910.boolean(*var_1911);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_peering_attachment(
    input: &crate::input::DeleteTransitGatewayPeeringAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1912 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1913) = &input.transit_gateway_attachment_id {
        scope_1912.string(var_1913);
    }
    #[allow(unused_mut)]
    let mut scope_1914 = writer.prefix("DryRun");
    if let Some(var_1915) = &input.dry_run {
        scope_1914.boolean(*var_1915);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_prefix_list_reference(
    input: &crate::input::DeleteTransitGatewayPrefixListReferenceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayPrefixListReference",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1916 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1917) = &input.transit_gateway_route_table_id {
        scope_1916.string(var_1917);
    }
    #[allow(unused_mut)]
    let mut scope_1918 = writer.prefix("PrefixListId");
    if let Some(var_1919) = &input.prefix_list_id {
        scope_1918.string(var_1919);
    }
    #[allow(unused_mut)]
    let mut scope_1920 = writer.prefix("DryRun");
    if let Some(var_1921) = &input.dry_run {
        scope_1920.boolean(*var_1921);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_route(
    input: &crate::input::DeleteTransitGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1922 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1923) = &input.transit_gateway_route_table_id {
        scope_1922.string(var_1923);
    }
    #[allow(unused_mut)]
    let mut scope_1924 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1925) = &input.destination_cidr_block {
        scope_1924.string(var_1925);
    }
    #[allow(unused_mut)]
    let mut scope_1926 = writer.prefix("DryRun");
    if let Some(var_1927) = &input.dry_run {
        scope_1926.boolean(*var_1927);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_route_table(
    input: &crate::input::DeleteTransitGatewayRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1928 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1929) = &input.transit_gateway_route_table_id {
        scope_1928.string(var_1929);
    }
    #[allow(unused_mut)]
    let mut scope_1930 = writer.prefix("DryRun");
    if let Some(var_1931) = &input.dry_run {
        scope_1930.boolean(*var_1931);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_vpc_attachment(
    input: &crate::input::DeleteTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1932 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1933) = &input.transit_gateway_attachment_id {
        scope_1932.string(var_1933);
    }
    #[allow(unused_mut)]
    let mut scope_1934 = writer.prefix("DryRun");
    if let Some(var_1935) = &input.dry_run {
        scope_1934.boolean(*var_1935);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_volume(
    input: &crate::input::DeleteVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1936 = writer.prefix("VolumeId");
    if let Some(var_1937) = &input.volume_id {
        scope_1936.string(var_1937);
    }
    #[allow(unused_mut)]
    let mut scope_1938 = writer.prefix("DryRun");
    if let Some(var_1939) = &input.dry_run {
        scope_1938.boolean(*var_1939);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc(
    input: &crate::input::DeleteVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1940 = writer.prefix("VpcId");
    if let Some(var_1941) = &input.vpc_id {
        scope_1940.string(var_1941);
    }
    #[allow(unused_mut)]
    let mut scope_1942 = writer.prefix("DryRun");
    if let Some(var_1943) = &input.dry_run {
        scope_1942.boolean(*var_1943);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_endpoint_connection_notifications(
    input: &crate::input::DeleteVpcEndpointConnectionNotificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteVpcEndpointConnectionNotifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1944 = writer.prefix("DryRun");
    if let Some(var_1945) = &input.dry_run {
        scope_1944.boolean(*var_1945);
    }
    #[allow(unused_mut)]
    let mut scope_1946 = writer.prefix("ConnectionNotificationId");
    if let Some(var_1947) = &input.connection_notification_ids {
        let mut list_1949 = scope_1946.start_list(true, Some("item"));
        for item_1948 in var_1947 {
            #[allow(unused_mut)]
            let mut entry_1950 = list_1949.entry();
            entry_1950.string(item_1948);
        }
        list_1949.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_endpoints(
    input: &crate::input::DeleteVpcEndpointsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpcEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1951 = writer.prefix("DryRun");
    if let Some(var_1952) = &input.dry_run {
        scope_1951.boolean(*var_1952);
    }
    #[allow(unused_mut)]
    let mut scope_1953 = writer.prefix("VpcEndpointId");
    if let Some(var_1954) = &input.vpc_endpoint_ids {
        let mut list_1956 = scope_1953.start_list(true, Some("item"));
        for item_1955 in var_1954 {
            #[allow(unused_mut)]
            let mut entry_1957 = list_1956.entry();
            entry_1957.string(item_1955);
        }
        list_1956.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_endpoint_service_configurations(
    input: &crate::input::DeleteVpcEndpointServiceConfigurationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteVpcEndpointServiceConfigurations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1958 = writer.prefix("DryRun");
    if let Some(var_1959) = &input.dry_run {
        scope_1958.boolean(*var_1959);
    }
    #[allow(unused_mut)]
    let mut scope_1960 = writer.prefix("ServiceId");
    if let Some(var_1961) = &input.service_ids {
        let mut list_1963 = scope_1960.start_list(true, Some("item"));
        for item_1962 in var_1961 {
            #[allow(unused_mut)]
            let mut entry_1964 = list_1963.entry();
            entry_1964.string(item_1962);
        }
        list_1963.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_peering_connection(
    input: &crate::input::DeleteVpcPeeringConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1965 = writer.prefix("DryRun");
    if let Some(var_1966) = &input.dry_run {
        scope_1965.boolean(*var_1966);
    }
    #[allow(unused_mut)]
    let mut scope_1967 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_1968) = &input.vpc_peering_connection_id {
        scope_1967.string(var_1968);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpn_connection(
    input: &crate::input::DeleteVpnConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1969 = writer.prefix("VpnConnectionId");
    if let Some(var_1970) = &input.vpn_connection_id {
        scope_1969.string(var_1970);
    }
    #[allow(unused_mut)]
    let mut scope_1971 = writer.prefix("DryRun");
    if let Some(var_1972) = &input.dry_run {
        scope_1971.boolean(*var_1972);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpn_connection_route(
    input: &crate::input::DeleteVpnConnectionRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpnConnectionRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1973 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1974) = &input.destination_cidr_block {
        scope_1973.string(var_1974);
    }
    #[allow(unused_mut)]
    let mut scope_1975 = writer.prefix("VpnConnectionId");
    if let Some(var_1976) = &input.vpn_connection_id {
        scope_1975.string(var_1976);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpn_gateway(
    input: &crate::input::DeleteVpnGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1977 = writer.prefix("VpnGatewayId");
    if let Some(var_1978) = &input.vpn_gateway_id {
        scope_1977.string(var_1978);
    }
    #[allow(unused_mut)]
    let mut scope_1979 = writer.prefix("DryRun");
    if let Some(var_1980) = &input.dry_run {
        scope_1979.boolean(*var_1980);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deprovision_byoip_cidr(
    input: &crate::input::DeprovisionByoipCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeprovisionByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1981 = writer.prefix("Cidr");
    if let Some(var_1982) = &input.cidr {
        scope_1981.string(var_1982);
    }
    #[allow(unused_mut)]
    let mut scope_1983 = writer.prefix("DryRun");
    if let Some(var_1984) = &input.dry_run {
        scope_1983.boolean(*var_1984);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deprovision_ipam_pool_cidr(
    input: &crate::input::DeprovisionIpamPoolCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeprovisionIpamPoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1985 = writer.prefix("DryRun");
    if let Some(var_1986) = &input.dry_run {
        scope_1985.boolean(*var_1986);
    }
    #[allow(unused_mut)]
    let mut scope_1987 = writer.prefix("IpamPoolId");
    if let Some(var_1988) = &input.ipam_pool_id {
        scope_1987.string(var_1988);
    }
    #[allow(unused_mut)]
    let mut scope_1989 = writer.prefix("Cidr");
    if let Some(var_1990) = &input.cidr {
        scope_1989.string(var_1990);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deprovision_public_ipv4_pool_cidr(
    input: &crate::input::DeprovisionPublicIpv4PoolCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeprovisionPublicIpv4PoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1991 = writer.prefix("DryRun");
    if let Some(var_1992) = &input.dry_run {
        scope_1991.boolean(*var_1992);
    }
    #[allow(unused_mut)]
    let mut scope_1993 = writer.prefix("PoolId");
    if let Some(var_1994) = &input.pool_id {
        scope_1993.string(var_1994);
    }
    #[allow(unused_mut)]
    let mut scope_1995 = writer.prefix("Cidr");
    if let Some(var_1996) = &input.cidr {
        scope_1995.string(var_1996);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_image(
    input: &crate::input::DeregisterImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeregisterImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1997 = writer.prefix("ImageId");
    if let Some(var_1998) = &input.image_id {
        scope_1997.string(var_1998);
    }
    #[allow(unused_mut)]
    let mut scope_1999 = writer.prefix("DryRun");
    if let Some(var_2000) = &input.dry_run {
        scope_1999.boolean(*var_2000);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_instance_event_notification_attributes(
    input: &crate::input::DeregisterInstanceEventNotificationAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeregisterInstanceEventNotificationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2001 = writer.prefix("DryRun");
    if let Some(var_2002) = &input.dry_run {
        scope_2001.boolean(*var_2002);
    }
    #[allow(unused_mut)]
    let mut scope_2003 = writer.prefix("InstanceTagAttribute");
    if let Some(var_2004) = &input.instance_tag_attribute {
        crate::query_ser::serialize_structure_crate_model_deregister_instance_tag_attribute_request(scope_2003, var_2004)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_transit_gateway_multicast_group_members(
    input: &crate::input::DeregisterTransitGatewayMulticastGroupMembersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeregisterTransitGatewayMulticastGroupMembers",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2005 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_2006) = &input.transit_gateway_multicast_domain_id {
        scope_2005.string(var_2006);
    }
    #[allow(unused_mut)]
    let mut scope_2007 = writer.prefix("GroupIpAddress");
    if let Some(var_2008) = &input.group_ip_address {
        scope_2007.string(var_2008);
    }
    #[allow(unused_mut)]
    let mut scope_2009 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_2010) = &input.network_interface_ids {
        let mut list_2012 = scope_2009.start_list(true, Some("item"));
        for item_2011 in var_2010 {
            #[allow(unused_mut)]
            let mut entry_2013 = list_2012.entry();
            entry_2013.string(item_2011);
        }
        list_2012.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2014 = writer.prefix("DryRun");
    if let Some(var_2015) = &input.dry_run {
        scope_2014.boolean(*var_2015);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_transit_gateway_multicast_group_sources(
    input: &crate::input::DeregisterTransitGatewayMulticastGroupSourcesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeregisterTransitGatewayMulticastGroupSources",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2016 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_2017) = &input.transit_gateway_multicast_domain_id {
        scope_2016.string(var_2017);
    }
    #[allow(unused_mut)]
    let mut scope_2018 = writer.prefix("GroupIpAddress");
    if let Some(var_2019) = &input.group_ip_address {
        scope_2018.string(var_2019);
    }
    #[allow(unused_mut)]
    let mut scope_2020 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_2021) = &input.network_interface_ids {
        let mut list_2023 = scope_2020.start_list(true, Some("item"));
        for item_2022 in var_2021 {
            #[allow(unused_mut)]
            let mut entry_2024 = list_2023.entry();
            entry_2024.string(item_2022);
        }
        list_2023.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2025 = writer.prefix("DryRun");
    if let Some(var_2026) = &input.dry_run {
        scope_2025.boolean(*var_2026);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_account_attributes(
    input: &crate::input::DescribeAccountAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAccountAttributes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2027 = writer.prefix("AttributeName");
    if let Some(var_2028) = &input.attribute_names {
        let mut list_2030 = scope_2027.start_list(true, Some("attributeName"));
        for item_2029 in var_2028 {
            #[allow(unused_mut)]
            let mut entry_2031 = list_2030.entry();
            entry_2031.string(item_2029.as_str());
        }
        list_2030.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2032 = writer.prefix("DryRun");
    if let Some(var_2033) = &input.dry_run {
        scope_2032.boolean(*var_2033);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_addresses(
    input: &crate::input::DescribeAddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2034 = writer.prefix("Filter");
    if let Some(var_2035) = &input.filters {
        let mut list_2037 = scope_2034.start_list(true, Some("Filter"));
        for item_2036 in var_2035 {
            #[allow(unused_mut)]
            let mut entry_2038 = list_2037.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2038, item_2036)?;
        }
        list_2037.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2039 = writer.prefix("PublicIp");
    if let Some(var_2040) = &input.public_ips {
        let mut list_2042 = scope_2039.start_list(true, Some("PublicIp"));
        for item_2041 in var_2040 {
            #[allow(unused_mut)]
            let mut entry_2043 = list_2042.entry();
            entry_2043.string(item_2041);
        }
        list_2042.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2044 = writer.prefix("AllocationId");
    if let Some(var_2045) = &input.allocation_ids {
        let mut list_2047 = scope_2044.start_list(true, Some("AllocationId"));
        for item_2046 in var_2045 {
            #[allow(unused_mut)]
            let mut entry_2048 = list_2047.entry();
            entry_2048.string(item_2046);
        }
        list_2047.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2049 = writer.prefix("DryRun");
    if let Some(var_2050) = &input.dry_run {
        scope_2049.boolean(*var_2050);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_addresses_attribute(
    input: &crate::input::DescribeAddressesAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAddressesAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2051 = writer.prefix("AllocationId");
    if let Some(var_2052) = &input.allocation_ids {
        let mut list_2054 = scope_2051.start_list(true, Some("item"));
        for item_2053 in var_2052 {
            #[allow(unused_mut)]
            let mut entry_2055 = list_2054.entry();
            entry_2055.string(item_2053);
        }
        list_2054.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2056 = writer.prefix("Attribute");
    if let Some(var_2057) = &input.attribute {
        scope_2056.string(var_2057.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2058 = writer.prefix("NextToken");
    if let Some(var_2059) = &input.next_token {
        scope_2058.string(var_2059);
    }
    #[allow(unused_mut)]
    let mut scope_2060 = writer.prefix("MaxResults");
    if let Some(var_2061) = &input.max_results {
        scope_2060.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2061).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2062 = writer.prefix("DryRun");
    if let Some(var_2063) = &input.dry_run {
        scope_2062.boolean(*var_2063);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_aggregate_id_format(
    input: &crate::input::DescribeAggregateIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAggregateIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2064 = writer.prefix("DryRun");
    if let Some(var_2065) = &input.dry_run {
        scope_2064.boolean(*var_2065);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_availability_zones(
    input: &crate::input::DescribeAvailabilityZonesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAvailabilityZones", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2066 = writer.prefix("Filter");
    if let Some(var_2067) = &input.filters {
        let mut list_2069 = scope_2066.start_list(true, Some("Filter"));
        for item_2068 in var_2067 {
            #[allow(unused_mut)]
            let mut entry_2070 = list_2069.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2070, item_2068)?;
        }
        list_2069.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2071 = writer.prefix("ZoneName");
    if let Some(var_2072) = &input.zone_names {
        let mut list_2074 = scope_2071.start_list(true, Some("ZoneName"));
        for item_2073 in var_2072 {
            #[allow(unused_mut)]
            let mut entry_2075 = list_2074.entry();
            entry_2075.string(item_2073);
        }
        list_2074.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2076 = writer.prefix("ZoneId");
    if let Some(var_2077) = &input.zone_ids {
        let mut list_2079 = scope_2076.start_list(true, Some("ZoneId"));
        for item_2078 in var_2077 {
            #[allow(unused_mut)]
            let mut entry_2080 = list_2079.entry();
            entry_2080.string(item_2078);
        }
        list_2079.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2081 = writer.prefix("AllAvailabilityZones");
    if let Some(var_2082) = &input.all_availability_zones {
        scope_2081.boolean(*var_2082);
    }
    #[allow(unused_mut)]
    let mut scope_2083 = writer.prefix("DryRun");
    if let Some(var_2084) = &input.dry_run {
        scope_2083.boolean(*var_2084);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_bundle_tasks(
    input: &crate::input::DescribeBundleTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeBundleTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2085 = writer.prefix("BundleId");
    if let Some(var_2086) = &input.bundle_ids {
        let mut list_2088 = scope_2085.start_list(true, Some("BundleId"));
        for item_2087 in var_2086 {
            #[allow(unused_mut)]
            let mut entry_2089 = list_2088.entry();
            entry_2089.string(item_2087);
        }
        list_2088.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2090 = writer.prefix("Filter");
    if let Some(var_2091) = &input.filters {
        let mut list_2093 = scope_2090.start_list(true, Some("Filter"));
        for item_2092 in var_2091 {
            #[allow(unused_mut)]
            let mut entry_2094 = list_2093.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2094, item_2092)?;
        }
        list_2093.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2095 = writer.prefix("DryRun");
    if let Some(var_2096) = &input.dry_run {
        scope_2095.boolean(*var_2096);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_byoip_cidrs(
    input: &crate::input::DescribeByoipCidrsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeByoipCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2097 = writer.prefix("DryRun");
    if let Some(var_2098) = &input.dry_run {
        scope_2097.boolean(*var_2098);
    }
    #[allow(unused_mut)]
    let mut scope_2099 = writer.prefix("MaxResults");
    if let Some(var_2100) = &input.max_results {
        scope_2099.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2100).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2101 = writer.prefix("NextToken");
    if let Some(var_2102) = &input.next_token {
        scope_2101.string(var_2102);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_capacity_reservation_fleets(
    input: &crate::input::DescribeCapacityReservationFleetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeCapacityReservationFleets",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2103 = writer.prefix("CapacityReservationFleetId");
    if let Some(var_2104) = &input.capacity_reservation_fleet_ids {
        let mut list_2106 = scope_2103.start_list(true, Some("item"));
        for item_2105 in var_2104 {
            #[allow(unused_mut)]
            let mut entry_2107 = list_2106.entry();
            entry_2107.string(item_2105);
        }
        list_2106.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2108 = writer.prefix("NextToken");
    if let Some(var_2109) = &input.next_token {
        scope_2108.string(var_2109);
    }
    #[allow(unused_mut)]
    let mut scope_2110 = writer.prefix("MaxResults");
    if let Some(var_2111) = &input.max_results {
        scope_2110.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2111).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2112 = writer.prefix("Filter");
    if let Some(var_2113) = &input.filters {
        let mut list_2115 = scope_2112.start_list(true, Some("Filter"));
        for item_2114 in var_2113 {
            #[allow(unused_mut)]
            let mut entry_2116 = list_2115.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2116, item_2114)?;
        }
        list_2115.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2117 = writer.prefix("DryRun");
    if let Some(var_2118) = &input.dry_run {
        scope_2117.boolean(*var_2118);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_capacity_reservations(
    input: &crate::input::DescribeCapacityReservationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCapacityReservations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2119 = writer.prefix("CapacityReservationId");
    if let Some(var_2120) = &input.capacity_reservation_ids {
        let mut list_2122 = scope_2119.start_list(true, Some("item"));
        for item_2121 in var_2120 {
            #[allow(unused_mut)]
            let mut entry_2123 = list_2122.entry();
            entry_2123.string(item_2121);
        }
        list_2122.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2124 = writer.prefix("NextToken");
    if let Some(var_2125) = &input.next_token {
        scope_2124.string(var_2125);
    }
    #[allow(unused_mut)]
    let mut scope_2126 = writer.prefix("MaxResults");
    if let Some(var_2127) = &input.max_results {
        scope_2126.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2127).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2128 = writer.prefix("Filter");
    if let Some(var_2129) = &input.filters {
        let mut list_2131 = scope_2128.start_list(true, Some("Filter"));
        for item_2130 in var_2129 {
            #[allow(unused_mut)]
            let mut entry_2132 = list_2131.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2132, item_2130)?;
        }
        list_2131.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2133 = writer.prefix("DryRun");
    if let Some(var_2134) = &input.dry_run {
        scope_2133.boolean(*var_2134);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_carrier_gateways(
    input: &crate::input::DescribeCarrierGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCarrierGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2135 = writer.prefix("CarrierGatewayId");
    if let Some(var_2136) = &input.carrier_gateway_ids {
        let mut list_2138 = scope_2135.start_list(true, None);
        for item_2137 in var_2136 {
            #[allow(unused_mut)]
            let mut entry_2139 = list_2138.entry();
            entry_2139.string(item_2137);
        }
        list_2138.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2140 = writer.prefix("Filter");
    if let Some(var_2141) = &input.filters {
        let mut list_2143 = scope_2140.start_list(true, Some("Filter"));
        for item_2142 in var_2141 {
            #[allow(unused_mut)]
            let mut entry_2144 = list_2143.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2144, item_2142)?;
        }
        list_2143.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2145 = writer.prefix("MaxResults");
    if let Some(var_2146) = &input.max_results {
        scope_2145.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2146).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2147 = writer.prefix("NextToken");
    if let Some(var_2148) = &input.next_token {
        scope_2147.string(var_2148);
    }
    #[allow(unused_mut)]
    let mut scope_2149 = writer.prefix("DryRun");
    if let Some(var_2150) = &input.dry_run {
        scope_2149.boolean(*var_2150);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_classic_link_instances(
    input: &crate::input::DescribeClassicLinkInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClassicLinkInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2151 = writer.prefix("Filter");
    if let Some(var_2152) = &input.filters {
        let mut list_2154 = scope_2151.start_list(true, Some("Filter"));
        for item_2153 in var_2152 {
            #[allow(unused_mut)]
            let mut entry_2155 = list_2154.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2155, item_2153)?;
        }
        list_2154.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2156 = writer.prefix("DryRun");
    if let Some(var_2157) = &input.dry_run {
        scope_2156.boolean(*var_2157);
    }
    #[allow(unused_mut)]
    let mut scope_2158 = writer.prefix("InstanceId");
    if let Some(var_2159) = &input.instance_ids {
        let mut list_2161 = scope_2158.start_list(true, Some("InstanceId"));
        for item_2160 in var_2159 {
            #[allow(unused_mut)]
            let mut entry_2162 = list_2161.entry();
            entry_2162.string(item_2160);
        }
        list_2161.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2163 = writer.prefix("MaxResults");
    if let Some(var_2164) = &input.max_results {
        scope_2163.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2164).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2165 = writer.prefix("NextToken");
    if let Some(var_2166) = &input.next_token {
        scope_2165.string(var_2166);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_authorization_rules(
    input: &crate::input::DescribeClientVpnAuthorizationRulesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeClientVpnAuthorizationRules",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2167 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2168) = &input.client_vpn_endpoint_id {
        scope_2167.string(var_2168);
    }
    #[allow(unused_mut)]
    let mut scope_2169 = writer.prefix("DryRun");
    if let Some(var_2170) = &input.dry_run {
        scope_2169.boolean(*var_2170);
    }
    #[allow(unused_mut)]
    let mut scope_2171 = writer.prefix("NextToken");
    if let Some(var_2172) = &input.next_token {
        scope_2171.string(var_2172);
    }
    #[allow(unused_mut)]
    let mut scope_2173 = writer.prefix("Filter");
    if let Some(var_2174) = &input.filters {
        let mut list_2176 = scope_2173.start_list(true, Some("Filter"));
        for item_2175 in var_2174 {
            #[allow(unused_mut)]
            let mut entry_2177 = list_2176.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2177, item_2175)?;
        }
        list_2176.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2178 = writer.prefix("MaxResults");
    if let Some(var_2179) = &input.max_results {
        scope_2178.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2179).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_connections(
    input: &crate::input::DescribeClientVpnConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2180 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2181) = &input.client_vpn_endpoint_id {
        scope_2180.string(var_2181);
    }
    #[allow(unused_mut)]
    let mut scope_2182 = writer.prefix("Filter");
    if let Some(var_2183) = &input.filters {
        let mut list_2185 = scope_2182.start_list(true, Some("Filter"));
        for item_2184 in var_2183 {
            #[allow(unused_mut)]
            let mut entry_2186 = list_2185.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2186, item_2184)?;
        }
        list_2185.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2187 = writer.prefix("NextToken");
    if let Some(var_2188) = &input.next_token {
        scope_2187.string(var_2188);
    }
    #[allow(unused_mut)]
    let mut scope_2189 = writer.prefix("MaxResults");
    if let Some(var_2190) = &input.max_results {
        scope_2189.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2190).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2191 = writer.prefix("DryRun");
    if let Some(var_2192) = &input.dry_run {
        scope_2191.boolean(*var_2192);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_endpoints(
    input: &crate::input::DescribeClientVpnEndpointsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2193 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2194) = &input.client_vpn_endpoint_ids {
        let mut list_2196 = scope_2193.start_list(true, Some("item"));
        for item_2195 in var_2194 {
            #[allow(unused_mut)]
            let mut entry_2197 = list_2196.entry();
            entry_2197.string(item_2195);
        }
        list_2196.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2198 = writer.prefix("MaxResults");
    if let Some(var_2199) = &input.max_results {
        scope_2198.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2199).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2200 = writer.prefix("NextToken");
    if let Some(var_2201) = &input.next_token {
        scope_2200.string(var_2201);
    }
    #[allow(unused_mut)]
    let mut scope_2202 = writer.prefix("Filter");
    if let Some(var_2203) = &input.filters {
        let mut list_2205 = scope_2202.start_list(true, Some("Filter"));
        for item_2204 in var_2203 {
            #[allow(unused_mut)]
            let mut entry_2206 = list_2205.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2206, item_2204)?;
        }
        list_2205.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2207 = writer.prefix("DryRun");
    if let Some(var_2208) = &input.dry_run {
        scope_2207.boolean(*var_2208);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_routes(
    input: &crate::input::DescribeClientVpnRoutesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2209 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2210) = &input.client_vpn_endpoint_id {
        scope_2209.string(var_2210);
    }
    #[allow(unused_mut)]
    let mut scope_2211 = writer.prefix("Filter");
    if let Some(var_2212) = &input.filters {
        let mut list_2214 = scope_2211.start_list(true, Some("Filter"));
        for item_2213 in var_2212 {
            #[allow(unused_mut)]
            let mut entry_2215 = list_2214.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2215, item_2213)?;
        }
        list_2214.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2216 = writer.prefix("MaxResults");
    if let Some(var_2217) = &input.max_results {
        scope_2216.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2217).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2218 = writer.prefix("NextToken");
    if let Some(var_2219) = &input.next_token {
        scope_2218.string(var_2219);
    }
    #[allow(unused_mut)]
    let mut scope_2220 = writer.prefix("DryRun");
    if let Some(var_2221) = &input.dry_run {
        scope_2220.boolean(*var_2221);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_target_networks(
    input: &crate::input::DescribeClientVpnTargetNetworksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeClientVpnTargetNetworks",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2222 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2223) = &input.client_vpn_endpoint_id {
        scope_2222.string(var_2223);
    }
    #[allow(unused_mut)]
    let mut scope_2224 = writer.prefix("AssociationIds");
    if let Some(var_2225) = &input.association_ids {
        let mut list_2227 = scope_2224.start_list(true, Some("item"));
        for item_2226 in var_2225 {
            #[allow(unused_mut)]
            let mut entry_2228 = list_2227.entry();
            entry_2228.string(item_2226);
        }
        list_2227.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2229 = writer.prefix("MaxResults");
    if let Some(var_2230) = &input.max_results {
        scope_2229.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2230).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2231 = writer.prefix("NextToken");
    if let Some(var_2232) = &input.next_token {
        scope_2231.string(var_2232);
    }
    #[allow(unused_mut)]
    let mut scope_2233 = writer.prefix("Filter");
    if let Some(var_2234) = &input.filters {
        let mut list_2236 = scope_2233.start_list(true, Some("Filter"));
        for item_2235 in var_2234 {
            #[allow(unused_mut)]
            let mut entry_2237 = list_2236.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2237, item_2235)?;
        }
        list_2236.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2238 = writer.prefix("DryRun");
    if let Some(var_2239) = &input.dry_run {
        scope_2238.boolean(*var_2239);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_coip_pools(
    input: &crate::input::DescribeCoipPoolsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCoipPools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2240 = writer.prefix("PoolId");
    if let Some(var_2241) = &input.pool_ids {
        let mut list_2243 = scope_2240.start_list(true, Some("item"));
        for item_2242 in var_2241 {
            #[allow(unused_mut)]
            let mut entry_2244 = list_2243.entry();
            entry_2244.string(item_2242);
        }
        list_2243.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2245 = writer.prefix("Filter");
    if let Some(var_2246) = &input.filters {
        let mut list_2248 = scope_2245.start_list(true, Some("Filter"));
        for item_2247 in var_2246 {
            #[allow(unused_mut)]
            let mut entry_2249 = list_2248.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2249, item_2247)?;
        }
        list_2248.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2250 = writer.prefix("MaxResults");
    if let Some(var_2251) = &input.max_results {
        scope_2250.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2251).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2252 = writer.prefix("NextToken");
    if let Some(var_2253) = &input.next_token {
        scope_2252.string(var_2253);
    }
    #[allow(unused_mut)]
    let mut scope_2254 = writer.prefix("DryRun");
    if let Some(var_2255) = &input.dry_run {
        scope_2254.boolean(*var_2255);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_conversion_tasks(
    input: &crate::input::DescribeConversionTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeConversionTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2256 = writer.prefix("ConversionTaskId");
    if let Some(var_2257) = &input.conversion_task_ids {
        let mut list_2259 = scope_2256.start_list(true, Some("item"));
        for item_2258 in var_2257 {
            #[allow(unused_mut)]
            let mut entry_2260 = list_2259.entry();
            entry_2260.string(item_2258);
        }
        list_2259.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2261 = writer.prefix("DryRun");
    if let Some(var_2262) = &input.dry_run {
        scope_2261.boolean(*var_2262);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_customer_gateways(
    input: &crate::input::DescribeCustomerGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCustomerGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2263 = writer.prefix("CustomerGatewayId");
    if let Some(var_2264) = &input.customer_gateway_ids {
        let mut list_2266 = scope_2263.start_list(true, Some("CustomerGatewayId"));
        for item_2265 in var_2264 {
            #[allow(unused_mut)]
            let mut entry_2267 = list_2266.entry();
            entry_2267.string(item_2265);
        }
        list_2266.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2268 = writer.prefix("Filter");
    if let Some(var_2269) = &input.filters {
        let mut list_2271 = scope_2268.start_list(true, Some("Filter"));
        for item_2270 in var_2269 {
            #[allow(unused_mut)]
            let mut entry_2272 = list_2271.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2272, item_2270)?;
        }
        list_2271.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2273 = writer.prefix("DryRun");
    if let Some(var_2274) = &input.dry_run {
        scope_2273.boolean(*var_2274);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_dhcp_options(
    input: &crate::input::DescribeDhcpOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2275 = writer.prefix("DhcpOptionsId");
    if let Some(var_2276) = &input.dhcp_options_ids {
        let mut list_2278 = scope_2275.start_list(true, Some("DhcpOptionsId"));
        for item_2277 in var_2276 {
            #[allow(unused_mut)]
            let mut entry_2279 = list_2278.entry();
            entry_2279.string(item_2277);
        }
        list_2278.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2280 = writer.prefix("Filter");
    if let Some(var_2281) = &input.filters {
        let mut list_2283 = scope_2280.start_list(true, Some("Filter"));
        for item_2282 in var_2281 {
            #[allow(unused_mut)]
            let mut entry_2284 = list_2283.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2284, item_2282)?;
        }
        list_2283.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2285 = writer.prefix("DryRun");
    if let Some(var_2286) = &input.dry_run {
        scope_2285.boolean(*var_2286);
    }
    #[allow(unused_mut)]
    let mut scope_2287 = writer.prefix("NextToken");
    if let Some(var_2288) = &input.next_token {
        scope_2287.string(var_2288);
    }
    #[allow(unused_mut)]
    let mut scope_2289 = writer.prefix("MaxResults");
    if let Some(var_2290) = &input.max_results {
        scope_2289.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2290).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_egress_only_internet_gateways(
    input: &crate::input::DescribeEgressOnlyInternetGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeEgressOnlyInternetGateways",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2291 = writer.prefix("DryRun");
    if let Some(var_2292) = &input.dry_run {
        scope_2291.boolean(*var_2292);
    }
    #[allow(unused_mut)]
    let mut scope_2293 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_2294) = &input.egress_only_internet_gateway_ids {
        let mut list_2296 = scope_2293.start_list(true, Some("item"));
        for item_2295 in var_2294 {
            #[allow(unused_mut)]
            let mut entry_2297 = list_2296.entry();
            entry_2297.string(item_2295);
        }
        list_2296.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2298 = writer.prefix("MaxResults");
    if let Some(var_2299) = &input.max_results {
        scope_2298.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2299).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2300 = writer.prefix("NextToken");
    if let Some(var_2301) = &input.next_token {
        scope_2300.string(var_2301);
    }
    #[allow(unused_mut)]
    let mut scope_2302 = writer.prefix("Filter");
    if let Some(var_2303) = &input.filters {
        let mut list_2305 = scope_2302.start_list(true, Some("Filter"));
        for item_2304 in var_2303 {
            #[allow(unused_mut)]
            let mut entry_2306 = list_2305.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2306, item_2304)?;
        }
        list_2305.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_elastic_gpus(
    input: &crate::input::DescribeElasticGpusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeElasticGpus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2307 = writer.prefix("ElasticGpuId");
    if let Some(var_2308) = &input.elastic_gpu_ids {
        let mut list_2310 = scope_2307.start_list(true, Some("item"));
        for item_2309 in var_2308 {
            #[allow(unused_mut)]
            let mut entry_2311 = list_2310.entry();
            entry_2311.string(item_2309);
        }
        list_2310.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2312 = writer.prefix("DryRun");
    if let Some(var_2313) = &input.dry_run {
        scope_2312.boolean(*var_2313);
    }
    #[allow(unused_mut)]
    let mut scope_2314 = writer.prefix("Filter");
    if let Some(var_2315) = &input.filters {
        let mut list_2317 = scope_2314.start_list(true, Some("Filter"));
        for item_2316 in var_2315 {
            #[allow(unused_mut)]
            let mut entry_2318 = list_2317.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2318, item_2316)?;
        }
        list_2317.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2319 = writer.prefix("MaxResults");
    if let Some(var_2320) = &input.max_results {
        scope_2319.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2320).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2321 = writer.prefix("NextToken");
    if let Some(var_2322) = &input.next_token {
        scope_2321.string(var_2322);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_export_image_tasks(
    input: &crate::input::DescribeExportImageTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeExportImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2323 = writer.prefix("DryRun");
    if let Some(var_2324) = &input.dry_run {
        scope_2323.boolean(*var_2324);
    }
    #[allow(unused_mut)]
    let mut scope_2325 = writer.prefix("Filter");
    if let Some(var_2326) = &input.filters {
        let mut list_2328 = scope_2325.start_list(true, Some("Filter"));
        for item_2327 in var_2326 {
            #[allow(unused_mut)]
            let mut entry_2329 = list_2328.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2329, item_2327)?;
        }
        list_2328.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2330 = writer.prefix("ExportImageTaskId");
    if let Some(var_2331) = &input.export_image_task_ids {
        let mut list_2333 = scope_2330.start_list(true, Some("ExportImageTaskId"));
        for item_2332 in var_2331 {
            #[allow(unused_mut)]
            let mut entry_2334 = list_2333.entry();
            entry_2334.string(item_2332);
        }
        list_2333.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2335 = writer.prefix("MaxResults");
    if let Some(var_2336) = &input.max_results {
        scope_2335.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2336).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2337 = writer.prefix("NextToken");
    if let Some(var_2338) = &input.next_token {
        scope_2337.string(var_2338);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_export_tasks(
    input: &crate::input::DescribeExportTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeExportTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2339 = writer.prefix("ExportTaskId");
    if let Some(var_2340) = &input.export_task_ids {
        let mut list_2342 = scope_2339.start_list(true, Some("ExportTaskId"));
        for item_2341 in var_2340 {
            #[allow(unused_mut)]
            let mut entry_2343 = list_2342.entry();
            entry_2343.string(item_2341);
        }
        list_2342.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2344 = writer.prefix("Filter");
    if let Some(var_2345) = &input.filters {
        let mut list_2347 = scope_2344.start_list(true, Some("Filter"));
        for item_2346 in var_2345 {
            #[allow(unused_mut)]
            let mut entry_2348 = list_2347.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2348, item_2346)?;
        }
        list_2347.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fast_launch_images(
    input: &crate::input::DescribeFastLaunchImagesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFastLaunchImages", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2349 = writer.prefix("ImageId");
    if let Some(var_2350) = &input.image_ids {
        let mut list_2352 = scope_2349.start_list(true, Some("ImageId"));
        for item_2351 in var_2350 {
            #[allow(unused_mut)]
            let mut entry_2353 = list_2352.entry();
            entry_2353.string(item_2351);
        }
        list_2352.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2354 = writer.prefix("Filter");
    if let Some(var_2355) = &input.filters {
        let mut list_2357 = scope_2354.start_list(true, Some("Filter"));
        for item_2356 in var_2355 {
            #[allow(unused_mut)]
            let mut entry_2358 = list_2357.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2358, item_2356)?;
        }
        list_2357.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2359 = writer.prefix("MaxResults");
    if let Some(var_2360) = &input.max_results {
        scope_2359.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2360).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2361 = writer.prefix("NextToken");
    if let Some(var_2362) = &input.next_token {
        scope_2361.string(var_2362);
    }
    #[allow(unused_mut)]
    let mut scope_2363 = writer.prefix("DryRun");
    if let Some(var_2364) = &input.dry_run {
        scope_2363.boolean(*var_2364);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fast_snapshot_restores(
    input: &crate::input::DescribeFastSnapshotRestoresInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2365 = writer.prefix("Filter");
    if let Some(var_2366) = &input.filters {
        let mut list_2368 = scope_2365.start_list(true, Some("Filter"));
        for item_2367 in var_2366 {
            #[allow(unused_mut)]
            let mut entry_2369 = list_2368.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2369, item_2367)?;
        }
        list_2368.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2370 = writer.prefix("MaxResults");
    if let Some(var_2371) = &input.max_results {
        scope_2370.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2371).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2372 = writer.prefix("NextToken");
    if let Some(var_2373) = &input.next_token {
        scope_2372.string(var_2373);
    }
    #[allow(unused_mut)]
    let mut scope_2374 = writer.prefix("DryRun");
    if let Some(var_2375) = &input.dry_run {
        scope_2374.boolean(*var_2375);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fleet_history(
    input: &crate::input::DescribeFleetHistoryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFleetHistory", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2376 = writer.prefix("DryRun");
    if let Some(var_2377) = &input.dry_run {
        scope_2376.boolean(*var_2377);
    }
    #[allow(unused_mut)]
    let mut scope_2378 = writer.prefix("EventType");
    if let Some(var_2379) = &input.event_type {
        scope_2378.string(var_2379.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2380 = writer.prefix("MaxResults");
    if let Some(var_2381) = &input.max_results {
        scope_2380.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2381).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2382 = writer.prefix("NextToken");
    if let Some(var_2383) = &input.next_token {
        scope_2382.string(var_2383);
    }
    #[allow(unused_mut)]
    let mut scope_2384 = writer.prefix("FleetId");
    if let Some(var_2385) = &input.fleet_id {
        scope_2384.string(var_2385);
    }
    #[allow(unused_mut)]
    let mut scope_2386 = writer.prefix("StartTime");
    if let Some(var_2387) = &input.start_time {
        scope_2386.date_time(var_2387, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fleet_instances(
    input: &crate::input::DescribeFleetInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFleetInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2388 = writer.prefix("DryRun");
    if let Some(var_2389) = &input.dry_run {
        scope_2388.boolean(*var_2389);
    }
    #[allow(unused_mut)]
    let mut scope_2390 = writer.prefix("MaxResults");
    if let Some(var_2391) = &input.max_results {
        scope_2390.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2391).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2392 = writer.prefix("NextToken");
    if let Some(var_2393) = &input.next_token {
        scope_2392.string(var_2393);
    }
    #[allow(unused_mut)]
    let mut scope_2394 = writer.prefix("FleetId");
    if let Some(var_2395) = &input.fleet_id {
        scope_2394.string(var_2395);
    }
    #[allow(unused_mut)]
    let mut scope_2396 = writer.prefix("Filter");
    if let Some(var_2397) = &input.filters {
        let mut list_2399 = scope_2396.start_list(true, Some("Filter"));
        for item_2398 in var_2397 {
            #[allow(unused_mut)]
            let mut entry_2400 = list_2399.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2400, item_2398)?;
        }
        list_2399.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fleets(
    input: &crate::input::DescribeFleetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeFleets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2401 = writer.prefix("DryRun");
    if let Some(var_2402) = &input.dry_run {
        scope_2401.boolean(*var_2402);
    }
    #[allow(unused_mut)]
    let mut scope_2403 = writer.prefix("MaxResults");
    if let Some(var_2404) = &input.max_results {
        scope_2403.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2404).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2405 = writer.prefix("NextToken");
    if let Some(var_2406) = &input.next_token {
        scope_2405.string(var_2406);
    }
    #[allow(unused_mut)]
    let mut scope_2407 = writer.prefix("FleetId");
    if let Some(var_2408) = &input.fleet_ids {
        let mut list_2410 = scope_2407.start_list(true, None);
        for item_2409 in var_2408 {
            #[allow(unused_mut)]
            let mut entry_2411 = list_2410.entry();
            entry_2411.string(item_2409);
        }
        list_2410.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2412 = writer.prefix("Filter");
    if let Some(var_2413) = &input.filters {
        let mut list_2415 = scope_2412.start_list(true, Some("Filter"));
        for item_2414 in var_2413 {
            #[allow(unused_mut)]
            let mut entry_2416 = list_2415.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2416, item_2414)?;
        }
        list_2415.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_flow_logs(
    input: &crate::input::DescribeFlowLogsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2417 = writer.prefix("DryRun");
    if let Some(var_2418) = &input.dry_run {
        scope_2417.boolean(*var_2418);
    }
    #[allow(unused_mut)]
    let mut scope_2419 = writer.prefix("Filter");
    if let Some(var_2420) = &input.filter {
        let mut list_2422 = scope_2419.start_list(true, Some("Filter"));
        for item_2421 in var_2420 {
            #[allow(unused_mut)]
            let mut entry_2423 = list_2422.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2423, item_2421)?;
        }
        list_2422.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2424 = writer.prefix("FlowLogId");
    if let Some(var_2425) = &input.flow_log_ids {
        let mut list_2427 = scope_2424.start_list(true, Some("item"));
        for item_2426 in var_2425 {
            #[allow(unused_mut)]
            let mut entry_2428 = list_2427.entry();
            entry_2428.string(item_2426);
        }
        list_2427.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2429 = writer.prefix("MaxResults");
    if let Some(var_2430) = &input.max_results {
        scope_2429.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2430).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2431 = writer.prefix("NextToken");
    if let Some(var_2432) = &input.next_token {
        scope_2431.string(var_2432);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fpga_image_attribute(
    input: &crate::input::DescribeFpgaImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2433 = writer.prefix("DryRun");
    if let Some(var_2434) = &input.dry_run {
        scope_2433.boolean(*var_2434);
    }
    #[allow(unused_mut)]
    let mut scope_2435 = writer.prefix("FpgaImageId");
    if let Some(var_2436) = &input.fpga_image_id {
        scope_2435.string(var_2436);
    }
    #[allow(unused_mut)]
    let mut scope_2437 = writer.prefix("Attribute");
    if let Some(var_2438) = &input.attribute {
        scope_2437.string(var_2438.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fpga_images(
    input: &crate::input::DescribeFpgaImagesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFpgaImages", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2439 = writer.prefix("DryRun");
    if let Some(var_2440) = &input.dry_run {
        scope_2439.boolean(*var_2440);
    }
    #[allow(unused_mut)]
    let mut scope_2441 = writer.prefix("FpgaImageId");
    if let Some(var_2442) = &input.fpga_image_ids {
        let mut list_2444 = scope_2441.start_list(true, Some("item"));
        for item_2443 in var_2442 {
            #[allow(unused_mut)]
            let mut entry_2445 = list_2444.entry();
            entry_2445.string(item_2443);
        }
        list_2444.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2446 = writer.prefix("Owner");
    if let Some(var_2447) = &input.owners {
        let mut list_2449 = scope_2446.start_list(true, Some("Owner"));
        for item_2448 in var_2447 {
            #[allow(unused_mut)]
            let mut entry_2450 = list_2449.entry();
            entry_2450.string(item_2448);
        }
        list_2449.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2451 = writer.prefix("Filter");
    if let Some(var_2452) = &input.filters {
        let mut list_2454 = scope_2451.start_list(true, Some("Filter"));
        for item_2453 in var_2452 {
            #[allow(unused_mut)]
            let mut entry_2455 = list_2454.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2455, item_2453)?;
        }
        list_2454.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2456 = writer.prefix("NextToken");
    if let Some(var_2457) = &input.next_token {
        scope_2456.string(var_2457);
    }
    #[allow(unused_mut)]
    let mut scope_2458 = writer.prefix("MaxResults");
    if let Some(var_2459) = &input.max_results {
        scope_2458.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2459).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_host_reservation_offerings(
    input: &crate::input::DescribeHostReservationOfferingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeHostReservationOfferings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2460 = writer.prefix("Filter");
    if let Some(var_2461) = &input.filter {
        let mut list_2463 = scope_2460.start_list(true, Some("Filter"));
        for item_2462 in var_2461 {
            #[allow(unused_mut)]
            let mut entry_2464 = list_2463.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2464, item_2462)?;
        }
        list_2463.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2465 = writer.prefix("MaxDuration");
    if let Some(var_2466) = &input.max_duration {
        scope_2465.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2466).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2467 = writer.prefix("MaxResults");
    if let Some(var_2468) = &input.max_results {
        scope_2467.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2468).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2469 = writer.prefix("MinDuration");
    if let Some(var_2470) = &input.min_duration {
        scope_2469.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2470).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2471 = writer.prefix("NextToken");
    if let Some(var_2472) = &input.next_token {
        scope_2471.string(var_2472);
    }
    #[allow(unused_mut)]
    let mut scope_2473 = writer.prefix("OfferingId");
    if let Some(var_2474) = &input.offering_id {
        scope_2473.string(var_2474);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_host_reservations(
    input: &crate::input::DescribeHostReservationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeHostReservations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2475 = writer.prefix("Filter");
    if let Some(var_2476) = &input.filter {
        let mut list_2478 = scope_2475.start_list(true, Some("Filter"));
        for item_2477 in var_2476 {
            #[allow(unused_mut)]
            let mut entry_2479 = list_2478.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2479, item_2477)?;
        }
        list_2478.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2480 = writer.prefix("HostReservationIdSet");
    if let Some(var_2481) = &input.host_reservation_id_set {
        let mut list_2483 = scope_2480.start_list(true, Some("item"));
        for item_2482 in var_2481 {
            #[allow(unused_mut)]
            let mut entry_2484 = list_2483.entry();
            entry_2484.string(item_2482);
        }
        list_2483.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2485 = writer.prefix("MaxResults");
    if let Some(var_2486) = &input.max_results {
        scope_2485.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2486).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2487 = writer.prefix("NextToken");
    if let Some(var_2488) = &input.next_token {
        scope_2487.string(var_2488);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_hosts(
    input: &crate::input::DescribeHostsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2489 = writer.prefix("Filter");
    if let Some(var_2490) = &input.filter {
        let mut list_2492 = scope_2489.start_list(true, Some("Filter"));
        for item_2491 in var_2490 {
            #[allow(unused_mut)]
            let mut entry_2493 = list_2492.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2493, item_2491)?;
        }
        list_2492.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2494 = writer.prefix("HostId");
    if let Some(var_2495) = &input.host_ids {
        let mut list_2497 = scope_2494.start_list(true, Some("item"));
        for item_2496 in var_2495 {
            #[allow(unused_mut)]
            let mut entry_2498 = list_2497.entry();
            entry_2498.string(item_2496);
        }
        list_2497.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2499 = writer.prefix("MaxResults");
    if let Some(var_2500) = &input.max_results {
        scope_2499.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2500).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2501 = writer.prefix("NextToken");
    if let Some(var_2502) = &input.next_token {
        scope_2501.string(var_2502);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_iam_instance_profile_associations(
    input: &crate::input::DescribeIamInstanceProfileAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeIamInstanceProfileAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2503 = writer.prefix("AssociationId");
    if let Some(var_2504) = &input.association_ids {
        let mut list_2506 = scope_2503.start_list(true, Some("AssociationId"));
        for item_2505 in var_2504 {
            #[allow(unused_mut)]
            let mut entry_2507 = list_2506.entry();
            entry_2507.string(item_2505);
        }
        list_2506.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2508 = writer.prefix("Filter");
    if let Some(var_2509) = &input.filters {
        let mut list_2511 = scope_2508.start_list(true, Some("Filter"));
        for item_2510 in var_2509 {
            #[allow(unused_mut)]
            let mut entry_2512 = list_2511.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2512, item_2510)?;
        }
        list_2511.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2513 = writer.prefix("MaxResults");
    if let Some(var_2514) = &input.max_results {
        scope_2513.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2514).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2515 = writer.prefix("NextToken");
    if let Some(var_2516) = &input.next_token {
        scope_2515.string(var_2516);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_identity_id_format(
    input: &crate::input::DescribeIdentityIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeIdentityIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2517 = writer.prefix("PrincipalArn");
    if let Some(var_2518) = &input.principal_arn {
        scope_2517.string(var_2518);
    }
    #[allow(unused_mut)]
    let mut scope_2519 = writer.prefix("Resource");
    if let Some(var_2520) = &input.resource {
        scope_2519.string(var_2520);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_id_format(
    input: &crate::input::DescribeIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2521 = writer.prefix("Resource");
    if let Some(var_2522) = &input.resource {
        scope_2521.string(var_2522);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_image_attribute(
    input: &crate::input::DescribeImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2523 = writer.prefix("Attribute");
    if let Some(var_2524) = &input.attribute {
        scope_2523.string(var_2524.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2525 = writer.prefix("ImageId");
    if let Some(var_2526) = &input.image_id {
        scope_2525.string(var_2526);
    }
    #[allow(unused_mut)]
    let mut scope_2527 = writer.prefix("DryRun");
    if let Some(var_2528) = &input.dry_run {
        scope_2527.boolean(*var_2528);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_images(
    input: &crate::input::DescribeImagesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeImages", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2529 = writer.prefix("ExecutableBy");
    if let Some(var_2530) = &input.executable_users {
        let mut list_2532 = scope_2529.start_list(true, Some("ExecutableBy"));
        for item_2531 in var_2530 {
            #[allow(unused_mut)]
            let mut entry_2533 = list_2532.entry();
            entry_2533.string(item_2531);
        }
        list_2532.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2534 = writer.prefix("Filter");
    if let Some(var_2535) = &input.filters {
        let mut list_2537 = scope_2534.start_list(true, Some("Filter"));
        for item_2536 in var_2535 {
            #[allow(unused_mut)]
            let mut entry_2538 = list_2537.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2538, item_2536)?;
        }
        list_2537.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2539 = writer.prefix("ImageId");
    if let Some(var_2540) = &input.image_ids {
        let mut list_2542 = scope_2539.start_list(true, Some("ImageId"));
        for item_2541 in var_2540 {
            #[allow(unused_mut)]
            let mut entry_2543 = list_2542.entry();
            entry_2543.string(item_2541);
        }
        list_2542.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2544 = writer.prefix("Owner");
    if let Some(var_2545) = &input.owners {
        let mut list_2547 = scope_2544.start_list(true, Some("Owner"));
        for item_2546 in var_2545 {
            #[allow(unused_mut)]
            let mut entry_2548 = list_2547.entry();
            entry_2548.string(item_2546);
        }
        list_2547.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2549 = writer.prefix("IncludeDeprecated");
    if let Some(var_2550) = &input.include_deprecated {
        scope_2549.boolean(*var_2550);
    }
    #[allow(unused_mut)]
    let mut scope_2551 = writer.prefix("DryRun");
    if let Some(var_2552) = &input.dry_run {
        scope_2551.boolean(*var_2552);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_import_image_tasks(
    input: &crate::input::DescribeImportImageTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeImportImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2553 = writer.prefix("DryRun");
    if let Some(var_2554) = &input.dry_run {
        scope_2553.boolean(*var_2554);
    }
    #[allow(unused_mut)]
    let mut scope_2555 = writer.prefix("Filters");
    if let Some(var_2556) = &input.filters {
        let mut list_2558 = scope_2555.start_list(true, Some("Filter"));
        for item_2557 in var_2556 {
            #[allow(unused_mut)]
            let mut entry_2559 = list_2558.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2559, item_2557)?;
        }
        list_2558.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2560 = writer.prefix("ImportTaskId");
    if let Some(var_2561) = &input.import_task_ids {
        let mut list_2563 = scope_2560.start_list(true, Some("ImportTaskId"));
        for item_2562 in var_2561 {
            #[allow(unused_mut)]
            let mut entry_2564 = list_2563.entry();
            entry_2564.string(item_2562);
        }
        list_2563.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2565 = writer.prefix("MaxResults");
    if let Some(var_2566) = &input.max_results {
        scope_2565.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2566).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2567 = writer.prefix("NextToken");
    if let Some(var_2568) = &input.next_token {
        scope_2567.string(var_2568);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_import_snapshot_tasks(
    input: &crate::input::DescribeImportSnapshotTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeImportSnapshotTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2569 = writer.prefix("DryRun");
    if let Some(var_2570) = &input.dry_run {
        scope_2569.boolean(*var_2570);
    }
    #[allow(unused_mut)]
    let mut scope_2571 = writer.prefix("Filters");
    if let Some(var_2572) = &input.filters {
        let mut list_2574 = scope_2571.start_list(true, Some("Filter"));
        for item_2573 in var_2572 {
            #[allow(unused_mut)]
            let mut entry_2575 = list_2574.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2575, item_2573)?;
        }
        list_2574.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2576 = writer.prefix("ImportTaskId");
    if let Some(var_2577) = &input.import_task_ids {
        let mut list_2579 = scope_2576.start_list(true, Some("ImportTaskId"));
        for item_2578 in var_2577 {
            #[allow(unused_mut)]
            let mut entry_2580 = list_2579.entry();
            entry_2580.string(item_2578);
        }
        list_2579.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2581 = writer.prefix("MaxResults");
    if let Some(var_2582) = &input.max_results {
        scope_2581.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2582).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2583 = writer.prefix("NextToken");
    if let Some(var_2584) = &input.next_token {
        scope_2583.string(var_2584);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_attribute(
    input: &crate::input::DescribeInstanceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2585 = writer.prefix("Attribute");
    if let Some(var_2586) = &input.attribute {
        scope_2585.string(var_2586.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2587 = writer.prefix("DryRun");
    if let Some(var_2588) = &input.dry_run {
        scope_2587.boolean(*var_2588);
    }
    #[allow(unused_mut)]
    let mut scope_2589 = writer.prefix("InstanceId");
    if let Some(var_2590) = &input.instance_id {
        scope_2589.string(var_2590);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_credit_specifications(
    input: &crate::input::DescribeInstanceCreditSpecificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeInstanceCreditSpecifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2591 = writer.prefix("DryRun");
    if let Some(var_2592) = &input.dry_run {
        scope_2591.boolean(*var_2592);
    }
    #[allow(unused_mut)]
    let mut scope_2593 = writer.prefix("Filter");
    if let Some(var_2594) = &input.filters {
        let mut list_2596 = scope_2593.start_list(true, Some("Filter"));
        for item_2595 in var_2594 {
            #[allow(unused_mut)]
            let mut entry_2597 = list_2596.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2597, item_2595)?;
        }
        list_2596.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2598 = writer.prefix("InstanceId");
    if let Some(var_2599) = &input.instance_ids {
        let mut list_2601 = scope_2598.start_list(true, Some("InstanceId"));
        for item_2600 in var_2599 {
            #[allow(unused_mut)]
            let mut entry_2602 = list_2601.entry();
            entry_2602.string(item_2600);
        }
        list_2601.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2603 = writer.prefix("MaxResults");
    if let Some(var_2604) = &input.max_results {
        scope_2603.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2604).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2605 = writer.prefix("NextToken");
    if let Some(var_2606) = &input.next_token {
        scope_2605.string(var_2606);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_event_notification_attributes(
    input: &crate::input::DescribeInstanceEventNotificationAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeInstanceEventNotificationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2607 = writer.prefix("DryRun");
    if let Some(var_2608) = &input.dry_run {
        scope_2607.boolean(*var_2608);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_event_windows(
    input: &crate::input::DescribeInstanceEventWindowsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceEventWindows", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2609 = writer.prefix("DryRun");
    if let Some(var_2610) = &input.dry_run {
        scope_2609.boolean(*var_2610);
    }
    #[allow(unused_mut)]
    let mut scope_2611 = writer.prefix("InstanceEventWindowId");
    if let Some(var_2612) = &input.instance_event_window_ids {
        let mut list_2614 = scope_2611.start_list(true, Some("InstanceEventWindowId"));
        for item_2613 in var_2612 {
            #[allow(unused_mut)]
            let mut entry_2615 = list_2614.entry();
            entry_2615.string(item_2613);
        }
        list_2614.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2616 = writer.prefix("Filter");
    if let Some(var_2617) = &input.filters {
        let mut list_2619 = scope_2616.start_list(true, Some("Filter"));
        for item_2618 in var_2617 {
            #[allow(unused_mut)]
            let mut entry_2620 = list_2619.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2620, item_2618)?;
        }
        list_2619.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2621 = writer.prefix("MaxResults");
    if let Some(var_2622) = &input.max_results {
        scope_2621.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2622).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2623 = writer.prefix("NextToken");
    if let Some(var_2624) = &input.next_token {
        scope_2623.string(var_2624);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instances(
    input: &crate::input::DescribeInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2625 = writer.prefix("Filter");
    if let Some(var_2626) = &input.filters {
        let mut list_2628 = scope_2625.start_list(true, Some("Filter"));
        for item_2627 in var_2626 {
            #[allow(unused_mut)]
            let mut entry_2629 = list_2628.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2629, item_2627)?;
        }
        list_2628.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2630 = writer.prefix("InstanceId");
    if let Some(var_2631) = &input.instance_ids {
        let mut list_2633 = scope_2630.start_list(true, Some("InstanceId"));
        for item_2632 in var_2631 {
            #[allow(unused_mut)]
            let mut entry_2634 = list_2633.entry();
            entry_2634.string(item_2632);
        }
        list_2633.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2635 = writer.prefix("DryRun");
    if let Some(var_2636) = &input.dry_run {
        scope_2635.boolean(*var_2636);
    }
    #[allow(unused_mut)]
    let mut scope_2637 = writer.prefix("MaxResults");
    if let Some(var_2638) = &input.max_results {
        scope_2637.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2638).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2639 = writer.prefix("NextToken");
    if let Some(var_2640) = &input.next_token {
        scope_2639.string(var_2640);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_status(
    input: &crate::input::DescribeInstanceStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2641 = writer.prefix("Filter");
    if let Some(var_2642) = &input.filters {
        let mut list_2644 = scope_2641.start_list(true, Some("Filter"));
        for item_2643 in var_2642 {
            #[allow(unused_mut)]
            let mut entry_2645 = list_2644.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2645, item_2643)?;
        }
        list_2644.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2646 = writer.prefix("InstanceId");
    if let Some(var_2647) = &input.instance_ids {
        let mut list_2649 = scope_2646.start_list(true, Some("InstanceId"));
        for item_2648 in var_2647 {
            #[allow(unused_mut)]
            let mut entry_2650 = list_2649.entry();
            entry_2650.string(item_2648);
        }
        list_2649.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2651 = writer.prefix("MaxResults");
    if let Some(var_2652) = &input.max_results {
        scope_2651.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2652).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2653 = writer.prefix("NextToken");
    if let Some(var_2654) = &input.next_token {
        scope_2653.string(var_2654);
    }
    #[allow(unused_mut)]
    let mut scope_2655 = writer.prefix("DryRun");
    if let Some(var_2656) = &input.dry_run {
        scope_2655.boolean(*var_2656);
    }
    #[allow(unused_mut)]
    let mut scope_2657 = writer.prefix("IncludeAllInstances");
    if let Some(var_2658) = &input.include_all_instances {
        scope_2657.boolean(*var_2658);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_type_offerings(
    input: &crate::input::DescribeInstanceTypeOfferingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceTypeOfferings", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2659 = writer.prefix("DryRun");
    if let Some(var_2660) = &input.dry_run {
        scope_2659.boolean(*var_2660);
    }
    #[allow(unused_mut)]
    let mut scope_2661 = writer.prefix("LocationType");
    if let Some(var_2662) = &input.location_type {
        scope_2661.string(var_2662.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2663 = writer.prefix("Filter");
    if let Some(var_2664) = &input.filters {
        let mut list_2666 = scope_2663.start_list(true, Some("Filter"));
        for item_2665 in var_2664 {
            #[allow(unused_mut)]
            let mut entry_2667 = list_2666.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2667, item_2665)?;
        }
        list_2666.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2668 = writer.prefix("MaxResults");
    if let Some(var_2669) = &input.max_results {
        scope_2668.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2669).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2670 = writer.prefix("NextToken");
    if let Some(var_2671) = &input.next_token {
        scope_2670.string(var_2671);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_types(
    input: &crate::input::DescribeInstanceTypesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceTypes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2672 = writer.prefix("DryRun");
    if let Some(var_2673) = &input.dry_run {
        scope_2672.boolean(*var_2673);
    }
    #[allow(unused_mut)]
    let mut scope_2674 = writer.prefix("InstanceType");
    if let Some(var_2675) = &input.instance_types {
        let mut list_2677 = scope_2674.start_list(true, None);
        for item_2676 in var_2675 {
            #[allow(unused_mut)]
            let mut entry_2678 = list_2677.entry();
            entry_2678.string(item_2676.as_str());
        }
        list_2677.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2679 = writer.prefix("Filter");
    if let Some(var_2680) = &input.filters {
        let mut list_2682 = scope_2679.start_list(true, Some("Filter"));
        for item_2681 in var_2680 {
            #[allow(unused_mut)]
            let mut entry_2683 = list_2682.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2683, item_2681)?;
        }
        list_2682.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2684 = writer.prefix("MaxResults");
    if let Some(var_2685) = &input.max_results {
        scope_2684.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2685).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2686 = writer.prefix("NextToken");
    if let Some(var_2687) = &input.next_token {
        scope_2686.string(var_2687);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_internet_gateways(
    input: &crate::input::DescribeInternetGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInternetGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2688 = writer.prefix("Filter");
    if let Some(var_2689) = &input.filters {
        let mut list_2691 = scope_2688.start_list(true, Some("Filter"));
        for item_2690 in var_2689 {
            #[allow(unused_mut)]
            let mut entry_2692 = list_2691.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2692, item_2690)?;
        }
        list_2691.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2693 = writer.prefix("DryRun");
    if let Some(var_2694) = &input.dry_run {
        scope_2693.boolean(*var_2694);
    }
    #[allow(unused_mut)]
    let mut scope_2695 = writer.prefix("InternetGatewayId");
    if let Some(var_2696) = &input.internet_gateway_ids {
        let mut list_2698 = scope_2695.start_list(true, Some("item"));
        for item_2697 in var_2696 {
            #[allow(unused_mut)]
            let mut entry_2699 = list_2698.entry();
            entry_2699.string(item_2697);
        }
        list_2698.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2700 = writer.prefix("NextToken");
    if let Some(var_2701) = &input.next_token {
        scope_2700.string(var_2701);
    }
    #[allow(unused_mut)]
    let mut scope_2702 = writer.prefix("MaxResults");
    if let Some(var_2703) = &input.max_results {
        scope_2702.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2703).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipam_pools(
    input: &crate::input::DescribeIpamPoolsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeIpamPools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2704 = writer.prefix("DryRun");
    if let Some(var_2705) = &input.dry_run {
        scope_2704.boolean(*var_2705);
    }
    #[allow(unused_mut)]
    let mut scope_2706 = writer.prefix("Filter");
    if let Some(var_2707) = &input.filters {
        let mut list_2709 = scope_2706.start_list(true, Some("Filter"));
        for item_2708 in var_2707 {
            #[allow(unused_mut)]
            let mut entry_2710 = list_2709.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2710, item_2708)?;
        }
        list_2709.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2711 = writer.prefix("MaxResults");
    if let Some(var_2712) = &input.max_results {
        scope_2711.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2712).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2713 = writer.prefix("NextToken");
    if let Some(var_2714) = &input.next_token {
        scope_2713.string(var_2714);
    }
    #[allow(unused_mut)]
    let mut scope_2715 = writer.prefix("IpamPoolId");
    if let Some(var_2716) = &input.ipam_pool_ids {
        let mut list_2718 = scope_2715.start_list(true, Some("item"));
        for item_2717 in var_2716 {
            #[allow(unused_mut)]
            let mut entry_2719 = list_2718.entry();
            entry_2719.string(item_2717);
        }
        list_2718.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipams(
    input: &crate::input::DescribeIpamsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeIpams", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2720 = writer.prefix("DryRun");
    if let Some(var_2721) = &input.dry_run {
        scope_2720.boolean(*var_2721);
    }
    #[allow(unused_mut)]
    let mut scope_2722 = writer.prefix("Filter");
    if let Some(var_2723) = &input.filters {
        let mut list_2725 = scope_2722.start_list(true, Some("Filter"));
        for item_2724 in var_2723 {
            #[allow(unused_mut)]
            let mut entry_2726 = list_2725.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2726, item_2724)?;
        }
        list_2725.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2727 = writer.prefix("MaxResults");
    if let Some(var_2728) = &input.max_results {
        scope_2727.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2728).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2729 = writer.prefix("NextToken");
    if let Some(var_2730) = &input.next_token {
        scope_2729.string(var_2730);
    }
    #[allow(unused_mut)]
    let mut scope_2731 = writer.prefix("IpamId");
    if let Some(var_2732) = &input.ipam_ids {
        let mut list_2734 = scope_2731.start_list(true, Some("item"));
        for item_2733 in var_2732 {
            #[allow(unused_mut)]
            let mut entry_2735 = list_2734.entry();
            entry_2735.string(item_2733);
        }
        list_2734.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipam_scopes(
    input: &crate::input::DescribeIpamScopesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeIpamScopes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2736 = writer.prefix("DryRun");
    if let Some(var_2737) = &input.dry_run {
        scope_2736.boolean(*var_2737);
    }
    #[allow(unused_mut)]
    let mut scope_2738 = writer.prefix("Filter");
    if let Some(var_2739) = &input.filters {
        let mut list_2741 = scope_2738.start_list(true, Some("Filter"));
        for item_2740 in var_2739 {
            #[allow(unused_mut)]
            let mut entry_2742 = list_2741.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2742, item_2740)?;
        }
        list_2741.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2743 = writer.prefix("MaxResults");
    if let Some(var_2744) = &input.max_results {
        scope_2743.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2744).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2745 = writer.prefix("NextToken");
    if let Some(var_2746) = &input.next_token {
        scope_2745.string(var_2746);
    }
    #[allow(unused_mut)]
    let mut scope_2747 = writer.prefix("IpamScopeId");
    if let Some(var_2748) = &input.ipam_scope_ids {
        let mut list_2750 = scope_2747.start_list(true, Some("item"));
        for item_2749 in var_2748 {
            #[allow(unused_mut)]
            let mut entry_2751 = list_2750.entry();
            entry_2751.string(item_2749);
        }
        list_2750.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipv6_pools(
    input: &crate::input::DescribeIpv6PoolsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeIpv6Pools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2752 = writer.prefix("PoolId");
    if let Some(var_2753) = &input.pool_ids {
        let mut list_2755 = scope_2752.start_list(true, Some("item"));
        for item_2754 in var_2753 {
            #[allow(unused_mut)]
            let mut entry_2756 = list_2755.entry();
            entry_2756.string(item_2754);
        }
        list_2755.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2757 = writer.prefix("NextToken");
    if let Some(var_2758) = &input.next_token {
        scope_2757.string(var_2758);
    }
    #[allow(unused_mut)]
    let mut scope_2759 = writer.prefix("MaxResults");
    if let Some(var_2760) = &input.max_results {
        scope_2759.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2760).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2761 = writer.prefix("DryRun");
    if let Some(var_2762) = &input.dry_run {
        scope_2761.boolean(*var_2762);
    }
    #[allow(unused_mut)]
    let mut scope_2763 = writer.prefix("Filter");
    if let Some(var_2764) = &input.filters {
        let mut list_2766 = scope_2763.start_list(true, Some("Filter"));
        for item_2765 in var_2764 {
            #[allow(unused_mut)]
            let mut entry_2767 = list_2766.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2767, item_2765)?;
        }
        list_2766.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_key_pairs(
    input: &crate::input::DescribeKeyPairsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeKeyPairs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2768 = writer.prefix("Filter");
    if let Some(var_2769) = &input.filters {
        let mut list_2771 = scope_2768.start_list(true, Some("Filter"));
        for item_2770 in var_2769 {
            #[allow(unused_mut)]
            let mut entry_2772 = list_2771.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2772, item_2770)?;
        }
        list_2771.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2773 = writer.prefix("KeyName");
    if let Some(var_2774) = &input.key_names {
        let mut list_2776 = scope_2773.start_list(true, Some("KeyName"));
        for item_2775 in var_2774 {
            #[allow(unused_mut)]
            let mut entry_2777 = list_2776.entry();
            entry_2777.string(item_2775);
        }
        list_2776.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2778 = writer.prefix("KeyPairId");
    if let Some(var_2779) = &input.key_pair_ids {
        let mut list_2781 = scope_2778.start_list(true, Some("KeyPairId"));
        for item_2780 in var_2779 {
            #[allow(unused_mut)]
            let mut entry_2782 = list_2781.entry();
            entry_2782.string(item_2780);
        }
        list_2781.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2783 = writer.prefix("DryRun");
    if let Some(var_2784) = &input.dry_run {
        scope_2783.boolean(*var_2784);
    }
    #[allow(unused_mut)]
    let mut scope_2785 = writer.prefix("IncludePublicKey");
    if let Some(var_2786) = &input.include_public_key {
        scope_2785.boolean(*var_2786);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_launch_templates(
    input: &crate::input::DescribeLaunchTemplatesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeLaunchTemplates", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2787 = writer.prefix("DryRun");
    if let Some(var_2788) = &input.dry_run {
        scope_2787.boolean(*var_2788);
    }
    #[allow(unused_mut)]
    let mut scope_2789 = writer.prefix("LaunchTemplateId");
    if let Some(var_2790) = &input.launch_template_ids {
        let mut list_2792 = scope_2789.start_list(true, Some("item"));
        for item_2791 in var_2790 {
            #[allow(unused_mut)]
            let mut entry_2793 = list_2792.entry();
            entry_2793.string(item_2791);
        }
        list_2792.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2794 = writer.prefix("LaunchTemplateName");
    if let Some(var_2795) = &input.launch_template_names {
        let mut list_2797 = scope_2794.start_list(true, Some("item"));
        for item_2796 in var_2795 {
            #[allow(unused_mut)]
            let mut entry_2798 = list_2797.entry();
            entry_2798.string(item_2796);
        }
        list_2797.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2799 = writer.prefix("Filter");
    if let Some(var_2800) = &input.filters {
        let mut list_2802 = scope_2799.start_list(true, Some("Filter"));
        for item_2801 in var_2800 {
            #[allow(unused_mut)]
            let mut entry_2803 = list_2802.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2803, item_2801)?;
        }
        list_2802.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2804 = writer.prefix("NextToken");
    if let Some(var_2805) = &input.next_token {
        scope_2804.string(var_2805);
    }
    #[allow(unused_mut)]
    let mut scope_2806 = writer.prefix("MaxResults");
    if let Some(var_2807) = &input.max_results {
        scope_2806.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2807).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_launch_template_versions(
    input: &crate::input::DescribeLaunchTemplateVersionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLaunchTemplateVersions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2808 = writer.prefix("DryRun");
    if let Some(var_2809) = &input.dry_run {
        scope_2808.boolean(*var_2809);
    }
    #[allow(unused_mut)]
    let mut scope_2810 = writer.prefix("LaunchTemplateId");
    if let Some(var_2811) = &input.launch_template_id {
        scope_2810.string(var_2811);
    }
    #[allow(unused_mut)]
    let mut scope_2812 = writer.prefix("LaunchTemplateName");
    if let Some(var_2813) = &input.launch_template_name {
        scope_2812.string(var_2813);
    }
    #[allow(unused_mut)]
    let mut scope_2814 = writer.prefix("LaunchTemplateVersion");
    if let Some(var_2815) = &input.versions {
        let mut list_2817 = scope_2814.start_list(true, Some("item"));
        for item_2816 in var_2815 {
            #[allow(unused_mut)]
            let mut entry_2818 = list_2817.entry();
            entry_2818.string(item_2816);
        }
        list_2817.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2819 = writer.prefix("MinVersion");
    if let Some(var_2820) = &input.min_version {
        scope_2819.string(var_2820);
    }
    #[allow(unused_mut)]
    let mut scope_2821 = writer.prefix("MaxVersion");
    if let Some(var_2822) = &input.max_version {
        scope_2821.string(var_2822);
    }
    #[allow(unused_mut)]
    let mut scope_2823 = writer.prefix("NextToken");
    if let Some(var_2824) = &input.next_token {
        scope_2823.string(var_2824);
    }
    #[allow(unused_mut)]
    let mut scope_2825 = writer.prefix("MaxResults");
    if let Some(var_2826) = &input.max_results {
        scope_2825.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2826).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2827 = writer.prefix("Filter");
    if let Some(var_2828) = &input.filters {
        let mut list_2830 = scope_2827.start_list(true, Some("Filter"));
        for item_2829 in var_2828 {
            #[allow(unused_mut)]
            let mut entry_2831 = list_2830.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2831, item_2829)?;
        }
        list_2830.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_route_tables(
    input: &crate::input::DescribeLocalGatewayRouteTablesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayRouteTables",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2832 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_2833) = &input.local_gateway_route_table_ids {
        let mut list_2835 = scope_2832.start_list(true, Some("item"));
        for item_2834 in var_2833 {
            #[allow(unused_mut)]
            let mut entry_2836 = list_2835.entry();
            entry_2836.string(item_2834);
        }
        list_2835.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2837 = writer.prefix("Filter");
    if let Some(var_2838) = &input.filters {
        let mut list_2840 = scope_2837.start_list(true, Some("Filter"));
        for item_2839 in var_2838 {
            #[allow(unused_mut)]
            let mut entry_2841 = list_2840.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2841, item_2839)?;
        }
        list_2840.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2842 = writer.prefix("MaxResults");
    if let Some(var_2843) = &input.max_results {
        scope_2842.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2843).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2844 = writer.prefix("NextToken");
    if let Some(var_2845) = &input.next_token {
        scope_2844.string(var_2845);
    }
    #[allow(unused_mut)]
    let mut scope_2846 = writer.prefix("DryRun");
    if let Some(var_2847) = &input.dry_run {
        scope_2846.boolean(*var_2847);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_route_table_virtual_interface_group_associations(
    input: &crate::input::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2848 = writer.prefix("LocalGatewayRouteTableVirtualInterfaceGroupAssociationId");
    if let Some(var_2849) = &input.local_gateway_route_table_virtual_interface_group_association_ids
    {
        let mut list_2851 = scope_2848.start_list(true, Some("item"));
        for item_2850 in var_2849 {
            #[allow(unused_mut)]
            let mut entry_2852 = list_2851.entry();
            entry_2852.string(item_2850);
        }
        list_2851.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2853 = writer.prefix("Filter");
    if let Some(var_2854) = &input.filters {
        let mut list_2856 = scope_2853.start_list(true, Some("Filter"));
        for item_2855 in var_2854 {
            #[allow(unused_mut)]
            let mut entry_2857 = list_2856.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2857, item_2855)?;
        }
        list_2856.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2858 = writer.prefix("MaxResults");
    if let Some(var_2859) = &input.max_results {
        scope_2858.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2859).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2860 = writer.prefix("NextToken");
    if let Some(var_2861) = &input.next_token {
        scope_2860.string(var_2861);
    }
    #[allow(unused_mut)]
    let mut scope_2862 = writer.prefix("DryRun");
    if let Some(var_2863) = &input.dry_run {
        scope_2862.boolean(*var_2863);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_route_table_vpc_associations(
    input: &crate::input::DescribeLocalGatewayRouteTableVpcAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayRouteTableVpcAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2864 = writer.prefix("LocalGatewayRouteTableVpcAssociationId");
    if let Some(var_2865) = &input.local_gateway_route_table_vpc_association_ids {
        let mut list_2867 = scope_2864.start_list(true, Some("item"));
        for item_2866 in var_2865 {
            #[allow(unused_mut)]
            let mut entry_2868 = list_2867.entry();
            entry_2868.string(item_2866);
        }
        list_2867.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2869 = writer.prefix("Filter");
    if let Some(var_2870) = &input.filters {
        let mut list_2872 = scope_2869.start_list(true, Some("Filter"));
        for item_2871 in var_2870 {
            #[allow(unused_mut)]
            let mut entry_2873 = list_2872.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2873, item_2871)?;
        }
        list_2872.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2874 = writer.prefix("MaxResults");
    if let Some(var_2875) = &input.max_results {
        scope_2874.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2875).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2876 = writer.prefix("NextToken");
    if let Some(var_2877) = &input.next_token {
        scope_2876.string(var_2877);
    }
    #[allow(unused_mut)]
    let mut scope_2878 = writer.prefix("DryRun");
    if let Some(var_2879) = &input.dry_run {
        scope_2878.boolean(*var_2879);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateways(
    input: &crate::input::DescribeLocalGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeLocalGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2880 = writer.prefix("LocalGatewayId");
    if let Some(var_2881) = &input.local_gateway_ids {
        let mut list_2883 = scope_2880.start_list(true, Some("item"));
        for item_2882 in var_2881 {
            #[allow(unused_mut)]
            let mut entry_2884 = list_2883.entry();
            entry_2884.string(item_2882);
        }
        list_2883.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2885 = writer.prefix("Filter");
    if let Some(var_2886) = &input.filters {
        let mut list_2888 = scope_2885.start_list(true, Some("Filter"));
        for item_2887 in var_2886 {
            #[allow(unused_mut)]
            let mut entry_2889 = list_2888.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2889, item_2887)?;
        }
        list_2888.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2890 = writer.prefix("MaxResults");
    if let Some(var_2891) = &input.max_results {
        scope_2890.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2891).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2892 = writer.prefix("NextToken");
    if let Some(var_2893) = &input.next_token {
        scope_2892.string(var_2893);
    }
    #[allow(unused_mut)]
    let mut scope_2894 = writer.prefix("DryRun");
    if let Some(var_2895) = &input.dry_run {
        scope_2894.boolean(*var_2895);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_virtual_interface_groups(
    input: &crate::input::DescribeLocalGatewayVirtualInterfaceGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayVirtualInterfaceGroups",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2896 = writer.prefix("LocalGatewayVirtualInterfaceGroupId");
    if let Some(var_2897) = &input.local_gateway_virtual_interface_group_ids {
        let mut list_2899 = scope_2896.start_list(true, Some("item"));
        for item_2898 in var_2897 {
            #[allow(unused_mut)]
            let mut entry_2900 = list_2899.entry();
            entry_2900.string(item_2898);
        }
        list_2899.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2901 = writer.prefix("Filter");
    if let Some(var_2902) = &input.filters {
        let mut list_2904 = scope_2901.start_list(true, Some("Filter"));
        for item_2903 in var_2902 {
            #[allow(unused_mut)]
            let mut entry_2905 = list_2904.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2905, item_2903)?;
        }
        list_2904.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2906 = writer.prefix("MaxResults");
    if let Some(var_2907) = &input.max_results {
        scope_2906.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2907).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2908 = writer.prefix("NextToken");
    if let Some(var_2909) = &input.next_token {
        scope_2908.string(var_2909);
    }
    #[allow(unused_mut)]
    let mut scope_2910 = writer.prefix("DryRun");
    if let Some(var_2911) = &input.dry_run {
        scope_2910.boolean(*var_2911);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_virtual_interfaces(
    input: &crate::input::DescribeLocalGatewayVirtualInterfacesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayVirtualInterfaces",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2912 = writer.prefix("LocalGatewayVirtualInterfaceId");
    if let Some(var_2913) = &input.local_gateway_virtual_interface_ids {
        let mut list_2915 = scope_2912.start_list(true, Some("item"));
        for item_2914 in var_2913 {
            #[allow(unused_mut)]
            let mut entry_2916 = list_2915.entry();
            entry_2916.string(item_2914);
        }
        list_2915.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2917 = writer.prefix("Filter");
    if let Some(var_2918) = &input.filters {
        let mut list_2920 = scope_2917.start_list(true, Some("Filter"));
        for item_2919 in var_2918 {
            #[allow(unused_mut)]
            let mut entry_2921 = list_2920.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2921, item_2919)?;
        }
        list_2920.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2922 = writer.prefix("MaxResults");
    if let Some(var_2923) = &input.max_results {
        scope_2922.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2923).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2924 = writer.prefix("NextToken");
    if let Some(var_2925) = &input.next_token {
        scope_2924.string(var_2925);
    }
    #[allow(unused_mut)]
    let mut scope_2926 = writer.prefix("DryRun");
    if let Some(var_2927) = &input.dry_run {
        scope_2926.boolean(*var_2927);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_managed_prefix_lists(
    input: &crate::input::DescribeManagedPrefixListsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeManagedPrefixLists", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2928 = writer.prefix("DryRun");
    if let Some(var_2929) = &input.dry_run {
        scope_2928.boolean(*var_2929);
    }
    #[allow(unused_mut)]
    let mut scope_2930 = writer.prefix("Filter");
    if let Some(var_2931) = &input.filters {
        let mut list_2933 = scope_2930.start_list(true, Some("Filter"));
        for item_2932 in var_2931 {
            #[allow(unused_mut)]
            let mut entry_2934 = list_2933.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2934, item_2932)?;
        }
        list_2933.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2935 = writer.prefix("MaxResults");
    if let Some(var_2936) = &input.max_results {
        scope_2935.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2936).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2937 = writer.prefix("NextToken");
    if let Some(var_2938) = &input.next_token {
        scope_2937.string(var_2938);
    }
    #[allow(unused_mut)]
    let mut scope_2939 = writer.prefix("PrefixListId");
    if let Some(var_2940) = &input.prefix_list_ids {
        let mut list_2942 = scope_2939.start_list(true, Some("item"));
        for item_2941 in var_2940 {
            #[allow(unused_mut)]
            let mut entry_2943 = list_2942.entry();
            entry_2943.string(item_2941);
        }
        list_2942.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_moving_addresses(
    input: &crate::input::DescribeMovingAddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeMovingAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2944 = writer.prefix("Filter");
    if let Some(var_2945) = &input.filters {
        let mut list_2947 = scope_2944.start_list(true, Some("Filter"));
        for item_2946 in var_2945 {
            #[allow(unused_mut)]
            let mut entry_2948 = list_2947.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2948, item_2946)?;
        }
        list_2947.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2949 = writer.prefix("DryRun");
    if let Some(var_2950) = &input.dry_run {
        scope_2949.boolean(*var_2950);
    }
    #[allow(unused_mut)]
    let mut scope_2951 = writer.prefix("MaxResults");
    if let Some(var_2952) = &input.max_results {
        scope_2951.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2952).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2953 = writer.prefix("NextToken");
    if let Some(var_2954) = &input.next_token {
        scope_2953.string(var_2954);
    }
    #[allow(unused_mut)]
    let mut scope_2955 = writer.prefix("PublicIp");
    if let Some(var_2956) = &input.public_ips {
        let mut list_2958 = scope_2955.start_list(true, Some("item"));
        for item_2957 in var_2956 {
            #[allow(unused_mut)]
            let mut entry_2959 = list_2958.entry();
            entry_2959.string(item_2957);
        }
        list_2958.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_nat_gateways(
    input: &crate::input::DescribeNatGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeNatGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2960 = writer.prefix("DryRun");
    if let Some(var_2961) = &input.dry_run {
        scope_2960.boolean(*var_2961);
    }
    #[allow(unused_mut)]
    let mut scope_2962 = writer.prefix("Filter");
    if let Some(var_2963) = &input.filter {
        let mut list_2965 = scope_2962.start_list(true, Some("Filter"));
        for item_2964 in var_2963 {
            #[allow(unused_mut)]
            let mut entry_2966 = list_2965.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2966, item_2964)?;
        }
        list_2965.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2967 = writer.prefix("MaxResults");
    if let Some(var_2968) = &input.max_results {
        scope_2967.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2968).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2969 = writer.prefix("NatGatewayId");
    if let Some(var_2970) = &input.nat_gateway_ids {
        let mut list_2972 = scope_2969.start_list(true, Some("item"));
        for item_2971 in var_2970 {
            #[allow(unused_mut)]
            let mut entry_2973 = list_2972.entry();
            entry_2973.string(item_2971);
        }
        list_2972.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2974 = writer.prefix("NextToken");
    if let Some(var_2975) = &input.next_token {
        scope_2974.string(var_2975);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_acls(
    input: &crate::input::DescribeNetworkAclsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkAcls", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2976 = writer.prefix("Filter");
    if let Some(var_2977) = &input.filters {
        let mut list_2979 = scope_2976.start_list(true, Some("Filter"));
        for item_2978 in var_2977 {
            #[allow(unused_mut)]
            let mut entry_2980 = list_2979.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2980, item_2978)?;
        }
        list_2979.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2981 = writer.prefix("DryRun");
    if let Some(var_2982) = &input.dry_run {
        scope_2981.boolean(*var_2982);
    }
    #[allow(unused_mut)]
    let mut scope_2983 = writer.prefix("NetworkAclId");
    if let Some(var_2984) = &input.network_acl_ids {
        let mut list_2986 = scope_2983.start_list(true, Some("item"));
        for item_2985 in var_2984 {
            #[allow(unused_mut)]
            let mut entry_2987 = list_2986.entry();
            entry_2987.string(item_2985);
        }
        list_2986.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2988 = writer.prefix("NextToken");
    if let Some(var_2989) = &input.next_token {
        scope_2988.string(var_2989);
    }
    #[allow(unused_mut)]
    let mut scope_2990 = writer.prefix("MaxResults");
    if let Some(var_2991) = &input.max_results {
        scope_2990.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2991).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_access_scope_analyses(
    input: &crate::input::DescribeNetworkInsightsAccessScopeAnalysesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInsightsAccessScopeAnalyses",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2992 = writer.prefix("NetworkInsightsAccessScopeAnalysisId");
    if let Some(var_2993) = &input.network_insights_access_scope_analysis_ids {
        let mut list_2995 = scope_2992.start_list(true, Some("item"));
        for item_2994 in var_2993 {
            #[allow(unused_mut)]
            let mut entry_2996 = list_2995.entry();
            entry_2996.string(item_2994);
        }
        list_2995.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2997 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_2998) = &input.network_insights_access_scope_id {
        scope_2997.string(var_2998);
    }
    #[allow(unused_mut)]
    let mut scope_2999 = writer.prefix("AnalysisStartTimeBegin");
    if let Some(var_3000) = &input.analysis_start_time_begin {
        scope_2999.date_time(var_3000, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_3001 = writer.prefix("AnalysisStartTimeEnd");
    if let Some(var_3002) = &input.analysis_start_time_end {
        scope_3001.date_time(var_3002, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_3003 = writer.prefix("Filter");
    if let Some(var_3004) = &input.filters {
        let mut list_3006 = scope_3003.start_list(true, Some("Filter"));
        for item_3005 in var_3004 {
            #[allow(unused_mut)]
            let mut entry_3007 = list_3006.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3007, item_3005)?;
        }
        list_3006.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3008 = writer.prefix("MaxResults");
    if let Some(var_3009) = &input.max_results {
        scope_3008.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3009).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3010 = writer.prefix("DryRun");
    if let Some(var_3011) = &input.dry_run {
        scope_3010.boolean(*var_3011);
    }
    #[allow(unused_mut)]
    let mut scope_3012 = writer.prefix("NextToken");
    if let Some(var_3013) = &input.next_token {
        scope_3012.string(var_3013);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_access_scopes(
    input: &crate::input::DescribeNetworkInsightsAccessScopesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInsightsAccessScopes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3014 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_3015) = &input.network_insights_access_scope_ids {
        let mut list_3017 = scope_3014.start_list(true, Some("item"));
        for item_3016 in var_3015 {
            #[allow(unused_mut)]
            let mut entry_3018 = list_3017.entry();
            entry_3018.string(item_3016);
        }
        list_3017.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3019 = writer.prefix("Filter");
    if let Some(var_3020) = &input.filters {
        let mut list_3022 = scope_3019.start_list(true, Some("Filter"));
        for item_3021 in var_3020 {
            #[allow(unused_mut)]
            let mut entry_3023 = list_3022.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3023, item_3021)?;
        }
        list_3022.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3024 = writer.prefix("MaxResults");
    if let Some(var_3025) = &input.max_results {
        scope_3024.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3025).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3026 = writer.prefix("DryRun");
    if let Some(var_3027) = &input.dry_run {
        scope_3026.boolean(*var_3027);
    }
    #[allow(unused_mut)]
    let mut scope_3028 = writer.prefix("NextToken");
    if let Some(var_3029) = &input.next_token {
        scope_3028.string(var_3029);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_analyses(
    input: &crate::input::DescribeNetworkInsightsAnalysesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInsightsAnalyses",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3030 = writer.prefix("NetworkInsightsAnalysisId");
    if let Some(var_3031) = &input.network_insights_analysis_ids {
        let mut list_3033 = scope_3030.start_list(true, Some("item"));
        for item_3032 in var_3031 {
            #[allow(unused_mut)]
            let mut entry_3034 = list_3033.entry();
            entry_3034.string(item_3032);
        }
        list_3033.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3035 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_3036) = &input.network_insights_path_id {
        scope_3035.string(var_3036);
    }
    #[allow(unused_mut)]
    let mut scope_3037 = writer.prefix("AnalysisStartTime");
    if let Some(var_3038) = &input.analysis_start_time {
        scope_3037.date_time(var_3038, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_3039 = writer.prefix("AnalysisEndTime");
    if let Some(var_3040) = &input.analysis_end_time {
        scope_3039.date_time(var_3040, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_3041 = writer.prefix("Filter");
    if let Some(var_3042) = &input.filters {
        let mut list_3044 = scope_3041.start_list(true, Some("Filter"));
        for item_3043 in var_3042 {
            #[allow(unused_mut)]
            let mut entry_3045 = list_3044.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3045, item_3043)?;
        }
        list_3044.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3046 = writer.prefix("MaxResults");
    if let Some(var_3047) = &input.max_results {
        scope_3046.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3047).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3048 = writer.prefix("DryRun");
    if let Some(var_3049) = &input.dry_run {
        scope_3048.boolean(*var_3049);
    }
    #[allow(unused_mut)]
    let mut scope_3050 = writer.prefix("NextToken");
    if let Some(var_3051) = &input.next_token {
        scope_3050.string(var_3051);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_paths(
    input: &crate::input::DescribeNetworkInsightsPathsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInsightsPaths", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3052 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_3053) = &input.network_insights_path_ids {
        let mut list_3055 = scope_3052.start_list(true, Some("item"));
        for item_3054 in var_3053 {
            #[allow(unused_mut)]
            let mut entry_3056 = list_3055.entry();
            entry_3056.string(item_3054);
        }
        list_3055.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3057 = writer.prefix("Filter");
    if let Some(var_3058) = &input.filters {
        let mut list_3060 = scope_3057.start_list(true, Some("Filter"));
        for item_3059 in var_3058 {
            #[allow(unused_mut)]
            let mut entry_3061 = list_3060.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3061, item_3059)?;
        }
        list_3060.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3062 = writer.prefix("MaxResults");
    if let Some(var_3063) = &input.max_results {
        scope_3062.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3063).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3064 = writer.prefix("DryRun");
    if let Some(var_3065) = &input.dry_run {
        scope_3064.boolean(*var_3065);
    }
    #[allow(unused_mut)]
    let mut scope_3066 = writer.prefix("NextToken");
    if let Some(var_3067) = &input.next_token {
        scope_3066.string(var_3067);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_interface_attribute(
    input: &crate::input::DescribeNetworkInterfaceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInterfaceAttribute",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3068 = writer.prefix("Attribute");
    if let Some(var_3069) = &input.attribute {
        scope_3068.string(var_3069.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3070 = writer.prefix("DryRun");
    if let Some(var_3071) = &input.dry_run {
        scope_3070.boolean(*var_3071);
    }
    #[allow(unused_mut)]
    let mut scope_3072 = writer.prefix("NetworkInterfaceId");
    if let Some(var_3073) = &input.network_interface_id {
        scope_3072.string(var_3073);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_interface_permissions(
    input: &crate::input::DescribeNetworkInterfacePermissionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInterfacePermissions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3074 = writer.prefix("NetworkInterfacePermissionId");
    if let Some(var_3075) = &input.network_interface_permission_ids {
        let mut list_3077 = scope_3074.start_list(true, None);
        for item_3076 in var_3075 {
            #[allow(unused_mut)]
            let mut entry_3078 = list_3077.entry();
            entry_3078.string(item_3076);
        }
        list_3077.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3079 = writer.prefix("Filter");
    if let Some(var_3080) = &input.filters {
        let mut list_3082 = scope_3079.start_list(true, Some("Filter"));
        for item_3081 in var_3080 {
            #[allow(unused_mut)]
            let mut entry_3083 = list_3082.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3083, item_3081)?;
        }
        list_3082.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3084 = writer.prefix("NextToken");
    if let Some(var_3085) = &input.next_token {
        scope_3084.string(var_3085);
    }
    #[allow(unused_mut)]
    let mut scope_3086 = writer.prefix("MaxResults");
    if let Some(var_3087) = &input.max_results {
        scope_3086.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3087).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_interfaces(
    input: &crate::input::DescribeNetworkInterfacesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInterfaces", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3088 = writer.prefix("Filter");
    if let Some(var_3089) = &input.filters {
        let mut list_3091 = scope_3088.start_list(true, Some("Filter"));
        for item_3090 in var_3089 {
            #[allow(unused_mut)]
            let mut entry_3092 = list_3091.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3092, item_3090)?;
        }
        list_3091.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3093 = writer.prefix("DryRun");
    if let Some(var_3094) = &input.dry_run {
        scope_3093.boolean(*var_3094);
    }
    #[allow(unused_mut)]
    let mut scope_3095 = writer.prefix("NetworkInterfaceId");
    if let Some(var_3096) = &input.network_interface_ids {
        let mut list_3098 = scope_3095.start_list(true, Some("item"));
        for item_3097 in var_3096 {
            #[allow(unused_mut)]
            let mut entry_3099 = list_3098.entry();
            entry_3099.string(item_3097);
        }
        list_3098.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3100 = writer.prefix("NextToken");
    if let Some(var_3101) = &input.next_token {
        scope_3100.string(var_3101);
    }
    #[allow(unused_mut)]
    let mut scope_3102 = writer.prefix("MaxResults");
    if let Some(var_3103) = &input.max_results {
        scope_3102.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3103).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_placement_groups(
    input: &crate::input::DescribePlacementGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribePlacementGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3104 = writer.prefix("Filter");
    if let Some(var_3105) = &input.filters {
        let mut list_3107 = scope_3104.start_list(true, Some("Filter"));
        for item_3106 in var_3105 {
            #[allow(unused_mut)]
            let mut entry_3108 = list_3107.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3108, item_3106)?;
        }
        list_3107.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3109 = writer.prefix("DryRun");
    if let Some(var_3110) = &input.dry_run {
        scope_3109.boolean(*var_3110);
    }
    #[allow(unused_mut)]
    let mut scope_3111 = writer.prefix("GroupName");
    if let Some(var_3112) = &input.group_names {
        let mut list_3114 = scope_3111.start_list(true, None);
        for item_3113 in var_3112 {
            #[allow(unused_mut)]
            let mut entry_3115 = list_3114.entry();
            entry_3115.string(item_3113);
        }
        list_3114.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3116 = writer.prefix("GroupId");
    if let Some(var_3117) = &input.group_ids {
        let mut list_3119 = scope_3116.start_list(true, Some("GroupId"));
        for item_3118 in var_3117 {
            #[allow(unused_mut)]
            let mut entry_3120 = list_3119.entry();
            entry_3120.string(item_3118);
        }
        list_3119.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_prefix_lists(
    input: &crate::input::DescribePrefixListsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribePrefixLists", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3121 = writer.prefix("DryRun");
    if let Some(var_3122) = &input.dry_run {
        scope_3121.boolean(*var_3122);
    }
    #[allow(unused_mut)]
    let mut scope_3123 = writer.prefix("Filter");
    if let Some(var_3124) = &input.filters {
        let mut list_3126 = scope_3123.start_list(true, Some("Filter"));
        for item_3125 in var_3124 {
            #[allow(unused_mut)]
            let mut entry_3127 = list_3126.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3127, item_3125)?;
        }
        list_3126.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3128 = writer.prefix("MaxResults");
    if let Some(var_3129) = &input.max_results {
        scope_3128.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3129).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3130 = writer.prefix("NextToken");
    if let Some(var_3131) = &input.next_token {
        scope_3130.string(var_3131);
    }
    #[allow(unused_mut)]
    let mut scope_3132 = writer.prefix("PrefixListId");
    if let Some(var_3133) = &input.prefix_list_ids {
        let mut list_3135 = scope_3132.start_list(true, Some("item"));
        for item_3134 in var_3133 {
            #[allow(unused_mut)]
            let mut entry_3136 = list_3135.entry();
            entry_3136.string(item_3134);
        }
        list_3135.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_principal_id_format(
    input: &crate::input::DescribePrincipalIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribePrincipalIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3137 = writer.prefix("DryRun");
    if let Some(var_3138) = &input.dry_run {
        scope_3137.boolean(*var_3138);
    }
    #[allow(unused_mut)]
    let mut scope_3139 = writer.prefix("Resource");
    if let Some(var_3140) = &input.resources {
        let mut list_3142 = scope_3139.start_list(true, Some("item"));
        for item_3141 in var_3140 {
            #[allow(unused_mut)]
            let mut entry_3143 = list_3142.entry();
            entry_3143.string(item_3141);
        }
        list_3142.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3144 = writer.prefix("MaxResults");
    if let Some(var_3145) = &input.max_results {
        scope_3144.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3145).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3146 = writer.prefix("NextToken");
    if let Some(var_3147) = &input.next_token {
        scope_3146.string(var_3147);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_public_ipv4_pools(
    input: &crate::input::DescribePublicIpv4PoolsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribePublicIpv4Pools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3148 = writer.prefix("PoolId");
    if let Some(var_3149) = &input.pool_ids {
        let mut list_3151 = scope_3148.start_list(true, Some("item"));
        for item_3150 in var_3149 {
            #[allow(unused_mut)]
            let mut entry_3152 = list_3151.entry();
            entry_3152.string(item_3150);
        }
        list_3151.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3153 = writer.prefix("NextToken");
    if let Some(var_3154) = &input.next_token {
        scope_3153.string(var_3154);
    }
    #[allow(unused_mut)]
    let mut scope_3155 = writer.prefix("MaxResults");
    if let Some(var_3156) = &input.max_results {
        scope_3155.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3156).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3157 = writer.prefix("Filter");
    if let Some(var_3158) = &input.filters {
        let mut list_3160 = scope_3157.start_list(true, Some("Filter"));
        for item_3159 in var_3158 {
            #[allow(unused_mut)]
            let mut entry_3161 = list_3160.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3161, item_3159)?;
        }
        list_3160.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_regions(
    input: &crate::input::DescribeRegionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeRegions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3162 = writer.prefix("Filter");
    if let Some(var_3163) = &input.filters {
        let mut list_3165 = scope_3162.start_list(true, Some("Filter"));
        for item_3164 in var_3163 {
            #[allow(unused_mut)]
            let mut entry_3166 = list_3165.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3166, item_3164)?;
        }
        list_3165.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3167 = writer.prefix("RegionName");
    if let Some(var_3168) = &input.region_names {
        let mut list_3170 = scope_3167.start_list(true, Some("RegionName"));
        for item_3169 in var_3168 {
            #[allow(unused_mut)]
            let mut entry_3171 = list_3170.entry();
            entry_3171.string(item_3169);
        }
        list_3170.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3172 = writer.prefix("DryRun");
    if let Some(var_3173) = &input.dry_run {
        scope_3172.boolean(*var_3173);
    }
    #[allow(unused_mut)]
    let mut scope_3174 = writer.prefix("AllRegions");
    if let Some(var_3175) = &input.all_regions {
        scope_3174.boolean(*var_3175);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_replace_root_volume_tasks(
    input: &crate::input::DescribeReplaceRootVolumeTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReplaceRootVolumeTasks",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3176 = writer.prefix("ReplaceRootVolumeTaskId");
    if let Some(var_3177) = &input.replace_root_volume_task_ids {
        let mut list_3179 = scope_3176.start_list(true, Some("ReplaceRootVolumeTaskId"));
        for item_3178 in var_3177 {
            #[allow(unused_mut)]
            let mut entry_3180 = list_3179.entry();
            entry_3180.string(item_3178);
        }
        list_3179.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3181 = writer.prefix("Filter");
    if let Some(var_3182) = &input.filters {
        let mut list_3184 = scope_3181.start_list(true, Some("Filter"));
        for item_3183 in var_3182 {
            #[allow(unused_mut)]
            let mut entry_3185 = list_3184.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3185, item_3183)?;
        }
        list_3184.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3186 = writer.prefix("MaxResults");
    if let Some(var_3187) = &input.max_results {
        scope_3186.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3187).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3188 = writer.prefix("NextToken");
    if let Some(var_3189) = &input.next_token {
        scope_3188.string(var_3189);
    }
    #[allow(unused_mut)]
    let mut scope_3190 = writer.prefix("DryRun");
    if let Some(var_3191) = &input.dry_run {
        scope_3190.boolean(*var_3191);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances(
    input: &crate::input::DescribeReservedInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3192 = writer.prefix("Filter");
    if let Some(var_3193) = &input.filters {
        let mut list_3195 = scope_3192.start_list(true, Some("Filter"));
        for item_3194 in var_3193 {
            #[allow(unused_mut)]
            let mut entry_3196 = list_3195.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3196, item_3194)?;
        }
        list_3195.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3197 = writer.prefix("OfferingClass");
    if let Some(var_3198) = &input.offering_class {
        scope_3197.string(var_3198.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3199 = writer.prefix("ReservedInstancesId");
    if let Some(var_3200) = &input.reserved_instances_ids {
        let mut list_3202 = scope_3199.start_list(true, Some("ReservedInstancesId"));
        for item_3201 in var_3200 {
            #[allow(unused_mut)]
            let mut entry_3203 = list_3202.entry();
            entry_3203.string(item_3201);
        }
        list_3202.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3204 = writer.prefix("DryRun");
    if let Some(var_3205) = &input.dry_run {
        scope_3204.boolean(*var_3205);
    }
    #[allow(unused_mut)]
    let mut scope_3206 = writer.prefix("OfferingType");
    if let Some(var_3207) = &input.offering_type {
        scope_3206.string(var_3207.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances_listings(
    input: &crate::input::DescribeReservedInstancesListingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedInstancesListings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3208 = writer.prefix("Filter");
    if let Some(var_3209) = &input.filters {
        let mut list_3211 = scope_3208.start_list(true, Some("Filter"));
        for item_3210 in var_3209 {
            #[allow(unused_mut)]
            let mut entry_3212 = list_3211.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3212, item_3210)?;
        }
        list_3211.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3213 = writer.prefix("ReservedInstancesId");
    if let Some(var_3214) = &input.reserved_instances_id {
        scope_3213.string(var_3214);
    }
    #[allow(unused_mut)]
    let mut scope_3215 = writer.prefix("ReservedInstancesListingId");
    if let Some(var_3216) = &input.reserved_instances_listing_id {
        scope_3215.string(var_3216);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances_modifications(
    input: &crate::input::DescribeReservedInstancesModificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedInstancesModifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3217 = writer.prefix("Filter");
    if let Some(var_3218) = &input.filters {
        let mut list_3220 = scope_3217.start_list(true, Some("Filter"));
        for item_3219 in var_3218 {
            #[allow(unused_mut)]
            let mut entry_3221 = list_3220.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3221, item_3219)?;
        }
        list_3220.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3222 = writer.prefix("ReservedInstancesModificationId");
    if let Some(var_3223) = &input.reserved_instances_modification_ids {
        let mut list_3225 = scope_3222.start_list(true, Some("ReservedInstancesModificationId"));
        for item_3224 in var_3223 {
            #[allow(unused_mut)]
            let mut entry_3226 = list_3225.entry();
            entry_3226.string(item_3224);
        }
        list_3225.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3227 = writer.prefix("NextToken");
    if let Some(var_3228) = &input.next_token {
        scope_3227.string(var_3228);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances_offerings(
    input: &crate::input::DescribeReservedInstancesOfferingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedInstancesOfferings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3229 = writer.prefix("AvailabilityZone");
    if let Some(var_3230) = &input.availability_zone {
        scope_3229.string(var_3230);
    }
    #[allow(unused_mut)]
    let mut scope_3231 = writer.prefix("Filter");
    if let Some(var_3232) = &input.filters {
        let mut list_3234 = scope_3231.start_list(true, Some("Filter"));
        for item_3233 in var_3232 {
            #[allow(unused_mut)]
            let mut entry_3235 = list_3234.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3235, item_3233)?;
        }
        list_3234.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3236 = writer.prefix("IncludeMarketplace");
    if let Some(var_3237) = &input.include_marketplace {
        scope_3236.boolean(*var_3237);
    }
    #[allow(unused_mut)]
    let mut scope_3238 = writer.prefix("InstanceType");
    if let Some(var_3239) = &input.instance_type {
        scope_3238.string(var_3239.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3240 = writer.prefix("MaxDuration");
    if let Some(var_3241) = &input.max_duration {
        scope_3240.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3241).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3242 = writer.prefix("MaxInstanceCount");
    if let Some(var_3243) = &input.max_instance_count {
        scope_3242.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3243).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3244 = writer.prefix("MinDuration");
    if let Some(var_3245) = &input.min_duration {
        scope_3244.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3245).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3246 = writer.prefix("OfferingClass");
    if let Some(var_3247) = &input.offering_class {
        scope_3246.string(var_3247.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3248 = writer.prefix("ProductDescription");
    if let Some(var_3249) = &input.product_description {
        scope_3248.string(var_3249.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3250 = writer.prefix("ReservedInstancesOfferingId");
    if let Some(var_3251) = &input.reserved_instances_offering_ids {
        let mut list_3253 = scope_3250.start_list(true, None);
        for item_3252 in var_3251 {
            #[allow(unused_mut)]
            let mut entry_3254 = list_3253.entry();
            entry_3254.string(item_3252);
        }
        list_3253.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3255 = writer.prefix("DryRun");
    if let Some(var_3256) = &input.dry_run {
        scope_3255.boolean(*var_3256);
    }
    #[allow(unused_mut)]
    let mut scope_3257 = writer.prefix("InstanceTenancy");
    if let Some(var_3258) = &input.instance_tenancy {
        scope_3257.string(var_3258.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3259 = writer.prefix("MaxResults");
    if let Some(var_3260) = &input.max_results {
        scope_3259.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3260).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3261 = writer.prefix("NextToken");
    if let Some(var_3262) = &input.next_token {
        scope_3261.string(var_3262);
    }
    #[allow(unused_mut)]
    let mut scope_3263 = writer.prefix("OfferingType");
    if let Some(var_3264) = &input.offering_type {
        scope_3263.string(var_3264.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_route_tables(
    input: &crate::input::DescribeRouteTablesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeRouteTables", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3265 = writer.prefix("Filter");
    if let Some(var_3266) = &input.filters {
        let mut list_3268 = scope_3265.start_list(true, Some("Filter"));
        for item_3267 in var_3266 {
            #[allow(unused_mut)]
            let mut entry_3269 = list_3268.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3269, item_3267)?;
        }
        list_3268.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3270 = writer.prefix("DryRun");
    if let Some(var_3271) = &input.dry_run {
        scope_3270.boolean(*var_3271);
    }
    #[allow(unused_mut)]
    let mut scope_3272 = writer.prefix("RouteTableId");
    if let Some(var_3273) = &input.route_table_ids {
        let mut list_3275 = scope_3272.start_list(true, Some("item"));
        for item_3274 in var_3273 {
            #[allow(unused_mut)]
            let mut entry_3276 = list_3275.entry();
            entry_3276.string(item_3274);
        }
        list_3275.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3277 = writer.prefix("NextToken");
    if let Some(var_3278) = &input.next_token {
        scope_3277.string(var_3278);
    }
    #[allow(unused_mut)]
    let mut scope_3279 = writer.prefix("MaxResults");
    if let Some(var_3280) = &input.max_results {
        scope_3279.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3280).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_scheduled_instance_availability(
    input: &crate::input::DescribeScheduledInstanceAvailabilityInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeScheduledInstanceAvailability",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3281 = writer.prefix("DryRun");
    if let Some(var_3282) = &input.dry_run {
        scope_3281.boolean(*var_3282);
    }
    #[allow(unused_mut)]
    let mut scope_3283 = writer.prefix("Filter");
    if let Some(var_3284) = &input.filters {
        let mut list_3286 = scope_3283.start_list(true, Some("Filter"));
        for item_3285 in var_3284 {
            #[allow(unused_mut)]
            let mut entry_3287 = list_3286.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3287, item_3285)?;
        }
        list_3286.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3288 = writer.prefix("FirstSlotStartTimeRange");
    if let Some(var_3289) = &input.first_slot_start_time_range {
        crate::query_ser::serialize_structure_crate_model_slot_date_time_range_request(
            scope_3288, var_3289,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_3290 = writer.prefix("MaxResults");
    if let Some(var_3291) = &input.max_results {
        scope_3290.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3291).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3292 = writer.prefix("MaxSlotDurationInHours");
    if let Some(var_3293) = &input.max_slot_duration_in_hours {
        scope_3292.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3293).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3294 = writer.prefix("MinSlotDurationInHours");
    if let Some(var_3295) = &input.min_slot_duration_in_hours {
        scope_3294.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3295).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3296 = writer.prefix("NextToken");
    if let Some(var_3297) = &input.next_token {
        scope_3296.string(var_3297);
    }
    #[allow(unused_mut)]
    let mut scope_3298 = writer.prefix("Recurrence");
    if let Some(var_3299) = &input.recurrence {
        crate::query_ser::serialize_structure_crate_model_scheduled_instance_recurrence_request(
            scope_3298, var_3299,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_scheduled_instances(
    input: &crate::input::DescribeScheduledInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3300 = writer.prefix("DryRun");
    if let Some(var_3301) = &input.dry_run {
        scope_3300.boolean(*var_3301);
    }
    #[allow(unused_mut)]
    let mut scope_3302 = writer.prefix("Filter");
    if let Some(var_3303) = &input.filters {
        let mut list_3305 = scope_3302.start_list(true, Some("Filter"));
        for item_3304 in var_3303 {
            #[allow(unused_mut)]
            let mut entry_3306 = list_3305.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3306, item_3304)?;
        }
        list_3305.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3307 = writer.prefix("MaxResults");
    if let Some(var_3308) = &input.max_results {
        scope_3307.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3308).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3309 = writer.prefix("NextToken");
    if let Some(var_3310) = &input.next_token {
        scope_3309.string(var_3310);
    }
    #[allow(unused_mut)]
    let mut scope_3311 = writer.prefix("ScheduledInstanceId");
    if let Some(var_3312) = &input.scheduled_instance_ids {
        let mut list_3314 = scope_3311.start_list(true, Some("ScheduledInstanceId"));
        for item_3313 in var_3312 {
            #[allow(unused_mut)]
            let mut entry_3315 = list_3314.entry();
            entry_3315.string(item_3313);
        }
        list_3314.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3316 = writer.prefix("SlotStartTimeRange");
    if let Some(var_3317) = &input.slot_start_time_range {
        crate::query_ser::serialize_structure_crate_model_slot_start_time_range_request(
            scope_3316, var_3317,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_security_group_references(
    input: &crate::input::DescribeSecurityGroupReferencesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeSecurityGroupReferences",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3318 = writer.prefix("DryRun");
    if let Some(var_3319) = &input.dry_run {
        scope_3318.boolean(*var_3319);
    }
    #[allow(unused_mut)]
    let mut scope_3320 = writer.prefix("GroupId");
    if let Some(var_3321) = &input.group_id {
        let mut list_3323 = scope_3320.start_list(true, Some("item"));
        for item_3322 in var_3321 {
            #[allow(unused_mut)]
            let mut entry_3324 = list_3323.entry();
            entry_3324.string(item_3322);
        }
        list_3323.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_security_group_rules(
    input: &crate::input::DescribeSecurityGroupRulesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSecurityGroupRules", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3325 = writer.prefix("Filter");
    if let Some(var_3326) = &input.filters {
        let mut list_3328 = scope_3325.start_list(true, Some("Filter"));
        for item_3327 in var_3326 {
            #[allow(unused_mut)]
            let mut entry_3329 = list_3328.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3329, item_3327)?;
        }
        list_3328.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3330 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_3331) = &input.security_group_rule_ids {
        let mut list_3333 = scope_3330.start_list(true, Some("item"));
        for item_3332 in var_3331 {
            #[allow(unused_mut)]
            let mut entry_3334 = list_3333.entry();
            entry_3334.string(item_3332);
        }
        list_3333.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3335 = writer.prefix("DryRun");
    if let Some(var_3336) = &input.dry_run {
        scope_3335.boolean(*var_3336);
    }
    #[allow(unused_mut)]
    let mut scope_3337 = writer.prefix("NextToken");
    if let Some(var_3338) = &input.next_token {
        scope_3337.string(var_3338);
    }
    #[allow(unused_mut)]
    let mut scope_3339 = writer.prefix("MaxResults");
    if let Some(var_3340) = &input.max_results {
        scope_3339.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3340).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_security_groups(
    input: &crate::input::DescribeSecurityGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSecurityGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3341 = writer.prefix("Filter");
    if let Some(var_3342) = &input.filters {
        let mut list_3344 = scope_3341.start_list(true, Some("Filter"));
        for item_3343 in var_3342 {
            #[allow(unused_mut)]
            let mut entry_3345 = list_3344.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3345, item_3343)?;
        }
        list_3344.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3346 = writer.prefix("GroupId");
    if let Some(var_3347) = &input.group_ids {
        let mut list_3349 = scope_3346.start_list(true, Some("groupId"));
        for item_3348 in var_3347 {
            #[allow(unused_mut)]
            let mut entry_3350 = list_3349.entry();
            entry_3350.string(item_3348);
        }
        list_3349.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3351 = writer.prefix("GroupName");
    if let Some(var_3352) = &input.group_names {
        let mut list_3354 = scope_3351.start_list(true, Some("GroupName"));
        for item_3353 in var_3352 {
            #[allow(unused_mut)]
            let mut entry_3355 = list_3354.entry();
            entry_3355.string(item_3353);
        }
        list_3354.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3356 = writer.prefix("DryRun");
    if let Some(var_3357) = &input.dry_run {
        scope_3356.boolean(*var_3357);
    }
    #[allow(unused_mut)]
    let mut scope_3358 = writer.prefix("NextToken");
    if let Some(var_3359) = &input.next_token {
        scope_3358.string(var_3359);
    }
    #[allow(unused_mut)]
    let mut scope_3360 = writer.prefix("MaxResults");
    if let Some(var_3361) = &input.max_results {
        scope_3360.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3361).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshot_attribute(
    input: &crate::input::DescribeSnapshotAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3362 = writer.prefix("Attribute");
    if let Some(var_3363) = &input.attribute {
        scope_3362.string(var_3363.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3364 = writer.prefix("SnapshotId");
    if let Some(var_3365) = &input.snapshot_id {
        scope_3364.string(var_3365);
    }
    #[allow(unused_mut)]
    let mut scope_3366 = writer.prefix("DryRun");
    if let Some(var_3367) = &input.dry_run {
        scope_3366.boolean(*var_3367);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshots(
    input: &crate::input::DescribeSnapshotsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshots", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3368 = writer.prefix("Filter");
    if let Some(var_3369) = &input.filters {
        let mut list_3371 = scope_3368.start_list(true, Some("Filter"));
        for item_3370 in var_3369 {
            #[allow(unused_mut)]
            let mut entry_3372 = list_3371.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3372, item_3370)?;
        }
        list_3371.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3373 = writer.prefix("MaxResults");
    if let Some(var_3374) = &input.max_results {
        scope_3373.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3374).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3375 = writer.prefix("NextToken");
    if let Some(var_3376) = &input.next_token {
        scope_3375.string(var_3376);
    }
    #[allow(unused_mut)]
    let mut scope_3377 = writer.prefix("Owner");
    if let Some(var_3378) = &input.owner_ids {
        let mut list_3380 = scope_3377.start_list(true, Some("Owner"));
        for item_3379 in var_3378 {
            #[allow(unused_mut)]
            let mut entry_3381 = list_3380.entry();
            entry_3381.string(item_3379);
        }
        list_3380.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3382 = writer.prefix("RestorableBy");
    if let Some(var_3383) = &input.restorable_by_user_ids {
        let mut list_3385 = scope_3382.start_list(true, None);
        for item_3384 in var_3383 {
            #[allow(unused_mut)]
            let mut entry_3386 = list_3385.entry();
            entry_3386.string(item_3384);
        }
        list_3385.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3387 = writer.prefix("SnapshotId");
    if let Some(var_3388) = &input.snapshot_ids {
        let mut list_3390 = scope_3387.start_list(true, Some("SnapshotId"));
        for item_3389 in var_3388 {
            #[allow(unused_mut)]
            let mut entry_3391 = list_3390.entry();
            entry_3391.string(item_3389);
        }
        list_3390.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3392 = writer.prefix("DryRun");
    if let Some(var_3393) = &input.dry_run {
        scope_3392.boolean(*var_3393);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshot_tier_status(
    input: &crate::input::DescribeSnapshotTierStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshotTierStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3394 = writer.prefix("Filter");
    if let Some(var_3395) = &input.filters {
        let mut list_3397 = scope_3394.start_list(true, Some("Filter"));
        for item_3396 in var_3395 {
            #[allow(unused_mut)]
            let mut entry_3398 = list_3397.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3398, item_3396)?;
        }
        list_3397.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3399 = writer.prefix("DryRun");
    if let Some(var_3400) = &input.dry_run {
        scope_3399.boolean(*var_3400);
    }
    #[allow(unused_mut)]
    let mut scope_3401 = writer.prefix("NextToken");
    if let Some(var_3402) = &input.next_token {
        scope_3401.string(var_3402);
    }
    #[allow(unused_mut)]
    let mut scope_3403 = writer.prefix("MaxResults");
    if let Some(var_3404) = &input.max_results {
        scope_3403.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3404).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_datafeed_subscription(
    input: &crate::input::DescribeSpotDatafeedSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeSpotDatafeedSubscription",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3405 = writer.prefix("DryRun");
    if let Some(var_3406) = &input.dry_run {
        scope_3405.boolean(*var_3406);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_fleet_instances(
    input: &crate::input::DescribeSpotFleetInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotFleetInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3407 = writer.prefix("DryRun");
    if let Some(var_3408) = &input.dry_run {
        scope_3407.boolean(*var_3408);
    }
    #[allow(unused_mut)]
    let mut scope_3409 = writer.prefix("MaxResults");
    if let Some(var_3410) = &input.max_results {
        scope_3409.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3410).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3411 = writer.prefix("NextToken");
    if let Some(var_3412) = &input.next_token {
        scope_3411.string(var_3412);
    }
    #[allow(unused_mut)]
    let mut scope_3413 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3414) = &input.spot_fleet_request_id {
        scope_3413.string(var_3414);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_fleet_request_history(
    input: &crate::input::DescribeSpotFleetRequestHistoryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeSpotFleetRequestHistory",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3415 = writer.prefix("DryRun");
    if let Some(var_3416) = &input.dry_run {
        scope_3415.boolean(*var_3416);
    }
    #[allow(unused_mut)]
    let mut scope_3417 = writer.prefix("EventType");
    if let Some(var_3418) = &input.event_type {
        scope_3417.string(var_3418.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3419 = writer.prefix("MaxResults");
    if let Some(var_3420) = &input.max_results {
        scope_3419.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3420).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3421 = writer.prefix("NextToken");
    if let Some(var_3422) = &input.next_token {
        scope_3421.string(var_3422);
    }
    #[allow(unused_mut)]
    let mut scope_3423 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3424) = &input.spot_fleet_request_id {
        scope_3423.string(var_3424);
    }
    #[allow(unused_mut)]
    let mut scope_3425 = writer.prefix("StartTime");
    if let Some(var_3426) = &input.start_time {
        scope_3425.date_time(var_3426, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_fleet_requests(
    input: &crate::input::DescribeSpotFleetRequestsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotFleetRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3427 = writer.prefix("DryRun");
    if let Some(var_3428) = &input.dry_run {
        scope_3427.boolean(*var_3428);
    }
    #[allow(unused_mut)]
    let mut scope_3429 = writer.prefix("MaxResults");
    if let Some(var_3430) = &input.max_results {
        scope_3429.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3430).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3431 = writer.prefix("NextToken");
    if let Some(var_3432) = &input.next_token {
        scope_3431.string(var_3432);
    }
    #[allow(unused_mut)]
    let mut scope_3433 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3434) = &input.spot_fleet_request_ids {
        let mut list_3436 = scope_3433.start_list(true, Some("item"));
        for item_3435 in var_3434 {
            #[allow(unused_mut)]
            let mut entry_3437 = list_3436.entry();
            entry_3437.string(item_3435);
        }
        list_3436.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_instance_requests(
    input: &crate::input::DescribeSpotInstanceRequestsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotInstanceRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3438 = writer.prefix("Filter");
    if let Some(var_3439) = &input.filters {
        let mut list_3441 = scope_3438.start_list(true, Some("Filter"));
        for item_3440 in var_3439 {
            #[allow(unused_mut)]
            let mut entry_3442 = list_3441.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3442, item_3440)?;
        }
        list_3441.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3443 = writer.prefix("DryRun");
    if let Some(var_3444) = &input.dry_run {
        scope_3443.boolean(*var_3444);
    }
    #[allow(unused_mut)]
    let mut scope_3445 = writer.prefix("SpotInstanceRequestId");
    if let Some(var_3446) = &input.spot_instance_request_ids {
        let mut list_3448 = scope_3445.start_list(true, Some("SpotInstanceRequestId"));
        for item_3447 in var_3446 {
            #[allow(unused_mut)]
            let mut entry_3449 = list_3448.entry();
            entry_3449.string(item_3447);
        }
        list_3448.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3450 = writer.prefix("NextToken");
    if let Some(var_3451) = &input.next_token {
        scope_3450.string(var_3451);
    }
    #[allow(unused_mut)]
    let mut scope_3452 = writer.prefix("MaxResults");
    if let Some(var_3453) = &input.max_results {
        scope_3452.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3453).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_price_history(
    input: &crate::input::DescribeSpotPriceHistoryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotPriceHistory", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3454 = writer.prefix("Filter");
    if let Some(var_3455) = &input.filters {
        let mut list_3457 = scope_3454.start_list(true, Some("Filter"));
        for item_3456 in var_3455 {
            #[allow(unused_mut)]
            let mut entry_3458 = list_3457.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3458, item_3456)?;
        }
        list_3457.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3459 = writer.prefix("AvailabilityZone");
    if let Some(var_3460) = &input.availability_zone {
        scope_3459.string(var_3460);
    }
    #[allow(unused_mut)]
    let mut scope_3461 = writer.prefix("DryRun");
    if let Some(var_3462) = &input.dry_run {
        scope_3461.boolean(*var_3462);
    }
    #[allow(unused_mut)]
    let mut scope_3463 = writer.prefix("EndTime");
    if let Some(var_3464) = &input.end_time {
        scope_3463.date_time(var_3464, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_3465 = writer.prefix("InstanceType");
    if let Some(var_3466) = &input.instance_types {
        let mut list_3468 = scope_3465.start_list(true, None);
        for item_3467 in var_3466 {
            #[allow(unused_mut)]
            let mut entry_3469 = list_3468.entry();
            entry_3469.string(item_3467.as_str());
        }
        list_3468.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3470 = writer.prefix("MaxResults");
    if let Some(var_3471) = &input.max_results {
        scope_3470.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3471).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3472 = writer.prefix("NextToken");
    if let Some(var_3473) = &input.next_token {
        scope_3472.string(var_3473);
    }
    #[allow(unused_mut)]
    let mut scope_3474 = writer.prefix("ProductDescription");
    if let Some(var_3475) = &input.product_descriptions {
        let mut list_3477 = scope_3474.start_list(true, None);
        for item_3476 in var_3475 {
            #[allow(unused_mut)]
            let mut entry_3478 = list_3477.entry();
            entry_3478.string(item_3476);
        }
        list_3477.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3479 = writer.prefix("StartTime");
    if let Some(var_3480) = &input.start_time {
        scope_3479.date_time(var_3480, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_stale_security_groups(
    input: &crate::input::DescribeStaleSecurityGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeStaleSecurityGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3481 = writer.prefix("DryRun");
    if let Some(var_3482) = &input.dry_run {
        scope_3481.boolean(*var_3482);
    }
    #[allow(unused_mut)]
    let mut scope_3483 = writer.prefix("MaxResults");
    if let Some(var_3484) = &input.max_results {
        scope_3483.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3484).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3485 = writer.prefix("NextToken");
    if let Some(var_3486) = &input.next_token {
        scope_3485.string(var_3486);
    }
    #[allow(unused_mut)]
    let mut scope_3487 = writer.prefix("VpcId");
    if let Some(var_3488) = &input.vpc_id {
        scope_3487.string(var_3488);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_store_image_tasks(
    input: &crate::input::DescribeStoreImageTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeStoreImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3489 = writer.prefix("ImageId");
    if let Some(var_3490) = &input.image_ids {
        let mut list_3492 = scope_3489.start_list(true, Some("item"));
        for item_3491 in var_3490 {
            #[allow(unused_mut)]
            let mut entry_3493 = list_3492.entry();
            entry_3493.string(item_3491);
        }
        list_3492.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3494 = writer.prefix("DryRun");
    if let Some(var_3495) = &input.dry_run {
        scope_3494.boolean(*var_3495);
    }
    #[allow(unused_mut)]
    let mut scope_3496 = writer.prefix("Filter");
    if let Some(var_3497) = &input.filters {
        let mut list_3499 = scope_3496.start_list(true, Some("Filter"));
        for item_3498 in var_3497 {
            #[allow(unused_mut)]
            let mut entry_3500 = list_3499.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3500, item_3498)?;
        }
        list_3499.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3501 = writer.prefix("NextToken");
    if let Some(var_3502) = &input.next_token {
        scope_3501.string(var_3502);
    }
    #[allow(unused_mut)]
    let mut scope_3503 = writer.prefix("MaxResults");
    if let Some(var_3504) = &input.max_results {
        scope_3503.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3504).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_subnets(
    input: &crate::input::DescribeSubnetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeSubnets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3505 = writer.prefix("Filter");
    if let Some(var_3506) = &input.filters {
        let mut list_3508 = scope_3505.start_list(true, Some("Filter"));
        for item_3507 in var_3506 {
            #[allow(unused_mut)]
            let mut entry_3509 = list_3508.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3509, item_3507)?;
        }
        list_3508.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3510 = writer.prefix("SubnetId");
    if let Some(var_3511) = &input.subnet_ids {
        let mut list_3513 = scope_3510.start_list(true, Some("SubnetId"));
        for item_3512 in var_3511 {
            #[allow(unused_mut)]
            let mut entry_3514 = list_3513.entry();
            entry_3514.string(item_3512);
        }
        list_3513.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3515 = writer.prefix("DryRun");
    if let Some(var_3516) = &input.dry_run {
        scope_3515.boolean(*var_3516);
    }
    #[allow(unused_mut)]
    let mut scope_3517 = writer.prefix("NextToken");
    if let Some(var_3518) = &input.next_token {
        scope_3517.string(var_3518);
    }
    #[allow(unused_mut)]
    let mut scope_3519 = writer.prefix("MaxResults");
    if let Some(var_3520) = &input.max_results {
        scope_3519.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3520).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_tags(
    input: &crate::input::DescribeTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3521 = writer.prefix("DryRun");
    if let Some(var_3522) = &input.dry_run {
        scope_3521.boolean(*var_3522);
    }
    #[allow(unused_mut)]
    let mut scope_3523 = writer.prefix("Filter");
    if let Some(var_3524) = &input.filters {
        let mut list_3526 = scope_3523.start_list(true, Some("Filter"));
        for item_3525 in var_3524 {
            #[allow(unused_mut)]
            let mut entry_3527 = list_3526.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3527, item_3525)?;
        }
        list_3526.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3528 = writer.prefix("MaxResults");
    if let Some(var_3529) = &input.max_results {
        scope_3528.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3529).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3530 = writer.prefix("NextToken");
    if let Some(var_3531) = &input.next_token {
        scope_3530.string(var_3531);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_traffic_mirror_filters(
    input: &crate::input::DescribeTrafficMirrorFiltersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorFilters", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3532 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_3533) = &input.traffic_mirror_filter_ids {
        let mut list_3535 = scope_3532.start_list(true, Some("item"));
        for item_3534 in var_3533 {
            #[allow(unused_mut)]
            let mut entry_3536 = list_3535.entry();
            entry_3536.string(item_3534);
        }
        list_3535.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3537 = writer.prefix("DryRun");
    if let Some(var_3538) = &input.dry_run {
        scope_3537.boolean(*var_3538);
    }
    #[allow(unused_mut)]
    let mut scope_3539 = writer.prefix("Filter");
    if let Some(var_3540) = &input.filters {
        let mut list_3542 = scope_3539.start_list(true, Some("Filter"));
        for item_3541 in var_3540 {
            #[allow(unused_mut)]
            let mut entry_3543 = list_3542.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3543, item_3541)?;
        }
        list_3542.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3544 = writer.prefix("MaxResults");
    if let Some(var_3545) = &input.max_results {
        scope_3544.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3545).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3546 = writer.prefix("NextToken");
    if let Some(var_3547) = &input.next_token {
        scope_3546.string(var_3547);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_traffic_mirror_sessions(
    input: &crate::input::DescribeTrafficMirrorSessionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorSessions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3548 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_3549) = &input.traffic_mirror_session_ids {
        let mut list_3551 = scope_3548.start_list(true, Some("item"));
        for item_3550 in var_3549 {
            #[allow(unused_mut)]
            let mut entry_3552 = list_3551.entry();
            entry_3552.string(item_3550);
        }
        list_3551.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3553 = writer.prefix("DryRun");
    if let Some(var_3554) = &input.dry_run {
        scope_3553.boolean(*var_3554);
    }
    #[allow(unused_mut)]
    let mut scope_3555 = writer.prefix("Filter");
    if let Some(var_3556) = &input.filters {
        let mut list_3558 = scope_3555.start_list(true, Some("Filter"));
        for item_3557 in var_3556 {
            #[allow(unused_mut)]
            let mut entry_3559 = list_3558.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3559, item_3557)?;
        }
        list_3558.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3560 = writer.prefix("MaxResults");
    if let Some(var_3561) = &input.max_results {
        scope_3560.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3561).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3562 = writer.prefix("NextToken");
    if let Some(var_3563) = &input.next_token {
        scope_3562.string(var_3563);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_traffic_mirror_targets(
    input: &crate::input::DescribeTrafficMirrorTargetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorTargets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3564 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_3565) = &input.traffic_mirror_target_ids {
        let mut list_3567 = scope_3564.start_list(true, Some("item"));
        for item_3566 in var_3565 {
            #[allow(unused_mut)]
            let mut entry_3568 = list_3567.entry();
            entry_3568.string(item_3566);
        }
        list_3567.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3569 = writer.prefix("DryRun");
    if let Some(var_3570) = &input.dry_run {
        scope_3569.boolean(*var_3570);
    }
    #[allow(unused_mut)]
    let mut scope_3571 = writer.prefix("Filter");
    if let Some(var_3572) = &input.filters {
        let mut list_3574 = scope_3571.start_list(true, Some("Filter"));
        for item_3573 in var_3572 {
            #[allow(unused_mut)]
            let mut entry_3575 = list_3574.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3575, item_3573)?;
        }
        list_3574.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3576 = writer.prefix("MaxResults");
    if let Some(var_3577) = &input.max_results {
        scope_3576.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3577).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3578 = writer.prefix("NextToken");
    if let Some(var_3579) = &input.next_token {
        scope_3578.string(var_3579);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_attachments(
    input: &crate::input::DescribeTransitGatewayAttachmentsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayAttachments",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3580 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3581) = &input.transit_gateway_attachment_ids {
        let mut list_3583 = scope_3580.start_list(true, None);
        for item_3582 in var_3581 {
            #[allow(unused_mut)]
            let mut entry_3584 = list_3583.entry();
            entry_3584.string(item_3582);
        }
        list_3583.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3585 = writer.prefix("Filter");
    if let Some(var_3586) = &input.filters {
        let mut list_3588 = scope_3585.start_list(true, Some("Filter"));
        for item_3587 in var_3586 {
            #[allow(unused_mut)]
            let mut entry_3589 = list_3588.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3589, item_3587)?;
        }
        list_3588.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3590 = writer.prefix("MaxResults");
    if let Some(var_3591) = &input.max_results {
        scope_3590.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3591).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3592 = writer.prefix("NextToken");
    if let Some(var_3593) = &input.next_token {
        scope_3592.string(var_3593);
    }
    #[allow(unused_mut)]
    let mut scope_3594 = writer.prefix("DryRun");
    if let Some(var_3595) = &input.dry_run {
        scope_3594.boolean(*var_3595);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_connect_peers(
    input: &crate::input::DescribeTransitGatewayConnectPeersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayConnectPeers",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3596 = writer.prefix("TransitGatewayConnectPeerIds");
    if let Some(var_3597) = &input.transit_gateway_connect_peer_ids {
        let mut list_3599 = scope_3596.start_list(true, Some("item"));
        for item_3598 in var_3597 {
            #[allow(unused_mut)]
            let mut entry_3600 = list_3599.entry();
            entry_3600.string(item_3598);
        }
        list_3599.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3601 = writer.prefix("Filter");
    if let Some(var_3602) = &input.filters {
        let mut list_3604 = scope_3601.start_list(true, Some("Filter"));
        for item_3603 in var_3602 {
            #[allow(unused_mut)]
            let mut entry_3605 = list_3604.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3605, item_3603)?;
        }
        list_3604.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3606 = writer.prefix("MaxResults");
    if let Some(var_3607) = &input.max_results {
        scope_3606.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3607).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3608 = writer.prefix("NextToken");
    if let Some(var_3609) = &input.next_token {
        scope_3608.string(var_3609);
    }
    #[allow(unused_mut)]
    let mut scope_3610 = writer.prefix("DryRun");
    if let Some(var_3611) = &input.dry_run {
        scope_3610.boolean(*var_3611);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_connects(
    input: &crate::input::DescribeTransitGatewayConnectsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayConnects",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3612 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3613) = &input.transit_gateway_attachment_ids {
        let mut list_3615 = scope_3612.start_list(true, None);
        for item_3614 in var_3613 {
            #[allow(unused_mut)]
            let mut entry_3616 = list_3615.entry();
            entry_3616.string(item_3614);
        }
        list_3615.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3617 = writer.prefix("Filter");
    if let Some(var_3618) = &input.filters {
        let mut list_3620 = scope_3617.start_list(true, Some("Filter"));
        for item_3619 in var_3618 {
            #[allow(unused_mut)]
            let mut entry_3621 = list_3620.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3621, item_3619)?;
        }
        list_3620.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3622 = writer.prefix("MaxResults");
    if let Some(var_3623) = &input.max_results {
        scope_3622.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3623).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3624 = writer.prefix("NextToken");
    if let Some(var_3625) = &input.next_token {
        scope_3624.string(var_3625);
    }
    #[allow(unused_mut)]
    let mut scope_3626 = writer.prefix("DryRun");
    if let Some(var_3627) = &input.dry_run {
        scope_3626.boolean(*var_3627);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_multicast_domains(
    input: &crate::input::DescribeTransitGatewayMulticastDomainsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayMulticastDomains",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3628 = writer.prefix("TransitGatewayMulticastDomainIds");
    if let Some(var_3629) = &input.transit_gateway_multicast_domain_ids {
        let mut list_3631 = scope_3628.start_list(true, Some("item"));
        for item_3630 in var_3629 {
            #[allow(unused_mut)]
            let mut entry_3632 = list_3631.entry();
            entry_3632.string(item_3630);
        }
        list_3631.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3633 = writer.prefix("Filter");
    if let Some(var_3634) = &input.filters {
        let mut list_3636 = scope_3633.start_list(true, Some("Filter"));
        for item_3635 in var_3634 {
            #[allow(unused_mut)]
            let mut entry_3637 = list_3636.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3637, item_3635)?;
        }
        list_3636.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3638 = writer.prefix("MaxResults");
    if let Some(var_3639) = &input.max_results {
        scope_3638.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3639).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3640 = writer.prefix("NextToken");
    if let Some(var_3641) = &input.next_token {
        scope_3640.string(var_3641);
    }
    #[allow(unused_mut)]
    let mut scope_3642 = writer.prefix("DryRun");
    if let Some(var_3643) = &input.dry_run {
        scope_3642.boolean(*var_3643);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_peering_attachments(
    input: &crate::input::DescribeTransitGatewayPeeringAttachmentsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayPeeringAttachments",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3644 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3645) = &input.transit_gateway_attachment_ids {
        let mut list_3647 = scope_3644.start_list(true, None);
        for item_3646 in var_3645 {
            #[allow(unused_mut)]
            let mut entry_3648 = list_3647.entry();
            entry_3648.string(item_3646);
        }
        list_3647.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3649 = writer.prefix("Filter");
    if let Some(var_3650) = &input.filters {
        let mut list_3652 = scope_3649.start_list(true, Some("Filter"));
        for item_3651 in var_3650 {
            #[allow(unused_mut)]
            let mut entry_3653 = list_3652.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3653, item_3651)?;
        }
        list_3652.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3654 = writer.prefix("MaxResults");
    if let Some(var_3655) = &input.max_results {
        scope_3654.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3655).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3656 = writer.prefix("NextToken");
    if let Some(var_3657) = &input.next_token {
        scope_3656.string(var_3657);
    }
    #[allow(unused_mut)]
    let mut scope_3658 = writer.prefix("DryRun");
    if let Some(var_3659) = &input.dry_run {
        scope_3658.boolean(*var_3659);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_route_tables(
    input: &crate::input::DescribeTransitGatewayRouteTablesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayRouteTables",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3660 = writer.prefix("TransitGatewayRouteTableIds");
    if let Some(var_3661) = &input.transit_gateway_route_table_ids {
        let mut list_3663 = scope_3660.start_list(true, Some("item"));
        for item_3662 in var_3661 {
            #[allow(unused_mut)]
            let mut entry_3664 = list_3663.entry();
            entry_3664.string(item_3662);
        }
        list_3663.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3665 = writer.prefix("Filter");
    if let Some(var_3666) = &input.filters {
        let mut list_3668 = scope_3665.start_list(true, Some("Filter"));
        for item_3667 in var_3666 {
            #[allow(unused_mut)]
            let mut entry_3669 = list_3668.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3669, item_3667)?;
        }
        list_3668.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3670 = writer.prefix("MaxResults");
    if let Some(var_3671) = &input.max_results {
        scope_3670.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3671).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3672 = writer.prefix("NextToken");
    if let Some(var_3673) = &input.next_token {
        scope_3672.string(var_3673);
    }
    #[allow(unused_mut)]
    let mut scope_3674 = writer.prefix("DryRun");
    if let Some(var_3675) = &input.dry_run {
        scope_3674.boolean(*var_3675);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateways(
    input: &crate::input::DescribeTransitGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTransitGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3676 = writer.prefix("TransitGatewayIds");
    if let Some(var_3677) = &input.transit_gateway_ids {
        let mut list_3679 = scope_3676.start_list(true, Some("item"));
        for item_3678 in var_3677 {
            #[allow(unused_mut)]
            let mut entry_3680 = list_3679.entry();
            entry_3680.string(item_3678);
        }
        list_3679.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3681 = writer.prefix("Filter");
    if let Some(var_3682) = &input.filters {
        let mut list_3684 = scope_3681.start_list(true, Some("Filter"));
        for item_3683 in var_3682 {
            #[allow(unused_mut)]
            let mut entry_3685 = list_3684.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3685, item_3683)?;
        }
        list_3684.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3686 = writer.prefix("MaxResults");
    if let Some(var_3687) = &input.max_results {
        scope_3686.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3687).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3688 = writer.prefix("NextToken");
    if let Some(var_3689) = &input.next_token {
        scope_3688.string(var_3689);
    }
    #[allow(unused_mut)]
    let mut scope_3690 = writer.prefix("DryRun");
    if let Some(var_3691) = &input.dry_run {
        scope_3690.boolean(*var_3691);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_vpc_attachments(
    input: &crate::input::DescribeTransitGatewayVpcAttachmentsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayVpcAttachments",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3692 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3693) = &input.transit_gateway_attachment_ids {
        let mut list_3695 = scope_3692.start_list(true, None);
        for item_3694 in var_3693 {
            #[allow(unused_mut)]
            let mut entry_3696 = list_3695.entry();
            entry_3696.string(item_3694);
        }
        list_3695.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3697 = writer.prefix("Filter");
    if let Some(var_3698) = &input.filters {
        let mut list_3700 = scope_3697.start_list(true, Some("Filter"));
        for item_3699 in var_3698 {
            #[allow(unused_mut)]
            let mut entry_3701 = list_3700.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3701, item_3699)?;
        }
        list_3700.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3702 = writer.prefix("MaxResults");
    if let Some(var_3703) = &input.max_results {
        scope_3702.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3703).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3704 = writer.prefix("NextToken");
    if let Some(var_3705) = &input.next_token {
        scope_3704.string(var_3705);
    }
    #[allow(unused_mut)]
    let mut scope_3706 = writer.prefix("DryRun");
    if let Some(var_3707) = &input.dry_run {
        scope_3706.boolean(*var_3707);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_trunk_interface_associations(
    input: &crate::input::DescribeTrunkInterfaceAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTrunkInterfaceAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3708 = writer.prefix("AssociationId");
    if let Some(var_3709) = &input.association_ids {
        let mut list_3711 = scope_3708.start_list(true, Some("item"));
        for item_3710 in var_3709 {
            #[allow(unused_mut)]
            let mut entry_3712 = list_3711.entry();
            entry_3712.string(item_3710);
        }
        list_3711.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3713 = writer.prefix("DryRun");
    if let Some(var_3714) = &input.dry_run {
        scope_3713.boolean(*var_3714);
    }
    #[allow(unused_mut)]
    let mut scope_3715 = writer.prefix("Filter");
    if let Some(var_3716) = &input.filters {
        let mut list_3718 = scope_3715.start_list(true, Some("Filter"));
        for item_3717 in var_3716 {
            #[allow(unused_mut)]
            let mut entry_3719 = list_3718.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3719, item_3717)?;
        }
        list_3718.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3720 = writer.prefix("NextToken");
    if let Some(var_3721) = &input.next_token {
        scope_3720.string(var_3721);
    }
    #[allow(unused_mut)]
    let mut scope_3722 = writer.prefix("MaxResults");
    if let Some(var_3723) = &input.max_results {
        scope_3722.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3723).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volume_attribute(
    input: &crate::input::DescribeVolumeAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumeAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3724 = writer.prefix("Attribute");
    if let Some(var_3725) = &input.attribute {
        scope_3724.string(var_3725.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3726 = writer.prefix("VolumeId");
    if let Some(var_3727) = &input.volume_id {
        scope_3726.string(var_3727);
    }
    #[allow(unused_mut)]
    let mut scope_3728 = writer.prefix("DryRun");
    if let Some(var_3729) = &input.dry_run {
        scope_3728.boolean(*var_3729);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volumes(
    input: &crate::input::DescribeVolumesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3730 = writer.prefix("Filter");
    if let Some(var_3731) = &input.filters {
        let mut list_3733 = scope_3730.start_list(true, Some("Filter"));
        for item_3732 in var_3731 {
            #[allow(unused_mut)]
            let mut entry_3734 = list_3733.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3734, item_3732)?;
        }
        list_3733.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3735 = writer.prefix("VolumeId");
    if let Some(var_3736) = &input.volume_ids {
        let mut list_3738 = scope_3735.start_list(true, Some("VolumeId"));
        for item_3737 in var_3736 {
            #[allow(unused_mut)]
            let mut entry_3739 = list_3738.entry();
            entry_3739.string(item_3737);
        }
        list_3738.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3740 = writer.prefix("DryRun");
    if let Some(var_3741) = &input.dry_run {
        scope_3740.boolean(*var_3741);
    }
    #[allow(unused_mut)]
    let mut scope_3742 = writer.prefix("MaxResults");
    if let Some(var_3743) = &input.max_results {
        scope_3742.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3743).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3744 = writer.prefix("NextToken");
    if let Some(var_3745) = &input.next_token {
        scope_3744.string(var_3745);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volumes_modifications(
    input: &crate::input::DescribeVolumesModificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumesModifications", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3746 = writer.prefix("DryRun");
    if let Some(var_3747) = &input.dry_run {
        scope_3746.boolean(*var_3747);
    }
    #[allow(unused_mut)]
    let mut scope_3748 = writer.prefix("VolumeId");
    if let Some(var_3749) = &input.volume_ids {
        let mut list_3751 = scope_3748.start_list(true, Some("VolumeId"));
        for item_3750 in var_3749 {
            #[allow(unused_mut)]
            let mut entry_3752 = list_3751.entry();
            entry_3752.string(item_3750);
        }
        list_3751.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3753 = writer.prefix("Filter");
    if let Some(var_3754) = &input.filters {
        let mut list_3756 = scope_3753.start_list(true, Some("Filter"));
        for item_3755 in var_3754 {
            #[allow(unused_mut)]
            let mut entry_3757 = list_3756.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3757, item_3755)?;
        }
        list_3756.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3758 = writer.prefix("NextToken");
    if let Some(var_3759) = &input.next_token {
        scope_3758.string(var_3759);
    }
    #[allow(unused_mut)]
    let mut scope_3760 = writer.prefix("MaxResults");
    if let Some(var_3761) = &input.max_results {
        scope_3760.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3761).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volume_status(
    input: &crate::input::DescribeVolumeStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumeStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3762 = writer.prefix("Filter");
    if let Some(var_3763) = &input.filters {
        let mut list_3765 = scope_3762.start_list(true, Some("Filter"));
        for item_3764 in var_3763 {
            #[allow(unused_mut)]
            let mut entry_3766 = list_3765.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3766, item_3764)?;
        }
        list_3765.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3767 = writer.prefix("MaxResults");
    if let Some(var_3768) = &input.max_results {
        scope_3767.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3768).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3769 = writer.prefix("NextToken");
    if let Some(var_3770) = &input.next_token {
        scope_3769.string(var_3770);
    }
    #[allow(unused_mut)]
    let mut scope_3771 = writer.prefix("VolumeId");
    if let Some(var_3772) = &input.volume_ids {
        let mut list_3774 = scope_3771.start_list(true, Some("VolumeId"));
        for item_3773 in var_3772 {
            #[allow(unused_mut)]
            let mut entry_3775 = list_3774.entry();
            entry_3775.string(item_3773);
        }
        list_3774.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3776 = writer.prefix("DryRun");
    if let Some(var_3777) = &input.dry_run {
        scope_3776.boolean(*var_3777);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_attribute(
    input: &crate::input::DescribeVpcAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3778 = writer.prefix("Attribute");
    if let Some(var_3779) = &input.attribute {
        scope_3778.string(var_3779.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3780 = writer.prefix("VpcId");
    if let Some(var_3781) = &input.vpc_id {
        scope_3780.string(var_3781);
    }
    #[allow(unused_mut)]
    let mut scope_3782 = writer.prefix("DryRun");
    if let Some(var_3783) = &input.dry_run {
        scope_3782.boolean(*var_3783);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_classic_link(
    input: &crate::input::DescribeVpcClassicLinkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3784 = writer.prefix("Filter");
    if let Some(var_3785) = &input.filters {
        let mut list_3787 = scope_3784.start_list(true, Some("Filter"));
        for item_3786 in var_3785 {
            #[allow(unused_mut)]
            let mut entry_3788 = list_3787.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3788, item_3786)?;
        }
        list_3787.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3789 = writer.prefix("DryRun");
    if let Some(var_3790) = &input.dry_run {
        scope_3789.boolean(*var_3790);
    }
    #[allow(unused_mut)]
    let mut scope_3791 = writer.prefix("VpcId");
    if let Some(var_3792) = &input.vpc_ids {
        let mut list_3794 = scope_3791.start_list(true, Some("VpcId"));
        for item_3793 in var_3792 {
            #[allow(unused_mut)]
            let mut entry_3795 = list_3794.entry();
            entry_3795.string(item_3793);
        }
        list_3794.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_classic_link_dns_support(
    input: &crate::input::DescribeVpcClassicLinkDnsSupportInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcClassicLinkDnsSupport",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3796 = writer.prefix("MaxResults");
    if let Some(var_3797) = &input.max_results {
        scope_3796.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3797).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3798 = writer.prefix("NextToken");
    if let Some(var_3799) = &input.next_token {
        scope_3798.string(var_3799);
    }
    #[allow(unused_mut)]
    let mut scope_3800 = writer.prefix("VpcIds");
    if let Some(var_3801) = &input.vpc_ids {
        let mut list_3803 = scope_3800.start_list(true, Some("VpcId"));
        for item_3802 in var_3801 {
            #[allow(unused_mut)]
            let mut entry_3804 = list_3803.entry();
            entry_3804.string(item_3802);
        }
        list_3803.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_connection_notifications(
    input: &crate::input::DescribeVpcEndpointConnectionNotificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointConnectionNotifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3805 = writer.prefix("DryRun");
    if let Some(var_3806) = &input.dry_run {
        scope_3805.boolean(*var_3806);
    }
    #[allow(unused_mut)]
    let mut scope_3807 = writer.prefix("ConnectionNotificationId");
    if let Some(var_3808) = &input.connection_notification_id {
        scope_3807.string(var_3808);
    }
    #[allow(unused_mut)]
    let mut scope_3809 = writer.prefix("Filter");
    if let Some(var_3810) = &input.filters {
        let mut list_3812 = scope_3809.start_list(true, Some("Filter"));
        for item_3811 in var_3810 {
            #[allow(unused_mut)]
            let mut entry_3813 = list_3812.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3813, item_3811)?;
        }
        list_3812.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3814 = writer.prefix("MaxResults");
    if let Some(var_3815) = &input.max_results {
        scope_3814.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3815).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3816 = writer.prefix("NextToken");
    if let Some(var_3817) = &input.next_token {
        scope_3816.string(var_3817);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_connections(
    input: &crate::input::DescribeVpcEndpointConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointConnections",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3818 = writer.prefix("DryRun");
    if let Some(var_3819) = &input.dry_run {
        scope_3818.boolean(*var_3819);
    }
    #[allow(unused_mut)]
    let mut scope_3820 = writer.prefix("Filter");
    if let Some(var_3821) = &input.filters {
        let mut list_3823 = scope_3820.start_list(true, Some("Filter"));
        for item_3822 in var_3821 {
            #[allow(unused_mut)]
            let mut entry_3824 = list_3823.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3824, item_3822)?;
        }
        list_3823.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3825 = writer.prefix("MaxResults");
    if let Some(var_3826) = &input.max_results {
        scope_3825.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3826).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3827 = writer.prefix("NextToken");
    if let Some(var_3828) = &input.next_token {
        scope_3827.string(var_3828);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoints(
    input: &crate::input::DescribeVpcEndpointsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3829 = writer.prefix("DryRun");
    if let Some(var_3830) = &input.dry_run {
        scope_3829.boolean(*var_3830);
    }
    #[allow(unused_mut)]
    let mut scope_3831 = writer.prefix("VpcEndpointId");
    if let Some(var_3832) = &input.vpc_endpoint_ids {
        let mut list_3834 = scope_3831.start_list(true, Some("item"));
        for item_3833 in var_3832 {
            #[allow(unused_mut)]
            let mut entry_3835 = list_3834.entry();
            entry_3835.string(item_3833);
        }
        list_3834.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3836 = writer.prefix("Filter");
    if let Some(var_3837) = &input.filters {
        let mut list_3839 = scope_3836.start_list(true, Some("Filter"));
        for item_3838 in var_3837 {
            #[allow(unused_mut)]
            let mut entry_3840 = list_3839.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3840, item_3838)?;
        }
        list_3839.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3841 = writer.prefix("MaxResults");
    if let Some(var_3842) = &input.max_results {
        scope_3841.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3842).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3843 = writer.prefix("NextToken");
    if let Some(var_3844) = &input.next_token {
        scope_3843.string(var_3844);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_service_configurations(
    input: &crate::input::DescribeVpcEndpointServiceConfigurationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointServiceConfigurations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3845 = writer.prefix("DryRun");
    if let Some(var_3846) = &input.dry_run {
        scope_3845.boolean(*var_3846);
    }
    #[allow(unused_mut)]
    let mut scope_3847 = writer.prefix("ServiceId");
    if let Some(var_3848) = &input.service_ids {
        let mut list_3850 = scope_3847.start_list(true, Some("item"));
        for item_3849 in var_3848 {
            #[allow(unused_mut)]
            let mut entry_3851 = list_3850.entry();
            entry_3851.string(item_3849);
        }
        list_3850.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3852 = writer.prefix("Filter");
    if let Some(var_3853) = &input.filters {
        let mut list_3855 = scope_3852.start_list(true, Some("Filter"));
        for item_3854 in var_3853 {
            #[allow(unused_mut)]
            let mut entry_3856 = list_3855.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3856, item_3854)?;
        }
        list_3855.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3857 = writer.prefix("MaxResults");
    if let Some(var_3858) = &input.max_results {
        scope_3857.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3858).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3859 = writer.prefix("NextToken");
    if let Some(var_3860) = &input.next_token {
        scope_3859.string(var_3860);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_service_permissions(
    input: &crate::input::DescribeVpcEndpointServicePermissionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointServicePermissions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3861 = writer.prefix("DryRun");
    if let Some(var_3862) = &input.dry_run {
        scope_3861.boolean(*var_3862);
    }
    #[allow(unused_mut)]
    let mut scope_3863 = writer.prefix("ServiceId");
    if let Some(var_3864) = &input.service_id {
        scope_3863.string(var_3864);
    }
    #[allow(unused_mut)]
    let mut scope_3865 = writer.prefix("Filter");
    if let Some(var_3866) = &input.filters {
        let mut list_3868 = scope_3865.start_list(true, Some("Filter"));
        for item_3867 in var_3866 {
            #[allow(unused_mut)]
            let mut entry_3869 = list_3868.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3869, item_3867)?;
        }
        list_3868.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3870 = writer.prefix("MaxResults");
    if let Some(var_3871) = &input.max_results {
        scope_3870.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3871).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3872 = writer.prefix("NextToken");
    if let Some(var_3873) = &input.next_token {
        scope_3872.string(var_3873);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_services(
    input: &crate::input::DescribeVpcEndpointServicesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcEndpointServices", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3874 = writer.prefix("DryRun");
    if let Some(var_3875) = &input.dry_run {
        scope_3874.boolean(*var_3875);
    }
    #[allow(unused_mut)]
    let mut scope_3876 = writer.prefix("ServiceName");
    if let Some(var_3877) = &input.service_names {
        let mut list_3879 = scope_3876.start_list(true, Some("item"));
        for item_3878 in var_3877 {
            #[allow(unused_mut)]
            let mut entry_3880 = list_3879.entry();
            entry_3880.string(item_3878);
        }
        list_3879.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3881 = writer.prefix("Filter");
    if let Some(var_3882) = &input.filters {
        let mut list_3884 = scope_3881.start_list(true, Some("Filter"));
        for item_3883 in var_3882 {
            #[allow(unused_mut)]
            let mut entry_3885 = list_3884.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3885, item_3883)?;
        }
        list_3884.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3886 = writer.prefix("MaxResults");
    if let Some(var_3887) = &input.max_results {
        scope_3886.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3887).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3888 = writer.prefix("NextToken");
    if let Some(var_3889) = &input.next_token {
        scope_3888.string(var_3889);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_peering_connections(
    input: &crate::input::DescribeVpcPeeringConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcPeeringConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3890 = writer.prefix("Filter");
    if let Some(var_3891) = &input.filters {
        let mut list_3893 = scope_3890.start_list(true, Some("Filter"));
        for item_3892 in var_3891 {
            #[allow(unused_mut)]
            let mut entry_3894 = list_3893.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3894, item_3892)?;
        }
        list_3893.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3895 = writer.prefix("DryRun");
    if let Some(var_3896) = &input.dry_run {
        scope_3895.boolean(*var_3896);
    }
    #[allow(unused_mut)]
    let mut scope_3897 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_3898) = &input.vpc_peering_connection_ids {
        let mut list_3900 = scope_3897.start_list(true, Some("item"));
        for item_3899 in var_3898 {
            #[allow(unused_mut)]
            let mut entry_3901 = list_3900.entry();
            entry_3901.string(item_3899);
        }
        list_3900.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3902 = writer.prefix("NextToken");
    if let Some(var_3903) = &input.next_token {
        scope_3902.string(var_3903);
    }
    #[allow(unused_mut)]
    let mut scope_3904 = writer.prefix("MaxResults");
    if let Some(var_3905) = &input.max_results {
        scope_3904.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3905).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpcs(
    input: &crate::input::DescribeVpcsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3906 = writer.prefix("Filter");
    if let Some(var_3907) = &input.filters {
        let mut list_3909 = scope_3906.start_list(true, Some("Filter"));
        for item_3908 in var_3907 {
            #[allow(unused_mut)]
            let mut entry_3910 = list_3909.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3910, item_3908)?;
        }
        list_3909.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3911 = writer.prefix("VpcId");
    if let Some(var_3912) = &input.vpc_ids {
        let mut list_3914 = scope_3911.start_list(true, Some("VpcId"));
        for item_3913 in var_3912 {
            #[allow(unused_mut)]
            let mut entry_3915 = list_3914.entry();
            entry_3915.string(item_3913);
        }
        list_3914.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3916 = writer.prefix("DryRun");
    if let Some(var_3917) = &input.dry_run {
        scope_3916.boolean(*var_3917);
    }
    #[allow(unused_mut)]
    let mut scope_3918 = writer.prefix("NextToken");
    if let Some(var_3919) = &input.next_token {
        scope_3918.string(var_3919);
    }
    #[allow(unused_mut)]
    let mut scope_3920 = writer.prefix("MaxResults");
    if let Some(var_3921) = &input.max_results {
        scope_3920.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3921).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpn_connections(
    input: &crate::input::DescribeVpnConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3922 = writer.prefix("Filter");
    if let Some(var_3923) = &input.filters {
        let mut list_3925 = scope_3922.start_list(true, Some("Filter"));
        for item_3924 in var_3923 {
            #[allow(unused_mut)]
            let mut entry_3926 = list_3925.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3926, item_3924)?;
        }
        list_3925.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3927 = writer.prefix("VpnConnectionId");
    if let Some(var_3928) = &input.vpn_connection_ids {
        let mut list_3930 = scope_3927.start_list(true, Some("VpnConnectionId"));
        for item_3929 in var_3928 {
            #[allow(unused_mut)]
            let mut entry_3931 = list_3930.entry();
            entry_3931.string(item_3929);
        }
        list_3930.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3932 = writer.prefix("DryRun");
    if let Some(var_3933) = &input.dry_run {
        scope_3932.boolean(*var_3933);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpn_gateways(
    input: &crate::input::DescribeVpnGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpnGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3934 = writer.prefix("Filter");
    if let Some(var_3935) = &input.filters {
        let mut list_3937 = scope_3934.start_list(true, Some("Filter"));
        for item_3936 in var_3935 {
            #[allow(unused_mut)]
            let mut entry_3938 = list_3937.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3938, item_3936)?;
        }
        list_3937.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3939 = writer.prefix("VpnGatewayId");
    if let Some(var_3940) = &input.vpn_gateway_ids {
        let mut list_3942 = scope_3939.start_list(true, Some("VpnGatewayId"));
        for item_3941 in var_3940 {
            #[allow(unused_mut)]
            let mut entry_3943 = list_3942.entry();
            entry_3943.string(item_3941);
        }
        list_3942.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3944 = writer.prefix("DryRun");
    if let Some(var_3945) = &input.dry_run {
        scope_3944.boolean(*var_3945);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_classic_link_vpc(
    input: &crate::input::DetachClassicLinkVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DetachClassicLinkVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3946 = writer.prefix("DryRun");
    if let Some(var_3947) = &input.dry_run {
        scope_3946.boolean(*var_3947);
    }
    #[allow(unused_mut)]
    let mut scope_3948 = writer.prefix("InstanceId");
    if let Some(var_3949) = &input.instance_id {
        scope_3948.string(var_3949);
    }
    #[allow(unused_mut)]
    let mut scope_3950 = writer.prefix("VpcId");
    if let Some(var_3951) = &input.vpc_id {
        scope_3950.string(var_3951);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_internet_gateway(
    input: &crate::input::DetachInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DetachInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3952 = writer.prefix("DryRun");
    if let Some(var_3953) = &input.dry_run {
        scope_3952.boolean(*var_3953);
    }
    #[allow(unused_mut)]
    let mut scope_3954 = writer.prefix("InternetGatewayId");
    if let Some(var_3955) = &input.internet_gateway_id {
        scope_3954.string(var_3955);
    }
    #[allow(unused_mut)]
    let mut scope_3956 = writer.prefix("VpcId");
    if let Some(var_3957) = &input.vpc_id {
        scope_3956.string(var_3957);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_network_interface(
    input: &crate::input::DetachNetworkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DetachNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3958 = writer.prefix("AttachmentId");
    if let Some(var_3959) = &input.attachment_id {
        scope_3958.string(var_3959);
    }
    #[allow(unused_mut)]
    let mut scope_3960 = writer.prefix("DryRun");
    if let Some(var_3961) = &input.dry_run {
        scope_3960.boolean(*var_3961);
    }
    #[allow(unused_mut)]
    let mut scope_3962 = writer.prefix("Force");
    if let Some(var_3963) = &input.force {
        scope_3962.boolean(*var_3963);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_volume(
    input: &crate::input::DetachVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DetachVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3964 = writer.prefix("Device");
    if let Some(var_3965) = &input.device {
        scope_3964.string(var_3965);
    }
    #[allow(unused_mut)]
    let mut scope_3966 = writer.prefix("Force");
    if let Some(var_3967) = &input.force {
        scope_3966.boolean(*var_3967);
    }
    #[allow(unused_mut)]
    let mut scope_3968 = writer.prefix("InstanceId");
    if let Some(var_3969) = &input.instance_id {
        scope_3968.string(var_3969);
    }
    #[allow(unused_mut)]
    let mut scope_3970 = writer.prefix("VolumeId");
    if let Some(var_3971) = &input.volume_id {
        scope_3970.string(var_3971);
    }
    #[allow(unused_mut)]
    let mut scope_3972 = writer.prefix("DryRun");
    if let Some(var_3973) = &input.dry_run {
        scope_3972.boolean(*var_3973);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_vpn_gateway(
    input: &crate::input::DetachVpnGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DetachVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3974 = writer.prefix("VpcId");
    if let Some(var_3975) = &input.vpc_id {
        scope_3974.string(var_3975);
    }
    #[allow(unused_mut)]
    let mut scope_3976 = writer.prefix("VpnGatewayId");
    if let Some(var_3977) = &input.vpn_gateway_id {
        scope_3976.string(var_3977);
    }
    #[allow(unused_mut)]
    let mut scope_3978 = writer.prefix("DryRun");
    if let Some(var_3979) = &input.dry_run {
        scope_3978.boolean(*var_3979);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_ebs_encryption_by_default(
    input: &crate::input::DisableEbsEncryptionByDefaultInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3980 = writer.prefix("DryRun");
    if let Some(var_3981) = &input.dry_run {
        scope_3980.boolean(*var_3981);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_fast_launch(
    input: &crate::input::DisableFastLaunchInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableFastLaunch", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3982 = writer.prefix("ImageId");
    if let Some(var_3983) = &input.image_id {
        scope_3982.string(var_3983);
    }
    #[allow(unused_mut)]
    let mut scope_3984 = writer.prefix("Force");
    if let Some(var_3985) = &input.force {
        scope_3984.boolean(*var_3985);
    }
    #[allow(unused_mut)]
    let mut scope_3986 = writer.prefix("DryRun");
    if let Some(var_3987) = &input.dry_run {
        scope_3986.boolean(*var_3987);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_fast_snapshot_restores(
    input: &crate::input::DisableFastSnapshotRestoresInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3988 = writer.prefix("AvailabilityZone");
    if let Some(var_3989) = &input.availability_zones {
        let mut list_3991 = scope_3988.start_list(true, Some("AvailabilityZone"));
        for item_3990 in var_3989 {
            #[allow(unused_mut)]
            let mut entry_3992 = list_3991.entry();
            entry_3992.string(item_3990);
        }
        list_3991.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3993 = writer.prefix("SourceSnapshotId");
    if let Some(var_3994) = &input.source_snapshot_ids {
        let mut list_3996 = scope_3993.start_list(true, Some("SnapshotId"));
        for item_3995 in var_3994 {
            #[allow(unused_mut)]
            let mut entry_3997 = list_3996.entry();
            entry_3997.string(item_3995);
        }
        list_3996.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3998 = writer.prefix("DryRun");
    if let Some(var_3999) = &input.dry_run {
        scope_3998.boolean(*var_3999);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_image_deprecation(
    input: &crate::input::DisableImageDeprecationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableImageDeprecation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4000 = writer.prefix("ImageId");
    if let Some(var_4001) = &input.image_id {
        scope_4000.string(var_4001);
    }
    #[allow(unused_mut)]
    let mut scope_4002 = writer.prefix("DryRun");
    if let Some(var_4003) = &input.dry_run {
        scope_4002.boolean(*var_4003);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_ipam_organization_admin_account(
    input: &crate::input::DisableIpamOrganizationAdminAccountInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisableIpamOrganizationAdminAccount",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4004 = writer.prefix("DryRun");
    if let Some(var_4005) = &input.dry_run {
        scope_4004.boolean(*var_4005);
    }
    #[allow(unused_mut)]
    let mut scope_4006 = writer.prefix("DelegatedAdminAccountId");
    if let Some(var_4007) = &input.delegated_admin_account_id {
        scope_4006.string(var_4007);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_serial_console_access(
    input: &crate::input::DisableSerialConsoleAccessInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableSerialConsoleAccess", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4008 = writer.prefix("DryRun");
    if let Some(var_4009) = &input.dry_run {
        scope_4008.boolean(*var_4009);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_transit_gateway_route_table_propagation(
    input: &crate::input::DisableTransitGatewayRouteTablePropagationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisableTransitGatewayRouteTablePropagation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4010 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4011) = &input.transit_gateway_route_table_id {
        scope_4010.string(var_4011);
    }
    #[allow(unused_mut)]
    let mut scope_4012 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4013) = &input.transit_gateway_attachment_id {
        scope_4012.string(var_4013);
    }
    #[allow(unused_mut)]
    let mut scope_4014 = writer.prefix("DryRun");
    if let Some(var_4015) = &input.dry_run {
        scope_4014.boolean(*var_4015);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_vgw_route_propagation(
    input: &crate::input::DisableVgwRoutePropagationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableVgwRoutePropagation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4016 = writer.prefix("GatewayId");
    if let Some(var_4017) = &input.gateway_id {
        scope_4016.string(var_4017);
    }
    #[allow(unused_mut)]
    let mut scope_4018 = writer.prefix("RouteTableId");
    if let Some(var_4019) = &input.route_table_id {
        scope_4018.string(var_4019);
    }
    #[allow(unused_mut)]
    let mut scope_4020 = writer.prefix("DryRun");
    if let Some(var_4021) = &input.dry_run {
        scope_4020.boolean(*var_4021);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_vpc_classic_link(
    input: &crate::input::DisableVpcClassicLinkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4022 = writer.prefix("DryRun");
    if let Some(var_4023) = &input.dry_run {
        scope_4022.boolean(*var_4023);
    }
    #[allow(unused_mut)]
    let mut scope_4024 = writer.prefix("VpcId");
    if let Some(var_4025) = &input.vpc_id {
        scope_4024.string(var_4025);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_vpc_classic_link_dns_support(
    input: &crate::input::DisableVpcClassicLinkDnsSupportInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisableVpcClassicLinkDnsSupport",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4026 = writer.prefix("VpcId");
    if let Some(var_4027) = &input.vpc_id {
        scope_4026.string(var_4027);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_address(
    input: &crate::input::DisassociateAddressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4028 = writer.prefix("AssociationId");
    if let Some(var_4029) = &input.association_id {
        scope_4028.string(var_4029);
    }
    #[allow(unused_mut)]
    let mut scope_4030 = writer.prefix("PublicIp");
    if let Some(var_4031) = &input.public_ip {
        scope_4030.string(var_4031);
    }
    #[allow(unused_mut)]
    let mut scope_4032 = writer.prefix("DryRun");
    if let Some(var_4033) = &input.dry_run {
        scope_4032.boolean(*var_4033);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_client_vpn_target_network(
    input: &crate::input::DisassociateClientVpnTargetNetworkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateClientVpnTargetNetwork",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4034 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4035) = &input.client_vpn_endpoint_id {
        scope_4034.string(var_4035);
    }
    #[allow(unused_mut)]
    let mut scope_4036 = writer.prefix("AssociationId");
    if let Some(var_4037) = &input.association_id {
        scope_4036.string(var_4037);
    }
    #[allow(unused_mut)]
    let mut scope_4038 = writer.prefix("DryRun");
    if let Some(var_4039) = &input.dry_run {
        scope_4038.boolean(*var_4039);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_enclave_certificate_iam_role(
    input: &crate::input::DisassociateEnclaveCertificateIamRoleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateEnclaveCertificateIamRole",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4040 = writer.prefix("CertificateArn");
    if let Some(var_4041) = &input.certificate_arn {
        scope_4040.string(var_4041);
    }
    #[allow(unused_mut)]
    let mut scope_4042 = writer.prefix("RoleArn");
    if let Some(var_4043) = &input.role_arn {
        scope_4042.string(var_4043);
    }
    #[allow(unused_mut)]
    let mut scope_4044 = writer.prefix("DryRun");
    if let Some(var_4045) = &input.dry_run {
        scope_4044.boolean(*var_4045);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_iam_instance_profile(
    input: &crate::input::DisassociateIamInstanceProfileInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateIamInstanceProfile",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4046 = writer.prefix("AssociationId");
    if let Some(var_4047) = &input.association_id {
        scope_4046.string(var_4047);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_instance_event_window(
    input: &crate::input::DisassociateInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateInstanceEventWindow",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4048 = writer.prefix("DryRun");
    if let Some(var_4049) = &input.dry_run {
        scope_4048.boolean(*var_4049);
    }
    #[allow(unused_mut)]
    let mut scope_4050 = writer.prefix("InstanceEventWindowId");
    if let Some(var_4051) = &input.instance_event_window_id {
        scope_4050.string(var_4051);
    }
    #[allow(unused_mut)]
    let mut scope_4052 = writer.prefix("AssociationTarget");
    if let Some(var_4053) = &input.association_target {
        crate::query_ser::serialize_structure_crate_model_instance_event_window_disassociation_request(scope_4052, var_4053)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_route_table(
    input: &crate::input::DisassociateRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4054 = writer.prefix("AssociationId");
    if let Some(var_4055) = &input.association_id {
        scope_4054.string(var_4055);
    }
    #[allow(unused_mut)]
    let mut scope_4056 = writer.prefix("DryRun");
    if let Some(var_4057) = &input.dry_run {
        scope_4056.boolean(*var_4057);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_subnet_cidr_block(
    input: &crate::input::DisassociateSubnetCidrBlockInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateSubnetCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4058 = writer.prefix("AssociationId");
    if let Some(var_4059) = &input.association_id {
        scope_4058.string(var_4059);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_transit_gateway_multicast_domain(
    input: &crate::input::DisassociateTransitGatewayMulticastDomainInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4060 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_4061) = &input.transit_gateway_multicast_domain_id {
        scope_4060.string(var_4061);
    }
    #[allow(unused_mut)]
    let mut scope_4062 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4063) = &input.transit_gateway_attachment_id {
        scope_4062.string(var_4063);
    }
    #[allow(unused_mut)]
    let mut scope_4064 = writer.prefix("SubnetIds");
    if let Some(var_4065) = &input.subnet_ids {
        let mut list_4067 = scope_4064.start_list(true, Some("item"));
        for item_4066 in var_4065 {
            #[allow(unused_mut)]
            let mut entry_4068 = list_4067.entry();
            entry_4068.string(item_4066);
        }
        list_4067.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4069 = writer.prefix("DryRun");
    if let Some(var_4070) = &input.dry_run {
        scope_4069.boolean(*var_4070);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_transit_gateway_route_table(
    input: &crate::input::DisassociateTransitGatewayRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4071 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4072) = &input.transit_gateway_route_table_id {
        scope_4071.string(var_4072);
    }
    #[allow(unused_mut)]
    let mut scope_4073 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4074) = &input.transit_gateway_attachment_id {
        scope_4073.string(var_4074);
    }
    #[allow(unused_mut)]
    let mut scope_4075 = writer.prefix("DryRun");
    if let Some(var_4076) = &input.dry_run {
        scope_4075.boolean(*var_4076);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_trunk_interface(
    input: &crate::input::DisassociateTrunkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateTrunkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4077 = writer.prefix("AssociationId");
    if let Some(var_4078) = &input.association_id {
        scope_4077.string(var_4078);
    }
    #[allow(unused_mut)]
    let mut scope_4079 = writer.prefix("ClientToken");
    if let Some(var_4080) = &input.client_token {
        scope_4079.string(var_4080);
    }
    #[allow(unused_mut)]
    let mut scope_4081 = writer.prefix("DryRun");
    if let Some(var_4082) = &input.dry_run {
        scope_4081.boolean(*var_4082);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_vpc_cidr_block(
    input: &crate::input::DisassociateVpcCidrBlockInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateVpcCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4083 = writer.prefix("AssociationId");
    if let Some(var_4084) = &input.association_id {
        scope_4083.string(var_4084);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_ebs_encryption_by_default(
    input: &crate::input::EnableEbsEncryptionByDefaultInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4085 = writer.prefix("DryRun");
    if let Some(var_4086) = &input.dry_run {
        scope_4085.boolean(*var_4086);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_fast_launch(
    input: &crate::input::EnableFastLaunchInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnableFastLaunch", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4087 = writer.prefix("ImageId");
    if let Some(var_4088) = &input.image_id {
        scope_4087.string(var_4088);
    }
    #[allow(unused_mut)]
    let mut scope_4089 = writer.prefix("ResourceType");
    if let Some(var_4090) = &input.resource_type {
        scope_4089.string(var_4090);
    }
    #[allow(unused_mut)]
    let mut scope_4091 = writer.prefix("SnapshotConfiguration");
    if let Some(var_4092) = &input.snapshot_configuration {
        crate::query_ser::serialize_structure_crate_model_fast_launch_snapshot_configuration_request(scope_4091, var_4092)?;
    }
    #[allow(unused_mut)]
    let mut scope_4093 = writer.prefix("LaunchTemplate");
    if let Some(var_4094) = &input.launch_template {
        crate::query_ser::serialize_structure_crate_model_fast_launch_launch_template_specification_request(scope_4093, var_4094)?;
    }
    #[allow(unused_mut)]
    let mut scope_4095 = writer.prefix("MaxParallelLaunches");
    if let Some(var_4096) = &input.max_parallel_launches {
        scope_4095.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4096).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4097 = writer.prefix("DryRun");
    if let Some(var_4098) = &input.dry_run {
        scope_4097.boolean(*var_4098);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_fast_snapshot_restores(
    input: &crate::input::EnableFastSnapshotRestoresInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4099 = writer.prefix("AvailabilityZone");
    if let Some(var_4100) = &input.availability_zones {
        let mut list_4102 = scope_4099.start_list(true, Some("AvailabilityZone"));
        for item_4101 in var_4100 {
            #[allow(unused_mut)]
            let mut entry_4103 = list_4102.entry();
            entry_4103.string(item_4101);
        }
        list_4102.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4104 = writer.prefix("SourceSnapshotId");
    if let Some(var_4105) = &input.source_snapshot_ids {
        let mut list_4107 = scope_4104.start_list(true, Some("SnapshotId"));
        for item_4106 in var_4105 {
            #[allow(unused_mut)]
            let mut entry_4108 = list_4107.entry();
            entry_4108.string(item_4106);
        }
        list_4107.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4109 = writer.prefix("DryRun");
    if let Some(var_4110) = &input.dry_run {
        scope_4109.boolean(*var_4110);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_image_deprecation(
    input: &crate::input::EnableImageDeprecationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableImageDeprecation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4111 = writer.prefix("ImageId");
    if let Some(var_4112) = &input.image_id {
        scope_4111.string(var_4112);
    }
    #[allow(unused_mut)]
    let mut scope_4113 = writer.prefix("DeprecateAt");
    if let Some(var_4114) = &input.deprecate_at {
        scope_4113.date_time(var_4114, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4115 = writer.prefix("DryRun");
    if let Some(var_4116) = &input.dry_run {
        scope_4115.boolean(*var_4116);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_ipam_organization_admin_account(
    input: &crate::input::EnableIpamOrganizationAdminAccountInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "EnableIpamOrganizationAdminAccount",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4117 = writer.prefix("DryRun");
    if let Some(var_4118) = &input.dry_run {
        scope_4117.boolean(*var_4118);
    }
    #[allow(unused_mut)]
    let mut scope_4119 = writer.prefix("DelegatedAdminAccountId");
    if let Some(var_4120) = &input.delegated_admin_account_id {
        scope_4119.string(var_4120);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_serial_console_access(
    input: &crate::input::EnableSerialConsoleAccessInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableSerialConsoleAccess", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4121 = writer.prefix("DryRun");
    if let Some(var_4122) = &input.dry_run {
        scope_4121.boolean(*var_4122);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_transit_gateway_route_table_propagation(
    input: &crate::input::EnableTransitGatewayRouteTablePropagationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "EnableTransitGatewayRouteTablePropagation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4123 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4124) = &input.transit_gateway_route_table_id {
        scope_4123.string(var_4124);
    }
    #[allow(unused_mut)]
    let mut scope_4125 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4126) = &input.transit_gateway_attachment_id {
        scope_4125.string(var_4126);
    }
    #[allow(unused_mut)]
    let mut scope_4127 = writer.prefix("DryRun");
    if let Some(var_4128) = &input.dry_run {
        scope_4127.boolean(*var_4128);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_vgw_route_propagation(
    input: &crate::input::EnableVgwRoutePropagationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableVgwRoutePropagation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4129 = writer.prefix("GatewayId");
    if let Some(var_4130) = &input.gateway_id {
        scope_4129.string(var_4130);
    }
    #[allow(unused_mut)]
    let mut scope_4131 = writer.prefix("RouteTableId");
    if let Some(var_4132) = &input.route_table_id {
        scope_4131.string(var_4132);
    }
    #[allow(unused_mut)]
    let mut scope_4133 = writer.prefix("DryRun");
    if let Some(var_4134) = &input.dry_run {
        scope_4133.boolean(*var_4134);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_volume_io(
    input: &crate::input::EnableVolumeIoInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnableVolumeIO", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4135 = writer.prefix("DryRun");
    if let Some(var_4136) = &input.dry_run {
        scope_4135.boolean(*var_4136);
    }
    #[allow(unused_mut)]
    let mut scope_4137 = writer.prefix("VolumeId");
    if let Some(var_4138) = &input.volume_id {
        scope_4137.string(var_4138);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_vpc_classic_link(
    input: &crate::input::EnableVpcClassicLinkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4139 = writer.prefix("DryRun");
    if let Some(var_4140) = &input.dry_run {
        scope_4139.boolean(*var_4140);
    }
    #[allow(unused_mut)]
    let mut scope_4141 = writer.prefix("VpcId");
    if let Some(var_4142) = &input.vpc_id {
        scope_4141.string(var_4142);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_vpc_classic_link_dns_support(
    input: &crate::input::EnableVpcClassicLinkDnsSupportInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "EnableVpcClassicLinkDnsSupport",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4143 = writer.prefix("VpcId");
    if let Some(var_4144) = &input.vpc_id {
        scope_4143.string(var_4144);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_client_vpn_client_certificate_revocation_list(
    input: &crate::input::ExportClientVpnClientCertificateRevocationListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ExportClientVpnClientCertificateRevocationList",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4145 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4146) = &input.client_vpn_endpoint_id {
        scope_4145.string(var_4146);
    }
    #[allow(unused_mut)]
    let mut scope_4147 = writer.prefix("DryRun");
    if let Some(var_4148) = &input.dry_run {
        scope_4147.boolean(*var_4148);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_client_vpn_client_configuration(
    input: &crate::input::ExportClientVpnClientConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ExportClientVpnClientConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4149 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4150) = &input.client_vpn_endpoint_id {
        scope_4149.string(var_4150);
    }
    #[allow(unused_mut)]
    let mut scope_4151 = writer.prefix("DryRun");
    if let Some(var_4152) = &input.dry_run {
        scope_4151.boolean(*var_4152);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_image(
    input: &crate::input::ExportImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ExportImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4153 = writer.prefix("ClientToken");
    if let Some(var_4154) = &input.client_token {
        scope_4153.string(var_4154);
    }
    #[allow(unused_mut)]
    let mut scope_4155 = writer.prefix("Description");
    if let Some(var_4156) = &input.description {
        scope_4155.string(var_4156);
    }
    #[allow(unused_mut)]
    let mut scope_4157 = writer.prefix("DiskImageFormat");
    if let Some(var_4158) = &input.disk_image_format {
        scope_4157.string(var_4158.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4159 = writer.prefix("DryRun");
    if let Some(var_4160) = &input.dry_run {
        scope_4159.boolean(*var_4160);
    }
    #[allow(unused_mut)]
    let mut scope_4161 = writer.prefix("ImageId");
    if let Some(var_4162) = &input.image_id {
        scope_4161.string(var_4162);
    }
    #[allow(unused_mut)]
    let mut scope_4163 = writer.prefix("S3ExportLocation");
    if let Some(var_4164) = &input.s3_export_location {
        crate::query_ser::serialize_structure_crate_model_export_task_s3_location_request(
            scope_4163, var_4164,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4165 = writer.prefix("RoleName");
    if let Some(var_4166) = &input.role_name {
        scope_4165.string(var_4166);
    }
    #[allow(unused_mut)]
    let mut scope_4167 = writer.prefix("TagSpecification");
    if let Some(var_4168) = &input.tag_specifications {
        let mut list_4170 = scope_4167.start_list(true, Some("item"));
        for item_4169 in var_4168 {
            #[allow(unused_mut)]
            let mut entry_4171 = list_4170.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4171, item_4169,
            )?;
        }
        list_4170.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_transit_gateway_routes(
    input: &crate::input::ExportTransitGatewayRoutesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ExportTransitGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4172 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4173) = &input.transit_gateway_route_table_id {
        scope_4172.string(var_4173);
    }
    #[allow(unused_mut)]
    let mut scope_4174 = writer.prefix("Filter");
    if let Some(var_4175) = &input.filters {
        let mut list_4177 = scope_4174.start_list(true, Some("Filter"));
        for item_4176 in var_4175 {
            #[allow(unused_mut)]
            let mut entry_4178 = list_4177.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4178, item_4176)?;
        }
        list_4177.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4179 = writer.prefix("S3Bucket");
    if let Some(var_4180) = &input.s3_bucket {
        scope_4179.string(var_4180);
    }
    #[allow(unused_mut)]
    let mut scope_4181 = writer.prefix("DryRun");
    if let Some(var_4182) = &input.dry_run {
        scope_4181.boolean(*var_4182);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_associated_enclave_certificate_iam_roles(
    input: &crate::input::GetAssociatedEnclaveCertificateIamRolesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetAssociatedEnclaveCertificateIamRoles",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4183 = writer.prefix("CertificateArn");
    if let Some(var_4184) = &input.certificate_arn {
        scope_4183.string(var_4184);
    }
    #[allow(unused_mut)]
    let mut scope_4185 = writer.prefix("DryRun");
    if let Some(var_4186) = &input.dry_run {
        scope_4185.boolean(*var_4186);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_associated_ipv6_pool_cidrs(
    input: &crate::input::GetAssociatedIpv6PoolCidrsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetAssociatedIpv6PoolCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4187 = writer.prefix("PoolId");
    if let Some(var_4188) = &input.pool_id {
        scope_4187.string(var_4188);
    }
    #[allow(unused_mut)]
    let mut scope_4189 = writer.prefix("NextToken");
    if let Some(var_4190) = &input.next_token {
        scope_4189.string(var_4190);
    }
    #[allow(unused_mut)]
    let mut scope_4191 = writer.prefix("MaxResults");
    if let Some(var_4192) = &input.max_results {
        scope_4191.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4192).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4193 = writer.prefix("DryRun");
    if let Some(var_4194) = &input.dry_run {
        scope_4193.boolean(*var_4194);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_capacity_reservation_usage(
    input: &crate::input::GetCapacityReservationUsageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetCapacityReservationUsage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4195 = writer.prefix("CapacityReservationId");
    if let Some(var_4196) = &input.capacity_reservation_id {
        scope_4195.string(var_4196);
    }
    #[allow(unused_mut)]
    let mut scope_4197 = writer.prefix("NextToken");
    if let Some(var_4198) = &input.next_token {
        scope_4197.string(var_4198);
    }
    #[allow(unused_mut)]
    let mut scope_4199 = writer.prefix("MaxResults");
    if let Some(var_4200) = &input.max_results {
        scope_4199.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4200).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4201 = writer.prefix("DryRun");
    if let Some(var_4202) = &input.dry_run {
        scope_4201.boolean(*var_4202);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_coip_pool_usage(
    input: &crate::input::GetCoipPoolUsageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetCoipPoolUsage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4203 = writer.prefix("PoolId");
    if let Some(var_4204) = &input.pool_id {
        scope_4203.string(var_4204);
    }
    #[allow(unused_mut)]
    let mut scope_4205 = writer.prefix("Filter");
    if let Some(var_4206) = &input.filters {
        let mut list_4208 = scope_4205.start_list(true, Some("Filter"));
        for item_4207 in var_4206 {
            #[allow(unused_mut)]
            let mut entry_4209 = list_4208.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4209, item_4207)?;
        }
        list_4208.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4210 = writer.prefix("MaxResults");
    if let Some(var_4211) = &input.max_results {
        scope_4210.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4211).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4212 = writer.prefix("NextToken");
    if let Some(var_4213) = &input.next_token {
        scope_4212.string(var_4213);
    }
    #[allow(unused_mut)]
    let mut scope_4214 = writer.prefix("DryRun");
    if let Some(var_4215) = &input.dry_run {
        scope_4214.boolean(*var_4215);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_console_output(
    input: &crate::input::GetConsoleOutputInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetConsoleOutput", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4216 = writer.prefix("InstanceId");
    if let Some(var_4217) = &input.instance_id {
        scope_4216.string(var_4217);
    }
    #[allow(unused_mut)]
    let mut scope_4218 = writer.prefix("DryRun");
    if let Some(var_4219) = &input.dry_run {
        scope_4218.boolean(*var_4219);
    }
    #[allow(unused_mut)]
    let mut scope_4220 = writer.prefix("Latest");
    if let Some(var_4221) = &input.latest {
        scope_4220.boolean(*var_4221);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_console_screenshot(
    input: &crate::input::GetConsoleScreenshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetConsoleScreenshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4222 = writer.prefix("DryRun");
    if let Some(var_4223) = &input.dry_run {
        scope_4222.boolean(*var_4223);
    }
    #[allow(unused_mut)]
    let mut scope_4224 = writer.prefix("InstanceId");
    if let Some(var_4225) = &input.instance_id {
        scope_4224.string(var_4225);
    }
    #[allow(unused_mut)]
    let mut scope_4226 = writer.prefix("WakeUp");
    if let Some(var_4227) = &input.wake_up {
        scope_4226.boolean(*var_4227);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_default_credit_specification(
    input: &crate::input::GetDefaultCreditSpecificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetDefaultCreditSpecification", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4228 = writer.prefix("DryRun");
    if let Some(var_4229) = &input.dry_run {
        scope_4228.boolean(*var_4229);
    }
    #[allow(unused_mut)]
    let mut scope_4230 = writer.prefix("InstanceFamily");
    if let Some(var_4231) = &input.instance_family {
        scope_4230.string(var_4231.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ebs_default_kms_key_id(
    input: &crate::input::GetEbsDefaultKmsKeyIdInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4232 = writer.prefix("DryRun");
    if let Some(var_4233) = &input.dry_run {
        scope_4232.boolean(*var_4233);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ebs_encryption_by_default(
    input: &crate::input::GetEbsEncryptionByDefaultInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4234 = writer.prefix("DryRun");
    if let Some(var_4235) = &input.dry_run {
        scope_4234.boolean(*var_4235);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_flow_logs_integration_template(
    input: &crate::input::GetFlowLogsIntegrationTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetFlowLogsIntegrationTemplate",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4236 = writer.prefix("DryRun");
    if let Some(var_4237) = &input.dry_run {
        scope_4236.boolean(*var_4237);
    }
    #[allow(unused_mut)]
    let mut scope_4238 = writer.prefix("FlowLogId");
    if let Some(var_4239) = &input.flow_log_id {
        scope_4238.string(var_4239);
    }
    #[allow(unused_mut)]
    let mut scope_4240 = writer.prefix("ConfigDeliveryS3DestinationArn");
    if let Some(var_4241) = &input.config_delivery_s3_destination_arn {
        scope_4240.string(var_4241);
    }
    #[allow(unused_mut)]
    let mut scope_4242 = writer.prefix("IntegrateService");
    if let Some(var_4243) = &input.integrate_services {
        crate::query_ser::serialize_structure_crate_model_integrate_services(scope_4242, var_4243)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_groups_for_capacity_reservation(
    input: &crate::input::GetGroupsForCapacityReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetGroupsForCapacityReservation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4244 = writer.prefix("CapacityReservationId");
    if let Some(var_4245) = &input.capacity_reservation_id {
        scope_4244.string(var_4245);
    }
    #[allow(unused_mut)]
    let mut scope_4246 = writer.prefix("NextToken");
    if let Some(var_4247) = &input.next_token {
        scope_4246.string(var_4247);
    }
    #[allow(unused_mut)]
    let mut scope_4248 = writer.prefix("MaxResults");
    if let Some(var_4249) = &input.max_results {
        scope_4248.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4249).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4250 = writer.prefix("DryRun");
    if let Some(var_4251) = &input.dry_run {
        scope_4250.boolean(*var_4251);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_host_reservation_purchase_preview(
    input: &crate::input::GetHostReservationPurchasePreviewInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetHostReservationPurchasePreview",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4252 = writer.prefix("HostIdSet");
    if let Some(var_4253) = &input.host_id_set {
        let mut list_4255 = scope_4252.start_list(true, Some("item"));
        for item_4254 in var_4253 {
            #[allow(unused_mut)]
            let mut entry_4256 = list_4255.entry();
            entry_4256.string(item_4254);
        }
        list_4255.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4257 = writer.prefix("OfferingId");
    if let Some(var_4258) = &input.offering_id {
        scope_4257.string(var_4258);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_instance_types_from_instance_requirements(
    input: &crate::input::GetInstanceTypesFromInstanceRequirementsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetInstanceTypesFromInstanceRequirements",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4259 = writer.prefix("DryRun");
    if let Some(var_4260) = &input.dry_run {
        scope_4259.boolean(*var_4260);
    }
    #[allow(unused_mut)]
    let mut scope_4261 = writer.prefix("ArchitectureType");
    if let Some(var_4262) = &input.architecture_types {
        let mut list_4264 = scope_4261.start_list(true, Some("item"));
        for item_4263 in var_4262 {
            #[allow(unused_mut)]
            let mut entry_4265 = list_4264.entry();
            entry_4265.string(item_4263.as_str());
        }
        list_4264.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4266 = writer.prefix("VirtualizationType");
    if let Some(var_4267) = &input.virtualization_types {
        let mut list_4269 = scope_4266.start_list(true, Some("item"));
        for item_4268 in var_4267 {
            #[allow(unused_mut)]
            let mut entry_4270 = list_4269.entry();
            entry_4270.string(item_4268.as_str());
        }
        list_4269.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4271 = writer.prefix("InstanceRequirements");
    if let Some(var_4272) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_request(
            scope_4271, var_4272,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4273 = writer.prefix("MaxResults");
    if let Some(var_4274) = &input.max_results {
        scope_4273.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4274).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4275 = writer.prefix("NextToken");
    if let Some(var_4276) = &input.next_token {
        scope_4275.string(var_4276);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_instance_uefi_data(
    input: &crate::input::GetInstanceUefiDataInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetInstanceUefiData", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4277 = writer.prefix("InstanceId");
    if let Some(var_4278) = &input.instance_id {
        scope_4277.string(var_4278);
    }
    #[allow(unused_mut)]
    let mut scope_4279 = writer.prefix("DryRun");
    if let Some(var_4280) = &input.dry_run {
        scope_4279.boolean(*var_4280);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ipam_address_history(
    input: &crate::input::GetIpamAddressHistoryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetIpamAddressHistory", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4281 = writer.prefix("DryRun");
    if let Some(var_4282) = &input.dry_run {
        scope_4281.boolean(*var_4282);
    }
    #[allow(unused_mut)]
    let mut scope_4283 = writer.prefix("Cidr");
    if let Some(var_4284) = &input.cidr {
        scope_4283.string(var_4284);
    }
    #[allow(unused_mut)]
    let mut scope_4285 = writer.prefix("IpamScopeId");
    if let Some(var_4286) = &input.ipam_scope_id {
        scope_4285.string(var_4286);
    }
    #[allow(unused_mut)]
    let mut scope_4287 = writer.prefix("VpcId");
    if let Some(var_4288) = &input.vpc_id {
        scope_4287.string(var_4288);
    }
    #[allow(unused_mut)]
    let mut scope_4289 = writer.prefix("StartTime");
    if let Some(var_4290) = &input.start_time {
        scope_4289.date_time(var_4290, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4291 = writer.prefix("EndTime");
    if let Some(var_4292) = &input.end_time {
        scope_4291.date_time(var_4292, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4293 = writer.prefix("MaxResults");
    if let Some(var_4294) = &input.max_results {
        scope_4293.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4294).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4295 = writer.prefix("NextToken");
    if let Some(var_4296) = &input.next_token {
        scope_4295.string(var_4296);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ipam_pool_allocations(
    input: &crate::input::GetIpamPoolAllocationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetIpamPoolAllocations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4297 = writer.prefix("DryRun");
    if let Some(var_4298) = &input.dry_run {
        scope_4297.boolean(*var_4298);
    }
    #[allow(unused_mut)]
    let mut scope_4299 = writer.prefix("IpamPoolId");
    if let Some(var_4300) = &input.ipam_pool_id {
        scope_4299.string(var_4300);
    }
    #[allow(unused_mut)]
    let mut scope_4301 = writer.prefix("IpamPoolAllocationId");
    if let Some(var_4302) = &input.ipam_pool_allocation_id {
        scope_4301.string(var_4302);
    }
    #[allow(unused_mut)]
    let mut scope_4303 = writer.prefix("Filter");
    if let Some(var_4304) = &input.filters {
        let mut list_4306 = scope_4303.start_list(true, Some("Filter"));
        for item_4305 in var_4304 {
            #[allow(unused_mut)]
            let mut entry_4307 = list_4306.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4307, item_4305)?;
        }
        list_4306.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4308 = writer.prefix("MaxResults");
    if let Some(var_4309) = &input.max_results {
        scope_4308.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4309).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4310 = writer.prefix("NextToken");
    if let Some(var_4311) = &input.next_token {
        scope_4310.string(var_4311);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ipam_pool_cidrs(
    input: &crate::input::GetIpamPoolCidrsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetIpamPoolCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4312 = writer.prefix("DryRun");
    if let Some(var_4313) = &input.dry_run {
        scope_4312.boolean(*var_4313);
    }
    #[allow(unused_mut)]
    let mut scope_4314 = writer.prefix("IpamPoolId");
    if let Some(var_4315) = &input.ipam_pool_id {
        scope_4314.string(var_4315);
    }
    #[allow(unused_mut)]
    let mut scope_4316 = writer.prefix("Filter");
    if let Some(var_4317) = &input.filters {
        let mut list_4319 = scope_4316.start_list(true, Some("Filter"));
        for item_4318 in var_4317 {
            #[allow(unused_mut)]
            let mut entry_4320 = list_4319.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4320, item_4318)?;
        }
        list_4319.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4321 = writer.prefix("MaxResults");
    if let Some(var_4322) = &input.max_results {
        scope_4321.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4322).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4323 = writer.prefix("NextToken");
    if let Some(var_4324) = &input.next_token {
        scope_4323.string(var_4324);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ipam_resource_cidrs(
    input: &crate::input::GetIpamResourceCidrsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetIpamResourceCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4325 = writer.prefix("DryRun");
    if let Some(var_4326) = &input.dry_run {
        scope_4325.boolean(*var_4326);
    }
    #[allow(unused_mut)]
    let mut scope_4327 = writer.prefix("Filter");
    if let Some(var_4328) = &input.filters {
        let mut list_4330 = scope_4327.start_list(true, Some("Filter"));
        for item_4329 in var_4328 {
            #[allow(unused_mut)]
            let mut entry_4331 = list_4330.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4331, item_4329)?;
        }
        list_4330.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4332 = writer.prefix("MaxResults");
    if let Some(var_4333) = &input.max_results {
        scope_4332.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4333).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4334 = writer.prefix("NextToken");
    if let Some(var_4335) = &input.next_token {
        scope_4334.string(var_4335);
    }
    #[allow(unused_mut)]
    let mut scope_4336 = writer.prefix("IpamScopeId");
    if let Some(var_4337) = &input.ipam_scope_id {
        scope_4336.string(var_4337);
    }
    #[allow(unused_mut)]
    let mut scope_4338 = writer.prefix("IpamPoolId");
    if let Some(var_4339) = &input.ipam_pool_id {
        scope_4338.string(var_4339);
    }
    #[allow(unused_mut)]
    let mut scope_4340 = writer.prefix("ResourceId");
    if let Some(var_4341) = &input.resource_id {
        scope_4340.string(var_4341);
    }
    #[allow(unused_mut)]
    let mut scope_4342 = writer.prefix("ResourceType");
    if let Some(var_4343) = &input.resource_type {
        scope_4342.string(var_4343.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4344 = writer.prefix("ResourceTag");
    if let Some(var_4345) = &input.resource_tag {
        crate::query_ser::serialize_structure_crate_model_request_ipam_resource_tag(
            scope_4344, var_4345,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4346 = writer.prefix("ResourceOwner");
    if let Some(var_4347) = &input.resource_owner {
        scope_4346.string(var_4347);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_launch_template_data(
    input: &crate::input::GetLaunchTemplateDataInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetLaunchTemplateData", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4348 = writer.prefix("DryRun");
    if let Some(var_4349) = &input.dry_run {
        scope_4348.boolean(*var_4349);
    }
    #[allow(unused_mut)]
    let mut scope_4350 = writer.prefix("InstanceId");
    if let Some(var_4351) = &input.instance_id {
        scope_4350.string(var_4351);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_managed_prefix_list_associations(
    input: &crate::input::GetManagedPrefixListAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetManagedPrefixListAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4352 = writer.prefix("DryRun");
    if let Some(var_4353) = &input.dry_run {
        scope_4352.boolean(*var_4353);
    }
    #[allow(unused_mut)]
    let mut scope_4354 = writer.prefix("PrefixListId");
    if let Some(var_4355) = &input.prefix_list_id {
        scope_4354.string(var_4355);
    }
    #[allow(unused_mut)]
    let mut scope_4356 = writer.prefix("MaxResults");
    if let Some(var_4357) = &input.max_results {
        scope_4356.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4357).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4358 = writer.prefix("NextToken");
    if let Some(var_4359) = &input.next_token {
        scope_4358.string(var_4359);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_managed_prefix_list_entries(
    input: &crate::input::GetManagedPrefixListEntriesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetManagedPrefixListEntries", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4360 = writer.prefix("DryRun");
    if let Some(var_4361) = &input.dry_run {
        scope_4360.boolean(*var_4361);
    }
    #[allow(unused_mut)]
    let mut scope_4362 = writer.prefix("PrefixListId");
    if let Some(var_4363) = &input.prefix_list_id {
        scope_4362.string(var_4363);
    }
    #[allow(unused_mut)]
    let mut scope_4364 = writer.prefix("TargetVersion");
    if let Some(var_4365) = &input.target_version {
        scope_4364.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4365).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4366 = writer.prefix("MaxResults");
    if let Some(var_4367) = &input.max_results {
        scope_4366.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4367).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4368 = writer.prefix("NextToken");
    if let Some(var_4369) = &input.next_token {
        scope_4368.string(var_4369);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_network_insights_access_scope_analysis_findings(
    input: &crate::input::GetNetworkInsightsAccessScopeAnalysisFindingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetNetworkInsightsAccessScopeAnalysisFindings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4370 = writer.prefix("NetworkInsightsAccessScopeAnalysisId");
    if let Some(var_4371) = &input.network_insights_access_scope_analysis_id {
        scope_4370.string(var_4371);
    }
    #[allow(unused_mut)]
    let mut scope_4372 = writer.prefix("MaxResults");
    if let Some(var_4373) = &input.max_results {
        scope_4372.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4373).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4374 = writer.prefix("NextToken");
    if let Some(var_4375) = &input.next_token {
        scope_4374.string(var_4375);
    }
    #[allow(unused_mut)]
    let mut scope_4376 = writer.prefix("DryRun");
    if let Some(var_4377) = &input.dry_run {
        scope_4376.boolean(*var_4377);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_network_insights_access_scope_content(
    input: &crate::input::GetNetworkInsightsAccessScopeContentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetNetworkInsightsAccessScopeContent",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4378 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_4379) = &input.network_insights_access_scope_id {
        scope_4378.string(var_4379);
    }
    #[allow(unused_mut)]
    let mut scope_4380 = writer.prefix("DryRun");
    if let Some(var_4381) = &input.dry_run {
        scope_4380.boolean(*var_4381);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_password_data(
    input: &crate::input::GetPasswordDataInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetPasswordData", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4382 = writer.prefix("InstanceId");
    if let Some(var_4383) = &input.instance_id {
        scope_4382.string(var_4383);
    }
    #[allow(unused_mut)]
    let mut scope_4384 = writer.prefix("DryRun");
    if let Some(var_4385) = &input.dry_run {
        scope_4384.boolean(*var_4385);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_reserved_instances_exchange_quote(
    input: &crate::input::GetReservedInstancesExchangeQuoteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetReservedInstancesExchangeQuote",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4386 = writer.prefix("DryRun");
    if let Some(var_4387) = &input.dry_run {
        scope_4386.boolean(*var_4387);
    }
    #[allow(unused_mut)]
    let mut scope_4388 = writer.prefix("ReservedInstanceId");
    if let Some(var_4389) = &input.reserved_instance_ids {
        let mut list_4391 = scope_4388.start_list(true, Some("ReservedInstanceId"));
        for item_4390 in var_4389 {
            #[allow(unused_mut)]
            let mut entry_4392 = list_4391.entry();
            entry_4392.string(item_4390);
        }
        list_4391.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4393 = writer.prefix("TargetConfiguration");
    if let Some(var_4394) = &input.target_configurations {
        let mut list_4396 = scope_4393.start_list(true, Some("TargetConfigurationRequest"));
        for item_4395 in var_4394 {
            #[allow(unused_mut)]
            let mut entry_4397 = list_4396.entry();
            crate::query_ser::serialize_structure_crate_model_target_configuration_request(
                entry_4397, item_4395,
            )?;
        }
        list_4396.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_serial_console_access_status(
    input: &crate::input::GetSerialConsoleAccessStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetSerialConsoleAccessStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4398 = writer.prefix("DryRun");
    if let Some(var_4399) = &input.dry_run {
        scope_4398.boolean(*var_4399);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_spot_placement_scores(
    input: &crate::input::GetSpotPlacementScoresInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetSpotPlacementScores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4400 = writer.prefix("InstanceType");
    if let Some(var_4401) = &input.instance_types {
        let mut list_4403 = scope_4400.start_list(true, None);
        for item_4402 in var_4401 {
            #[allow(unused_mut)]
            let mut entry_4404 = list_4403.entry();
            entry_4404.string(item_4402);
        }
        list_4403.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4405 = writer.prefix("TargetCapacity");
    if let Some(var_4406) = &input.target_capacity {
        scope_4405.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4406).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4407 = writer.prefix("TargetCapacityUnitType");
    if let Some(var_4408) = &input.target_capacity_unit_type {
        scope_4407.string(var_4408.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4409 = writer.prefix("SingleAvailabilityZone");
    if let Some(var_4410) = &input.single_availability_zone {
        scope_4409.boolean(*var_4410);
    }
    #[allow(unused_mut)]
    let mut scope_4411 = writer.prefix("RegionName");
    if let Some(var_4412) = &input.region_names {
        let mut list_4414 = scope_4411.start_list(true, None);
        for item_4413 in var_4412 {
            #[allow(unused_mut)]
            let mut entry_4415 = list_4414.entry();
            entry_4415.string(item_4413);
        }
        list_4414.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4416 = writer.prefix("InstanceRequirementsWithMetadata");
    if let Some(var_4417) = &input.instance_requirements_with_metadata {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_with_metadata_request(scope_4416, var_4417)?;
    }
    #[allow(unused_mut)]
    let mut scope_4418 = writer.prefix("DryRun");
    if let Some(var_4419) = &input.dry_run {
        scope_4418.boolean(*var_4419);
    }
    #[allow(unused_mut)]
    let mut scope_4420 = writer.prefix("MaxResults");
    if let Some(var_4421) = &input.max_results {
        scope_4420.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4421).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4422 = writer.prefix("NextToken");
    if let Some(var_4423) = &input.next_token {
        scope_4422.string(var_4423);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_subnet_cidr_reservations(
    input: &crate::input::GetSubnetCidrReservationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetSubnetCidrReservations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4424 = writer.prefix("Filter");
    if let Some(var_4425) = &input.filters {
        let mut list_4427 = scope_4424.start_list(true, Some("Filter"));
        for item_4426 in var_4425 {
            #[allow(unused_mut)]
            let mut entry_4428 = list_4427.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4428, item_4426)?;
        }
        list_4427.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4429 = writer.prefix("SubnetId");
    if let Some(var_4430) = &input.subnet_id {
        scope_4429.string(var_4430);
    }
    #[allow(unused_mut)]
    let mut scope_4431 = writer.prefix("DryRun");
    if let Some(var_4432) = &input.dry_run {
        scope_4431.boolean(*var_4432);
    }
    #[allow(unused_mut)]
    let mut scope_4433 = writer.prefix("NextToken");
    if let Some(var_4434) = &input.next_token {
        scope_4433.string(var_4434);
    }
    #[allow(unused_mut)]
    let mut scope_4435 = writer.prefix("MaxResults");
    if let Some(var_4436) = &input.max_results {
        scope_4435.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4436).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_attachment_propagations(
    input: &crate::input::GetTransitGatewayAttachmentPropagationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayAttachmentPropagations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4437 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4438) = &input.transit_gateway_attachment_id {
        scope_4437.string(var_4438);
    }
    #[allow(unused_mut)]
    let mut scope_4439 = writer.prefix("Filter");
    if let Some(var_4440) = &input.filters {
        let mut list_4442 = scope_4439.start_list(true, Some("Filter"));
        for item_4441 in var_4440 {
            #[allow(unused_mut)]
            let mut entry_4443 = list_4442.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4443, item_4441)?;
        }
        list_4442.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4444 = writer.prefix("MaxResults");
    if let Some(var_4445) = &input.max_results {
        scope_4444.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4445).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4446 = writer.prefix("NextToken");
    if let Some(var_4447) = &input.next_token {
        scope_4446.string(var_4447);
    }
    #[allow(unused_mut)]
    let mut scope_4448 = writer.prefix("DryRun");
    if let Some(var_4449) = &input.dry_run {
        scope_4448.boolean(*var_4449);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_multicast_domain_associations(
    input: &crate::input::GetTransitGatewayMulticastDomainAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayMulticastDomainAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4450 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_4451) = &input.transit_gateway_multicast_domain_id {
        scope_4450.string(var_4451);
    }
    #[allow(unused_mut)]
    let mut scope_4452 = writer.prefix("Filter");
    if let Some(var_4453) = &input.filters {
        let mut list_4455 = scope_4452.start_list(true, Some("Filter"));
        for item_4454 in var_4453 {
            #[allow(unused_mut)]
            let mut entry_4456 = list_4455.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4456, item_4454)?;
        }
        list_4455.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4457 = writer.prefix("MaxResults");
    if let Some(var_4458) = &input.max_results {
        scope_4457.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4458).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4459 = writer.prefix("NextToken");
    if let Some(var_4460) = &input.next_token {
        scope_4459.string(var_4460);
    }
    #[allow(unused_mut)]
    let mut scope_4461 = writer.prefix("DryRun");
    if let Some(var_4462) = &input.dry_run {
        scope_4461.boolean(*var_4462);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_prefix_list_references(
    input: &crate::input::GetTransitGatewayPrefixListReferencesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayPrefixListReferences",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4463 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4464) = &input.transit_gateway_route_table_id {
        scope_4463.string(var_4464);
    }
    #[allow(unused_mut)]
    let mut scope_4465 = writer.prefix("Filter");
    if let Some(var_4466) = &input.filters {
        let mut list_4468 = scope_4465.start_list(true, Some("Filter"));
        for item_4467 in var_4466 {
            #[allow(unused_mut)]
            let mut entry_4469 = list_4468.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4469, item_4467)?;
        }
        list_4468.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4470 = writer.prefix("MaxResults");
    if let Some(var_4471) = &input.max_results {
        scope_4470.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4471).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4472 = writer.prefix("NextToken");
    if let Some(var_4473) = &input.next_token {
        scope_4472.string(var_4473);
    }
    #[allow(unused_mut)]
    let mut scope_4474 = writer.prefix("DryRun");
    if let Some(var_4475) = &input.dry_run {
        scope_4474.boolean(*var_4475);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_route_table_associations(
    input: &crate::input::GetTransitGatewayRouteTableAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayRouteTableAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4476 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4477) = &input.transit_gateway_route_table_id {
        scope_4476.string(var_4477);
    }
    #[allow(unused_mut)]
    let mut scope_4478 = writer.prefix("Filter");
    if let Some(var_4479) = &input.filters {
        let mut list_4481 = scope_4478.start_list(true, Some("Filter"));
        for item_4480 in var_4479 {
            #[allow(unused_mut)]
            let mut entry_4482 = list_4481.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4482, item_4480)?;
        }
        list_4481.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4483 = writer.prefix("MaxResults");
    if let Some(var_4484) = &input.max_results {
        scope_4483.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4484).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4485 = writer.prefix("NextToken");
    if let Some(var_4486) = &input.next_token {
        scope_4485.string(var_4486);
    }
    #[allow(unused_mut)]
    let mut scope_4487 = writer.prefix("DryRun");
    if let Some(var_4488) = &input.dry_run {
        scope_4487.boolean(*var_4488);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_route_table_propagations(
    input: &crate::input::GetTransitGatewayRouteTablePropagationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayRouteTablePropagations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4489 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4490) = &input.transit_gateway_route_table_id {
        scope_4489.string(var_4490);
    }
    #[allow(unused_mut)]
    let mut scope_4491 = writer.prefix("Filter");
    if let Some(var_4492) = &input.filters {
        let mut list_4494 = scope_4491.start_list(true, Some("Filter"));
        for item_4493 in var_4492 {
            #[allow(unused_mut)]
            let mut entry_4495 = list_4494.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4495, item_4493)?;
        }
        list_4494.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4496 = writer.prefix("MaxResults");
    if let Some(var_4497) = &input.max_results {
        scope_4496.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4497).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4498 = writer.prefix("NextToken");
    if let Some(var_4499) = &input.next_token {
        scope_4498.string(var_4499);
    }
    #[allow(unused_mut)]
    let mut scope_4500 = writer.prefix("DryRun");
    if let Some(var_4501) = &input.dry_run {
        scope_4500.boolean(*var_4501);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_vpn_connection_device_sample_configuration(
    input: &crate::input::GetVpnConnectionDeviceSampleConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetVpnConnectionDeviceSampleConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4502 = writer.prefix("VpnConnectionId");
    if let Some(var_4503) = &input.vpn_connection_id {
        scope_4502.string(var_4503);
    }
    #[allow(unused_mut)]
    let mut scope_4504 = writer.prefix("VpnConnectionDeviceTypeId");
    if let Some(var_4505) = &input.vpn_connection_device_type_id {
        scope_4504.string(var_4505);
    }
    #[allow(unused_mut)]
    let mut scope_4506 = writer.prefix("InternetKeyExchangeVersion");
    if let Some(var_4507) = &input.internet_key_exchange_version {
        scope_4506.string(var_4507);
    }
    #[allow(unused_mut)]
    let mut scope_4508 = writer.prefix("DryRun");
    if let Some(var_4509) = &input.dry_run {
        scope_4508.boolean(*var_4509);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_vpn_connection_device_types(
    input: &crate::input::GetVpnConnectionDeviceTypesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetVpnConnectionDeviceTypes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4510 = writer.prefix("MaxResults");
    if let Some(var_4511) = &input.max_results {
        scope_4510.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4511).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4512 = writer.prefix("NextToken");
    if let Some(var_4513) = &input.next_token {
        scope_4512.string(var_4513);
    }
    #[allow(unused_mut)]
    let mut scope_4514 = writer.prefix("DryRun");
    if let Some(var_4515) = &input.dry_run {
        scope_4514.boolean(*var_4515);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_client_vpn_client_certificate_revocation_list(
    input: &crate::input::ImportClientVpnClientCertificateRevocationListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ImportClientVpnClientCertificateRevocationList",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4516 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4517) = &input.client_vpn_endpoint_id {
        scope_4516.string(var_4517);
    }
    #[allow(unused_mut)]
    let mut scope_4518 = writer.prefix("CertificateRevocationList");
    if let Some(var_4519) = &input.certificate_revocation_list {
        scope_4518.string(var_4519);
    }
    #[allow(unused_mut)]
    let mut scope_4520 = writer.prefix("DryRun");
    if let Some(var_4521) = &input.dry_run {
        scope_4520.boolean(*var_4521);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_image(
    input: &crate::input::ImportImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4522 = writer.prefix("Architecture");
    if let Some(var_4523) = &input.architecture {
        scope_4522.string(var_4523);
    }
    #[allow(unused_mut)]
    let mut scope_4524 = writer.prefix("ClientData");
    if let Some(var_4525) = &input.client_data {
        crate::query_ser::serialize_structure_crate_model_client_data(scope_4524, var_4525)?;
    }
    #[allow(unused_mut)]
    let mut scope_4526 = writer.prefix("ClientToken");
    if let Some(var_4527) = &input.client_token {
        scope_4526.string(var_4527);
    }
    #[allow(unused_mut)]
    let mut scope_4528 = writer.prefix("Description");
    if let Some(var_4529) = &input.description {
        scope_4528.string(var_4529);
    }
    #[allow(unused_mut)]
    let mut scope_4530 = writer.prefix("DiskContainer");
    if let Some(var_4531) = &input.disk_containers {
        let mut list_4533 = scope_4530.start_list(true, Some("item"));
        for item_4532 in var_4531 {
            #[allow(unused_mut)]
            let mut entry_4534 = list_4533.entry();
            crate::query_ser::serialize_structure_crate_model_image_disk_container(
                entry_4534, item_4532,
            )?;
        }
        list_4533.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4535 = writer.prefix("DryRun");
    if let Some(var_4536) = &input.dry_run {
        scope_4535.boolean(*var_4536);
    }
    #[allow(unused_mut)]
    let mut scope_4537 = writer.prefix("Encrypted");
    if let Some(var_4538) = &input.encrypted {
        scope_4537.boolean(*var_4538);
    }
    #[allow(unused_mut)]
    let mut scope_4539 = writer.prefix("Hypervisor");
    if let Some(var_4540) = &input.hypervisor {
        scope_4539.string(var_4540);
    }
    #[allow(unused_mut)]
    let mut scope_4541 = writer.prefix("KmsKeyId");
    if let Some(var_4542) = &input.kms_key_id {
        scope_4541.string(var_4542);
    }
    #[allow(unused_mut)]
    let mut scope_4543 = writer.prefix("LicenseType");
    if let Some(var_4544) = &input.license_type {
        scope_4543.string(var_4544);
    }
    #[allow(unused_mut)]
    let mut scope_4545 = writer.prefix("Platform");
    if let Some(var_4546) = &input.platform {
        scope_4545.string(var_4546);
    }
    #[allow(unused_mut)]
    let mut scope_4547 = writer.prefix("RoleName");
    if let Some(var_4548) = &input.role_name {
        scope_4547.string(var_4548);
    }
    #[allow(unused_mut)]
    let mut scope_4549 = writer.prefix("LicenseSpecifications");
    if let Some(var_4550) = &input.license_specifications {
        let mut list_4552 = scope_4549.start_list(true, Some("item"));
        for item_4551 in var_4550 {
            #[allow(unused_mut)]
            let mut entry_4553 = list_4552.entry();
            crate::query_ser::serialize_structure_crate_model_import_image_license_configuration_request(entry_4553, item_4551)?;
        }
        list_4552.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4554 = writer.prefix("TagSpecification");
    if let Some(var_4555) = &input.tag_specifications {
        let mut list_4557 = scope_4554.start_list(true, Some("item"));
        for item_4556 in var_4555 {
            #[allow(unused_mut)]
            let mut entry_4558 = list_4557.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4558, item_4556,
            )?;
        }
        list_4557.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4559 = writer.prefix("UsageOperation");
    if let Some(var_4560) = &input.usage_operation {
        scope_4559.string(var_4560);
    }
    #[allow(unused_mut)]
    let mut scope_4561 = writer.prefix("BootMode");
    if let Some(var_4562) = &input.boot_mode {
        scope_4561.string(var_4562.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_instance(
    input: &crate::input::ImportInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4563 = writer.prefix("Description");
    if let Some(var_4564) = &input.description {
        scope_4563.string(var_4564);
    }
    #[allow(unused_mut)]
    let mut scope_4565 = writer.prefix("DiskImage");
    if let Some(var_4566) = &input.disk_images {
        let mut list_4568 = scope_4565.start_list(true, None);
        for item_4567 in var_4566 {
            #[allow(unused_mut)]
            let mut entry_4569 = list_4568.entry();
            crate::query_ser::serialize_structure_crate_model_disk_image(entry_4569, item_4567)?;
        }
        list_4568.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4570 = writer.prefix("DryRun");
    if let Some(var_4571) = &input.dry_run {
        scope_4570.boolean(*var_4571);
    }
    #[allow(unused_mut)]
    let mut scope_4572 = writer.prefix("LaunchSpecification");
    if let Some(var_4573) = &input.launch_specification {
        crate::query_ser::serialize_structure_crate_model_import_instance_launch_specification(
            scope_4572, var_4573,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4574 = writer.prefix("Platform");
    if let Some(var_4575) = &input.platform {
        scope_4574.string(var_4575.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_key_pair(
    input: &crate::input::ImportKeyPairInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4576 = writer.prefix("DryRun");
    if let Some(var_4577) = &input.dry_run {
        scope_4576.boolean(*var_4577);
    }
    #[allow(unused_mut)]
    let mut scope_4578 = writer.prefix("KeyName");
    if let Some(var_4579) = &input.key_name {
        scope_4578.string(var_4579);
    }
    #[allow(unused_mut)]
    let mut scope_4580 = writer.prefix("PublicKeyMaterial");
    if let Some(var_4581) = &input.public_key_material {
        scope_4580.string(&aws_smithy_types::base64::encode(var_4581));
    }
    #[allow(unused_mut)]
    let mut scope_4582 = writer.prefix("TagSpecification");
    if let Some(var_4583) = &input.tag_specifications {
        let mut list_4585 = scope_4582.start_list(true, Some("item"));
        for item_4584 in var_4583 {
            #[allow(unused_mut)]
            let mut entry_4586 = list_4585.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4586, item_4584,
            )?;
        }
        list_4585.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_snapshot(
    input: &crate::input::ImportSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4587 = writer.prefix("ClientData");
    if let Some(var_4588) = &input.client_data {
        crate::query_ser::serialize_structure_crate_model_client_data(scope_4587, var_4588)?;
    }
    #[allow(unused_mut)]
    let mut scope_4589 = writer.prefix("ClientToken");
    if let Some(var_4590) = &input.client_token {
        scope_4589.string(var_4590);
    }
    #[allow(unused_mut)]
    let mut scope_4591 = writer.prefix("Description");
    if let Some(var_4592) = &input.description {
        scope_4591.string(var_4592);
    }
    #[allow(unused_mut)]
    let mut scope_4593 = writer.prefix("DiskContainer");
    if let Some(var_4594) = &input.disk_container {
        crate::query_ser::serialize_structure_crate_model_snapshot_disk_container(
            scope_4593, var_4594,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4595 = writer.prefix("DryRun");
    if let Some(var_4596) = &input.dry_run {
        scope_4595.boolean(*var_4596);
    }
    #[allow(unused_mut)]
    let mut scope_4597 = writer.prefix("Encrypted");
    if let Some(var_4598) = &input.encrypted {
        scope_4597.boolean(*var_4598);
    }
    #[allow(unused_mut)]
    let mut scope_4599 = writer.prefix("KmsKeyId");
    if let Some(var_4600) = &input.kms_key_id {
        scope_4599.string(var_4600);
    }
    #[allow(unused_mut)]
    let mut scope_4601 = writer.prefix("RoleName");
    if let Some(var_4602) = &input.role_name {
        scope_4601.string(var_4602);
    }
    #[allow(unused_mut)]
    let mut scope_4603 = writer.prefix("TagSpecification");
    if let Some(var_4604) = &input.tag_specifications {
        let mut list_4606 = scope_4603.start_list(true, Some("item"));
        for item_4605 in var_4604 {
            #[allow(unused_mut)]
            let mut entry_4607 = list_4606.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4607, item_4605,
            )?;
        }
        list_4606.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_volume(
    input: &crate::input::ImportVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4608 = writer.prefix("AvailabilityZone");
    if let Some(var_4609) = &input.availability_zone {
        scope_4608.string(var_4609);
    }
    #[allow(unused_mut)]
    let mut scope_4610 = writer.prefix("Description");
    if let Some(var_4611) = &input.description {
        scope_4610.string(var_4611);
    }
    #[allow(unused_mut)]
    let mut scope_4612 = writer.prefix("DryRun");
    if let Some(var_4613) = &input.dry_run {
        scope_4612.boolean(*var_4613);
    }
    #[allow(unused_mut)]
    let mut scope_4614 = writer.prefix("Image");
    if let Some(var_4615) = &input.image {
        crate::query_ser::serialize_structure_crate_model_disk_image_detail(scope_4614, var_4615)?;
    }
    #[allow(unused_mut)]
    let mut scope_4616 = writer.prefix("Volume");
    if let Some(var_4617) = &input.volume {
        crate::query_ser::serialize_structure_crate_model_volume_detail(scope_4616, var_4617)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_images_in_recycle_bin(
    input: &crate::input::ListImagesInRecycleBinInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ListImagesInRecycleBin", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4618 = writer.prefix("ImageId");
    if let Some(var_4619) = &input.image_ids {
        let mut list_4621 = scope_4618.start_list(true, Some("ImageId"));
        for item_4620 in var_4619 {
            #[allow(unused_mut)]
            let mut entry_4622 = list_4621.entry();
            entry_4622.string(item_4620);
        }
        list_4621.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4623 = writer.prefix("NextToken");
    if let Some(var_4624) = &input.next_token {
        scope_4623.string(var_4624);
    }
    #[allow(unused_mut)]
    let mut scope_4625 = writer.prefix("MaxResults");
    if let Some(var_4626) = &input.max_results {
        scope_4625.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4626).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4627 = writer.prefix("DryRun");
    if let Some(var_4628) = &input.dry_run {
        scope_4627.boolean(*var_4628);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_snapshots_in_recycle_bin(
    input: &crate::input::ListSnapshotsInRecycleBinInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ListSnapshotsInRecycleBin", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4629 = writer.prefix("MaxResults");
    if let Some(var_4630) = &input.max_results {
        scope_4629.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4630).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4631 = writer.prefix("NextToken");
    if let Some(var_4632) = &input.next_token {
        scope_4631.string(var_4632);
    }
    #[allow(unused_mut)]
    let mut scope_4633 = writer.prefix("SnapshotId");
    if let Some(var_4634) = &input.snapshot_ids {
        let mut list_4636 = scope_4633.start_list(true, Some("SnapshotId"));
        for item_4635 in var_4634 {
            #[allow(unused_mut)]
            let mut entry_4637 = list_4636.entry();
            entry_4637.string(item_4635);
        }
        list_4636.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4638 = writer.prefix("DryRun");
    if let Some(var_4639) = &input.dry_run {
        scope_4638.boolean(*var_4639);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_address_attribute(
    input: &crate::input::ModifyAddressAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyAddressAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4640 = writer.prefix("AllocationId");
    if let Some(var_4641) = &input.allocation_id {
        scope_4640.string(var_4641);
    }
    #[allow(unused_mut)]
    let mut scope_4642 = writer.prefix("DomainName");
    if let Some(var_4643) = &input.domain_name {
        scope_4642.string(var_4643);
    }
    #[allow(unused_mut)]
    let mut scope_4644 = writer.prefix("DryRun");
    if let Some(var_4645) = &input.dry_run {
        scope_4644.boolean(*var_4645);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_availability_zone_group(
    input: &crate::input::ModifyAvailabilityZoneGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyAvailabilityZoneGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4646 = writer.prefix("GroupName");
    if let Some(var_4647) = &input.group_name {
        scope_4646.string(var_4647);
    }
    #[allow(unused_mut)]
    let mut scope_4648 = writer.prefix("OptInStatus");
    if let Some(var_4649) = &input.opt_in_status {
        scope_4648.string(var_4649.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4650 = writer.prefix("DryRun");
    if let Some(var_4651) = &input.dry_run {
        scope_4650.boolean(*var_4651);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_capacity_reservation(
    input: &crate::input::ModifyCapacityReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4652 = writer.prefix("CapacityReservationId");
    if let Some(var_4653) = &input.capacity_reservation_id {
        scope_4652.string(var_4653);
    }
    #[allow(unused_mut)]
    let mut scope_4654 = writer.prefix("InstanceCount");
    if let Some(var_4655) = &input.instance_count {
        scope_4654.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4655).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4656 = writer.prefix("EndDate");
    if let Some(var_4657) = &input.end_date {
        scope_4656.date_time(var_4657, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4658 = writer.prefix("EndDateType");
    if let Some(var_4659) = &input.end_date_type {
        scope_4658.string(var_4659.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4660 = writer.prefix("Accept");
    if let Some(var_4661) = &input.accept {
        scope_4660.boolean(*var_4661);
    }
    #[allow(unused_mut)]
    let mut scope_4662 = writer.prefix("DryRun");
    if let Some(var_4663) = &input.dry_run {
        scope_4662.boolean(*var_4663);
    }
    #[allow(unused_mut)]
    let mut scope_4664 = writer.prefix("AdditionalInfo");
    if let Some(var_4665) = &input.additional_info {
        scope_4664.string(var_4665);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_capacity_reservation_fleet(
    input: &crate::input::ModifyCapacityReservationFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyCapacityReservationFleet",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4666 = writer.prefix("CapacityReservationFleetId");
    if let Some(var_4667) = &input.capacity_reservation_fleet_id {
        scope_4666.string(var_4667);
    }
    #[allow(unused_mut)]
    let mut scope_4668 = writer.prefix("TotalTargetCapacity");
    if let Some(var_4669) = &input.total_target_capacity {
        scope_4668.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4669).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4670 = writer.prefix("EndDate");
    if let Some(var_4671) = &input.end_date {
        scope_4670.date_time(var_4671, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4672 = writer.prefix("DryRun");
    if let Some(var_4673) = &input.dry_run {
        scope_4672.boolean(*var_4673);
    }
    #[allow(unused_mut)]
    let mut scope_4674 = writer.prefix("RemoveEndDate");
    if let Some(var_4675) = &input.remove_end_date {
        scope_4674.boolean(*var_4675);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_client_vpn_endpoint(
    input: &crate::input::ModifyClientVpnEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4676 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4677) = &input.client_vpn_endpoint_id {
        scope_4676.string(var_4677);
    }
    #[allow(unused_mut)]
    let mut scope_4678 = writer.prefix("ServerCertificateArn");
    if let Some(var_4679) = &input.server_certificate_arn {
        scope_4678.string(var_4679);
    }
    #[allow(unused_mut)]
    let mut scope_4680 = writer.prefix("ConnectionLogOptions");
    if let Some(var_4681) = &input.connection_log_options {
        crate::query_ser::serialize_structure_crate_model_connection_log_options(
            scope_4680, var_4681,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4682 = writer.prefix("DnsServers");
    if let Some(var_4683) = &input.dns_servers {
        crate::query_ser::serialize_structure_crate_model_dns_servers_options_modify_structure(
            scope_4682, var_4683,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4684 = writer.prefix("VpnPort");
    if let Some(var_4685) = &input.vpn_port {
        scope_4684.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4685).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4686 = writer.prefix("Description");
    if let Some(var_4687) = &input.description {
        scope_4686.string(var_4687);
    }
    #[allow(unused_mut)]
    let mut scope_4688 = writer.prefix("SplitTunnel");
    if let Some(var_4689) = &input.split_tunnel {
        scope_4688.boolean(*var_4689);
    }
    #[allow(unused_mut)]
    let mut scope_4690 = writer.prefix("DryRun");
    if let Some(var_4691) = &input.dry_run {
        scope_4690.boolean(*var_4691);
    }
    #[allow(unused_mut)]
    let mut scope_4692 = writer.prefix("SecurityGroupId");
    if let Some(var_4693) = &input.security_group_ids {
        let mut list_4695 = scope_4692.start_list(true, Some("item"));
        for item_4694 in var_4693 {
            #[allow(unused_mut)]
            let mut entry_4696 = list_4695.entry();
            entry_4696.string(item_4694);
        }
        list_4695.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4697 = writer.prefix("VpcId");
    if let Some(var_4698) = &input.vpc_id {
        scope_4697.string(var_4698);
    }
    #[allow(unused_mut)]
    let mut scope_4699 = writer.prefix("SelfServicePortal");
    if let Some(var_4700) = &input.self_service_portal {
        scope_4699.string(var_4700.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4701 = writer.prefix("ClientConnectOptions");
    if let Some(var_4702) = &input.client_connect_options {
        crate::query_ser::serialize_structure_crate_model_client_connect_options(
            scope_4701, var_4702,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4703 = writer.prefix("SessionTimeoutHours");
    if let Some(var_4704) = &input.session_timeout_hours {
        scope_4703.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4704).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4705 = writer.prefix("ClientLoginBannerOptions");
    if let Some(var_4706) = &input.client_login_banner_options {
        crate::query_ser::serialize_structure_crate_model_client_login_banner_options(
            scope_4705, var_4706,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_default_credit_specification(
    input: &crate::input::ModifyDefaultCreditSpecificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyDefaultCreditSpecification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4707 = writer.prefix("DryRun");
    if let Some(var_4708) = &input.dry_run {
        scope_4707.boolean(*var_4708);
    }
    #[allow(unused_mut)]
    let mut scope_4709 = writer.prefix("InstanceFamily");
    if let Some(var_4710) = &input.instance_family {
        scope_4709.string(var_4710.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4711 = writer.prefix("CpuCredits");
    if let Some(var_4712) = &input.cpu_credits {
        scope_4711.string(var_4712);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ebs_default_kms_key_id(
    input: &crate::input::ModifyEbsDefaultKmsKeyIdInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4713 = writer.prefix("KmsKeyId");
    if let Some(var_4714) = &input.kms_key_id {
        scope_4713.string(var_4714);
    }
    #[allow(unused_mut)]
    let mut scope_4715 = writer.prefix("DryRun");
    if let Some(var_4716) = &input.dry_run {
        scope_4715.boolean(*var_4716);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_fleet(
    input: &crate::input::ModifyFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4717 = writer.prefix("DryRun");
    if let Some(var_4718) = &input.dry_run {
        scope_4717.boolean(*var_4718);
    }
    #[allow(unused_mut)]
    let mut scope_4719 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_4720) = &input.excess_capacity_termination_policy {
        scope_4719.string(var_4720.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4721 = writer.prefix("LaunchTemplateConfig");
    if let Some(var_4722) = &input.launch_template_configs {
        let mut list_4724 = scope_4721.start_list(true, Some("item"));
        for item_4723 in var_4722 {
            #[allow(unused_mut)]
            let mut entry_4725 = list_4724.entry();
            crate::query_ser::serialize_structure_crate_model_fleet_launch_template_config_request(
                entry_4725, item_4723,
            )?;
        }
        list_4724.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4726 = writer.prefix("FleetId");
    if let Some(var_4727) = &input.fleet_id {
        scope_4726.string(var_4727);
    }
    #[allow(unused_mut)]
    let mut scope_4728 = writer.prefix("TargetCapacitySpecification");
    if let Some(var_4729) = &input.target_capacity_specification {
        crate::query_ser::serialize_structure_crate_model_target_capacity_specification_request(
            scope_4728, var_4729,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4730 = writer.prefix("Context");
    if let Some(var_4731) = &input.context {
        scope_4730.string(var_4731);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_fpga_image_attribute(
    input: &crate::input::ModifyFpgaImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4732 = writer.prefix("DryRun");
    if let Some(var_4733) = &input.dry_run {
        scope_4732.boolean(*var_4733);
    }
    #[allow(unused_mut)]
    let mut scope_4734 = writer.prefix("FpgaImageId");
    if let Some(var_4735) = &input.fpga_image_id {
        scope_4734.string(var_4735);
    }
    #[allow(unused_mut)]
    let mut scope_4736 = writer.prefix("Attribute");
    if let Some(var_4737) = &input.attribute {
        scope_4736.string(var_4737.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4738 = writer.prefix("OperationType");
    if let Some(var_4739) = &input.operation_type {
        scope_4738.string(var_4739.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4740 = writer.prefix("UserId");
    if let Some(var_4741) = &input.user_ids {
        let mut list_4743 = scope_4740.start_list(true, Some("UserId"));
        for item_4742 in var_4741 {
            #[allow(unused_mut)]
            let mut entry_4744 = list_4743.entry();
            entry_4744.string(item_4742);
        }
        list_4743.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4745 = writer.prefix("UserGroup");
    if let Some(var_4746) = &input.user_groups {
        let mut list_4748 = scope_4745.start_list(true, Some("UserGroup"));
        for item_4747 in var_4746 {
            #[allow(unused_mut)]
            let mut entry_4749 = list_4748.entry();
            entry_4749.string(item_4747);
        }
        list_4748.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4750 = writer.prefix("ProductCode");
    if let Some(var_4751) = &input.product_codes {
        let mut list_4753 = scope_4750.start_list(true, Some("ProductCode"));
        for item_4752 in var_4751 {
            #[allow(unused_mut)]
            let mut entry_4754 = list_4753.entry();
            entry_4754.string(item_4752);
        }
        list_4753.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4755 = writer.prefix("LoadPermission");
    if let Some(var_4756) = &input.load_permission {
        crate::query_ser::serialize_structure_crate_model_load_permission_modifications(
            scope_4755, var_4756,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4757 = writer.prefix("Description");
    if let Some(var_4758) = &input.description {
        scope_4757.string(var_4758);
    }
    #[allow(unused_mut)]
    let mut scope_4759 = writer.prefix("Name");
    if let Some(var_4760) = &input.name {
        scope_4759.string(var_4760);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_hosts(
    input: &crate::input::ModifyHostsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4761 = writer.prefix("AutoPlacement");
    if let Some(var_4762) = &input.auto_placement {
        scope_4761.string(var_4762.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4763 = writer.prefix("HostId");
    if let Some(var_4764) = &input.host_ids {
        let mut list_4766 = scope_4763.start_list(true, Some("item"));
        for item_4765 in var_4764 {
            #[allow(unused_mut)]
            let mut entry_4767 = list_4766.entry();
            entry_4767.string(item_4765);
        }
        list_4766.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4768 = writer.prefix("HostRecovery");
    if let Some(var_4769) = &input.host_recovery {
        scope_4768.string(var_4769.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4770 = writer.prefix("InstanceType");
    if let Some(var_4771) = &input.instance_type {
        scope_4770.string(var_4771);
    }
    #[allow(unused_mut)]
    let mut scope_4772 = writer.prefix("InstanceFamily");
    if let Some(var_4773) = &input.instance_family {
        scope_4772.string(var_4773);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_identity_id_format(
    input: &crate::input::ModifyIdentityIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyIdentityIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4774 = writer.prefix("PrincipalArn");
    if let Some(var_4775) = &input.principal_arn {
        scope_4774.string(var_4775);
    }
    #[allow(unused_mut)]
    let mut scope_4776 = writer.prefix("Resource");
    if let Some(var_4777) = &input.resource {
        scope_4776.string(var_4777);
    }
    #[allow(unused_mut)]
    let mut scope_4778 = writer.prefix("UseLongIds");
    if let Some(var_4779) = &input.use_long_ids {
        scope_4778.boolean(*var_4779);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_id_format(
    input: &crate::input::ModifyIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4780 = writer.prefix("Resource");
    if let Some(var_4781) = &input.resource {
        scope_4780.string(var_4781);
    }
    #[allow(unused_mut)]
    let mut scope_4782 = writer.prefix("UseLongIds");
    if let Some(var_4783) = &input.use_long_ids {
        scope_4782.boolean(*var_4783);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_image_attribute(
    input: &crate::input::ModifyImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4784 = writer.prefix("Attribute");
    if let Some(var_4785) = &input.attribute {
        scope_4784.string(var_4785);
    }
    #[allow(unused_mut)]
    let mut scope_4786 = writer.prefix("Description");
    if let Some(var_4787) = &input.description {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4786, var_4787)?;
    }
    #[allow(unused_mut)]
    let mut scope_4788 = writer.prefix("ImageId");
    if let Some(var_4789) = &input.image_id {
        scope_4788.string(var_4789);
    }
    #[allow(unused_mut)]
    let mut scope_4790 = writer.prefix("LaunchPermission");
    if let Some(var_4791) = &input.launch_permission {
        crate::query_ser::serialize_structure_crate_model_launch_permission_modifications(
            scope_4790, var_4791,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4792 = writer.prefix("OperationType");
    if let Some(var_4793) = &input.operation_type {
        scope_4792.string(var_4793.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4794 = writer.prefix("ProductCode");
    if let Some(var_4795) = &input.product_codes {
        let mut list_4797 = scope_4794.start_list(true, Some("ProductCode"));
        for item_4796 in var_4795 {
            #[allow(unused_mut)]
            let mut entry_4798 = list_4797.entry();
            entry_4798.string(item_4796);
        }
        list_4797.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4799 = writer.prefix("UserGroup");
    if let Some(var_4800) = &input.user_groups {
        let mut list_4802 = scope_4799.start_list(true, Some("UserGroup"));
        for item_4801 in var_4800 {
            #[allow(unused_mut)]
            let mut entry_4803 = list_4802.entry();
            entry_4803.string(item_4801);
        }
        list_4802.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4804 = writer.prefix("UserId");
    if let Some(var_4805) = &input.user_ids {
        let mut list_4807 = scope_4804.start_list(true, Some("UserId"));
        for item_4806 in var_4805 {
            #[allow(unused_mut)]
            let mut entry_4808 = list_4807.entry();
            entry_4808.string(item_4806);
        }
        list_4807.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4809 = writer.prefix("Value");
    if let Some(var_4810) = &input.value {
        scope_4809.string(var_4810);
    }
    #[allow(unused_mut)]
    let mut scope_4811 = writer.prefix("DryRun");
    if let Some(var_4812) = &input.dry_run {
        scope_4811.boolean(*var_4812);
    }
    #[allow(unused_mut)]
    let mut scope_4813 = writer.prefix("OrganizationArn");
    if let Some(var_4814) = &input.organization_arns {
        let mut list_4816 = scope_4813.start_list(true, Some("OrganizationArn"));
        for item_4815 in var_4814 {
            #[allow(unused_mut)]
            let mut entry_4817 = list_4816.entry();
            entry_4817.string(item_4815);
        }
        list_4816.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4818 = writer.prefix("OrganizationalUnitArn");
    if let Some(var_4819) = &input.organizational_unit_arns {
        let mut list_4821 = scope_4818.start_list(true, Some("OrganizationalUnitArn"));
        for item_4820 in var_4819 {
            #[allow(unused_mut)]
            let mut entry_4822 = list_4821.entry();
            entry_4822.string(item_4820);
        }
        list_4821.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_attribute(
    input: &crate::input::ModifyInstanceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4823 = writer.prefix("SourceDestCheck");
    if let Some(var_4824) = &input.source_dest_check {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4823, var_4824,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4825 = writer.prefix("Attribute");
    if let Some(var_4826) = &input.attribute {
        scope_4825.string(var_4826.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4827 = writer.prefix("BlockDeviceMapping");
    if let Some(var_4828) = &input.block_device_mappings {
        let mut list_4830 = scope_4827.start_list(true, Some("item"));
        for item_4829 in var_4828 {
            #[allow(unused_mut)]
            let mut entry_4831 = list_4830.entry();
            crate::query_ser::serialize_structure_crate_model_instance_block_device_mapping_specification(entry_4831, item_4829)?;
        }
        list_4830.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4832 = writer.prefix("DisableApiTermination");
    if let Some(var_4833) = &input.disable_api_termination {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4832, var_4833,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4834 = writer.prefix("DryRun");
    if let Some(var_4835) = &input.dry_run {
        scope_4834.boolean(*var_4835);
    }
    #[allow(unused_mut)]
    let mut scope_4836 = writer.prefix("EbsOptimized");
    if let Some(var_4837) = &input.ebs_optimized {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4836, var_4837,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4838 = writer.prefix("EnaSupport");
    if let Some(var_4839) = &input.ena_support {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4838, var_4839,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4840 = writer.prefix("GroupId");
    if let Some(var_4841) = &input.groups {
        let mut list_4843 = scope_4840.start_list(true, Some("groupId"));
        for item_4842 in var_4841 {
            #[allow(unused_mut)]
            let mut entry_4844 = list_4843.entry();
            entry_4844.string(item_4842);
        }
        list_4843.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4845 = writer.prefix("InstanceId");
    if let Some(var_4846) = &input.instance_id {
        scope_4845.string(var_4846);
    }
    #[allow(unused_mut)]
    let mut scope_4847 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_4848) = &input.instance_initiated_shutdown_behavior {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4847, var_4848)?;
    }
    #[allow(unused_mut)]
    let mut scope_4849 = writer.prefix("InstanceType");
    if let Some(var_4850) = &input.instance_type {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4849, var_4850)?;
    }
    #[allow(unused_mut)]
    let mut scope_4851 = writer.prefix("Kernel");
    if let Some(var_4852) = &input.kernel {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4851, var_4852)?;
    }
    #[allow(unused_mut)]
    let mut scope_4853 = writer.prefix("Ramdisk");
    if let Some(var_4854) = &input.ramdisk {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4853, var_4854)?;
    }
    #[allow(unused_mut)]
    let mut scope_4855 = writer.prefix("SriovNetSupport");
    if let Some(var_4856) = &input.sriov_net_support {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4855, var_4856)?;
    }
    #[allow(unused_mut)]
    let mut scope_4857 = writer.prefix("UserData");
    if let Some(var_4858) = &input.user_data {
        crate::query_ser::serialize_structure_crate_model_blob_attribute_value(
            scope_4857, var_4858,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4859 = writer.prefix("Value");
    if let Some(var_4860) = &input.value {
        scope_4859.string(var_4860);
    }
    #[allow(unused_mut)]
    let mut scope_4861 = writer.prefix("DisableApiStop");
    if let Some(var_4862) = &input.disable_api_stop {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4861, var_4862,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_capacity_reservation_attributes(
    input: &crate::input::ModifyInstanceCapacityReservationAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyInstanceCapacityReservationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4863 = writer.prefix("InstanceId");
    if let Some(var_4864) = &input.instance_id {
        scope_4863.string(var_4864);
    }
    #[allow(unused_mut)]
    let mut scope_4865 = writer.prefix("CapacityReservationSpecification");
    if let Some(var_4866) = &input.capacity_reservation_specification {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_specification(
            scope_4865, var_4866,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4867 = writer.prefix("DryRun");
    if let Some(var_4868) = &input.dry_run {
        scope_4867.boolean(*var_4868);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_credit_specification(
    input: &crate::input::ModifyInstanceCreditSpecificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyInstanceCreditSpecification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4869 = writer.prefix("DryRun");
    if let Some(var_4870) = &input.dry_run {
        scope_4869.boolean(*var_4870);
    }
    #[allow(unused_mut)]
    let mut scope_4871 = writer.prefix("ClientToken");
    if let Some(var_4872) = &input.client_token {
        scope_4871.string(var_4872);
    }
    #[allow(unused_mut)]
    let mut scope_4873 = writer.prefix("InstanceCreditSpecification");
    if let Some(var_4874) = &input.instance_credit_specifications {
        let mut list_4876 = scope_4873.start_list(true, Some("item"));
        for item_4875 in var_4874 {
            #[allow(unused_mut)]
            let mut entry_4877 = list_4876.entry();
            crate::query_ser::serialize_structure_crate_model_instance_credit_specification_request(entry_4877, item_4875)?;
        }
        list_4876.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_event_start_time(
    input: &crate::input::ModifyInstanceEventStartTimeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceEventStartTime", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4878 = writer.prefix("DryRun");
    if let Some(var_4879) = &input.dry_run {
        scope_4878.boolean(*var_4879);
    }
    #[allow(unused_mut)]
    let mut scope_4880 = writer.prefix("InstanceId");
    if let Some(var_4881) = &input.instance_id {
        scope_4880.string(var_4881);
    }
    #[allow(unused_mut)]
    let mut scope_4882 = writer.prefix("InstanceEventId");
    if let Some(var_4883) = &input.instance_event_id {
        scope_4882.string(var_4883);
    }
    #[allow(unused_mut)]
    let mut scope_4884 = writer.prefix("NotBefore");
    if let Some(var_4885) = &input.not_before {
        scope_4884.date_time(var_4885, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_event_window(
    input: &crate::input::ModifyInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4886 = writer.prefix("DryRun");
    if let Some(var_4887) = &input.dry_run {
        scope_4886.boolean(*var_4887);
    }
    #[allow(unused_mut)]
    let mut scope_4888 = writer.prefix("Name");
    if let Some(var_4889) = &input.name {
        scope_4888.string(var_4889);
    }
    #[allow(unused_mut)]
    let mut scope_4890 = writer.prefix("InstanceEventWindowId");
    if let Some(var_4891) = &input.instance_event_window_id {
        scope_4890.string(var_4891);
    }
    #[allow(unused_mut)]
    let mut scope_4892 = writer.prefix("TimeRange");
    if let Some(var_4893) = &input.time_ranges {
        let mut list_4895 = scope_4892.start_list(true, None);
        for item_4894 in var_4893 {
            #[allow(unused_mut)]
            let mut entry_4896 = list_4895.entry();
            crate::query_ser::serialize_structure_crate_model_instance_event_window_time_range_request(entry_4896, item_4894)?;
        }
        list_4895.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4897 = writer.prefix("CronExpression");
    if let Some(var_4898) = &input.cron_expression {
        scope_4897.string(var_4898);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_maintenance_options(
    input: &crate::input::ModifyInstanceMaintenanceOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyInstanceMaintenanceOptions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4899 = writer.prefix("InstanceId");
    if let Some(var_4900) = &input.instance_id {
        scope_4899.string(var_4900);
    }
    #[allow(unused_mut)]
    let mut scope_4901 = writer.prefix("AutoRecovery");
    if let Some(var_4902) = &input.auto_recovery {
        scope_4901.string(var_4902.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4903 = writer.prefix("DryRun");
    if let Some(var_4904) = &input.dry_run {
        scope_4903.boolean(*var_4904);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_metadata_options(
    input: &crate::input::ModifyInstanceMetadataOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceMetadataOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4905 = writer.prefix("InstanceId");
    if let Some(var_4906) = &input.instance_id {
        scope_4905.string(var_4906);
    }
    #[allow(unused_mut)]
    let mut scope_4907 = writer.prefix("HttpTokens");
    if let Some(var_4908) = &input.http_tokens {
        scope_4907.string(var_4908.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4909 = writer.prefix("HttpPutResponseHopLimit");
    if let Some(var_4910) = &input.http_put_response_hop_limit {
        scope_4909.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4910).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4911 = writer.prefix("HttpEndpoint");
    if let Some(var_4912) = &input.http_endpoint {
        scope_4911.string(var_4912.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4913 = writer.prefix("DryRun");
    if let Some(var_4914) = &input.dry_run {
        scope_4913.boolean(*var_4914);
    }
    #[allow(unused_mut)]
    let mut scope_4915 = writer.prefix("HttpProtocolIpv6");
    if let Some(var_4916) = &input.http_protocol_ipv6 {
        scope_4915.string(var_4916.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4917 = writer.prefix("InstanceMetadataTags");
    if let Some(var_4918) = &input.instance_metadata_tags {
        scope_4917.string(var_4918.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_placement(
    input: &crate::input::ModifyInstancePlacementInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstancePlacement", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4919 = writer.prefix("Affinity");
    if let Some(var_4920) = &input.affinity {
        scope_4919.string(var_4920.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4921 = writer.prefix("GroupName");
    if let Some(var_4922) = &input.group_name {
        scope_4921.string(var_4922);
    }
    #[allow(unused_mut)]
    let mut scope_4923 = writer.prefix("HostId");
    if let Some(var_4924) = &input.host_id {
        scope_4923.string(var_4924);
    }
    #[allow(unused_mut)]
    let mut scope_4925 = writer.prefix("InstanceId");
    if let Some(var_4926) = &input.instance_id {
        scope_4925.string(var_4926);
    }
    #[allow(unused_mut)]
    let mut scope_4927 = writer.prefix("Tenancy");
    if let Some(var_4928) = &input.tenancy {
        scope_4927.string(var_4928.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4929 = writer.prefix("PartitionNumber");
    if let Some(var_4930) = &input.partition_number {
        scope_4929.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4930).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4931 = writer.prefix("HostResourceGroupArn");
    if let Some(var_4932) = &input.host_resource_group_arn {
        scope_4931.string(var_4932);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ipam(
    input: &crate::input::ModifyIpamInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIpam", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4933 = writer.prefix("DryRun");
    if let Some(var_4934) = &input.dry_run {
        scope_4933.boolean(*var_4934);
    }
    #[allow(unused_mut)]
    let mut scope_4935 = writer.prefix("IpamId");
    if let Some(var_4936) = &input.ipam_id {
        scope_4935.string(var_4936);
    }
    #[allow(unused_mut)]
    let mut scope_4937 = writer.prefix("Description");
    if let Some(var_4938) = &input.description {
        scope_4937.string(var_4938);
    }
    #[allow(unused_mut)]
    let mut scope_4939 = writer.prefix("AddOperatingRegion");
    if let Some(var_4940) = &input.add_operating_regions {
        let mut list_4942 = scope_4939.start_list(true, None);
        for item_4941 in var_4940 {
            #[allow(unused_mut)]
            let mut entry_4943 = list_4942.entry();
            crate::query_ser::serialize_structure_crate_model_add_ipam_operating_region(
                entry_4943, item_4941,
            )?;
        }
        list_4942.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4944 = writer.prefix("RemoveOperatingRegion");
    if let Some(var_4945) = &input.remove_operating_regions {
        let mut list_4947 = scope_4944.start_list(true, None);
        for item_4946 in var_4945 {
            #[allow(unused_mut)]
            let mut entry_4948 = list_4947.entry();
            crate::query_ser::serialize_structure_crate_model_remove_ipam_operating_region(
                entry_4948, item_4946,
            )?;
        }
        list_4947.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ipam_pool(
    input: &crate::input::ModifyIpamPoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIpamPool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4949 = writer.prefix("DryRun");
    if let Some(var_4950) = &input.dry_run {
        scope_4949.boolean(*var_4950);
    }
    #[allow(unused_mut)]
    let mut scope_4951 = writer.prefix("IpamPoolId");
    if let Some(var_4952) = &input.ipam_pool_id {
        scope_4951.string(var_4952);
    }
    #[allow(unused_mut)]
    let mut scope_4953 = writer.prefix("Description");
    if let Some(var_4954) = &input.description {
        scope_4953.string(var_4954);
    }
    #[allow(unused_mut)]
    let mut scope_4955 = writer.prefix("AutoImport");
    if let Some(var_4956) = &input.auto_import {
        scope_4955.boolean(*var_4956);
    }
    #[allow(unused_mut)]
    let mut scope_4957 = writer.prefix("AllocationMinNetmaskLength");
    if let Some(var_4958) = &input.allocation_min_netmask_length {
        scope_4957.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4958).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4959 = writer.prefix("AllocationMaxNetmaskLength");
    if let Some(var_4960) = &input.allocation_max_netmask_length {
        scope_4959.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4960).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4961 = writer.prefix("AllocationDefaultNetmaskLength");
    if let Some(var_4962) = &input.allocation_default_netmask_length {
        scope_4961.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4962).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4963 = writer.prefix("ClearAllocationDefaultNetmaskLength");
    if let Some(var_4964) = &input.clear_allocation_default_netmask_length {
        scope_4963.boolean(*var_4964);
    }
    #[allow(unused_mut)]
    let mut scope_4965 = writer.prefix("AddAllocationResourceTag");
    if let Some(var_4966) = &input.add_allocation_resource_tags {
        let mut list_4968 = scope_4965.start_list(true, Some("item"));
        for item_4967 in var_4966 {
            #[allow(unused_mut)]
            let mut entry_4969 = list_4968.entry();
            crate::query_ser::serialize_structure_crate_model_request_ipam_resource_tag(
                entry_4969, item_4967,
            )?;
        }
        list_4968.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4970 = writer.prefix("RemoveAllocationResourceTag");
    if let Some(var_4971) = &input.remove_allocation_resource_tags {
        let mut list_4973 = scope_4970.start_list(true, Some("item"));
        for item_4972 in var_4971 {
            #[allow(unused_mut)]
            let mut entry_4974 = list_4973.entry();
            crate::query_ser::serialize_structure_crate_model_request_ipam_resource_tag(
                entry_4974, item_4972,
            )?;
        }
        list_4973.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ipam_resource_cidr(
    input: &crate::input::ModifyIpamResourceCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyIpamResourceCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4975 = writer.prefix("DryRun");
    if let Some(var_4976) = &input.dry_run {
        scope_4975.boolean(*var_4976);
    }
    #[allow(unused_mut)]
    let mut scope_4977 = writer.prefix("ResourceId");
    if let Some(var_4978) = &input.resource_id {
        scope_4977.string(var_4978);
    }
    #[allow(unused_mut)]
    let mut scope_4979 = writer.prefix("ResourceCidr");
    if let Some(var_4980) = &input.resource_cidr {
        scope_4979.string(var_4980);
    }
    #[allow(unused_mut)]
    let mut scope_4981 = writer.prefix("ResourceRegion");
    if let Some(var_4982) = &input.resource_region {
        scope_4981.string(var_4982);
    }
    #[allow(unused_mut)]
    let mut scope_4983 = writer.prefix("CurrentIpamScopeId");
    if let Some(var_4984) = &input.current_ipam_scope_id {
        scope_4983.string(var_4984);
    }
    #[allow(unused_mut)]
    let mut scope_4985 = writer.prefix("DestinationIpamScopeId");
    if let Some(var_4986) = &input.destination_ipam_scope_id {
        scope_4985.string(var_4986);
    }
    #[allow(unused_mut)]
    let mut scope_4987 = writer.prefix("Monitored");
    if let Some(var_4988) = &input.monitored {
        scope_4987.boolean(*var_4988);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ipam_scope(
    input: &crate::input::ModifyIpamScopeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIpamScope", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4989 = writer.prefix("DryRun");
    if let Some(var_4990) = &input.dry_run {
        scope_4989.boolean(*var_4990);
    }
    #[allow(unused_mut)]
    let mut scope_4991 = writer.prefix("IpamScopeId");
    if let Some(var_4992) = &input.ipam_scope_id {
        scope_4991.string(var_4992);
    }
    #[allow(unused_mut)]
    let mut scope_4993 = writer.prefix("Description");
    if let Some(var_4994) = &input.description {
        scope_4993.string(var_4994);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_launch_template(
    input: &crate::input::ModifyLaunchTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4995 = writer.prefix("DryRun");
    if let Some(var_4996) = &input.dry_run {
        scope_4995.boolean(*var_4996);
    }
    #[allow(unused_mut)]
    let mut scope_4997 = writer.prefix("ClientToken");
    if let Some(var_4998) = &input.client_token {
        scope_4997.string(var_4998);
    }
    #[allow(unused_mut)]
    let mut scope_4999 = writer.prefix("LaunchTemplateId");
    if let Some(var_5000) = &input.launch_template_id {
        scope_4999.string(var_5000);
    }
    #[allow(unused_mut)]
    let mut scope_5001 = writer.prefix("LaunchTemplateName");
    if let Some(var_5002) = &input.launch_template_name {
        scope_5001.string(var_5002);
    }
    #[allow(unused_mut)]
    let mut scope_5003 = writer.prefix("SetDefaultVersion");
    if let Some(var_5004) = &input.default_version {
        scope_5003.string(var_5004);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_managed_prefix_list(
    input: &crate::input::ModifyManagedPrefixListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5005 = writer.prefix("DryRun");
    if let Some(var_5006) = &input.dry_run {
        scope_5005.boolean(*var_5006);
    }
    #[allow(unused_mut)]
    let mut scope_5007 = writer.prefix("PrefixListId");
    if let Some(var_5008) = &input.prefix_list_id {
        scope_5007.string(var_5008);
    }
    #[allow(unused_mut)]
    let mut scope_5009 = writer.prefix("CurrentVersion");
    if let Some(var_5010) = &input.current_version {
        scope_5009.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5010).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5011 = writer.prefix("PrefixListName");
    if let Some(var_5012) = &input.prefix_list_name {
        scope_5011.string(var_5012);
    }
    #[allow(unused_mut)]
    let mut scope_5013 = writer.prefix("AddEntry");
    if let Some(var_5014) = &input.add_entries {
        let mut list_5016 = scope_5013.start_list(true, None);
        for item_5015 in var_5014 {
            #[allow(unused_mut)]
            let mut entry_5017 = list_5016.entry();
            crate::query_ser::serialize_structure_crate_model_add_prefix_list_entry(
                entry_5017, item_5015,
            )?;
        }
        list_5016.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5018 = writer.prefix("RemoveEntry");
    if let Some(var_5019) = &input.remove_entries {
        let mut list_5021 = scope_5018.start_list(true, None);
        for item_5020 in var_5019 {
            #[allow(unused_mut)]
            let mut entry_5022 = list_5021.entry();
            crate::query_ser::serialize_structure_crate_model_remove_prefix_list_entry(
                entry_5022, item_5020,
            )?;
        }
        list_5021.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5023 = writer.prefix("MaxEntries");
    if let Some(var_5024) = &input.max_entries {
        scope_5023.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5024).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_network_interface_attribute(
    input: &crate::input::ModifyNetworkInterfaceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyNetworkInterfaceAttribute",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5025 = writer.prefix("Attachment");
    if let Some(var_5026) = &input.attachment {
        crate::query_ser::serialize_structure_crate_model_network_interface_attachment_changes(
            scope_5025, var_5026,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5027 = writer.prefix("Description");
    if let Some(var_5028) = &input.description {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_5027, var_5028)?;
    }
    #[allow(unused_mut)]
    let mut scope_5029 = writer.prefix("DryRun");
    if let Some(var_5030) = &input.dry_run {
        scope_5029.boolean(*var_5030);
    }
    #[allow(unused_mut)]
    let mut scope_5031 = writer.prefix("SecurityGroupId");
    if let Some(var_5032) = &input.groups {
        let mut list_5034 = scope_5031.start_list(true, Some("SecurityGroupId"));
        for item_5033 in var_5032 {
            #[allow(unused_mut)]
            let mut entry_5035 = list_5034.entry();
            entry_5035.string(item_5033);
        }
        list_5034.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5036 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5037) = &input.network_interface_id {
        scope_5036.string(var_5037);
    }
    #[allow(unused_mut)]
    let mut scope_5038 = writer.prefix("SourceDestCheck");
    if let Some(var_5039) = &input.source_dest_check {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5038, var_5039,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_private_dns_name_options(
    input: &crate::input::ModifyPrivateDnsNameOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyPrivateDnsNameOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5040 = writer.prefix("DryRun");
    if let Some(var_5041) = &input.dry_run {
        scope_5040.boolean(*var_5041);
    }
    #[allow(unused_mut)]
    let mut scope_5042 = writer.prefix("InstanceId");
    if let Some(var_5043) = &input.instance_id {
        scope_5042.string(var_5043);
    }
    #[allow(unused_mut)]
    let mut scope_5044 = writer.prefix("PrivateDnsHostnameType");
    if let Some(var_5045) = &input.private_dns_hostname_type {
        scope_5044.string(var_5045.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5046 = writer.prefix("EnableResourceNameDnsARecord");
    if let Some(var_5047) = &input.enable_resource_name_dns_a_record {
        scope_5046.boolean(*var_5047);
    }
    #[allow(unused_mut)]
    let mut scope_5048 = writer.prefix("EnableResourceNameDnsAAAARecord");
    if let Some(var_5049) = &input.enable_resource_name_dns_aaaa_record {
        scope_5048.boolean(*var_5049);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_reserved_instances(
    input: &crate::input::ModifyReservedInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5050 = writer.prefix("ReservedInstancesId");
    if let Some(var_5051) = &input.reserved_instances_ids {
        let mut list_5053 = scope_5050.start_list(true, Some("ReservedInstancesId"));
        for item_5052 in var_5051 {
            #[allow(unused_mut)]
            let mut entry_5054 = list_5053.entry();
            entry_5054.string(item_5052);
        }
        list_5053.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5055 = writer.prefix("ClientToken");
    if let Some(var_5056) = &input.client_token {
        scope_5055.string(var_5056);
    }
    #[allow(unused_mut)]
    let mut scope_5057 = writer.prefix("ReservedInstancesConfigurationSetItemType");
    if let Some(var_5058) = &input.target_configurations {
        let mut list_5060 = scope_5057.start_list(true, Some("item"));
        for item_5059 in var_5058 {
            #[allow(unused_mut)]
            let mut entry_5061 = list_5060.entry();
            crate::query_ser::serialize_structure_crate_model_reserved_instances_configuration(
                entry_5061, item_5059,
            )?;
        }
        list_5060.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_security_group_rules(
    input: &crate::input::ModifySecurityGroupRulesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySecurityGroupRules", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5062 = writer.prefix("GroupId");
    if let Some(var_5063) = &input.group_id {
        scope_5062.string(var_5063);
    }
    #[allow(unused_mut)]
    let mut scope_5064 = writer.prefix("SecurityGroupRule");
    if let Some(var_5065) = &input.security_group_rules {
        let mut list_5067 = scope_5064.start_list(true, Some("item"));
        for item_5066 in var_5065 {
            #[allow(unused_mut)]
            let mut entry_5068 = list_5067.entry();
            crate::query_ser::serialize_structure_crate_model_security_group_rule_update(
                entry_5068, item_5066,
            )?;
        }
        list_5067.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5069 = writer.prefix("DryRun");
    if let Some(var_5070) = &input.dry_run {
        scope_5069.boolean(*var_5070);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_snapshot_attribute(
    input: &crate::input::ModifySnapshotAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5071 = writer.prefix("Attribute");
    if let Some(var_5072) = &input.attribute {
        scope_5071.string(var_5072.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5073 = writer.prefix("CreateVolumePermission");
    if let Some(var_5074) = &input.create_volume_permission {
        crate::query_ser::serialize_structure_crate_model_create_volume_permission_modifications(
            scope_5073, var_5074,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5075 = writer.prefix("UserGroup");
    if let Some(var_5076) = &input.group_names {
        let mut list_5078 = scope_5075.start_list(true, Some("GroupName"));
        for item_5077 in var_5076 {
            #[allow(unused_mut)]
            let mut entry_5079 = list_5078.entry();
            entry_5079.string(item_5077);
        }
        list_5078.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5080 = writer.prefix("OperationType");
    if let Some(var_5081) = &input.operation_type {
        scope_5080.string(var_5081.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5082 = writer.prefix("SnapshotId");
    if let Some(var_5083) = &input.snapshot_id {
        scope_5082.string(var_5083);
    }
    #[allow(unused_mut)]
    let mut scope_5084 = writer.prefix("UserId");
    if let Some(var_5085) = &input.user_ids {
        let mut list_5087 = scope_5084.start_list(true, Some("UserId"));
        for item_5086 in var_5085 {
            #[allow(unused_mut)]
            let mut entry_5088 = list_5087.entry();
            entry_5088.string(item_5086);
        }
        list_5087.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5089 = writer.prefix("DryRun");
    if let Some(var_5090) = &input.dry_run {
        scope_5089.boolean(*var_5090);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_snapshot_tier(
    input: &crate::input::ModifySnapshotTierInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySnapshotTier", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5091 = writer.prefix("SnapshotId");
    if let Some(var_5092) = &input.snapshot_id {
        scope_5091.string(var_5092);
    }
    #[allow(unused_mut)]
    let mut scope_5093 = writer.prefix("StorageTier");
    if let Some(var_5094) = &input.storage_tier {
        scope_5093.string(var_5094.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5095 = writer.prefix("DryRun");
    if let Some(var_5096) = &input.dry_run {
        scope_5095.boolean(*var_5096);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_spot_fleet_request(
    input: &crate::input::ModifySpotFleetRequestInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySpotFleetRequest", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5097 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_5098) = &input.excess_capacity_termination_policy {
        scope_5097.string(var_5098.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5099 = writer.prefix("LaunchTemplateConfig");
    if let Some(var_5100) = &input.launch_template_configs {
        let mut list_5102 = scope_5099.start_list(true, Some("item"));
        for item_5101 in var_5100 {
            #[allow(unused_mut)]
            let mut entry_5103 = list_5102.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_config(
                entry_5103, item_5101,
            )?;
        }
        list_5102.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5104 = writer.prefix("SpotFleetRequestId");
    if let Some(var_5105) = &input.spot_fleet_request_id {
        scope_5104.string(var_5105);
    }
    #[allow(unused_mut)]
    let mut scope_5106 = writer.prefix("TargetCapacity");
    if let Some(var_5107) = &input.target_capacity {
        scope_5106.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5107).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5108 = writer.prefix("OnDemandTargetCapacity");
    if let Some(var_5109) = &input.on_demand_target_capacity {
        scope_5108.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5109).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5110 = writer.prefix("Context");
    if let Some(var_5111) = &input.context {
        scope_5110.string(var_5111);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_subnet_attribute(
    input: &crate::input::ModifySubnetAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySubnetAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5112 = writer.prefix("AssignIpv6AddressOnCreation");
    if let Some(var_5113) = &input.assign_ipv6_address_on_creation {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5112, var_5113,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5114 = writer.prefix("MapPublicIpOnLaunch");
    if let Some(var_5115) = &input.map_public_ip_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5114, var_5115,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5116 = writer.prefix("SubnetId");
    if let Some(var_5117) = &input.subnet_id {
        scope_5116.string(var_5117);
    }
    #[allow(unused_mut)]
    let mut scope_5118 = writer.prefix("MapCustomerOwnedIpOnLaunch");
    if let Some(var_5119) = &input.map_customer_owned_ip_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5118, var_5119,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5120 = writer.prefix("CustomerOwnedIpv4Pool");
    if let Some(var_5121) = &input.customer_owned_ipv4_pool {
        scope_5120.string(var_5121);
    }
    #[allow(unused_mut)]
    let mut scope_5122 = writer.prefix("EnableDns64");
    if let Some(var_5123) = &input.enable_dns64 {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5122, var_5123,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5124 = writer.prefix("PrivateDnsHostnameTypeOnLaunch");
    if let Some(var_5125) = &input.private_dns_hostname_type_on_launch {
        scope_5124.string(var_5125.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5126 = writer.prefix("EnableResourceNameDnsARecordOnLaunch");
    if let Some(var_5127) = &input.enable_resource_name_dns_a_record_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5126, var_5127,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5128 = writer.prefix("EnableResourceNameDnsAAAARecordOnLaunch");
    if let Some(var_5129) = &input.enable_resource_name_dns_aaaa_record_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5128, var_5129,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5130 = writer.prefix("EnableLniAtDeviceIndex");
    if let Some(var_5131) = &input.enable_lni_at_device_index {
        scope_5130.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5131).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5132 = writer.prefix("DisableLniAtDeviceIndex");
    if let Some(var_5133) = &input.disable_lni_at_device_index {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5132, var_5133,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_traffic_mirror_filter_network_services(
    input: &crate::input::ModifyTrafficMirrorFilterNetworkServicesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyTrafficMirrorFilterNetworkServices",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5134 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_5135) = &input.traffic_mirror_filter_id {
        scope_5134.string(var_5135);
    }
    #[allow(unused_mut)]
    let mut scope_5136 = writer.prefix("AddNetworkService");
    if let Some(var_5137) = &input.add_network_services {
        let mut list_5139 = scope_5136.start_list(true, Some("item"));
        for item_5138 in var_5137 {
            #[allow(unused_mut)]
            let mut entry_5140 = list_5139.entry();
            entry_5140.string(item_5138.as_str());
        }
        list_5139.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5141 = writer.prefix("RemoveNetworkService");
    if let Some(var_5142) = &input.remove_network_services {
        let mut list_5144 = scope_5141.start_list(true, Some("item"));
        for item_5143 in var_5142 {
            #[allow(unused_mut)]
            let mut entry_5145 = list_5144.entry();
            entry_5145.string(item_5143.as_str());
        }
        list_5144.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5146 = writer.prefix("DryRun");
    if let Some(var_5147) = &input.dry_run {
        scope_5146.boolean(*var_5147);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_traffic_mirror_filter_rule(
    input: &crate::input::ModifyTrafficMirrorFilterRuleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5148 = writer.prefix("TrafficMirrorFilterRuleId");
    if let Some(var_5149) = &input.traffic_mirror_filter_rule_id {
        scope_5148.string(var_5149);
    }
    #[allow(unused_mut)]
    let mut scope_5150 = writer.prefix("TrafficDirection");
    if let Some(var_5151) = &input.traffic_direction {
        scope_5150.string(var_5151.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5152 = writer.prefix("RuleNumber");
    if let Some(var_5153) = &input.rule_number {
        scope_5152.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5153).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5154 = writer.prefix("RuleAction");
    if let Some(var_5155) = &input.rule_action {
        scope_5154.string(var_5155.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5156 = writer.prefix("DestinationPortRange");
    if let Some(var_5157) = &input.destination_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_5156, var_5157,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5158 = writer.prefix("SourcePortRange");
    if let Some(var_5159) = &input.source_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_5158, var_5159,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5160 = writer.prefix("Protocol");
    if let Some(var_5161) = &input.protocol {
        scope_5160.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5161).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5162 = writer.prefix("DestinationCidrBlock");
    if let Some(var_5163) = &input.destination_cidr_block {
        scope_5162.string(var_5163);
    }
    #[allow(unused_mut)]
    let mut scope_5164 = writer.prefix("SourceCidrBlock");
    if let Some(var_5165) = &input.source_cidr_block {
        scope_5164.string(var_5165);
    }
    #[allow(unused_mut)]
    let mut scope_5166 = writer.prefix("Description");
    if let Some(var_5167) = &input.description {
        scope_5166.string(var_5167);
    }
    #[allow(unused_mut)]
    let mut scope_5168 = writer.prefix("RemoveField");
    if let Some(var_5169) = &input.remove_fields {
        let mut list_5171 = scope_5168.start_list(true, None);
        for item_5170 in var_5169 {
            #[allow(unused_mut)]
            let mut entry_5172 = list_5171.entry();
            entry_5172.string(item_5170.as_str());
        }
        list_5171.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5173 = writer.prefix("DryRun");
    if let Some(var_5174) = &input.dry_run {
        scope_5173.boolean(*var_5174);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_traffic_mirror_session(
    input: &crate::input::ModifyTrafficMirrorSessionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5175 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_5176) = &input.traffic_mirror_session_id {
        scope_5175.string(var_5176);
    }
    #[allow(unused_mut)]
    let mut scope_5177 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_5178) = &input.traffic_mirror_target_id {
        scope_5177.string(var_5178);
    }
    #[allow(unused_mut)]
    let mut scope_5179 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_5180) = &input.traffic_mirror_filter_id {
        scope_5179.string(var_5180);
    }
    #[allow(unused_mut)]
    let mut scope_5181 = writer.prefix("PacketLength");
    if let Some(var_5182) = &input.packet_length {
        scope_5181.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5182).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5183 = writer.prefix("SessionNumber");
    if let Some(var_5184) = &input.session_number {
        scope_5183.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5184).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5185 = writer.prefix("VirtualNetworkId");
    if let Some(var_5186) = &input.virtual_network_id {
        scope_5185.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5186).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5187 = writer.prefix("Description");
    if let Some(var_5188) = &input.description {
        scope_5187.string(var_5188);
    }
    #[allow(unused_mut)]
    let mut scope_5189 = writer.prefix("RemoveField");
    if let Some(var_5190) = &input.remove_fields {
        let mut list_5192 = scope_5189.start_list(true, None);
        for item_5191 in var_5190 {
            #[allow(unused_mut)]
            let mut entry_5193 = list_5192.entry();
            entry_5193.string(item_5191.as_str());
        }
        list_5192.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5194 = writer.prefix("DryRun");
    if let Some(var_5195) = &input.dry_run {
        scope_5194.boolean(*var_5195);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_transit_gateway(
    input: &crate::input::ModifyTransitGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5196 = writer.prefix("TransitGatewayId");
    if let Some(var_5197) = &input.transit_gateway_id {
        scope_5196.string(var_5197);
    }
    #[allow(unused_mut)]
    let mut scope_5198 = writer.prefix("Description");
    if let Some(var_5199) = &input.description {
        scope_5198.string(var_5199);
    }
    #[allow(unused_mut)]
    let mut scope_5200 = writer.prefix("Options");
    if let Some(var_5201) = &input.options {
        crate::query_ser::serialize_structure_crate_model_modify_transit_gateway_options(
            scope_5200, var_5201,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5202 = writer.prefix("DryRun");
    if let Some(var_5203) = &input.dry_run {
        scope_5202.boolean(*var_5203);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_transit_gateway_prefix_list_reference(
    input: &crate::input::ModifyTransitGatewayPrefixListReferenceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyTransitGatewayPrefixListReference",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5204 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_5205) = &input.transit_gateway_route_table_id {
        scope_5204.string(var_5205);
    }
    #[allow(unused_mut)]
    let mut scope_5206 = writer.prefix("PrefixListId");
    if let Some(var_5207) = &input.prefix_list_id {
        scope_5206.string(var_5207);
    }
    #[allow(unused_mut)]
    let mut scope_5208 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5209) = &input.transit_gateway_attachment_id {
        scope_5208.string(var_5209);
    }
    #[allow(unused_mut)]
    let mut scope_5210 = writer.prefix("Blackhole");
    if let Some(var_5211) = &input.blackhole {
        scope_5210.boolean(*var_5211);
    }
    #[allow(unused_mut)]
    let mut scope_5212 = writer.prefix("DryRun");
    if let Some(var_5213) = &input.dry_run {
        scope_5212.boolean(*var_5213);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_transit_gateway_vpc_attachment(
    input: &crate::input::ModifyTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5214 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5215) = &input.transit_gateway_attachment_id {
        scope_5214.string(var_5215);
    }
    #[allow(unused_mut)]
    let mut scope_5216 = writer.prefix("AddSubnetIds");
    if let Some(var_5217) = &input.add_subnet_ids {
        let mut list_5219 = scope_5216.start_list(true, Some("item"));
        for item_5218 in var_5217 {
            #[allow(unused_mut)]
            let mut entry_5220 = list_5219.entry();
            entry_5220.string(item_5218);
        }
        list_5219.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5221 = writer.prefix("RemoveSubnetIds");
    if let Some(var_5222) = &input.remove_subnet_ids {
        let mut list_5224 = scope_5221.start_list(true, Some("item"));
        for item_5223 in var_5222 {
            #[allow(unused_mut)]
            let mut entry_5225 = list_5224.entry();
            entry_5225.string(item_5223);
        }
        list_5224.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5226 = writer.prefix("Options");
    if let Some(var_5227) = &input.options {
        crate::query_ser::serialize_structure_crate_model_modify_transit_gateway_vpc_attachment_request_options(scope_5226, var_5227)?;
    }
    #[allow(unused_mut)]
    let mut scope_5228 = writer.prefix("DryRun");
    if let Some(var_5229) = &input.dry_run {
        scope_5228.boolean(*var_5229);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_volume(
    input: &crate::input::ModifyVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5230 = writer.prefix("DryRun");
    if let Some(var_5231) = &input.dry_run {
        scope_5230.boolean(*var_5231);
    }
    #[allow(unused_mut)]
    let mut scope_5232 = writer.prefix("VolumeId");
    if let Some(var_5233) = &input.volume_id {
        scope_5232.string(var_5233);
    }
    #[allow(unused_mut)]
    let mut scope_5234 = writer.prefix("Size");
    if let Some(var_5235) = &input.size {
        scope_5234.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5235).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5236 = writer.prefix("VolumeType");
    if let Some(var_5237) = &input.volume_type {
        scope_5236.string(var_5237.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5238 = writer.prefix("Iops");
    if let Some(var_5239) = &input.iops {
        scope_5238.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5239).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5240 = writer.prefix("Throughput");
    if let Some(var_5241) = &input.throughput {
        scope_5240.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5241).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5242 = writer.prefix("MultiAttachEnabled");
    if let Some(var_5243) = &input.multi_attach_enabled {
        scope_5242.boolean(*var_5243);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_volume_attribute(
    input: &crate::input::ModifyVolumeAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVolumeAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5244 = writer.prefix("AutoEnableIO");
    if let Some(var_5245) = &input.auto_enable_io {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5244, var_5245,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5246 = writer.prefix("VolumeId");
    if let Some(var_5247) = &input.volume_id {
        scope_5246.string(var_5247);
    }
    #[allow(unused_mut)]
    let mut scope_5248 = writer.prefix("DryRun");
    if let Some(var_5249) = &input.dry_run {
        scope_5248.boolean(*var_5249);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_attribute(
    input: &crate::input::ModifyVpcAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5250 = writer.prefix("EnableDnsHostnames");
    if let Some(var_5251) = &input.enable_dns_hostnames {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5250, var_5251,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5252 = writer.prefix("EnableDnsSupport");
    if let Some(var_5253) = &input.enable_dns_support {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5252, var_5253,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5254 = writer.prefix("VpcId");
    if let Some(var_5255) = &input.vpc_id {
        scope_5254.string(var_5255);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint(
    input: &crate::input::ModifyVpcEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5256 = writer.prefix("DryRun");
    if let Some(var_5257) = &input.dry_run {
        scope_5256.boolean(*var_5257);
    }
    #[allow(unused_mut)]
    let mut scope_5258 = writer.prefix("VpcEndpointId");
    if let Some(var_5259) = &input.vpc_endpoint_id {
        scope_5258.string(var_5259);
    }
    #[allow(unused_mut)]
    let mut scope_5260 = writer.prefix("ResetPolicy");
    if let Some(var_5261) = &input.reset_policy {
        scope_5260.boolean(*var_5261);
    }
    #[allow(unused_mut)]
    let mut scope_5262 = writer.prefix("PolicyDocument");
    if let Some(var_5263) = &input.policy_document {
        scope_5262.string(var_5263);
    }
    #[allow(unused_mut)]
    let mut scope_5264 = writer.prefix("AddRouteTableId");
    if let Some(var_5265) = &input.add_route_table_ids {
        let mut list_5267 = scope_5264.start_list(true, Some("item"));
        for item_5266 in var_5265 {
            #[allow(unused_mut)]
            let mut entry_5268 = list_5267.entry();
            entry_5268.string(item_5266);
        }
        list_5267.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5269 = writer.prefix("RemoveRouteTableId");
    if let Some(var_5270) = &input.remove_route_table_ids {
        let mut list_5272 = scope_5269.start_list(true, Some("item"));
        for item_5271 in var_5270 {
            #[allow(unused_mut)]
            let mut entry_5273 = list_5272.entry();
            entry_5273.string(item_5271);
        }
        list_5272.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5274 = writer.prefix("AddSubnetId");
    if let Some(var_5275) = &input.add_subnet_ids {
        let mut list_5277 = scope_5274.start_list(true, Some("item"));
        for item_5276 in var_5275 {
            #[allow(unused_mut)]
            let mut entry_5278 = list_5277.entry();
            entry_5278.string(item_5276);
        }
        list_5277.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5279 = writer.prefix("RemoveSubnetId");
    if let Some(var_5280) = &input.remove_subnet_ids {
        let mut list_5282 = scope_5279.start_list(true, Some("item"));
        for item_5281 in var_5280 {
            #[allow(unused_mut)]
            let mut entry_5283 = list_5282.entry();
            entry_5283.string(item_5281);
        }
        list_5282.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5284 = writer.prefix("AddSecurityGroupId");
    if let Some(var_5285) = &input.add_security_group_ids {
        let mut list_5287 = scope_5284.start_list(true, Some("item"));
        for item_5286 in var_5285 {
            #[allow(unused_mut)]
            let mut entry_5288 = list_5287.entry();
            entry_5288.string(item_5286);
        }
        list_5287.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5289 = writer.prefix("RemoveSecurityGroupId");
    if let Some(var_5290) = &input.remove_security_group_ids {
        let mut list_5292 = scope_5289.start_list(true, Some("item"));
        for item_5291 in var_5290 {
            #[allow(unused_mut)]
            let mut entry_5293 = list_5292.entry();
            entry_5293.string(item_5291);
        }
        list_5292.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5294 = writer.prefix("IpAddressType");
    if let Some(var_5295) = &input.ip_address_type {
        scope_5294.string(var_5295.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5296 = writer.prefix("DnsOptions");
    if let Some(var_5297) = &input.dns_options {
        crate::query_ser::serialize_structure_crate_model_dns_options_specification(
            scope_5296, var_5297,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5298 = writer.prefix("PrivateDnsEnabled");
    if let Some(var_5299) = &input.private_dns_enabled {
        scope_5298.boolean(*var_5299);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_connection_notification(
    input: &crate::input::ModifyVpcEndpointConnectionNotificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointConnectionNotification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5300 = writer.prefix("DryRun");
    if let Some(var_5301) = &input.dry_run {
        scope_5300.boolean(*var_5301);
    }
    #[allow(unused_mut)]
    let mut scope_5302 = writer.prefix("ConnectionNotificationId");
    if let Some(var_5303) = &input.connection_notification_id {
        scope_5302.string(var_5303);
    }
    #[allow(unused_mut)]
    let mut scope_5304 = writer.prefix("ConnectionNotificationArn");
    if let Some(var_5305) = &input.connection_notification_arn {
        scope_5304.string(var_5305);
    }
    #[allow(unused_mut)]
    let mut scope_5306 = writer.prefix("ConnectionEvents");
    if let Some(var_5307) = &input.connection_events {
        let mut list_5309 = scope_5306.start_list(true, Some("item"));
        for item_5308 in var_5307 {
            #[allow(unused_mut)]
            let mut entry_5310 = list_5309.entry();
            entry_5310.string(item_5308);
        }
        list_5309.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_service_configuration(
    input: &crate::input::ModifyVpcEndpointServiceConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointServiceConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5311 = writer.prefix("DryRun");
    if let Some(var_5312) = &input.dry_run {
        scope_5311.boolean(*var_5312);
    }
    #[allow(unused_mut)]
    let mut scope_5313 = writer.prefix("ServiceId");
    if let Some(var_5314) = &input.service_id {
        scope_5313.string(var_5314);
    }
    #[allow(unused_mut)]
    let mut scope_5315 = writer.prefix("PrivateDnsName");
    if let Some(var_5316) = &input.private_dns_name {
        scope_5315.string(var_5316);
    }
    #[allow(unused_mut)]
    let mut scope_5317 = writer.prefix("RemovePrivateDnsName");
    if let Some(var_5318) = &input.remove_private_dns_name {
        scope_5317.boolean(*var_5318);
    }
    #[allow(unused_mut)]
    let mut scope_5319 = writer.prefix("AcceptanceRequired");
    if let Some(var_5320) = &input.acceptance_required {
        scope_5319.boolean(*var_5320);
    }
    #[allow(unused_mut)]
    let mut scope_5321 = writer.prefix("AddNetworkLoadBalancerArn");
    if let Some(var_5322) = &input.add_network_load_balancer_arns {
        let mut list_5324 = scope_5321.start_list(true, Some("item"));
        for item_5323 in var_5322 {
            #[allow(unused_mut)]
            let mut entry_5325 = list_5324.entry();
            entry_5325.string(item_5323);
        }
        list_5324.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5326 = writer.prefix("RemoveNetworkLoadBalancerArn");
    if let Some(var_5327) = &input.remove_network_load_balancer_arns {
        let mut list_5329 = scope_5326.start_list(true, Some("item"));
        for item_5328 in var_5327 {
            #[allow(unused_mut)]
            let mut entry_5330 = list_5329.entry();
            entry_5330.string(item_5328);
        }
        list_5329.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5331 = writer.prefix("AddGatewayLoadBalancerArn");
    if let Some(var_5332) = &input.add_gateway_load_balancer_arns {
        let mut list_5334 = scope_5331.start_list(true, Some("item"));
        for item_5333 in var_5332 {
            #[allow(unused_mut)]
            let mut entry_5335 = list_5334.entry();
            entry_5335.string(item_5333);
        }
        list_5334.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5336 = writer.prefix("RemoveGatewayLoadBalancerArn");
    if let Some(var_5337) = &input.remove_gateway_load_balancer_arns {
        let mut list_5339 = scope_5336.start_list(true, Some("item"));
        for item_5338 in var_5337 {
            #[allow(unused_mut)]
            let mut entry_5340 = list_5339.entry();
            entry_5340.string(item_5338);
        }
        list_5339.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5341 = writer.prefix("AddSupportedIpAddressType");
    if let Some(var_5342) = &input.add_supported_ip_address_types {
        let mut list_5344 = scope_5341.start_list(true, Some("item"));
        for item_5343 in var_5342 {
            #[allow(unused_mut)]
            let mut entry_5345 = list_5344.entry();
            entry_5345.string(item_5343);
        }
        list_5344.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5346 = writer.prefix("RemoveSupportedIpAddressType");
    if let Some(var_5347) = &input.remove_supported_ip_address_types {
        let mut list_5349 = scope_5346.start_list(true, Some("item"));
        for item_5348 in var_5347 {
            #[allow(unused_mut)]
            let mut entry_5350 = list_5349.entry();
            entry_5350.string(item_5348);
        }
        list_5349.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_service_payer_responsibility(
    input: &crate::input::ModifyVpcEndpointServicePayerResponsibilityInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointServicePayerResponsibility",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5351 = writer.prefix("DryRun");
    if let Some(var_5352) = &input.dry_run {
        scope_5351.boolean(*var_5352);
    }
    #[allow(unused_mut)]
    let mut scope_5353 = writer.prefix("ServiceId");
    if let Some(var_5354) = &input.service_id {
        scope_5353.string(var_5354);
    }
    #[allow(unused_mut)]
    let mut scope_5355 = writer.prefix("PayerResponsibility");
    if let Some(var_5356) = &input.payer_responsibility {
        scope_5355.string(var_5356.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_service_permissions(
    input: &crate::input::ModifyVpcEndpointServicePermissionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointServicePermissions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5357 = writer.prefix("DryRun");
    if let Some(var_5358) = &input.dry_run {
        scope_5357.boolean(*var_5358);
    }
    #[allow(unused_mut)]
    let mut scope_5359 = writer.prefix("ServiceId");
    if let Some(var_5360) = &input.service_id {
        scope_5359.string(var_5360);
    }
    #[allow(unused_mut)]
    let mut scope_5361 = writer.prefix("AddAllowedPrincipals");
    if let Some(var_5362) = &input.add_allowed_principals {
        let mut list_5364 = scope_5361.start_list(true, Some("item"));
        for item_5363 in var_5362 {
            #[allow(unused_mut)]
            let mut entry_5365 = list_5364.entry();
            entry_5365.string(item_5363);
        }
        list_5364.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5366 = writer.prefix("RemoveAllowedPrincipals");
    if let Some(var_5367) = &input.remove_allowed_principals {
        let mut list_5369 = scope_5366.start_list(true, Some("item"));
        for item_5368 in var_5367 {
            #[allow(unused_mut)]
            let mut entry_5370 = list_5369.entry();
            entry_5370.string(item_5368);
        }
        list_5369.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_peering_connection_options(
    input: &crate::input::ModifyVpcPeeringConnectionOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcPeeringConnectionOptions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5371 = writer.prefix("AccepterPeeringConnectionOptions");
    if let Some(var_5372) = &input.accepter_peering_connection_options {
        crate::query_ser::serialize_structure_crate_model_peering_connection_options_request(
            scope_5371, var_5372,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5373 = writer.prefix("DryRun");
    if let Some(var_5374) = &input.dry_run {
        scope_5373.boolean(*var_5374);
    }
    #[allow(unused_mut)]
    let mut scope_5375 = writer.prefix("RequesterPeeringConnectionOptions");
    if let Some(var_5376) = &input.requester_peering_connection_options {
        crate::query_ser::serialize_structure_crate_model_peering_connection_options_request(
            scope_5375, var_5376,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5377 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_5378) = &input.vpc_peering_connection_id {
        scope_5377.string(var_5378);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_tenancy(
    input: &crate::input::ModifyVpcTenancyInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcTenancy", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5379 = writer.prefix("VpcId");
    if let Some(var_5380) = &input.vpc_id {
        scope_5379.string(var_5380);
    }
    #[allow(unused_mut)]
    let mut scope_5381 = writer.prefix("InstanceTenancy");
    if let Some(var_5382) = &input.instance_tenancy {
        scope_5381.string(var_5382.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5383 = writer.prefix("DryRun");
    if let Some(var_5384) = &input.dry_run {
        scope_5383.boolean(*var_5384);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_connection(
    input: &crate::input::ModifyVpnConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5385 = writer.prefix("VpnConnectionId");
    if let Some(var_5386) = &input.vpn_connection_id {
        scope_5385.string(var_5386);
    }
    #[allow(unused_mut)]
    let mut scope_5387 = writer.prefix("TransitGatewayId");
    if let Some(var_5388) = &input.transit_gateway_id {
        scope_5387.string(var_5388);
    }
    #[allow(unused_mut)]
    let mut scope_5389 = writer.prefix("CustomerGatewayId");
    if let Some(var_5390) = &input.customer_gateway_id {
        scope_5389.string(var_5390);
    }
    #[allow(unused_mut)]
    let mut scope_5391 = writer.prefix("VpnGatewayId");
    if let Some(var_5392) = &input.vpn_gateway_id {
        scope_5391.string(var_5392);
    }
    #[allow(unused_mut)]
    let mut scope_5393 = writer.prefix("DryRun");
    if let Some(var_5394) = &input.dry_run {
        scope_5393.boolean(*var_5394);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_connection_options(
    input: &crate::input::ModifyVpnConnectionOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnConnectionOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5395 = writer.prefix("VpnConnectionId");
    if let Some(var_5396) = &input.vpn_connection_id {
        scope_5395.string(var_5396);
    }
    #[allow(unused_mut)]
    let mut scope_5397 = writer.prefix("LocalIpv4NetworkCidr");
    if let Some(var_5398) = &input.local_ipv4_network_cidr {
        scope_5397.string(var_5398);
    }
    #[allow(unused_mut)]
    let mut scope_5399 = writer.prefix("RemoteIpv4NetworkCidr");
    if let Some(var_5400) = &input.remote_ipv4_network_cidr {
        scope_5399.string(var_5400);
    }
    #[allow(unused_mut)]
    let mut scope_5401 = writer.prefix("LocalIpv6NetworkCidr");
    if let Some(var_5402) = &input.local_ipv6_network_cidr {
        scope_5401.string(var_5402);
    }
    #[allow(unused_mut)]
    let mut scope_5403 = writer.prefix("RemoteIpv6NetworkCidr");
    if let Some(var_5404) = &input.remote_ipv6_network_cidr {
        scope_5403.string(var_5404);
    }
    #[allow(unused_mut)]
    let mut scope_5405 = writer.prefix("DryRun");
    if let Some(var_5406) = &input.dry_run {
        scope_5405.boolean(*var_5406);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_tunnel_certificate(
    input: &crate::input::ModifyVpnTunnelCertificateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnTunnelCertificate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5407 = writer.prefix("VpnConnectionId");
    if let Some(var_5408) = &input.vpn_connection_id {
        scope_5407.string(var_5408);
    }
    #[allow(unused_mut)]
    let mut scope_5409 = writer.prefix("VpnTunnelOutsideIpAddress");
    if let Some(var_5410) = &input.vpn_tunnel_outside_ip_address {
        scope_5409.string(var_5410);
    }
    #[allow(unused_mut)]
    let mut scope_5411 = writer.prefix("DryRun");
    if let Some(var_5412) = &input.dry_run {
        scope_5411.boolean(*var_5412);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_tunnel_options(
    input: &crate::input::ModifyVpnTunnelOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnTunnelOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5413 = writer.prefix("VpnConnectionId");
    if let Some(var_5414) = &input.vpn_connection_id {
        scope_5413.string(var_5414);
    }
    #[allow(unused_mut)]
    let mut scope_5415 = writer.prefix("VpnTunnelOutsideIpAddress");
    if let Some(var_5416) = &input.vpn_tunnel_outside_ip_address {
        scope_5415.string(var_5416);
    }
    #[allow(unused_mut)]
    let mut scope_5417 = writer.prefix("TunnelOptions");
    if let Some(var_5418) = &input.tunnel_options {
        crate::query_ser::serialize_structure_crate_model_modify_vpn_tunnel_options_specification(
            scope_5417, var_5418,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5419 = writer.prefix("DryRun");
    if let Some(var_5420) = &input.dry_run {
        scope_5419.boolean(*var_5420);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_monitor_instances(
    input: &crate::input::MonitorInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "MonitorInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5421 = writer.prefix("InstanceId");
    if let Some(var_5422) = &input.instance_ids {
        let mut list_5424 = scope_5421.start_list(true, Some("InstanceId"));
        for item_5423 in var_5422 {
            #[allow(unused_mut)]
            let mut entry_5425 = list_5424.entry();
            entry_5425.string(item_5423);
        }
        list_5424.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5426 = writer.prefix("DryRun");
    if let Some(var_5427) = &input.dry_run {
        scope_5426.boolean(*var_5427);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_move_address_to_vpc(
    input: &crate::input::MoveAddressToVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "MoveAddressToVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5428 = writer.prefix("DryRun");
    if let Some(var_5429) = &input.dry_run {
        scope_5428.boolean(*var_5429);
    }
    #[allow(unused_mut)]
    let mut scope_5430 = writer.prefix("PublicIp");
    if let Some(var_5431) = &input.public_ip {
        scope_5430.string(var_5431);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_move_byoip_cidr_to_ipam(
    input: &crate::input::MoveByoipCidrToIpamInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "MoveByoipCidrToIpam", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5432 = writer.prefix("DryRun");
    if let Some(var_5433) = &input.dry_run {
        scope_5432.boolean(*var_5433);
    }
    #[allow(unused_mut)]
    let mut scope_5434 = writer.prefix("Cidr");
    if let Some(var_5435) = &input.cidr {
        scope_5434.string(var_5435);
    }
    #[allow(unused_mut)]
    let mut scope_5436 = writer.prefix("IpamPoolId");
    if let Some(var_5437) = &input.ipam_pool_id {
        scope_5436.string(var_5437);
    }
    #[allow(unused_mut)]
    let mut scope_5438 = writer.prefix("IpamPoolOwner");
    if let Some(var_5439) = &input.ipam_pool_owner {
        scope_5438.string(var_5439);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_provision_byoip_cidr(
    input: &crate::input::ProvisionByoipCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ProvisionByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5440 = writer.prefix("Cidr");
    if let Some(var_5441) = &input.cidr {
        scope_5440.string(var_5441);
    }
    #[allow(unused_mut)]
    let mut scope_5442 = writer.prefix("CidrAuthorizationContext");
    if let Some(var_5443) = &input.cidr_authorization_context {
        crate::query_ser::serialize_structure_crate_model_cidr_authorization_context(
            scope_5442, var_5443,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5444 = writer.prefix("PubliclyAdvertisable");
    if let Some(var_5445) = &input.publicly_advertisable {
        scope_5444.boolean(*var_5445);
    }
    #[allow(unused_mut)]
    let mut scope_5446 = writer.prefix("Description");
    if let Some(var_5447) = &input.description {
        scope_5446.string(var_5447);
    }
    #[allow(unused_mut)]
    let mut scope_5448 = writer.prefix("DryRun");
    if let Some(var_5449) = &input.dry_run {
        scope_5448.boolean(*var_5449);
    }
    #[allow(unused_mut)]
    let mut scope_5450 = writer.prefix("PoolTagSpecification");
    if let Some(var_5451) = &input.pool_tag_specifications {
        let mut list_5453 = scope_5450.start_list(true, Some("item"));
        for item_5452 in var_5451 {
            #[allow(unused_mut)]
            let mut entry_5454 = list_5453.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5454, item_5452,
            )?;
        }
        list_5453.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5455 = writer.prefix("MultiRegion");
    if let Some(var_5456) = &input.multi_region {
        scope_5455.boolean(*var_5456);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_provision_ipam_pool_cidr(
    input: &crate::input::ProvisionIpamPoolCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ProvisionIpamPoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5457 = writer.prefix("DryRun");
    if let Some(var_5458) = &input.dry_run {
        scope_5457.boolean(*var_5458);
    }
    #[allow(unused_mut)]
    let mut scope_5459 = writer.prefix("IpamPoolId");
    if let Some(var_5460) = &input.ipam_pool_id {
        scope_5459.string(var_5460);
    }
    #[allow(unused_mut)]
    let mut scope_5461 = writer.prefix("Cidr");
    if let Some(var_5462) = &input.cidr {
        scope_5461.string(var_5462);
    }
    #[allow(unused_mut)]
    let mut scope_5463 = writer.prefix("CidrAuthorizationContext");
    if let Some(var_5464) = &input.cidr_authorization_context {
        crate::query_ser::serialize_structure_crate_model_ipam_cidr_authorization_context(
            scope_5463, var_5464,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_provision_public_ipv4_pool_cidr(
    input: &crate::input::ProvisionPublicIpv4PoolCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ProvisionPublicIpv4PoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5465 = writer.prefix("DryRun");
    if let Some(var_5466) = &input.dry_run {
        scope_5465.boolean(*var_5466);
    }
    #[allow(unused_mut)]
    let mut scope_5467 = writer.prefix("IpamPoolId");
    if let Some(var_5468) = &input.ipam_pool_id {
        scope_5467.string(var_5468);
    }
    #[allow(unused_mut)]
    let mut scope_5469 = writer.prefix("PoolId");
    if let Some(var_5470) = &input.pool_id {
        scope_5469.string(var_5470);
    }
    #[allow(unused_mut)]
    let mut scope_5471 = writer.prefix("NetmaskLength");
    if let Some(var_5472) = &input.netmask_length {
        scope_5471.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5472).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_host_reservation(
    input: &crate::input::PurchaseHostReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "PurchaseHostReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5473 = writer.prefix("ClientToken");
    if let Some(var_5474) = &input.client_token {
        scope_5473.string(var_5474);
    }
    #[allow(unused_mut)]
    let mut scope_5475 = writer.prefix("CurrencyCode");
    if let Some(var_5476) = &input.currency_code {
        scope_5475.string(var_5476.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5477 = writer.prefix("HostIdSet");
    if let Some(var_5478) = &input.host_id_set {
        let mut list_5480 = scope_5477.start_list(true, Some("item"));
        for item_5479 in var_5478 {
            #[allow(unused_mut)]
            let mut entry_5481 = list_5480.entry();
            entry_5481.string(item_5479);
        }
        list_5480.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5482 = writer.prefix("LimitPrice");
    if let Some(var_5483) = &input.limit_price {
        scope_5482.string(var_5483);
    }
    #[allow(unused_mut)]
    let mut scope_5484 = writer.prefix("OfferingId");
    if let Some(var_5485) = &input.offering_id {
        scope_5484.string(var_5485);
    }
    #[allow(unused_mut)]
    let mut scope_5486 = writer.prefix("TagSpecification");
    if let Some(var_5487) = &input.tag_specifications {
        let mut list_5489 = scope_5486.start_list(true, Some("item"));
        for item_5488 in var_5487 {
            #[allow(unused_mut)]
            let mut entry_5490 = list_5489.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5490, item_5488,
            )?;
        }
        list_5489.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_reserved_instances_offering(
    input: &crate::input::PurchaseReservedInstancesOfferingInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "PurchaseReservedInstancesOffering",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5491 = writer.prefix("InstanceCount");
    if let Some(var_5492) = &input.instance_count {
        scope_5491.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5492).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5493 = writer.prefix("ReservedInstancesOfferingId");
    if let Some(var_5494) = &input.reserved_instances_offering_id {
        scope_5493.string(var_5494);
    }
    #[allow(unused_mut)]
    let mut scope_5495 = writer.prefix("DryRun");
    if let Some(var_5496) = &input.dry_run {
        scope_5495.boolean(*var_5496);
    }
    #[allow(unused_mut)]
    let mut scope_5497 = writer.prefix("LimitPrice");
    if let Some(var_5498) = &input.limit_price {
        crate::query_ser::serialize_structure_crate_model_reserved_instance_limit_price(
            scope_5497, var_5498,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5499 = writer.prefix("PurchaseTime");
    if let Some(var_5500) = &input.purchase_time {
        scope_5499.date_time(var_5500, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_scheduled_instances(
    input: &crate::input::PurchaseScheduledInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "PurchaseScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5501 = writer.prefix("ClientToken");
    if let Some(var_5502) = &input.client_token {
        scope_5501.string(var_5502);
    }
    #[allow(unused_mut)]
    let mut scope_5503 = writer.prefix("DryRun");
    if let Some(var_5504) = &input.dry_run {
        scope_5503.boolean(*var_5504);
    }
    #[allow(unused_mut)]
    let mut scope_5505 = writer.prefix("PurchaseRequest");
    if let Some(var_5506) = &input.purchase_requests {
        let mut list_5508 = scope_5505.start_list(true, Some("PurchaseRequest"));
        for item_5507 in var_5506 {
            #[allow(unused_mut)]
            let mut entry_5509 = list_5508.entry();
            crate::query_ser::serialize_structure_crate_model_purchase_request(
                entry_5509, item_5507,
            )?;
        }
        list_5508.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reboot_instances(
    input: &crate::input::RebootInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RebootInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5510 = writer.prefix("InstanceId");
    if let Some(var_5511) = &input.instance_ids {
        let mut list_5513 = scope_5510.start_list(true, Some("InstanceId"));
        for item_5512 in var_5511 {
            #[allow(unused_mut)]
            let mut entry_5514 = list_5513.entry();
            entry_5514.string(item_5512);
        }
        list_5513.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5515 = writer.prefix("DryRun");
    if let Some(var_5516) = &input.dry_run {
        scope_5515.boolean(*var_5516);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_image(
    input: &crate::input::RegisterImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RegisterImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5517 = writer.prefix("ImageLocation");
    if let Some(var_5518) = &input.image_location {
        scope_5517.string(var_5518);
    }
    #[allow(unused_mut)]
    let mut scope_5519 = writer.prefix("Architecture");
    if let Some(var_5520) = &input.architecture {
        scope_5519.string(var_5520.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5521 = writer.prefix("BlockDeviceMapping");
    if let Some(var_5522) = &input.block_device_mappings {
        let mut list_5524 = scope_5521.start_list(true, Some("BlockDeviceMapping"));
        for item_5523 in var_5522 {
            #[allow(unused_mut)]
            let mut entry_5525 = list_5524.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_5525, item_5523,
            )?;
        }
        list_5524.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5526 = writer.prefix("Description");
    if let Some(var_5527) = &input.description {
        scope_5526.string(var_5527);
    }
    #[allow(unused_mut)]
    let mut scope_5528 = writer.prefix("DryRun");
    if let Some(var_5529) = &input.dry_run {
        scope_5528.boolean(*var_5529);
    }
    #[allow(unused_mut)]
    let mut scope_5530 = writer.prefix("EnaSupport");
    if let Some(var_5531) = &input.ena_support {
        scope_5530.boolean(*var_5531);
    }
    #[allow(unused_mut)]
    let mut scope_5532 = writer.prefix("KernelId");
    if let Some(var_5533) = &input.kernel_id {
        scope_5532.string(var_5533);
    }
    #[allow(unused_mut)]
    let mut scope_5534 = writer.prefix("Name");
    if let Some(var_5535) = &input.name {
        scope_5534.string(var_5535);
    }
    #[allow(unused_mut)]
    let mut scope_5536 = writer.prefix("BillingProduct");
    if let Some(var_5537) = &input.billing_products {
        let mut list_5539 = scope_5536.start_list(true, Some("item"));
        for item_5538 in var_5537 {
            #[allow(unused_mut)]
            let mut entry_5540 = list_5539.entry();
            entry_5540.string(item_5538);
        }
        list_5539.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5541 = writer.prefix("RamdiskId");
    if let Some(var_5542) = &input.ramdisk_id {
        scope_5541.string(var_5542);
    }
    #[allow(unused_mut)]
    let mut scope_5543 = writer.prefix("RootDeviceName");
    if let Some(var_5544) = &input.root_device_name {
        scope_5543.string(var_5544);
    }
    #[allow(unused_mut)]
    let mut scope_5545 = writer.prefix("SriovNetSupport");
    if let Some(var_5546) = &input.sriov_net_support {
        scope_5545.string(var_5546);
    }
    #[allow(unused_mut)]
    let mut scope_5547 = writer.prefix("VirtualizationType");
    if let Some(var_5548) = &input.virtualization_type {
        scope_5547.string(var_5548);
    }
    #[allow(unused_mut)]
    let mut scope_5549 = writer.prefix("BootMode");
    if let Some(var_5550) = &input.boot_mode {
        scope_5549.string(var_5550.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5551 = writer.prefix("TpmSupport");
    if let Some(var_5552) = &input.tpm_support {
        scope_5551.string(var_5552.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5553 = writer.prefix("UefiData");
    if let Some(var_5554) = &input.uefi_data {
        scope_5553.string(var_5554);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_instance_event_notification_attributes(
    input: &crate::input::RegisterInstanceEventNotificationAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RegisterInstanceEventNotificationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5555 = writer.prefix("DryRun");
    if let Some(var_5556) = &input.dry_run {
        scope_5555.boolean(*var_5556);
    }
    #[allow(unused_mut)]
    let mut scope_5557 = writer.prefix("InstanceTagAttribute");
    if let Some(var_5558) = &input.instance_tag_attribute {
        crate::query_ser::serialize_structure_crate_model_register_instance_tag_attribute_request(
            scope_5557, var_5558,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_transit_gateway_multicast_group_members(
    input: &crate::input::RegisterTransitGatewayMulticastGroupMembersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RegisterTransitGatewayMulticastGroupMembers",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5559 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_5560) = &input.transit_gateway_multicast_domain_id {
        scope_5559.string(var_5560);
    }
    #[allow(unused_mut)]
    let mut scope_5561 = writer.prefix("GroupIpAddress");
    if let Some(var_5562) = &input.group_ip_address {
        scope_5561.string(var_5562);
    }
    #[allow(unused_mut)]
    let mut scope_5563 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_5564) = &input.network_interface_ids {
        let mut list_5566 = scope_5563.start_list(true, Some("item"));
        for item_5565 in var_5564 {
            #[allow(unused_mut)]
            let mut entry_5567 = list_5566.entry();
            entry_5567.string(item_5565);
        }
        list_5566.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5568 = writer.prefix("DryRun");
    if let Some(var_5569) = &input.dry_run {
        scope_5568.boolean(*var_5569);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_transit_gateway_multicast_group_sources(
    input: &crate::input::RegisterTransitGatewayMulticastGroupSourcesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RegisterTransitGatewayMulticastGroupSources",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5570 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_5571) = &input.transit_gateway_multicast_domain_id {
        scope_5570.string(var_5571);
    }
    #[allow(unused_mut)]
    let mut scope_5572 = writer.prefix("GroupIpAddress");
    if let Some(var_5573) = &input.group_ip_address {
        scope_5572.string(var_5573);
    }
    #[allow(unused_mut)]
    let mut scope_5574 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_5575) = &input.network_interface_ids {
        let mut list_5577 = scope_5574.start_list(true, Some("item"));
        for item_5576 in var_5575 {
            #[allow(unused_mut)]
            let mut entry_5578 = list_5577.entry();
            entry_5578.string(item_5576);
        }
        list_5577.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5579 = writer.prefix("DryRun");
    if let Some(var_5580) = &input.dry_run {
        scope_5579.boolean(*var_5580);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_transit_gateway_multicast_domain_associations(
    input: &crate::input::RejectTransitGatewayMulticastDomainAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RejectTransitGatewayMulticastDomainAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5581 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_5582) = &input.transit_gateway_multicast_domain_id {
        scope_5581.string(var_5582);
    }
    #[allow(unused_mut)]
    let mut scope_5583 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5584) = &input.transit_gateway_attachment_id {
        scope_5583.string(var_5584);
    }
    #[allow(unused_mut)]
    let mut scope_5585 = writer.prefix("SubnetIds");
    if let Some(var_5586) = &input.subnet_ids {
        let mut list_5588 = scope_5585.start_list(true, Some("item"));
        for item_5587 in var_5586 {
            #[allow(unused_mut)]
            let mut entry_5589 = list_5588.entry();
            entry_5589.string(item_5587);
        }
        list_5588.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5590 = writer.prefix("DryRun");
    if let Some(var_5591) = &input.dry_run {
        scope_5590.boolean(*var_5591);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_transit_gateway_peering_attachment(
    input: &crate::input::RejectTransitGatewayPeeringAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RejectTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5592 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5593) = &input.transit_gateway_attachment_id {
        scope_5592.string(var_5593);
    }
    #[allow(unused_mut)]
    let mut scope_5594 = writer.prefix("DryRun");
    if let Some(var_5595) = &input.dry_run {
        scope_5594.boolean(*var_5595);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_transit_gateway_vpc_attachment(
    input: &crate::input::RejectTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RejectTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5596 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5597) = &input.transit_gateway_attachment_id {
        scope_5596.string(var_5597);
    }
    #[allow(unused_mut)]
    let mut scope_5598 = writer.prefix("DryRun");
    if let Some(var_5599) = &input.dry_run {
        scope_5598.boolean(*var_5599);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_vpc_endpoint_connections(
    input: &crate::input::RejectVpcEndpointConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RejectVpcEndpointConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5600 = writer.prefix("DryRun");
    if let Some(var_5601) = &input.dry_run {
        scope_5600.boolean(*var_5601);
    }
    #[allow(unused_mut)]
    let mut scope_5602 = writer.prefix("ServiceId");
    if let Some(var_5603) = &input.service_id {
        scope_5602.string(var_5603);
    }
    #[allow(unused_mut)]
    let mut scope_5604 = writer.prefix("VpcEndpointId");
    if let Some(var_5605) = &input.vpc_endpoint_ids {
        let mut list_5607 = scope_5604.start_list(true, Some("item"));
        for item_5606 in var_5605 {
            #[allow(unused_mut)]
            let mut entry_5608 = list_5607.entry();
            entry_5608.string(item_5606);
        }
        list_5607.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_vpc_peering_connection(
    input: &crate::input::RejectVpcPeeringConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RejectVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5609 = writer.prefix("DryRun");
    if let Some(var_5610) = &input.dry_run {
        scope_5609.boolean(*var_5610);
    }
    #[allow(unused_mut)]
    let mut scope_5611 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_5612) = &input.vpc_peering_connection_id {
        scope_5611.string(var_5612);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_release_address(
    input: &crate::input::ReleaseAddressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReleaseAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5613 = writer.prefix("AllocationId");
    if let Some(var_5614) = &input.allocation_id {
        scope_5613.string(var_5614);
    }
    #[allow(unused_mut)]
    let mut scope_5615 = writer.prefix("PublicIp");
    if let Some(var_5616) = &input.public_ip {
        scope_5615.string(var_5616);
    }
    #[allow(unused_mut)]
    let mut scope_5617 = writer.prefix("NetworkBorderGroup");
    if let Some(var_5618) = &input.network_border_group {
        scope_5617.string(var_5618);
    }
    #[allow(unused_mut)]
    let mut scope_5619 = writer.prefix("DryRun");
    if let Some(var_5620) = &input.dry_run {
        scope_5619.boolean(*var_5620);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_release_hosts(
    input: &crate::input::ReleaseHostsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReleaseHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5621 = writer.prefix("HostId");
    if let Some(var_5622) = &input.host_ids {
        let mut list_5624 = scope_5621.start_list(true, Some("item"));
        for item_5623 in var_5622 {
            #[allow(unused_mut)]
            let mut entry_5625 = list_5624.entry();
            entry_5625.string(item_5623);
        }
        list_5624.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_release_ipam_pool_allocation(
    input: &crate::input::ReleaseIpamPoolAllocationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReleaseIpamPoolAllocation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5626 = writer.prefix("DryRun");
    if let Some(var_5627) = &input.dry_run {
        scope_5626.boolean(*var_5627);
    }
    #[allow(unused_mut)]
    let mut scope_5628 = writer.prefix("IpamPoolId");
    if let Some(var_5629) = &input.ipam_pool_id {
        scope_5628.string(var_5629);
    }
    #[allow(unused_mut)]
    let mut scope_5630 = writer.prefix("Cidr");
    if let Some(var_5631) = &input.cidr {
        scope_5630.string(var_5631);
    }
    #[allow(unused_mut)]
    let mut scope_5632 = writer.prefix("IpamPoolAllocationId");
    if let Some(var_5633) = &input.ipam_pool_allocation_id {
        scope_5632.string(var_5633);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_iam_instance_profile_association(
    input: &crate::input::ReplaceIamInstanceProfileAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ReplaceIamInstanceProfileAssociation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5634 = writer.prefix("IamInstanceProfile");
    if let Some(var_5635) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_5634, var_5635,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5636 = writer.prefix("AssociationId");
    if let Some(var_5637) = &input.association_id {
        scope_5636.string(var_5637);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_network_acl_association(
    input: &crate::input::ReplaceNetworkAclAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReplaceNetworkAclAssociation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5638 = writer.prefix("AssociationId");
    if let Some(var_5639) = &input.association_id {
        scope_5638.string(var_5639);
    }
    #[allow(unused_mut)]
    let mut scope_5640 = writer.prefix("DryRun");
    if let Some(var_5641) = &input.dry_run {
        scope_5640.boolean(*var_5641);
    }
    #[allow(unused_mut)]
    let mut scope_5642 = writer.prefix("NetworkAclId");
    if let Some(var_5643) = &input.network_acl_id {
        scope_5642.string(var_5643);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_network_acl_entry(
    input: &crate::input::ReplaceNetworkAclEntryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReplaceNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5644 = writer.prefix("CidrBlock");
    if let Some(var_5645) = &input.cidr_block {
        scope_5644.string(var_5645);
    }
    #[allow(unused_mut)]
    let mut scope_5646 = writer.prefix("DryRun");
    if let Some(var_5647) = &input.dry_run {
        scope_5646.boolean(*var_5647);
    }
    #[allow(unused_mut)]
    let mut scope_5648 = writer.prefix("Egress");
    if let Some(var_5649) = &input.egress {
        scope_5648.boolean(*var_5649);
    }
    #[allow(unused_mut)]
    let mut scope_5650 = writer.prefix("Icmp");
    if let Some(var_5651) = &input.icmp_type_code {
        crate::query_ser::serialize_structure_crate_model_icmp_type_code(scope_5650, var_5651)?;
    }
    #[allow(unused_mut)]
    let mut scope_5652 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_5653) = &input.ipv6_cidr_block {
        scope_5652.string(var_5653);
    }
    #[allow(unused_mut)]
    let mut scope_5654 = writer.prefix("NetworkAclId");
    if let Some(var_5655) = &input.network_acl_id {
        scope_5654.string(var_5655);
    }
    #[allow(unused_mut)]
    let mut scope_5656 = writer.prefix("PortRange");
    if let Some(var_5657) = &input.port_range {
        crate::query_ser::serialize_structure_crate_model_port_range(scope_5656, var_5657)?;
    }
    #[allow(unused_mut)]
    let mut scope_5658 = writer.prefix("Protocol");
    if let Some(var_5659) = &input.protocol {
        scope_5658.string(var_5659);
    }
    #[allow(unused_mut)]
    let mut scope_5660 = writer.prefix("RuleAction");
    if let Some(var_5661) = &input.rule_action {
        scope_5660.string(var_5661.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5662 = writer.prefix("RuleNumber");
    if let Some(var_5663) = &input.rule_number {
        scope_5662.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5663).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_route(
    input: &crate::input::ReplaceRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReplaceRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5664 = writer.prefix("DestinationCidrBlock");
    if let Some(var_5665) = &input.destination_cidr_block {
        scope_5664.string(var_5665);
    }
    #[allow(unused_mut)]
    let mut scope_5666 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_5667) = &input.destination_ipv6_cidr_block {
        scope_5666.string(var_5667);
    }
    #[allow(unused_mut)]
    let mut scope_5668 = writer.prefix("DestinationPrefixListId");
    if let Some(var_5669) = &input.destination_prefix_list_id {
        scope_5668.string(var_5669);
    }
    #[allow(unused_mut)]
    let mut scope_5670 = writer.prefix("DryRun");
    if let Some(var_5671) = &input.dry_run {
        scope_5670.boolean(*var_5671);
    }
    #[allow(unused_mut)]
    let mut scope_5672 = writer.prefix("VpcEndpointId");
    if let Some(var_5673) = &input.vpc_endpoint_id {
        scope_5672.string(var_5673);
    }
    #[allow(unused_mut)]
    let mut scope_5674 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_5675) = &input.egress_only_internet_gateway_id {
        scope_5674.string(var_5675);
    }
    #[allow(unused_mut)]
    let mut scope_5676 = writer.prefix("GatewayId");
    if let Some(var_5677) = &input.gateway_id {
        scope_5676.string(var_5677);
    }
    #[allow(unused_mut)]
    let mut scope_5678 = writer.prefix("InstanceId");
    if let Some(var_5679) = &input.instance_id {
        scope_5678.string(var_5679);
    }
    #[allow(unused_mut)]
    let mut scope_5680 = writer.prefix("LocalTarget");
    if let Some(var_5681) = &input.local_target {
        scope_5680.boolean(*var_5681);
    }
    #[allow(unused_mut)]
    let mut scope_5682 = writer.prefix("NatGatewayId");
    if let Some(var_5683) = &input.nat_gateway_id {
        scope_5682.string(var_5683);
    }
    #[allow(unused_mut)]
    let mut scope_5684 = writer.prefix("TransitGatewayId");
    if let Some(var_5685) = &input.transit_gateway_id {
        scope_5684.string(var_5685);
    }
    #[allow(unused_mut)]
    let mut scope_5686 = writer.prefix("LocalGatewayId");
    if let Some(var_5687) = &input.local_gateway_id {
        scope_5686.string(var_5687);
    }
    #[allow(unused_mut)]
    let mut scope_5688 = writer.prefix("CarrierGatewayId");
    if let Some(var_5689) = &input.carrier_gateway_id {
        scope_5688.string(var_5689);
    }
    #[allow(unused_mut)]
    let mut scope_5690 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5691) = &input.network_interface_id {
        scope_5690.string(var_5691);
    }
    #[allow(unused_mut)]
    let mut scope_5692 = writer.prefix("RouteTableId");
    if let Some(var_5693) = &input.route_table_id {
        scope_5692.string(var_5693);
    }
    #[allow(unused_mut)]
    let mut scope_5694 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_5695) = &input.vpc_peering_connection_id {
        scope_5694.string(var_5695);
    }
    #[allow(unused_mut)]
    let mut scope_5696 = writer.prefix("CoreNetworkArn");
    if let Some(var_5697) = &input.core_network_arn {
        scope_5696.string(var_5697);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_route_table_association(
    input: &crate::input::ReplaceRouteTableAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReplaceRouteTableAssociation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5698 = writer.prefix("AssociationId");
    if let Some(var_5699) = &input.association_id {
        scope_5698.string(var_5699);
    }
    #[allow(unused_mut)]
    let mut scope_5700 = writer.prefix("DryRun");
    if let Some(var_5701) = &input.dry_run {
        scope_5700.boolean(*var_5701);
    }
    #[allow(unused_mut)]
    let mut scope_5702 = writer.prefix("RouteTableId");
    if let Some(var_5703) = &input.route_table_id {
        scope_5702.string(var_5703);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_transit_gateway_route(
    input: &crate::input::ReplaceTransitGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReplaceTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5704 = writer.prefix("DestinationCidrBlock");
    if let Some(var_5705) = &input.destination_cidr_block {
        scope_5704.string(var_5705);
    }
    #[allow(unused_mut)]
    let mut scope_5706 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_5707) = &input.transit_gateway_route_table_id {
        scope_5706.string(var_5707);
    }
    #[allow(unused_mut)]
    let mut scope_5708 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5709) = &input.transit_gateway_attachment_id {
        scope_5708.string(var_5709);
    }
    #[allow(unused_mut)]
    let mut scope_5710 = writer.prefix("Blackhole");
    if let Some(var_5711) = &input.blackhole {
        scope_5710.boolean(*var_5711);
    }
    #[allow(unused_mut)]
    let mut scope_5712 = writer.prefix("DryRun");
    if let Some(var_5713) = &input.dry_run {
        scope_5712.boolean(*var_5713);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_report_instance_status(
    input: &crate::input::ReportInstanceStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReportInstanceStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5714 = writer.prefix("Description");
    if let Some(var_5715) = &input.description {
        scope_5714.string(var_5715);
    }
    #[allow(unused_mut)]
    let mut scope_5716 = writer.prefix("DryRun");
    if let Some(var_5717) = &input.dry_run {
        scope_5716.boolean(*var_5717);
    }
    #[allow(unused_mut)]
    let mut scope_5718 = writer.prefix("EndTime");
    if let Some(var_5719) = &input.end_time {
        scope_5718.date_time(var_5719, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_5720 = writer.prefix("InstanceId");
    if let Some(var_5721) = &input.instances {
        let mut list_5723 = scope_5720.start_list(true, Some("InstanceId"));
        for item_5722 in var_5721 {
            #[allow(unused_mut)]
            let mut entry_5724 = list_5723.entry();
            entry_5724.string(item_5722);
        }
        list_5723.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5725 = writer.prefix("ReasonCode");
    if let Some(var_5726) = &input.reason_codes {
        let mut list_5728 = scope_5725.start_list(true, Some("item"));
        for item_5727 in var_5726 {
            #[allow(unused_mut)]
            let mut entry_5729 = list_5728.entry();
            entry_5729.string(item_5727.as_str());
        }
        list_5728.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5730 = writer.prefix("StartTime");
    if let Some(var_5731) = &input.start_time {
        scope_5730.date_time(var_5731, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_5732 = writer.prefix("Status");
    if let Some(var_5733) = &input.status {
        scope_5732.string(var_5733.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_request_spot_fleet(
    input: &crate::input::RequestSpotFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RequestSpotFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5734 = writer.prefix("DryRun");
    if let Some(var_5735) = &input.dry_run {
        scope_5734.boolean(*var_5735);
    }
    #[allow(unused_mut)]
    let mut scope_5736 = writer.prefix("SpotFleetRequestConfig");
    if let Some(var_5737) = &input.spot_fleet_request_config {
        crate::query_ser::serialize_structure_crate_model_spot_fleet_request_config_data(
            scope_5736, var_5737,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_request_spot_instances(
    input: &crate::input::RequestSpotInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RequestSpotInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5738 = writer.prefix("AvailabilityZoneGroup");
    if let Some(var_5739) = &input.availability_zone_group {
        scope_5738.string(var_5739);
    }
    #[allow(unused_mut)]
    let mut scope_5740 = writer.prefix("BlockDurationMinutes");
    if let Some(var_5741) = &input.block_duration_minutes {
        scope_5740.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5741).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5742 = writer.prefix("ClientToken");
    if let Some(var_5743) = &input.client_token {
        scope_5742.string(var_5743);
    }
    #[allow(unused_mut)]
    let mut scope_5744 = writer.prefix("DryRun");
    if let Some(var_5745) = &input.dry_run {
        scope_5744.boolean(*var_5745);
    }
    #[allow(unused_mut)]
    let mut scope_5746 = writer.prefix("InstanceCount");
    if let Some(var_5747) = &input.instance_count {
        scope_5746.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5747).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5748 = writer.prefix("LaunchGroup");
    if let Some(var_5749) = &input.launch_group {
        scope_5748.string(var_5749);
    }
    #[allow(unused_mut)]
    let mut scope_5750 = writer.prefix("LaunchSpecification");
    if let Some(var_5751) = &input.launch_specification {
        crate::query_ser::serialize_structure_crate_model_request_spot_launch_specification(
            scope_5750, var_5751,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5752 = writer.prefix("SpotPrice");
    if let Some(var_5753) = &input.spot_price {
        scope_5752.string(var_5753);
    }
    #[allow(unused_mut)]
    let mut scope_5754 = writer.prefix("Type");
    if let Some(var_5755) = &input.r#type {
        scope_5754.string(var_5755.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5756 = writer.prefix("ValidFrom");
    if let Some(var_5757) = &input.valid_from {
        scope_5756.date_time(var_5757, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_5758 = writer.prefix("ValidUntil");
    if let Some(var_5759) = &input.valid_until {
        scope_5758.date_time(var_5759, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_5760 = writer.prefix("TagSpecification");
    if let Some(var_5761) = &input.tag_specifications {
        let mut list_5763 = scope_5760.start_list(true, Some("item"));
        for item_5762 in var_5761 {
            #[allow(unused_mut)]
            let mut entry_5764 = list_5763.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5764, item_5762,
            )?;
        }
        list_5763.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5765 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_5766) = &input.instance_interruption_behavior {
        scope_5765.string(var_5766.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_address_attribute(
    input: &crate::input::ResetAddressAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetAddressAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5767 = writer.prefix("AllocationId");
    if let Some(var_5768) = &input.allocation_id {
        scope_5767.string(var_5768);
    }
    #[allow(unused_mut)]
    let mut scope_5769 = writer.prefix("Attribute");
    if let Some(var_5770) = &input.attribute {
        scope_5769.string(var_5770.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5771 = writer.prefix("DryRun");
    if let Some(var_5772) = &input.dry_run {
        scope_5771.boolean(*var_5772);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_ebs_default_kms_key_id(
    input: &crate::input::ResetEbsDefaultKmsKeyIdInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5773 = writer.prefix("DryRun");
    if let Some(var_5774) = &input.dry_run {
        scope_5773.boolean(*var_5774);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_fpga_image_attribute(
    input: &crate::input::ResetFpgaImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5775 = writer.prefix("DryRun");
    if let Some(var_5776) = &input.dry_run {
        scope_5775.boolean(*var_5776);
    }
    #[allow(unused_mut)]
    let mut scope_5777 = writer.prefix("FpgaImageId");
    if let Some(var_5778) = &input.fpga_image_id {
        scope_5777.string(var_5778);
    }
    #[allow(unused_mut)]
    let mut scope_5779 = writer.prefix("Attribute");
    if let Some(var_5780) = &input.attribute {
        scope_5779.string(var_5780.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_image_attribute(
    input: &crate::input::ResetImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5781 = writer.prefix("Attribute");
    if let Some(var_5782) = &input.attribute {
        scope_5781.string(var_5782.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5783 = writer.prefix("ImageId");
    if let Some(var_5784) = &input.image_id {
        scope_5783.string(var_5784);
    }
    #[allow(unused_mut)]
    let mut scope_5785 = writer.prefix("DryRun");
    if let Some(var_5786) = &input.dry_run {
        scope_5785.boolean(*var_5786);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_instance_attribute(
    input: &crate::input::ResetInstanceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5787 = writer.prefix("Attribute");
    if let Some(var_5788) = &input.attribute {
        scope_5787.string(var_5788.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5789 = writer.prefix("DryRun");
    if let Some(var_5790) = &input.dry_run {
        scope_5789.boolean(*var_5790);
    }
    #[allow(unused_mut)]
    let mut scope_5791 = writer.prefix("InstanceId");
    if let Some(var_5792) = &input.instance_id {
        scope_5791.string(var_5792);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_network_interface_attribute(
    input: &crate::input::ResetNetworkInterfaceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ResetNetworkInterfaceAttribute",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5793 = writer.prefix("DryRun");
    if let Some(var_5794) = &input.dry_run {
        scope_5793.boolean(*var_5794);
    }
    #[allow(unused_mut)]
    let mut scope_5795 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5796) = &input.network_interface_id {
        scope_5795.string(var_5796);
    }
    #[allow(unused_mut)]
    let mut scope_5797 = writer.prefix("SourceDestCheck");
    if let Some(var_5798) = &input.source_dest_check {
        scope_5797.string(var_5798);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_snapshot_attribute(
    input: &crate::input::ResetSnapshotAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetSnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5799 = writer.prefix("Attribute");
    if let Some(var_5800) = &input.attribute {
        scope_5799.string(var_5800.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5801 = writer.prefix("SnapshotId");
    if let Some(var_5802) = &input.snapshot_id {
        scope_5801.string(var_5802);
    }
    #[allow(unused_mut)]
    let mut scope_5803 = writer.prefix("DryRun");
    if let Some(var_5804) = &input.dry_run {
        scope_5803.boolean(*var_5804);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_address_to_classic(
    input: &crate::input::RestoreAddressToClassicInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreAddressToClassic", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5805 = writer.prefix("DryRun");
    if let Some(var_5806) = &input.dry_run {
        scope_5805.boolean(*var_5806);
    }
    #[allow(unused_mut)]
    let mut scope_5807 = writer.prefix("PublicIp");
    if let Some(var_5808) = &input.public_ip {
        scope_5807.string(var_5808);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_image_from_recycle_bin(
    input: &crate::input::RestoreImageFromRecycleBinInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreImageFromRecycleBin", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5809 = writer.prefix("ImageId");
    if let Some(var_5810) = &input.image_id {
        scope_5809.string(var_5810);
    }
    #[allow(unused_mut)]
    let mut scope_5811 = writer.prefix("DryRun");
    if let Some(var_5812) = &input.dry_run {
        scope_5811.boolean(*var_5812);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_managed_prefix_list_version(
    input: &crate::input::RestoreManagedPrefixListVersionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RestoreManagedPrefixListVersion",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5813 = writer.prefix("DryRun");
    if let Some(var_5814) = &input.dry_run {
        scope_5813.boolean(*var_5814);
    }
    #[allow(unused_mut)]
    let mut scope_5815 = writer.prefix("PrefixListId");
    if let Some(var_5816) = &input.prefix_list_id {
        scope_5815.string(var_5816);
    }
    #[allow(unused_mut)]
    let mut scope_5817 = writer.prefix("PreviousVersion");
    if let Some(var_5818) = &input.previous_version {
        scope_5817.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5818).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5819 = writer.prefix("CurrentVersion");
    if let Some(var_5820) = &input.current_version {
        scope_5819.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5820).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_snapshot_from_recycle_bin(
    input: &crate::input::RestoreSnapshotFromRecycleBinInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreSnapshotFromRecycleBin", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5821 = writer.prefix("SnapshotId");
    if let Some(var_5822) = &input.snapshot_id {
        scope_5821.string(var_5822);
    }
    #[allow(unused_mut)]
    let mut scope_5823 = writer.prefix("DryRun");
    if let Some(var_5824) = &input.dry_run {
        scope_5823.boolean(*var_5824);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_snapshot_tier(
    input: &crate::input::RestoreSnapshotTierInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreSnapshotTier", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5825 = writer.prefix("SnapshotId");
    if let Some(var_5826) = &input.snapshot_id {
        scope_5825.string(var_5826);
    }
    #[allow(unused_mut)]
    let mut scope_5827 = writer.prefix("TemporaryRestoreDays");
    if let Some(var_5828) = &input.temporary_restore_days {
        scope_5827.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5828).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5829 = writer.prefix("PermanentRestore");
    if let Some(var_5830) = &input.permanent_restore {
        scope_5829.boolean(*var_5830);
    }
    #[allow(unused_mut)]
    let mut scope_5831 = writer.prefix("DryRun");
    if let Some(var_5832) = &input.dry_run {
        scope_5831.boolean(*var_5832);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_client_vpn_ingress(
    input: &crate::input::RevokeClientVpnIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RevokeClientVpnIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5833 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_5834) = &input.client_vpn_endpoint_id {
        scope_5833.string(var_5834);
    }
    #[allow(unused_mut)]
    let mut scope_5835 = writer.prefix("TargetNetworkCidr");
    if let Some(var_5836) = &input.target_network_cidr {
        scope_5835.string(var_5836);
    }
    #[allow(unused_mut)]
    let mut scope_5837 = writer.prefix("AccessGroupId");
    if let Some(var_5838) = &input.access_group_id {
        scope_5837.string(var_5838);
    }
    #[allow(unused_mut)]
    let mut scope_5839 = writer.prefix("RevokeAllGroups");
    if let Some(var_5840) = &input.revoke_all_groups {
        scope_5839.boolean(*var_5840);
    }
    #[allow(unused_mut)]
    let mut scope_5841 = writer.prefix("DryRun");
    if let Some(var_5842) = &input.dry_run {
        scope_5841.boolean(*var_5842);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_security_group_egress(
    input: &crate::input::RevokeSecurityGroupEgressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RevokeSecurityGroupEgress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5843 = writer.prefix("DryRun");
    if let Some(var_5844) = &input.dry_run {
        scope_5843.boolean(*var_5844);
    }
    #[allow(unused_mut)]
    let mut scope_5845 = writer.prefix("GroupId");
    if let Some(var_5846) = &input.group_id {
        scope_5845.string(var_5846);
    }
    #[allow(unused_mut)]
    let mut scope_5847 = writer.prefix("IpPermissions");
    if let Some(var_5848) = &input.ip_permissions {
        let mut list_5850 = scope_5847.start_list(true, Some("item"));
        for item_5849 in var_5848 {
            #[allow(unused_mut)]
            let mut entry_5851 = list_5850.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_5851, item_5849)?;
        }
        list_5850.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5852 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_5853) = &input.security_group_rule_ids {
        let mut list_5855 = scope_5852.start_list(true, Some("item"));
        for item_5854 in var_5853 {
            #[allow(unused_mut)]
            let mut entry_5856 = list_5855.entry();
            entry_5856.string(item_5854);
        }
        list_5855.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5857 = writer.prefix("CidrIp");
    if let Some(var_5858) = &input.cidr_ip {
        scope_5857.string(var_5858);
    }
    #[allow(unused_mut)]
    let mut scope_5859 = writer.prefix("FromPort");
    if let Some(var_5860) = &input.from_port {
        scope_5859.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5860).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5861 = writer.prefix("IpProtocol");
    if let Some(var_5862) = &input.ip_protocol {
        scope_5861.string(var_5862);
    }
    #[allow(unused_mut)]
    let mut scope_5863 = writer.prefix("ToPort");
    if let Some(var_5864) = &input.to_port {
        scope_5863.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5864).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5865 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_5866) = &input.source_security_group_name {
        scope_5865.string(var_5866);
    }
    #[allow(unused_mut)]
    let mut scope_5867 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_5868) = &input.source_security_group_owner_id {
        scope_5867.string(var_5868);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_security_group_ingress(
    input: &crate::input::RevokeSecurityGroupIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RevokeSecurityGroupIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5869 = writer.prefix("CidrIp");
    if let Some(var_5870) = &input.cidr_ip {
        scope_5869.string(var_5870);
    }
    #[allow(unused_mut)]
    let mut scope_5871 = writer.prefix("FromPort");
    if let Some(var_5872) = &input.from_port {
        scope_5871.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5872).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5873 = writer.prefix("GroupId");
    if let Some(var_5874) = &input.group_id {
        scope_5873.string(var_5874);
    }
    #[allow(unused_mut)]
    let mut scope_5875 = writer.prefix("GroupName");
    if let Some(var_5876) = &input.group_name {
        scope_5875.string(var_5876);
    }
    #[allow(unused_mut)]
    let mut scope_5877 = writer.prefix("IpPermissions");
    if let Some(var_5878) = &input.ip_permissions {
        let mut list_5880 = scope_5877.start_list(true, Some("item"));
        for item_5879 in var_5878 {
            #[allow(unused_mut)]
            let mut entry_5881 = list_5880.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_5881, item_5879)?;
        }
        list_5880.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5882 = writer.prefix("IpProtocol");
    if let Some(var_5883) = &input.ip_protocol {
        scope_5882.string(var_5883);
    }
    #[allow(unused_mut)]
    let mut scope_5884 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_5885) = &input.source_security_group_name {
        scope_5884.string(var_5885);
    }
    #[allow(unused_mut)]
    let mut scope_5886 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_5887) = &input.source_security_group_owner_id {
        scope_5886.string(var_5887);
    }
    #[allow(unused_mut)]
    let mut scope_5888 = writer.prefix("ToPort");
    if let Some(var_5889) = &input.to_port {
        scope_5888.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5889).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5890 = writer.prefix("DryRun");
    if let Some(var_5891) = &input.dry_run {
        scope_5890.boolean(*var_5891);
    }
    #[allow(unused_mut)]
    let mut scope_5892 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_5893) = &input.security_group_rule_ids {
        let mut list_5895 = scope_5892.start_list(true, Some("item"));
        for item_5894 in var_5893 {
            #[allow(unused_mut)]
            let mut entry_5896 = list_5895.entry();
            entry_5896.string(item_5894);
        }
        list_5895.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_run_instances(
    input: &crate::input::RunInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RunInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5897 = writer.prefix("BlockDeviceMapping");
    if let Some(var_5898) = &input.block_device_mappings {
        let mut list_5900 = scope_5897.start_list(true, Some("BlockDeviceMapping"));
        for item_5899 in var_5898 {
            #[allow(unused_mut)]
            let mut entry_5901 = list_5900.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_5901, item_5899,
            )?;
        }
        list_5900.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5902 = writer.prefix("ImageId");
    if let Some(var_5903) = &input.image_id {
        scope_5902.string(var_5903);
    }
    #[allow(unused_mut)]
    let mut scope_5904 = writer.prefix("InstanceType");
    if let Some(var_5905) = &input.instance_type {
        scope_5904.string(var_5905.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5906 = writer.prefix("Ipv6AddressCount");
    if let Some(var_5907) = &input.ipv6_address_count {
        scope_5906.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5907).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5908 = writer.prefix("Ipv6Address");
    if let Some(var_5909) = &input.ipv6_addresses {
        let mut list_5911 = scope_5908.start_list(true, Some("item"));
        for item_5910 in var_5909 {
            #[allow(unused_mut)]
            let mut entry_5912 = list_5911.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address(
                entry_5912, item_5910,
            )?;
        }
        list_5911.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5913 = writer.prefix("KernelId");
    if let Some(var_5914) = &input.kernel_id {
        scope_5913.string(var_5914);
    }
    #[allow(unused_mut)]
    let mut scope_5915 = writer.prefix("KeyName");
    if let Some(var_5916) = &input.key_name {
        scope_5915.string(var_5916);
    }
    #[allow(unused_mut)]
    let mut scope_5917 = writer.prefix("MaxCount");
    if let Some(var_5918) = &input.max_count {
        scope_5917.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5918).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5919 = writer.prefix("MinCount");
    if let Some(var_5920) = &input.min_count {
        scope_5919.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5920).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5921 = writer.prefix("Monitoring");
    if let Some(var_5922) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_run_instances_monitoring_enabled(
            scope_5921, var_5922,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5923 = writer.prefix("Placement");
    if let Some(var_5924) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_placement(scope_5923, var_5924)?;
    }
    #[allow(unused_mut)]
    let mut scope_5925 = writer.prefix("RamdiskId");
    if let Some(var_5926) = &input.ramdisk_id {
        scope_5925.string(var_5926);
    }
    #[allow(unused_mut)]
    let mut scope_5927 = writer.prefix("SecurityGroupId");
    if let Some(var_5928) = &input.security_group_ids {
        let mut list_5930 = scope_5927.start_list(true, Some("SecurityGroupId"));
        for item_5929 in var_5928 {
            #[allow(unused_mut)]
            let mut entry_5931 = list_5930.entry();
            entry_5931.string(item_5929);
        }
        list_5930.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5932 = writer.prefix("SecurityGroup");
    if let Some(var_5933) = &input.security_groups {
        let mut list_5935 = scope_5932.start_list(true, Some("SecurityGroup"));
        for item_5934 in var_5933 {
            #[allow(unused_mut)]
            let mut entry_5936 = list_5935.entry();
            entry_5936.string(item_5934);
        }
        list_5935.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5937 = writer.prefix("SubnetId");
    if let Some(var_5938) = &input.subnet_id {
        scope_5937.string(var_5938);
    }
    #[allow(unused_mut)]
    let mut scope_5939 = writer.prefix("UserData");
    if let Some(var_5940) = &input.user_data {
        scope_5939.string(var_5940);
    }
    #[allow(unused_mut)]
    let mut scope_5941 = writer.prefix("AdditionalInfo");
    if let Some(var_5942) = &input.additional_info {
        scope_5941.string(var_5942);
    }
    #[allow(unused_mut)]
    let mut scope_5943 = writer.prefix("ClientToken");
    if let Some(var_5944) = &input.client_token {
        scope_5943.string(var_5944);
    }
    #[allow(unused_mut)]
    let mut scope_5945 = writer.prefix("DisableApiTermination");
    if let Some(var_5946) = &input.disable_api_termination {
        scope_5945.boolean(*var_5946);
    }
    #[allow(unused_mut)]
    let mut scope_5947 = writer.prefix("DryRun");
    if let Some(var_5948) = &input.dry_run {
        scope_5947.boolean(*var_5948);
    }
    #[allow(unused_mut)]
    let mut scope_5949 = writer.prefix("EbsOptimized");
    if let Some(var_5950) = &input.ebs_optimized {
        scope_5949.boolean(*var_5950);
    }
    #[allow(unused_mut)]
    let mut scope_5951 = writer.prefix("IamInstanceProfile");
    if let Some(var_5952) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_5951, var_5952,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5953 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_5954) = &input.instance_initiated_shutdown_behavior {
        scope_5953.string(var_5954.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5955 = writer.prefix("NetworkInterface");
    if let Some(var_5956) = &input.network_interfaces {
        let mut list_5958 = scope_5955.start_list(true, Some("item"));
        for item_5957 in var_5956 {
            #[allow(unused_mut)]
            let mut entry_5959 = list_5958.entry();
            crate::query_ser::serialize_structure_crate_model_instance_network_interface_specification(entry_5959, item_5957)?;
        }
        list_5958.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5960 = writer.prefix("PrivateIpAddress");
    if let Some(var_5961) = &input.private_ip_address {
        scope_5960.string(var_5961);
    }
    #[allow(unused_mut)]
    let mut scope_5962 = writer.prefix("ElasticGpuSpecification");
    if let Some(var_5963) = &input.elastic_gpu_specification {
        let mut list_5965 = scope_5962.start_list(true, Some("item"));
        for item_5964 in var_5963 {
            #[allow(unused_mut)]
            let mut entry_5966 = list_5965.entry();
            crate::query_ser::serialize_structure_crate_model_elastic_gpu_specification(
                entry_5966, item_5964,
            )?;
        }
        list_5965.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5967 = writer.prefix("ElasticInferenceAccelerator");
    if let Some(var_5968) = &input.elastic_inference_accelerators {
        let mut list_5970 = scope_5967.start_list(true, Some("item"));
        for item_5969 in var_5968 {
            #[allow(unused_mut)]
            let mut entry_5971 = list_5970.entry();
            crate::query_ser::serialize_structure_crate_model_elastic_inference_accelerator(
                entry_5971, item_5969,
            )?;
        }
        list_5970.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5972 = writer.prefix("TagSpecification");
    if let Some(var_5973) = &input.tag_specifications {
        let mut list_5975 = scope_5972.start_list(true, Some("item"));
        for item_5974 in var_5973 {
            #[allow(unused_mut)]
            let mut entry_5976 = list_5975.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5976, item_5974,
            )?;
        }
        list_5975.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5977 = writer.prefix("LaunchTemplate");
    if let Some(var_5978) = &input.launch_template {
        crate::query_ser::serialize_structure_crate_model_launch_template_specification(
            scope_5977, var_5978,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5979 = writer.prefix("InstanceMarketOptions");
    if let Some(var_5980) = &input.instance_market_options {
        crate::query_ser::serialize_structure_crate_model_instance_market_options_request(
            scope_5979, var_5980,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5981 = writer.prefix("CreditSpecification");
    if let Some(var_5982) = &input.credit_specification {
        crate::query_ser::serialize_structure_crate_model_credit_specification_request(
            scope_5981, var_5982,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5983 = writer.prefix("CpuOptions");
    if let Some(var_5984) = &input.cpu_options {
        crate::query_ser::serialize_structure_crate_model_cpu_options_request(
            scope_5983, var_5984,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5985 = writer.prefix("CapacityReservationSpecification");
    if let Some(var_5986) = &input.capacity_reservation_specification {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_specification(
            scope_5985, var_5986,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5987 = writer.prefix("HibernationOptions");
    if let Some(var_5988) = &input.hibernation_options {
        crate::query_ser::serialize_structure_crate_model_hibernation_options_request(
            scope_5987, var_5988,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5989 = writer.prefix("LicenseSpecification");
    if let Some(var_5990) = &input.license_specifications {
        let mut list_5992 = scope_5989.start_list(true, Some("item"));
        for item_5991 in var_5990 {
            #[allow(unused_mut)]
            let mut entry_5993 = list_5992.entry();
            crate::query_ser::serialize_structure_crate_model_license_configuration_request(
                entry_5993, item_5991,
            )?;
        }
        list_5992.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5994 = writer.prefix("MetadataOptions");
    if let Some(var_5995) = &input.metadata_options {
        crate::query_ser::serialize_structure_crate_model_instance_metadata_options_request(
            scope_5994, var_5995,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5996 = writer.prefix("EnclaveOptions");
    if let Some(var_5997) = &input.enclave_options {
        crate::query_ser::serialize_structure_crate_model_enclave_options_request(
            scope_5996, var_5997,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5998 = writer.prefix("PrivateDnsNameOptions");
    if let Some(var_5999) = &input.private_dns_name_options {
        crate::query_ser::serialize_structure_crate_model_private_dns_name_options_request(
            scope_5998, var_5999,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_6000 = writer.prefix("MaintenanceOptions");
    if let Some(var_6001) = &input.maintenance_options {
        crate::query_ser::serialize_structure_crate_model_instance_maintenance_options_request(
            scope_6000, var_6001,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_6002 = writer.prefix("DisableApiStop");
    if let Some(var_6003) = &input.disable_api_stop {
        scope_6002.boolean(*var_6003);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_run_scheduled_instances(
    input: &crate::input::RunScheduledInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RunScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6004 = writer.prefix("ClientToken");
    if let Some(var_6005) = &input.client_token {
        scope_6004.string(var_6005);
    }
    #[allow(unused_mut)]
    let mut scope_6006 = writer.prefix("DryRun");
    if let Some(var_6007) = &input.dry_run {
        scope_6006.boolean(*var_6007);
    }
    #[allow(unused_mut)]
    let mut scope_6008 = writer.prefix("InstanceCount");
    if let Some(var_6009) = &input.instance_count {
        scope_6008.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_6009).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_6010 = writer.prefix("LaunchSpecification");
    if let Some(var_6011) = &input.launch_specification {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_launch_specification(
            scope_6010, var_6011,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_6012 = writer.prefix("ScheduledInstanceId");
    if let Some(var_6013) = &input.scheduled_instance_id {
        scope_6012.string(var_6013);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_search_local_gateway_routes(
    input: &crate::input::SearchLocalGatewayRoutesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "SearchLocalGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6014 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_6015) = &input.local_gateway_route_table_id {
        scope_6014.string(var_6015);
    }
    #[allow(unused_mut)]
    let mut scope_6016 = writer.prefix("Filter");
    if let Some(var_6017) = &input.filters {
        let mut list_6019 = scope_6016.start_list(true, Some("Filter"));
        for item_6018 in var_6017 {
            #[allow(unused_mut)]
            let mut entry_6020 = list_6019.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_6020, item_6018)?;
        }
        list_6019.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6021 = writer.prefix("MaxResults");
    if let Some(var_6022) = &input.max_results {
        scope_6021.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_6022).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_6023 = writer.prefix("NextToken");
    if let Some(var_6024) = &input.next_token {
        scope_6023.string(var_6024);
    }
    #[allow(unused_mut)]
    let mut scope_6025 = writer.prefix("DryRun");
    if let Some(var_6026) = &input.dry_run {
        scope_6025.boolean(*var_6026);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_search_transit_gateway_multicast_groups(
    input: &crate::input::SearchTransitGatewayMulticastGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "SearchTransitGatewayMulticastGroups",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_6027 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_6028) = &input.transit_gateway_multicast_domain_id {
        scope_6027.string(var_6028);
    }
    #[allow(unused_mut)]
    let mut scope_6029 = writer.prefix("Filter");
    if let Some(var_6030) = &input.filters {
        let mut list_6032 = scope_6029.start_list(true, Some("Filter"));
        for item_6031 in var_6030 {
            #[allow(unused_mut)]
            let mut entry_6033 = list_6032.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_6033, item_6031)?;
        }
        list_6032.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6034 = writer.prefix("MaxResults");
    if let Some(var_6035) = &input.max_results {
        scope_6034.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_6035).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_6036 = writer.prefix("NextToken");
    if let Some(var_6037) = &input.next_token {
        scope_6036.string(var_6037);
    }
    #[allow(unused_mut)]
    let mut scope_6038 = writer.prefix("DryRun");
    if let Some(var_6039) = &input.dry_run {
        scope_6038.boolean(*var_6039);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_search_transit_gateway_routes(
    input: &crate::input::SearchTransitGatewayRoutesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "SearchTransitGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6040 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_6041) = &input.transit_gateway_route_table_id {
        scope_6040.string(var_6041);
    }
    #[allow(unused_mut)]
    let mut scope_6042 = writer.prefix("Filter");
    if let Some(var_6043) = &input.filters {
        let mut list_6045 = scope_6042.start_list(true, Some("Filter"));
        for item_6044 in var_6043 {
            #[allow(unused_mut)]
            let mut entry_6046 = list_6045.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_6046, item_6044)?;
        }
        list_6045.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6047 = writer.prefix("MaxResults");
    if let Some(var_6048) = &input.max_results {
        scope_6047.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_6048).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_6049 = writer.prefix("DryRun");
    if let Some(var_6050) = &input.dry_run {
        scope_6049.boolean(*var_6050);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_send_diagnostic_interrupt(
    input: &crate::input::SendDiagnosticInterruptInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "SendDiagnosticInterrupt", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6051 = writer.prefix("InstanceId");
    if let Some(var_6052) = &input.instance_id {
        scope_6051.string(var_6052);
    }
    #[allow(unused_mut)]
    let mut scope_6053 = writer.prefix("DryRun");
    if let Some(var_6054) = &input.dry_run {
        scope_6053.boolean(*var_6054);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_instances(
    input: &crate::input::StartInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StartInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6055 = writer.prefix("InstanceId");
    if let Some(var_6056) = &input.instance_ids {
        let mut list_6058 = scope_6055.start_list(true, Some("InstanceId"));
        for item_6057 in var_6056 {
            #[allow(unused_mut)]
            let mut entry_6059 = list_6058.entry();
            entry_6059.string(item_6057);
        }
        list_6058.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6060 = writer.prefix("AdditionalInfo");
    if let Some(var_6061) = &input.additional_info {
        scope_6060.string(var_6061);
    }
    #[allow(unused_mut)]
    let mut scope_6062 = writer.prefix("DryRun");
    if let Some(var_6063) = &input.dry_run {
        scope_6062.boolean(*var_6063);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_network_insights_access_scope_analysis(
    input: &crate::input::StartNetworkInsightsAccessScopeAnalysisInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "StartNetworkInsightsAccessScopeAnalysis",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_6064 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_6065) = &input.network_insights_access_scope_id {
        scope_6064.string(var_6065);
    }
    #[allow(unused_mut)]
    let mut scope_6066 = writer.prefix("DryRun");
    if let Some(var_6067) = &input.dry_run {
        scope_6066.boolean(*var_6067);
    }
    #[allow(unused_mut)]
    let mut scope_6068 = writer.prefix("TagSpecification");
    if let Some(var_6069) = &input.tag_specifications {
        let mut list_6071 = scope_6068.start_list(true, Some("item"));
        for item_6070 in var_6069 {
            #[allow(unused_mut)]
            let mut entry_6072 = list_6071.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_6072, item_6070,
            )?;
        }
        list_6071.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6073 = writer.prefix("ClientToken");
    if let Some(var_6074) = &input.client_token {
        scope_6073.string(var_6074);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_network_insights_analysis(
    input: &crate::input::StartNetworkInsightsAnalysisInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "StartNetworkInsightsAnalysis", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6075 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_6076) = &input.network_insights_path_id {
        scope_6075.string(var_6076);
    }
    #[allow(unused_mut)]
    let mut scope_6077 = writer.prefix("FilterInArn");
    if let Some(var_6078) = &input.filter_in_arns {
        let mut list_6080 = scope_6077.start_list(true, Some("item"));
        for item_6079 in var_6078 {
            #[allow(unused_mut)]
            let mut entry_6081 = list_6080.entry();
            entry_6081.string(item_6079);
        }
        list_6080.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6082 = writer.prefix("DryRun");
    if let Some(var_6083) = &input.dry_run {
        scope_6082.boolean(*var_6083);
    }
    #[allow(unused_mut)]
    let mut scope_6084 = writer.prefix("TagSpecification");
    if let Some(var_6085) = &input.tag_specifications {
        let mut list_6087 = scope_6084.start_list(true, Some("item"));
        for item_6086 in var_6085 {
            #[allow(unused_mut)]
            let mut entry_6088 = list_6087.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_6088, item_6086,
            )?;
        }
        list_6087.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6089 = writer.prefix("ClientToken");
    if let Some(var_6090) = &input.client_token {
        scope_6089.string(var_6090);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_vpc_endpoint_service_private_dns_verification(
    input: &crate::input::StartVpcEndpointServicePrivateDnsVerificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "StartVpcEndpointServicePrivateDnsVerification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_6091 = writer.prefix("DryRun");
    if let Some(var_6092) = &input.dry_run {
        scope_6091.boolean(*var_6092);
    }
    #[allow(unused_mut)]
    let mut scope_6093 = writer.prefix("ServiceId");
    if let Some(var_6094) = &input.service_id {
        scope_6093.string(var_6094);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_stop_instances(
    input: &crate::input::StopInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StopInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6095 = writer.prefix("InstanceId");
    if let Some(var_6096) = &input.instance_ids {
        let mut list_6098 = scope_6095.start_list(true, Some("InstanceId"));
        for item_6097 in var_6096 {
            #[allow(unused_mut)]
            let mut entry_6099 = list_6098.entry();
            entry_6099.string(item_6097);
        }
        list_6098.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6100 = writer.prefix("Hibernate");
    if let Some(var_6101) = &input.hibernate {
        scope_6100.boolean(*var_6101);
    }
    #[allow(unused_mut)]
    let mut scope_6102 = writer.prefix("DryRun");
    if let Some(var_6103) = &input.dry_run {
        scope_6102.boolean(*var_6103);
    }
    #[allow(unused_mut)]
    let mut scope_6104 = writer.prefix("Force");
    if let Some(var_6105) = &input.force {
        scope_6104.boolean(*var_6105);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_terminate_client_vpn_connections(
    input: &crate::input::TerminateClientVpnConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "TerminateClientVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6106 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_6107) = &input.client_vpn_endpoint_id {
        scope_6106.string(var_6107);
    }
    #[allow(unused_mut)]
    let mut scope_6108 = writer.prefix("ConnectionId");
    if let Some(var_6109) = &input.connection_id {
        scope_6108.string(var_6109);
    }
    #[allow(unused_mut)]
    let mut scope_6110 = writer.prefix("Username");
    if let Some(var_6111) = &input.username {
        scope_6110.string(var_6111);
    }
    #[allow(unused_mut)]
    let mut scope_6112 = writer.prefix("DryRun");
    if let Some(var_6113) = &input.dry_run {
        scope_6112.boolean(*var_6113);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_terminate_instances(
    input: &crate::input::TerminateInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "TerminateInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6114 = writer.prefix("InstanceId");
    if let Some(var_6115) = &input.instance_ids {
        let mut list_6117 = scope_6114.start_list(true, Some("InstanceId"));
        for item_6116 in var_6115 {
            #[allow(unused_mut)]
            let mut entry_6118 = list_6117.entry();
            entry_6118.string(item_6116);
        }
        list_6117.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6119 = writer.prefix("DryRun");
    if let Some(var_6120) = &input.dry_run {
        scope_6119.boolean(*var_6120);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_unassign_ipv6_addresses(
    input: &crate::input::UnassignIpv6AddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UnassignIpv6Addresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6121 = writer.prefix("Ipv6Addresses");
    if let Some(var_6122) = &input.ipv6_addresses {
        let mut list_6124 = scope_6121.start_list(true, Some("item"));
        for item_6123 in var_6122 {
            #[allow(unused_mut)]
            let mut entry_6125 = list_6124.entry();
            entry_6125.string(item_6123);
        }
        list_6124.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6126 = writer.prefix("Ipv6Prefix");
    if let Some(var_6127) = &input.ipv6_prefixes {
        let mut list_6129 = scope_6126.start_list(true, Some("item"));
        for item_6128 in var_6127 {
            #[allow(unused_mut)]
            let mut entry_6130 = list_6129.entry();
            entry_6130.string(item_6128);
        }
        list_6129.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6131 = writer.prefix("NetworkInterfaceId");
    if let Some(var_6132) = &input.network_interface_id {
        scope_6131.string(var_6132);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_unassign_private_ip_addresses(
    input: &crate::input::UnassignPrivateIpAddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UnassignPrivateIpAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6133 = writer.prefix("NetworkInterfaceId");
    if let Some(var_6134) = &input.network_interface_id {
        scope_6133.string(var_6134);
    }
    #[allow(unused_mut)]
    let mut scope_6135 = writer.prefix("PrivateIpAddress");
    if let Some(var_6136) = &input.private_ip_addresses {
        let mut list_6138 = scope_6135.start_list(true, Some("PrivateIpAddress"));
        for item_6137 in var_6136 {
            #[allow(unused_mut)]
            let mut entry_6139 = list_6138.entry();
            entry_6139.string(item_6137);
        }
        list_6138.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6140 = writer.prefix("Ipv4Prefix");
    if let Some(var_6141) = &input.ipv4_prefixes {
        let mut list_6143 = scope_6140.start_list(true, Some("item"));
        for item_6142 in var_6141 {
            #[allow(unused_mut)]
            let mut entry_6144 = list_6143.entry();
            entry_6144.string(item_6142);
        }
        list_6143.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_unmonitor_instances(
    input: &crate::input::UnmonitorInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UnmonitorInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6145 = writer.prefix("InstanceId");
    if let Some(var_6146) = &input.instance_ids {
        let mut list_6148 = scope_6145.start_list(true, Some("InstanceId"));
        for item_6147 in var_6146 {
            #[allow(unused_mut)]
            let mut entry_6149 = list_6148.entry();
            entry_6149.string(item_6147);
        }
        list_6148.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6150 = writer.prefix("DryRun");
    if let Some(var_6151) = &input.dry_run {
        scope_6150.boolean(*var_6151);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_security_group_rule_descriptions_egress(
    input: &crate::input::UpdateSecurityGroupRuleDescriptionsEgressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "UpdateSecurityGroupRuleDescriptionsEgress",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_6152 = writer.prefix("DryRun");
    if let Some(var_6153) = &input.dry_run {
        scope_6152.boolean(*var_6153);
    }
    #[allow(unused_mut)]
    let mut scope_6154 = writer.prefix("GroupId");
    if let Some(var_6155) = &input.group_id {
        scope_6154.string(var_6155);
    }
    #[allow(unused_mut)]
    let mut scope_6156 = writer.prefix("GroupName");
    if let Some(var_6157) = &input.group_name {
        scope_6156.string(var_6157);
    }
    #[allow(unused_mut)]
    let mut scope_6158 = writer.prefix("IpPermissions");
    if let Some(var_6159) = &input.ip_permissions {
        let mut list_6161 = scope_6158.start_list(true, Some("item"));
        for item_6160 in var_6159 {
            #[allow(unused_mut)]
            let mut entry_6162 = list_6161.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_6162, item_6160)?;
        }
        list_6161.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6163 = writer.prefix("SecurityGroupRuleDescription");
    if let Some(var_6164) = &input.security_group_rule_descriptions {
        let mut list_6166 = scope_6163.start_list(true, Some("item"));
        for item_6165 in var_6164 {
            #[allow(unused_mut)]
            let mut entry_6167 = list_6166.entry();
            crate::query_ser::serialize_structure_crate_model_security_group_rule_description(
                entry_6167, item_6165,
            )?;
        }
        list_6166.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_security_group_rule_descriptions_ingress(
    input: &crate::input::UpdateSecurityGroupRuleDescriptionsIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "UpdateSecurityGroupRuleDescriptionsIngress",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_6168 = writer.prefix("DryRun");
    if let Some(var_6169) = &input.dry_run {
        scope_6168.boolean(*var_6169);
    }
    #[allow(unused_mut)]
    let mut scope_6170 = writer.prefix("GroupId");
    if let Some(var_6171) = &input.group_id {
        scope_6170.string(var_6171);
    }
    #[allow(unused_mut)]
    let mut scope_6172 = writer.prefix("GroupName");
    if let Some(var_6173) = &input.group_name {
        scope_6172.string(var_6173);
    }
    #[allow(unused_mut)]
    let mut scope_6174 = writer.prefix("IpPermissions");
    if let Some(var_6175) = &input.ip_permissions {
        let mut list_6177 = scope_6174.start_list(true, Some("item"));
        for item_6176 in var_6175 {
            #[allow(unused_mut)]
            let mut entry_6178 = list_6177.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_6178, item_6176)?;
        }
        list_6177.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6179 = writer.prefix("SecurityGroupRuleDescription");
    if let Some(var_6180) = &input.security_group_rule_descriptions {
        let mut list_6182 = scope_6179.start_list(true, Some("item"));
        for item_6181 in var_6180 {
            #[allow(unused_mut)]
            let mut entry_6183 = list_6182.entry();
            crate::query_ser::serialize_structure_crate_model_security_group_rule_description(
                entry_6183, item_6181,
            )?;
        }
        list_6182.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_withdraw_byoip_cidr(
    input: &crate::input::WithdrawByoipCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "WithdrawByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6184 = writer.prefix("Cidr");
    if let Some(var_6185) = &input.cidr {
        scope_6184.string(var_6185);
    }
    #[allow(unused_mut)]
    let mut scope_6186 = writer.prefix("DryRun");
    if let Some(var_6187) = &input.dry_run {
        scope_6186.boolean(*var_6187);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
