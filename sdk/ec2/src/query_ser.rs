// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn serialize_structure_crate_model_target_configuration_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TargetConfigurationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("InstanceCount");
    if let Some(var_2) = &input.instance_count {
        scope_1.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("OfferingId");
    if let Some(var_4) = &input.offering_id {
        scope_3.string(var_4);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_tag_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TagSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("ResourceType");
    if let Some(var_6) = &input.resource_type {
        scope_5.string(var_6.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("Tag");
    if let Some(var_8) = &input.tags {
        let mut list_10 = scope_7.start_list(true, Some("item"));
        for item_9 in var_8 {
            #[allow(unused_mut)]
            let mut entry_11 = list_10.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_11, item_9)?;
        }
        list_10.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_iam_instance_profile_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::IamInstanceProfileSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_12 = writer.prefix("Arn");
    if let Some(var_13) = &input.arn {
        scope_12.string(var_13);
    }
    #[allow(unused_mut)]
    let mut scope_14 = writer.prefix("Name");
    if let Some(var_15) = &input.name {
        scope_14.string(var_15);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_event_window_association_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceEventWindowAssociationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_16 = writer.prefix("InstanceId");
    if let Some(var_17) = &input.instance_ids {
        let mut list_19 = scope_16.start_list(true, Some("item"));
        for item_18 in var_17 {
            #[allow(unused_mut)]
            let mut entry_20 = list_19.entry();
            entry_20.string(item_18);
        }
        list_19.finish();
    }
    #[allow(unused_mut)]
    let mut scope_21 = writer.prefix("InstanceTag");
    if let Some(var_22) = &input.instance_tags {
        let mut list_24 = scope_21.start_list(true, Some("item"));
        for item_23 in var_22 {
            #[allow(unused_mut)]
            let mut entry_25 = list_24.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_25, item_23)?;
        }
        list_24.finish();
    }
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("DedicatedHostId");
    if let Some(var_27) = &input.dedicated_host_ids {
        let mut list_29 = scope_26.start_list(true, Some("item"));
        for item_28 in var_27 {
            #[allow(unused_mut)]
            let mut entry_30 = list_29.entry();
            entry_30.string(item_28);
        }
        list_29.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ip_permission(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::IpPermission,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_31 = writer.prefix("FromPort");
    if let Some(var_32) = &input.from_port {
        scope_31.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_32).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_33 = writer.prefix("IpProtocol");
    if let Some(var_34) = &input.ip_protocol {
        scope_33.string(var_34);
    }
    #[allow(unused_mut)]
    let mut scope_35 = writer.prefix("IpRanges");
    if let Some(var_36) = &input.ip_ranges {
        let mut list_38 = scope_35.start_list(true, Some("item"));
        for item_37 in var_36 {
            #[allow(unused_mut)]
            let mut entry_39 = list_38.entry();
            crate::query_ser::serialize_structure_crate_model_ip_range(entry_39, item_37)?;
        }
        list_38.finish();
    }
    #[allow(unused_mut)]
    let mut scope_40 = writer.prefix("Ipv6Ranges");
    if let Some(var_41) = &input.ipv6_ranges {
        let mut list_43 = scope_40.start_list(true, Some("item"));
        for item_42 in var_41 {
            #[allow(unused_mut)]
            let mut entry_44 = list_43.entry();
            crate::query_ser::serialize_structure_crate_model_ipv6_range(entry_44, item_42)?;
        }
        list_43.finish();
    }
    #[allow(unused_mut)]
    let mut scope_45 = writer.prefix("PrefixListIds");
    if let Some(var_46) = &input.prefix_list_ids {
        let mut list_48 = scope_45.start_list(true, Some("item"));
        for item_47 in var_46 {
            #[allow(unused_mut)]
            let mut entry_49 = list_48.entry();
            crate::query_ser::serialize_structure_crate_model_prefix_list_id(entry_49, item_47)?;
        }
        list_48.finish();
    }
    #[allow(unused_mut)]
    let mut scope_50 = writer.prefix("ToPort");
    if let Some(var_51) = &input.to_port {
        scope_50.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_51).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_52 = writer.prefix("Groups");
    if let Some(var_53) = &input.user_id_group_pairs {
        let mut list_55 = scope_52.start_list(true, Some("item"));
        for item_54 in var_53 {
            #[allow(unused_mut)]
            let mut entry_56 = list_55.entry();
            crate::query_ser::serialize_structure_crate_model_user_id_group_pair(
                entry_56, item_54,
            )?;
        }
        list_55.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_storage(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Storage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_57 = writer.prefix("S3");
    if let Some(var_58) = &input.s3 {
        crate::query_ser::serialize_structure_crate_model_s3_storage(scope_57, var_58)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_reservation_fleet_instance_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ReservationFleetInstanceSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_59 = writer.prefix("InstanceType");
    if let Some(var_60) = &input.instance_type {
        scope_59.string(var_60.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_61 = writer.prefix("InstancePlatform");
    if let Some(var_62) = &input.instance_platform {
        scope_61.string(var_62.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_63 = writer.prefix("Weight");
    if let Some(var_64) = &input.weight {
        scope_63.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_64).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_65 = writer.prefix("AvailabilityZone");
    if let Some(var_66) = &input.availability_zone {
        scope_65.string(var_66);
    }
    #[allow(unused_mut)]
    let mut scope_67 = writer.prefix("AvailabilityZoneId");
    if let Some(var_68) = &input.availability_zone_id {
        scope_67.string(var_68);
    }
    #[allow(unused_mut)]
    let mut scope_69 = writer.prefix("EbsOptimized");
    if let Some(var_70) = &input.ebs_optimized {
        scope_69.boolean(*var_70);
    }
    #[allow(unused_mut)]
    let mut scope_71 = writer.prefix("Priority");
    if let Some(var_72) = &input.priority {
        scope_71.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_72).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_client_vpn_authentication_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ClientVpnAuthenticationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_73 = writer.prefix("Type");
    if let Some(var_74) = &input.r#type {
        scope_73.string(var_74.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_75 = writer.prefix("ActiveDirectory");
    if let Some(var_76) = &input.active_directory {
        crate::query_ser::serialize_structure_crate_model_directory_service_authentication_request(
            scope_75, var_76,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_77 = writer.prefix("MutualAuthentication");
    if let Some(var_78) = &input.mutual_authentication {
        crate::query_ser::serialize_structure_crate_model_certificate_authentication_request(
            scope_77, var_78,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_79 = writer.prefix("FederatedAuthentication");
    if let Some(var_80) = &input.federated_authentication {
        crate::query_ser::serialize_structure_crate_model_federated_authentication_request(
            scope_79, var_80,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_connection_log_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ConnectionLogOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_81 = writer.prefix("Enabled");
    if let Some(var_82) = &input.enabled {
        scope_81.boolean(*var_82);
    }
    #[allow(unused_mut)]
    let mut scope_83 = writer.prefix("CloudwatchLogGroup");
    if let Some(var_84) = &input.cloudwatch_log_group {
        scope_83.string(var_84);
    }
    #[allow(unused_mut)]
    let mut scope_85 = writer.prefix("CloudwatchLogStream");
    if let Some(var_86) = &input.cloudwatch_log_stream {
        scope_85.string(var_86);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_client_connect_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ClientConnectOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_87 = writer.prefix("Enabled");
    if let Some(var_88) = &input.enabled {
        scope_87.boolean(*var_88);
    }
    #[allow(unused_mut)]
    let mut scope_89 = writer.prefix("LambdaFunctionArn");
    if let Some(var_90) = &input.lambda_function_arn {
        scope_89.string(var_90);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_client_login_banner_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ClientLoginBannerOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_91 = writer.prefix("Enabled");
    if let Some(var_92) = &input.enabled {
        scope_91.boolean(*var_92);
    }
    #[allow(unused_mut)]
    let mut scope_93 = writer.prefix("BannerText");
    if let Some(var_94) = &input.banner_text {
        scope_93.string(var_94);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_new_dhcp_configuration(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::NewDhcpConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_95 = writer.prefix("Key");
    if let Some(var_96) = &input.key {
        scope_95.string(var_96);
    }
    #[allow(unused_mut)]
    let mut scope_97 = writer.prefix("Value");
    if let Some(var_98) = &input.values {
        let mut list_100 = scope_97.start_list(true, Some("item"));
        for item_99 in var_98 {
            #[allow(unused_mut)]
            let mut entry_101 = list_100.entry();
            entry_101.string(item_99);
        }
        list_100.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_102 = writer.prefix("AllocationStrategy");
    if let Some(var_103) = &input.allocation_strategy {
        scope_102.string(var_103.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_104 = writer.prefix("MaintenanceStrategies");
    if let Some(var_105) = &input.maintenance_strategies {
        crate::query_ser::serialize_structure_crate_model_fleet_spot_maintenance_strategies_request(scope_104, var_105)?;
    }
    #[allow(unused_mut)]
    let mut scope_106 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_107) = &input.instance_interruption_behavior {
        scope_106.string(var_107.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_108 = writer.prefix("InstancePoolsToUseCount");
    if let Some(var_109) = &input.instance_pools_to_use_count {
        scope_108.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_109).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_110 = writer.prefix("SingleInstanceType");
    if let Some(var_111) = &input.single_instance_type {
        scope_110.boolean(*var_111);
    }
    #[allow(unused_mut)]
    let mut scope_112 = writer.prefix("SingleAvailabilityZone");
    if let Some(var_113) = &input.single_availability_zone {
        scope_112.boolean(*var_113);
    }
    #[allow(unused_mut)]
    let mut scope_114 = writer.prefix("MinTargetCapacity");
    if let Some(var_115) = &input.min_target_capacity {
        scope_114.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_115).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_116 = writer.prefix("MaxTotalPrice");
    if let Some(var_117) = &input.max_total_price {
        scope_116.string(var_117);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_on_demand_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::OnDemandOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_118 = writer.prefix("AllocationStrategy");
    if let Some(var_119) = &input.allocation_strategy {
        scope_118.string(var_119.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_120 = writer.prefix("CapacityReservationOptions");
    if let Some(var_121) = &input.capacity_reservation_options {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_options_request(
            scope_120, var_121,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_122 = writer.prefix("SingleInstanceType");
    if let Some(var_123) = &input.single_instance_type {
        scope_122.boolean(*var_123);
    }
    #[allow(unused_mut)]
    let mut scope_124 = writer.prefix("SingleAvailabilityZone");
    if let Some(var_125) = &input.single_availability_zone {
        scope_124.boolean(*var_125);
    }
    #[allow(unused_mut)]
    let mut scope_126 = writer.prefix("MinTargetCapacity");
    if let Some(var_127) = &input.min_target_capacity {
        scope_126.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_127).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_128 = writer.prefix("MaxTotalPrice");
    if let Some(var_129) = &input.max_total_price {
        scope_128.string(var_129);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_launch_template_config_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FleetLaunchTemplateConfigRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_130 = writer.prefix("LaunchTemplateSpecification");
    if let Some(var_131) = &input.launch_template_specification {
        crate::query_ser::serialize_structure_crate_model_fleet_launch_template_specification_request(scope_130, var_131)?;
    }
    #[allow(unused_mut)]
    let mut scope_132 = writer.prefix("Overrides");
    if let Some(var_133) = &input.overrides {
        let mut list_135 = scope_132.start_list(true, Some("item"));
        for item_134 in var_133 {
            #[allow(unused_mut)]
            let mut entry_136 = list_135.entry();
            crate::query_ser::serialize_structure_crate_model_fleet_launch_template_overrides_request(entry_136, item_134)?;
        }
        list_135.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_target_capacity_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TargetCapacitySpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_137 = writer.prefix("TotalTargetCapacity");
    if let Some(var_138) = &input.total_target_capacity {
        scope_137.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_138).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_139 = writer.prefix("OnDemandTargetCapacity");
    if let Some(var_140) = &input.on_demand_target_capacity {
        scope_139.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_140).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_141 = writer.prefix("SpotTargetCapacity");
    if let Some(var_142) = &input.spot_target_capacity {
        scope_141.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_142).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_143 = writer.prefix("DefaultTargetCapacityType");
    if let Some(var_144) = &input.default_target_capacity_type {
        scope_143.string(var_144.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_145 = writer.prefix("TargetCapacityUnitType");
    if let Some(var_146) = &input.target_capacity_unit_type {
        scope_145.string(var_146.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_destination_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::DestinationOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_147 = writer.prefix("FileFormat");
    if let Some(var_148) = &input.file_format {
        scope_147.string(var_148.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_149 = writer.prefix("HiveCompatiblePartitions");
    if let Some(var_150) = &input.hive_compatible_partitions {
        scope_149.boolean(*var_150);
    }
    #[allow(unused_mut)]
    let mut scope_151 = writer.prefix("PerHourPartition");
    if let Some(var_152) = &input.per_hour_partition {
        scope_151.boolean(*var_152);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_storage_location(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::StorageLocation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_153 = writer.prefix("Bucket");
    if let Some(var_154) = &input.bucket {
        scope_153.string(var_154);
    }
    #[allow(unused_mut)]
    let mut scope_155 = writer.prefix("Key");
    if let Some(var_156) = &input.key {
        scope_155.string(var_156);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_block_device_mapping(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::BlockDeviceMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_157 = writer.prefix("DeviceName");
    if let Some(var_158) = &input.device_name {
        scope_157.string(var_158);
    }
    #[allow(unused_mut)]
    let mut scope_159 = writer.prefix("VirtualName");
    if let Some(var_160) = &input.virtual_name {
        scope_159.string(var_160);
    }
    #[allow(unused_mut)]
    let mut scope_161 = writer.prefix("Ebs");
    if let Some(var_162) = &input.ebs {
        crate::query_ser::serialize_structure_crate_model_ebs_block_device(scope_161, var_162)?;
    }
    #[allow(unused_mut)]
    let mut scope_163 = writer.prefix("NoDevice");
    if let Some(var_164) = &input.no_device {
        scope_163.string(var_164);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_event_window_time_range_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceEventWindowTimeRangeRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_165 = writer.prefix("StartWeekDay");
    if let Some(var_166) = &input.start_week_day {
        scope_165.string(var_166.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_167 = writer.prefix("StartHour");
    if let Some(var_168) = &input.start_hour {
        scope_167.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_168).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_169 = writer.prefix("EndWeekDay");
    if let Some(var_170) = &input.end_week_day {
        scope_169.string(var_170.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_171 = writer.prefix("EndHour");
    if let Some(var_172) = &input.end_hour {
        scope_171.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_172).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_export_to_s3_task_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ExportToS3TaskSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_173 = writer.prefix("ContainerFormat");
    if let Some(var_174) = &input.container_format {
        scope_173.string(var_174.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_175 = writer.prefix("DiskImageFormat");
    if let Some(var_176) = &input.disk_image_format {
        scope_175.string(var_176.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_177 = writer.prefix("S3Bucket");
    if let Some(var_178) = &input.s3_bucket {
        scope_177.string(var_178);
    }
    #[allow(unused_mut)]
    let mut scope_179 = writer.prefix("S3Prefix");
    if let Some(var_180) = &input.s3_prefix {
        scope_179.string(var_180);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_add_ipam_operating_region(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AddIpamOperatingRegion,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_181 = writer.prefix("RegionName");
    if let Some(var_182) = &input.region_name {
        scope_181.string(var_182);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_request_ipam_resource_tag(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::RequestIpamResourceTag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_183 = writer.prefix("Key");
    if let Some(var_184) = &input.key {
        scope_183.string(var_184);
    }
    #[allow(unused_mut)]
    let mut scope_185 = writer.prefix("Value");
    if let Some(var_186) = &input.value {
        scope_185.string(var_186);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_request_launch_template_data(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::RequestLaunchTemplateData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_187 = writer.prefix("KernelId");
    if let Some(var_188) = &input.kernel_id {
        scope_187.string(var_188);
    }
    #[allow(unused_mut)]
    let mut scope_189 = writer.prefix("EbsOptimized");
    if let Some(var_190) = &input.ebs_optimized {
        scope_189.boolean(*var_190);
    }
    #[allow(unused_mut)]
    let mut scope_191 = writer.prefix("IamInstanceProfile");
    if let Some(var_192) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_launch_template_iam_instance_profile_specification_request(scope_191, var_192)?;
    }
    #[allow(unused_mut)]
    let mut scope_193 = writer.prefix("BlockDeviceMapping");
    if let Some(var_194) = &input.block_device_mappings {
        let mut list_196 = scope_193.start_list(true, Some("BlockDeviceMapping"));
        for item_195 in var_194 {
            #[allow(unused_mut)]
            let mut entry_197 = list_196.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_block_device_mapping_request(entry_197, item_195)?;
        }
        list_196.finish();
    }
    #[allow(unused_mut)]
    let mut scope_198 = writer.prefix("NetworkInterface");
    if let Some(var_199) = &input.network_interfaces {
        let mut list_201 =
            scope_198.start_list(true, Some("InstanceNetworkInterfaceSpecification"));
        for item_200 in var_199 {
            #[allow(unused_mut)]
            let mut entry_202 = list_201.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_instance_network_interface_specification_request(entry_202, item_200)?;
        }
        list_201.finish();
    }
    #[allow(unused_mut)]
    let mut scope_203 = writer.prefix("ImageId");
    if let Some(var_204) = &input.image_id {
        scope_203.string(var_204);
    }
    #[allow(unused_mut)]
    let mut scope_205 = writer.prefix("InstanceType");
    if let Some(var_206) = &input.instance_type {
        scope_205.string(var_206.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_207 = writer.prefix("KeyName");
    if let Some(var_208) = &input.key_name {
        scope_207.string(var_208);
    }
    #[allow(unused_mut)]
    let mut scope_209 = writer.prefix("Monitoring");
    if let Some(var_210) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_launch_templates_monitoring_request(
            scope_209, var_210,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_211 = writer.prefix("Placement");
    if let Some(var_212) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_launch_template_placement_request(
            scope_211, var_212,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_213 = writer.prefix("RamDiskId");
    if let Some(var_214) = &input.ram_disk_id {
        scope_213.string(var_214);
    }
    #[allow(unused_mut)]
    let mut scope_215 = writer.prefix("DisableApiTermination");
    if let Some(var_216) = &input.disable_api_termination {
        scope_215.boolean(*var_216);
    }
    #[allow(unused_mut)]
    let mut scope_217 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_218) = &input.instance_initiated_shutdown_behavior {
        scope_217.string(var_218.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_219 = writer.prefix("UserData");
    if let Some(var_220) = &input.user_data {
        scope_219.string(var_220);
    }
    #[allow(unused_mut)]
    let mut scope_221 = writer.prefix("TagSpecification");
    if let Some(var_222) = &input.tag_specifications {
        let mut list_224 =
            scope_221.start_list(true, Some("LaunchTemplateTagSpecificationRequest"));
        for item_223 in var_222 {
            #[allow(unused_mut)]
            let mut entry_225 = list_224.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_tag_specification_request(entry_225, item_223)?;
        }
        list_224.finish();
    }
    #[allow(unused_mut)]
    let mut scope_226 = writer.prefix("ElasticGpuSpecification");
    if let Some(var_227) = &input.elastic_gpu_specifications {
        let mut list_229 = scope_226.start_list(true, Some("ElasticGpuSpecification"));
        for item_228 in var_227 {
            #[allow(unused_mut)]
            let mut entry_230 = list_229.entry();
            crate::query_ser::serialize_structure_crate_model_elastic_gpu_specification(
                entry_230, item_228,
            )?;
        }
        list_229.finish();
    }
    #[allow(unused_mut)]
    let mut scope_231 = writer.prefix("ElasticInferenceAccelerator");
    if let Some(var_232) = &input.elastic_inference_accelerators {
        let mut list_234 = scope_231.start_list(true, Some("item"));
        for item_233 in var_232 {
            #[allow(unused_mut)]
            let mut entry_235 = list_234.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_elastic_inference_accelerator(entry_235, item_233)?;
        }
        list_234.finish();
    }
    #[allow(unused_mut)]
    let mut scope_236 = writer.prefix("SecurityGroupId");
    if let Some(var_237) = &input.security_group_ids {
        let mut list_239 = scope_236.start_list(true, Some("SecurityGroupId"));
        for item_238 in var_237 {
            #[allow(unused_mut)]
            let mut entry_240 = list_239.entry();
            entry_240.string(item_238);
        }
        list_239.finish();
    }
    #[allow(unused_mut)]
    let mut scope_241 = writer.prefix("SecurityGroup");
    if let Some(var_242) = &input.security_groups {
        let mut list_244 = scope_241.start_list(true, Some("SecurityGroup"));
        for item_243 in var_242 {
            #[allow(unused_mut)]
            let mut entry_245 = list_244.entry();
            entry_245.string(item_243);
        }
        list_244.finish();
    }
    #[allow(unused_mut)]
    let mut scope_246 = writer.prefix("InstanceMarketOptions");
    if let Some(var_247) = &input.instance_market_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_instance_market_options_request(scope_246, var_247)?;
    }
    #[allow(unused_mut)]
    let mut scope_248 = writer.prefix("CreditSpecification");
    if let Some(var_249) = &input.credit_specification {
        crate::query_ser::serialize_structure_crate_model_credit_specification_request(
            scope_248, var_249,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_250 = writer.prefix("CpuOptions");
    if let Some(var_251) = &input.cpu_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_cpu_options_request(
            scope_250, var_251,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_252 = writer.prefix("CapacityReservationSpecification");
    if let Some(var_253) = &input.capacity_reservation_specification {
        crate::query_ser::serialize_structure_crate_model_launch_template_capacity_reservation_specification_request(scope_252, var_253)?;
    }
    #[allow(unused_mut)]
    let mut scope_254 = writer.prefix("LicenseSpecification");
    if let Some(var_255) = &input.license_specifications {
        let mut list_257 = scope_254.start_list(true, Some("item"));
        for item_256 in var_255 {
            #[allow(unused_mut)]
            let mut entry_258 = list_257.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_license_configuration_request(entry_258, item_256)?;
        }
        list_257.finish();
    }
    #[allow(unused_mut)]
    let mut scope_259 = writer.prefix("HibernationOptions");
    if let Some(var_260) = &input.hibernation_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_hibernation_options_request(scope_259, var_260)?;
    }
    #[allow(unused_mut)]
    let mut scope_261 = writer.prefix("MetadataOptions");
    if let Some(var_262) = &input.metadata_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_instance_metadata_options_request(scope_261, var_262)?;
    }
    #[allow(unused_mut)]
    let mut scope_263 = writer.prefix("EnclaveOptions");
    if let Some(var_264) = &input.enclave_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_enclave_options_request(
            scope_263, var_264,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_265 = writer.prefix("InstanceRequirements");
    if let Some(var_266) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_request(
            scope_265, var_266,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_267 = writer.prefix("PrivateDnsNameOptions");
    if let Some(var_268) = &input.private_dns_name_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_private_dns_name_options_request(scope_267, var_268)?;
    }
    #[allow(unused_mut)]
    let mut scope_269 = writer.prefix("MaintenanceOptions");
    if let Some(var_270) = &input.maintenance_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_instance_maintenance_options_request(scope_269, var_270)?;
    }
    #[allow(unused_mut)]
    let mut scope_271 = writer.prefix("DisableApiStop");
    if let Some(var_272) = &input.disable_api_stop {
        scope_271.boolean(*var_272);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_add_prefix_list_entry(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AddPrefixListEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_273 = writer.prefix("Cidr");
    if let Some(var_274) = &input.cidr {
        scope_273.string(var_274);
    }
    #[allow(unused_mut)]
    let mut scope_275 = writer.prefix("Description");
    if let Some(var_276) = &input.description {
        scope_275.string(var_276);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_icmp_type_code(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::IcmpTypeCode,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_277 = writer.prefix("Code");
    if let Some(var_278) = &input.code {
        scope_277.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_278).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_279 = writer.prefix("Type");
    if let Some(var_280) = &input.r#type {
        scope_279.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_280).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_port_range(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PortRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_281 = writer.prefix("From");
    if let Some(var_282) = &input.from {
        scope_281.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_282).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_283 = writer.prefix("To");
    if let Some(var_284) = &input.to {
        scope_283.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_284).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_access_scope_path_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AccessScopePathRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_285 = writer.prefix("Source");
    if let Some(var_286) = &input.source {
        crate::query_ser::serialize_structure_crate_model_path_statement_request(
            scope_285, var_286,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_287 = writer.prefix("Destination");
    if let Some(var_288) = &input.destination {
        crate::query_ser::serialize_structure_crate_model_path_statement_request(
            scope_287, var_288,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_289 = writer.prefix("ThroughResource");
    if let Some(var_290) = &input.through_resources {
        let mut list_292 = scope_289.start_list(true, Some("item"));
        for item_291 in var_290 {
            #[allow(unused_mut)]
            let mut entry_293 = list_292.entry();
            crate::query_ser::serialize_structure_crate_model_through_resources_statement_request(
                entry_293, item_291,
            )?;
        }
        list_292.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_ipv6_address(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceIpv6Address,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_294 = writer.prefix("Ipv6Address");
    if let Some(var_295) = &input.ipv6_address {
        scope_294.string(var_295);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_private_ip_address_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PrivateIpAddressSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_296 = writer.prefix("Primary");
    if let Some(var_297) = &input.primary {
        scope_296.boolean(*var_297);
    }
    #[allow(unused_mut)]
    let mut scope_298 = writer.prefix("PrivateIpAddress");
    if let Some(var_299) = &input.private_ip_address {
        scope_298.string(var_299);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ipv4_prefix_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Ipv4PrefixSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_300 = writer.prefix("Ipv4Prefix");
    if let Some(var_301) = &input.ipv4_prefix {
        scope_300.string(var_301);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ipv6_prefix_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Ipv6PrefixSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_302 = writer.prefix("Ipv6Prefix");
    if let Some(var_303) = &input.ipv6_prefix {
        scope_302.string(var_303);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_price_schedule_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PriceScheduleSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_304 = writer.prefix("CurrencyCode");
    if let Some(var_305) = &input.currency_code {
        scope_304.string(var_305.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_306 = writer.prefix("Price");
    if let Some(var_307) = &input.price {
        scope_306.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_307).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_308 = writer.prefix("Term");
    if let Some(var_309) = &input.term {
        scope_308.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_309).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_310 = writer.prefix("InstanceId");
    if let Some(var_311) = &input.instance_id {
        scope_310.string(var_311);
    }
    #[allow(unused_mut)]
    let mut scope_312 = writer.prefix("ExcludeBootVolume");
    if let Some(var_313) = &input.exclude_boot_volume {
        scope_312.boolean(*var_313);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_s3_object_tag(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::S3ObjectTag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_314 = writer.prefix("Key");
    if let Some(var_315) = &input.key {
        scope_314.string(var_315);
    }
    #[allow(unused_mut)]
    let mut scope_316 = writer.prefix("Value");
    if let Some(var_317) = &input.value {
        scope_316.string(var_317);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_tag(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_318 = writer.prefix("Key");
    if let Some(var_319) = &input.key {
        scope_318.string(var_319);
    }
    #[allow(unused_mut)]
    let mut scope_320 = writer.prefix("Value");
    if let Some(var_321) = &input.value {
        scope_320.string(var_321);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_traffic_mirror_port_range_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TrafficMirrorPortRangeRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_322 = writer.prefix("FromPort");
    if let Some(var_323) = &input.from_port {
        scope_322.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_323).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_324 = writer.prefix("ToPort");
    if let Some(var_325) = &input.to_port {
        scope_324.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_325).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_transit_gateway_request_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TransitGatewayRequestOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_326 = writer.prefix("AmazonSideAsn");
    if let Some(var_327) = &input.amazon_side_asn {
        scope_326.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_327).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_328 = writer.prefix("AutoAcceptSharedAttachments");
    if let Some(var_329) = &input.auto_accept_shared_attachments {
        scope_328.string(var_329.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_330 = writer.prefix("DefaultRouteTableAssociation");
    if let Some(var_331) = &input.default_route_table_association {
        scope_330.string(var_331.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_332 = writer.prefix("DefaultRouteTablePropagation");
    if let Some(var_333) = &input.default_route_table_propagation {
        scope_332.string(var_333.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_334 = writer.prefix("VpnEcmpSupport");
    if let Some(var_335) = &input.vpn_ecmp_support {
        scope_334.string(var_335.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_336 = writer.prefix("DnsSupport");
    if let Some(var_337) = &input.dns_support {
        scope_336.string(var_337.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_338 = writer.prefix("MulticastSupport");
    if let Some(var_339) = &input.multicast_support {
        scope_338.string(var_339.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_340 = writer.prefix("TransitGatewayCidrBlocks");
    if let Some(var_341) = &input.transit_gateway_cidr_blocks {
        let mut list_343 = scope_340.start_list(true, Some("item"));
        for item_342 in var_341 {
            #[allow(unused_mut)]
            let mut entry_344 = list_343.entry();
            entry_344.string(item_342);
        }
        list_343.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_create_transit_gateway_connect_request_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CreateTransitGatewayConnectRequestOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_345 = writer.prefix("Protocol");
    if let Some(var_346) = &input.protocol {
        scope_345.string(var_346.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_transit_gateway_connect_request_bgp_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TransitGatewayConnectRequestBgpOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_347 = writer.prefix("PeerAsn");
    if let Some(var_348) = &input.peer_asn {
        scope_347.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_348).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_create_transit_gateway_multicast_domain_request_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CreateTransitGatewayMulticastDomainRequestOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_349 = writer.prefix("Igmpv2Support");
    if let Some(var_350) = &input.igmpv2_support {
        scope_349.string(var_350.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_351 = writer.prefix("StaticSourcesSupport");
    if let Some(var_352) = &input.static_sources_support {
        scope_351.string(var_352.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_353 = writer.prefix("AutoAcceptSharedAssociations");
    if let Some(var_354) = &input.auto_accept_shared_associations {
        scope_353.string(var_354.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_create_transit_gateway_vpc_attachment_request_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CreateTransitGatewayVpcAttachmentRequestOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_355 = writer.prefix("DnsSupport");
    if let Some(var_356) = &input.dns_support {
        scope_355.string(var_356.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_357 = writer.prefix("Ipv6Support");
    if let Some(var_358) = &input.ipv6_support {
        scope_357.string(var_358.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_359 = writer.prefix("ApplianceModeSupport");
    if let Some(var_360) = &input.appliance_mode_support {
        scope_359.string(var_360.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_dns_options_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::DnsOptionsSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_361 = writer.prefix("DnsRecordIpType");
    if let Some(var_362) = &input.dns_record_ip_type {
        scope_361.string(var_362.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_vpn_connection_options_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::VpnConnectionOptionsSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_363 = writer.prefix("EnableAcceleration");
    if let Some(var_364) = &input.enable_acceleration {
        scope_363.boolean(*var_364);
    }
    #[allow(unused_mut)]
    let mut scope_365 = writer.prefix("StaticRoutesOnly");
    if let Some(var_366) = &input.static_routes_only {
        scope_365.boolean(*var_366);
    }
    #[allow(unused_mut)]
    let mut scope_367 = writer.prefix("TunnelInsideIpVersion");
    if let Some(var_368) = &input.tunnel_inside_ip_version {
        scope_367.string(var_368.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_369 = writer.prefix("TunnelOptions");
    if let Some(var_370) = &input.tunnel_options {
        let mut list_372 = scope_369.start_list(true, None);
        for item_371 in var_370 {
            #[allow(unused_mut)]
            let mut entry_373 = list_372.entry();
            crate::query_ser::serialize_structure_crate_model_vpn_tunnel_options_specification(
                entry_373, item_371,
            )?;
        }
        list_372.finish();
    }
    #[allow(unused_mut)]
    let mut scope_374 = writer.prefix("LocalIpv4NetworkCidr");
    if let Some(var_375) = &input.local_ipv4_network_cidr {
        scope_374.string(var_375);
    }
    #[allow(unused_mut)]
    let mut scope_376 = writer.prefix("RemoteIpv4NetworkCidr");
    if let Some(var_377) = &input.remote_ipv4_network_cidr {
        scope_376.string(var_377);
    }
    #[allow(unused_mut)]
    let mut scope_378 = writer.prefix("LocalIpv6NetworkCidr");
    if let Some(var_379) = &input.local_ipv6_network_cidr {
        scope_378.string(var_379);
    }
    #[allow(unused_mut)]
    let mut scope_380 = writer.prefix("RemoteIpv6NetworkCidr");
    if let Some(var_381) = &input.remote_ipv6_network_cidr {
        scope_380.string(var_381);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_deregister_instance_tag_attribute_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::DeregisterInstanceTagAttributeRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_382 = writer.prefix("IncludeAllTagsOfInstance");
    if let Some(var_383) = &input.include_all_tags_of_instance {
        scope_382.boolean(*var_383);
    }
    #[allow(unused_mut)]
    let mut scope_384 = writer.prefix("InstanceTagKey");
    if let Some(var_385) = &input.instance_tag_keys {
        let mut list_387 = scope_384.start_list(true, Some("item"));
        for item_386 in var_385 {
            #[allow(unused_mut)]
            let mut entry_388 = list_387.entry();
            entry_388.string(item_386);
        }
        list_387.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_filter(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Filter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_389 = writer.prefix("Name");
    if let Some(var_390) = &input.name {
        scope_389.string(var_390);
    }
    #[allow(unused_mut)]
    let mut scope_391 = writer.prefix("Value");
    if let Some(var_392) = &input.values {
        let mut list_394 = scope_391.start_list(true, Some("item"));
        for item_393 in var_392 {
            #[allow(unused_mut)]
            let mut entry_395 = list_394.entry();
            entry_395.string(item_393);
        }
        list_394.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_slot_date_time_range_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SlotDateTimeRangeRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_396 = writer.prefix("EarliestTime");
    if let Some(var_397) = &input.earliest_time {
        scope_396.date_time(var_397, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_398 = writer.prefix("LatestTime");
    if let Some(var_399) = &input.latest_time {
        scope_398.date_time(var_399, aws_smithy_types::date_time::Format::DateTime)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instance_recurrence_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstanceRecurrenceRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_400 = writer.prefix("Frequency");
    if let Some(var_401) = &input.frequency {
        scope_400.string(var_401);
    }
    #[allow(unused_mut)]
    let mut scope_402 = writer.prefix("Interval");
    if let Some(var_403) = &input.interval {
        scope_402.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_403).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_404 = writer.prefix("OccurrenceDay");
    if let Some(var_405) = &input.occurrence_days {
        let mut list_407 = scope_404.start_list(true, Some("OccurenceDay"));
        for item_406 in var_405 {
            #[allow(unused_mut)]
            let mut entry_408 = list_407.entry();
            entry_408.number(
                #[allow(clippy::useless_conversion)]
                aws_smithy_types::Number::NegInt((*item_406).into()),
            );
        }
        list_407.finish();
    }
    #[allow(unused_mut)]
    let mut scope_409 = writer.prefix("OccurrenceRelativeToEnd");
    if let Some(var_410) = &input.occurrence_relative_to_end {
        scope_409.boolean(*var_410);
    }
    #[allow(unused_mut)]
    let mut scope_411 = writer.prefix("OccurrenceUnit");
    if let Some(var_412) = &input.occurrence_unit {
        scope_411.string(var_412);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_slot_start_time_range_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SlotStartTimeRangeRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_413 = writer.prefix("EarliestTime");
    if let Some(var_414) = &input.earliest_time {
        scope_413.date_time(var_414, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_415 = writer.prefix("LatestTime");
    if let Some(var_416) = &input.latest_time {
        scope_415.date_time(var_416, aws_smithy_types::date_time::Format::DateTime)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_event_window_disassociation_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceEventWindowDisassociationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_417 = writer.prefix("InstanceId");
    if let Some(var_418) = &input.instance_ids {
        let mut list_420 = scope_417.start_list(true, Some("item"));
        for item_419 in var_418 {
            #[allow(unused_mut)]
            let mut entry_421 = list_420.entry();
            entry_421.string(item_419);
        }
        list_420.finish();
    }
    #[allow(unused_mut)]
    let mut scope_422 = writer.prefix("InstanceTag");
    if let Some(var_423) = &input.instance_tags {
        let mut list_425 = scope_422.start_list(true, Some("item"));
        for item_424 in var_423 {
            #[allow(unused_mut)]
            let mut entry_426 = list_425.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_426, item_424)?;
        }
        list_425.finish();
    }
    #[allow(unused_mut)]
    let mut scope_427 = writer.prefix("DedicatedHostId");
    if let Some(var_428) = &input.dedicated_host_ids {
        let mut list_430 = scope_427.start_list(true, Some("item"));
        for item_429 in var_428 {
            #[allow(unused_mut)]
            let mut entry_431 = list_430.entry();
            entry_431.string(item_429);
        }
        list_430.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fast_launch_snapshot_configuration_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FastLaunchSnapshotConfigurationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_432 = writer.prefix("TargetResourceCount");
    if let Some(var_433) = &input.target_resource_count {
        scope_432.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_433).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fast_launch_launch_template_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FastLaunchLaunchTemplateSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_434 = writer.prefix("LaunchTemplateId");
    if let Some(var_435) = &input.launch_template_id {
        scope_434.string(var_435);
    }
    #[allow(unused_mut)]
    let mut scope_436 = writer.prefix("LaunchTemplateName");
    if let Some(var_437) = &input.launch_template_name {
        scope_436.string(var_437);
    }
    #[allow(unused_mut)]
    let mut scope_438 = writer.prefix("Version");
    if let Some(var_439) = &input.version {
        scope_438.string(var_439);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_export_task_s3_location_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ExportTaskS3LocationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_440 = writer.prefix("S3Bucket");
    if let Some(var_441) = &input.s3_bucket {
        scope_440.string(var_441);
    }
    #[allow(unused_mut)]
    let mut scope_442 = writer.prefix("S3Prefix");
    if let Some(var_443) = &input.s3_prefix {
        scope_442.string(var_443);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_integrate_services(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::IntegrateServices,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_444 = writer.prefix("AthenaIntegration");
    if let Some(var_445) = &input.athena_integrations {
        let mut list_447 = scope_444.start_list(true, Some("item"));
        for item_446 in var_445 {
            #[allow(unused_mut)]
            let mut entry_448 = list_447.entry();
            crate::query_ser::serialize_structure_crate_model_athena_integration(
                entry_448, item_446,
            )?;
        }
        list_447.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_requirements_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceRequirementsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_449 = writer.prefix("VCpuCount");
    if let Some(var_450) = &input.v_cpu_count {
        crate::query_ser::serialize_structure_crate_model_v_cpu_count_range_request(
            scope_449, var_450,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_451 = writer.prefix("MemoryMiB");
    if let Some(var_452) = &input.memory_mi_b {
        crate::query_ser::serialize_structure_crate_model_memory_mi_b_request(scope_451, var_452)?;
    }
    #[allow(unused_mut)]
    let mut scope_453 = writer.prefix("CpuManufacturer");
    if let Some(var_454) = &input.cpu_manufacturers {
        let mut list_456 = scope_453.start_list(true, Some("item"));
        for item_455 in var_454 {
            #[allow(unused_mut)]
            let mut entry_457 = list_456.entry();
            entry_457.string(item_455.as_str());
        }
        list_456.finish();
    }
    #[allow(unused_mut)]
    let mut scope_458 = writer.prefix("MemoryGiBPerVCpu");
    if let Some(var_459) = &input.memory_gi_b_per_v_cpu {
        crate::query_ser::serialize_structure_crate_model_memory_gi_b_per_v_cpu_request(
            scope_458, var_459,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_460 = writer.prefix("ExcludedInstanceType");
    if let Some(var_461) = &input.excluded_instance_types {
        let mut list_463 = scope_460.start_list(true, Some("item"));
        for item_462 in var_461 {
            #[allow(unused_mut)]
            let mut entry_464 = list_463.entry();
            entry_464.string(item_462);
        }
        list_463.finish();
    }
    #[allow(unused_mut)]
    let mut scope_465 = writer.prefix("InstanceGeneration");
    if let Some(var_466) = &input.instance_generations {
        let mut list_468 = scope_465.start_list(true, Some("item"));
        for item_467 in var_466 {
            #[allow(unused_mut)]
            let mut entry_469 = list_468.entry();
            entry_469.string(item_467.as_str());
        }
        list_468.finish();
    }
    #[allow(unused_mut)]
    let mut scope_470 = writer.prefix("SpotMaxPricePercentageOverLowestPrice");
    if let Some(var_471) = &input.spot_max_price_percentage_over_lowest_price {
        scope_470.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_471).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_472 = writer.prefix("OnDemandMaxPricePercentageOverLowestPrice");
    if let Some(var_473) = &input.on_demand_max_price_percentage_over_lowest_price {
        scope_472.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_473).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_474 = writer.prefix("BareMetal");
    if let Some(var_475) = &input.bare_metal {
        scope_474.string(var_475.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_476 = writer.prefix("BurstablePerformance");
    if let Some(var_477) = &input.burstable_performance {
        scope_476.string(var_477.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_478 = writer.prefix("RequireHibernateSupport");
    if let Some(var_479) = &input.require_hibernate_support {
        scope_478.boolean(*var_479);
    }
    #[allow(unused_mut)]
    let mut scope_480 = writer.prefix("NetworkInterfaceCount");
    if let Some(var_481) = &input.network_interface_count {
        crate::query_ser::serialize_structure_crate_model_network_interface_count_request(
            scope_480, var_481,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_482 = writer.prefix("LocalStorage");
    if let Some(var_483) = &input.local_storage {
        scope_482.string(var_483.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_484 = writer.prefix("LocalStorageType");
    if let Some(var_485) = &input.local_storage_types {
        let mut list_487 = scope_484.start_list(true, Some("item"));
        for item_486 in var_485 {
            #[allow(unused_mut)]
            let mut entry_488 = list_487.entry();
            entry_488.string(item_486.as_str());
        }
        list_487.finish();
    }
    #[allow(unused_mut)]
    let mut scope_489 = writer.prefix("TotalLocalStorageGB");
    if let Some(var_490) = &input.total_local_storage_gb {
        crate::query_ser::serialize_structure_crate_model_total_local_storage_gb_request(
            scope_489, var_490,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_491 = writer.prefix("BaselineEbsBandwidthMbps");
    if let Some(var_492) = &input.baseline_ebs_bandwidth_mbps {
        crate::query_ser::serialize_structure_crate_model_baseline_ebs_bandwidth_mbps_request(
            scope_491, var_492,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_493 = writer.prefix("AcceleratorType");
    if let Some(var_494) = &input.accelerator_types {
        let mut list_496 = scope_493.start_list(true, Some("item"));
        for item_495 in var_494 {
            #[allow(unused_mut)]
            let mut entry_497 = list_496.entry();
            entry_497.string(item_495.as_str());
        }
        list_496.finish();
    }
    #[allow(unused_mut)]
    let mut scope_498 = writer.prefix("AcceleratorCount");
    if let Some(var_499) = &input.accelerator_count {
        crate::query_ser::serialize_structure_crate_model_accelerator_count_request(
            scope_498, var_499,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_500 = writer.prefix("AcceleratorManufacturer");
    if let Some(var_501) = &input.accelerator_manufacturers {
        let mut list_503 = scope_500.start_list(true, Some("item"));
        for item_502 in var_501 {
            #[allow(unused_mut)]
            let mut entry_504 = list_503.entry();
            entry_504.string(item_502.as_str());
        }
        list_503.finish();
    }
    #[allow(unused_mut)]
    let mut scope_505 = writer.prefix("AcceleratorName");
    if let Some(var_506) = &input.accelerator_names {
        let mut list_508 = scope_505.start_list(true, Some("item"));
        for item_507 in var_506 {
            #[allow(unused_mut)]
            let mut entry_509 = list_508.entry();
            entry_509.string(item_507.as_str());
        }
        list_508.finish();
    }
    #[allow(unused_mut)]
    let mut scope_510 = writer.prefix("AcceleratorTotalMemoryMiB");
    if let Some(var_511) = &input.accelerator_total_memory_mi_b {
        crate::query_ser::serialize_structure_crate_model_accelerator_total_memory_mi_b_request(
            scope_510, var_511,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_requirements_with_metadata_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceRequirementsWithMetadataRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_512 = writer.prefix("ArchitectureType");
    if let Some(var_513) = &input.architecture_types {
        let mut list_515 = scope_512.start_list(true, Some("item"));
        for item_514 in var_513 {
            #[allow(unused_mut)]
            let mut entry_516 = list_515.entry();
            entry_516.string(item_514.as_str());
        }
        list_515.finish();
    }
    #[allow(unused_mut)]
    let mut scope_517 = writer.prefix("VirtualizationType");
    if let Some(var_518) = &input.virtualization_types {
        let mut list_520 = scope_517.start_list(true, Some("item"));
        for item_519 in var_518 {
            #[allow(unused_mut)]
            let mut entry_521 = list_520.entry();
            entry_521.string(item_519.as_str());
        }
        list_520.finish();
    }
    #[allow(unused_mut)]
    let mut scope_522 = writer.prefix("InstanceRequirements");
    if let Some(var_523) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_request(
            scope_522, var_523,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_client_data(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ClientData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_524 = writer.prefix("Comment");
    if let Some(var_525) = &input.comment {
        scope_524.string(var_525);
    }
    #[allow(unused_mut)]
    let mut scope_526 = writer.prefix("UploadEnd");
    if let Some(var_527) = &input.upload_end {
        scope_526.date_time(var_527, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_528 = writer.prefix("UploadSize");
    if let Some(var_529) = &input.upload_size {
        scope_528.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_529).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_530 = writer.prefix("UploadStart");
    if let Some(var_531) = &input.upload_start {
        scope_530.date_time(var_531, aws_smithy_types::date_time::Format::DateTime)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_image_disk_container(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ImageDiskContainer,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_532 = writer.prefix("Description");
    if let Some(var_533) = &input.description {
        scope_532.string(var_533);
    }
    #[allow(unused_mut)]
    let mut scope_534 = writer.prefix("DeviceName");
    if let Some(var_535) = &input.device_name {
        scope_534.string(var_535);
    }
    #[allow(unused_mut)]
    let mut scope_536 = writer.prefix("Format");
    if let Some(var_537) = &input.format {
        scope_536.string(var_537);
    }
    #[allow(unused_mut)]
    let mut scope_538 = writer.prefix("SnapshotId");
    if let Some(var_539) = &input.snapshot_id {
        scope_538.string(var_539);
    }
    #[allow(unused_mut)]
    let mut scope_540 = writer.prefix("Url");
    if let Some(var_541) = &input.url {
        scope_540.string(var_541);
    }
    #[allow(unused_mut)]
    let mut scope_542 = writer.prefix("UserBucket");
    if let Some(var_543) = &input.user_bucket {
        crate::query_ser::serialize_structure_crate_model_user_bucket(scope_542, var_543)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_import_image_license_configuration_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ImportImageLicenseConfigurationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_544 = writer.prefix("LicenseConfigurationArn");
    if let Some(var_545) = &input.license_configuration_arn {
        scope_544.string(var_545);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_disk_image(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::DiskImage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_546 = writer.prefix("Description");
    if let Some(var_547) = &input.description {
        scope_546.string(var_547);
    }
    #[allow(unused_mut)]
    let mut scope_548 = writer.prefix("Image");
    if let Some(var_549) = &input.image {
        crate::query_ser::serialize_structure_crate_model_disk_image_detail(scope_548, var_549)?;
    }
    #[allow(unused_mut)]
    let mut scope_550 = writer.prefix("Volume");
    if let Some(var_551) = &input.volume {
        crate::query_ser::serialize_structure_crate_model_volume_detail(scope_550, var_551)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_import_instance_launch_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ImportInstanceLaunchSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_552 = writer.prefix("AdditionalInfo");
    if let Some(var_553) = &input.additional_info {
        scope_552.string(var_553);
    }
    #[allow(unused_mut)]
    let mut scope_554 = writer.prefix("Architecture");
    if let Some(var_555) = &input.architecture {
        scope_554.string(var_555.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_556 = writer.prefix("GroupId");
    if let Some(var_557) = &input.group_ids {
        let mut list_559 = scope_556.start_list(true, Some("SecurityGroupId"));
        for item_558 in var_557 {
            #[allow(unused_mut)]
            let mut entry_560 = list_559.entry();
            entry_560.string(item_558);
        }
        list_559.finish();
    }
    #[allow(unused_mut)]
    let mut scope_561 = writer.prefix("GroupName");
    if let Some(var_562) = &input.group_names {
        let mut list_564 = scope_561.start_list(true, Some("SecurityGroup"));
        for item_563 in var_562 {
            #[allow(unused_mut)]
            let mut entry_565 = list_564.entry();
            entry_565.string(item_563);
        }
        list_564.finish();
    }
    #[allow(unused_mut)]
    let mut scope_566 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_567) = &input.instance_initiated_shutdown_behavior {
        scope_566.string(var_567.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_568 = writer.prefix("InstanceType");
    if let Some(var_569) = &input.instance_type {
        scope_568.string(var_569.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_570 = writer.prefix("Monitoring");
    if let Some(var_571) = &input.monitoring {
        scope_570.boolean(*var_571);
    }
    #[allow(unused_mut)]
    let mut scope_572 = writer.prefix("Placement");
    if let Some(var_573) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_placement(scope_572, var_573)?;
    }
    #[allow(unused_mut)]
    let mut scope_574 = writer.prefix("PrivateIpAddress");
    if let Some(var_575) = &input.private_ip_address {
        scope_574.string(var_575);
    }
    #[allow(unused_mut)]
    let mut scope_576 = writer.prefix("SubnetId");
    if let Some(var_577) = &input.subnet_id {
        scope_576.string(var_577);
    }
    #[allow(unused_mut)]
    let mut scope_578 = writer.prefix("UserData");
    if let Some(var_579) = &input.user_data {
        crate::query_ser::serialize_structure_crate_model_user_data(scope_578, var_579)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_snapshot_disk_container(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SnapshotDiskContainer,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_580 = writer.prefix("Description");
    if let Some(var_581) = &input.description {
        scope_580.string(var_581);
    }
    #[allow(unused_mut)]
    let mut scope_582 = writer.prefix("Format");
    if let Some(var_583) = &input.format {
        scope_582.string(var_583);
    }
    #[allow(unused_mut)]
    let mut scope_584 = writer.prefix("Url");
    if let Some(var_585) = &input.url {
        scope_584.string(var_585);
    }
    #[allow(unused_mut)]
    let mut scope_586 = writer.prefix("UserBucket");
    if let Some(var_587) = &input.user_bucket {
        crate::query_ser::serialize_structure_crate_model_user_bucket(scope_586, var_587)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_disk_image_detail(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::DiskImageDetail,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_588 = writer.prefix("Bytes");
    if let Some(var_589) = &input.bytes {
        scope_588.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_589).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_590 = writer.prefix("Format");
    if let Some(var_591) = &input.format {
        scope_590.string(var_591.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_592 = writer.prefix("ImportManifestUrl");
    if let Some(var_593) = &input.import_manifest_url {
        scope_592.string(var_593);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_volume_detail(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::VolumeDetail,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_594 = writer.prefix("Size");
    if let Some(var_595) = &input.size {
        scope_594.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_595).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_dns_servers_options_modify_structure(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::DnsServersOptionsModifyStructure,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_596 = writer.prefix("CustomDnsServers");
    if let Some(var_597) = &input.custom_dns_servers {
        let mut list_599 = scope_596.start_list(true, Some("item"));
        for item_598 in var_597 {
            #[allow(unused_mut)]
            let mut entry_600 = list_599.entry();
            entry_600.string(item_598);
        }
        list_599.finish();
    }
    #[allow(unused_mut)]
    let mut scope_601 = writer.prefix("Enabled");
    if let Some(var_602) = &input.enabled {
        scope_601.boolean(*var_602);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_load_permission_modifications(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LoadPermissionModifications,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_603 = writer.prefix("Add");
    if let Some(var_604) = &input.add {
        let mut list_606 = scope_603.start_list(true, Some("item"));
        for item_605 in var_604 {
            #[allow(unused_mut)]
            let mut entry_607 = list_606.entry();
            crate::query_ser::serialize_structure_crate_model_load_permission_request(
                entry_607, item_605,
            )?;
        }
        list_606.finish();
    }
    #[allow(unused_mut)]
    let mut scope_608 = writer.prefix("Remove");
    if let Some(var_609) = &input.remove {
        let mut list_611 = scope_608.start_list(true, Some("item"));
        for item_610 in var_609 {
            #[allow(unused_mut)]
            let mut entry_612 = list_611.entry();
            crate::query_ser::serialize_structure_crate_model_load_permission_request(
                entry_612, item_610,
            )?;
        }
        list_611.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_attribute_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AttributeValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_613 = writer.prefix("Value");
    if let Some(var_614) = &input.value {
        scope_613.string(var_614);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_permission_modifications(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchPermissionModifications,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_615 = writer.prefix("Add");
    if let Some(var_616) = &input.add {
        let mut list_618 = scope_615.start_list(true, Some("item"));
        for item_617 in var_616 {
            #[allow(unused_mut)]
            let mut entry_619 = list_618.entry();
            crate::query_ser::serialize_structure_crate_model_launch_permission(
                entry_619, item_617,
            )?;
        }
        list_618.finish();
    }
    #[allow(unused_mut)]
    let mut scope_620 = writer.prefix("Remove");
    if let Some(var_621) = &input.remove {
        let mut list_623 = scope_620.start_list(true, Some("item"));
        for item_622 in var_621 {
            #[allow(unused_mut)]
            let mut entry_624 = list_623.entry();
            crate::query_ser::serialize_structure_crate_model_launch_permission(
                entry_624, item_622,
            )?;
        }
        list_623.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_attribute_boolean_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AttributeBooleanValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_625 = writer.prefix("Value");
    if let Some(var_626) = &input.value {
        scope_625.boolean(*var_626);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_block_device_mapping_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceBlockDeviceMappingSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_627 = writer.prefix("DeviceName");
    if let Some(var_628) = &input.device_name {
        scope_627.string(var_628);
    }
    #[allow(unused_mut)]
    let mut scope_629 = writer.prefix("Ebs");
    if let Some(var_630) = &input.ebs {
        crate::query_ser::serialize_structure_crate_model_ebs_instance_block_device_specification(
            scope_629, var_630,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_631 = writer.prefix("NoDevice");
    if let Some(var_632) = &input.no_device {
        scope_631.string(var_632);
    }
    #[allow(unused_mut)]
    let mut scope_633 = writer.prefix("VirtualName");
    if let Some(var_634) = &input.virtual_name {
        scope_633.string(var_634);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_blob_attribute_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::BlobAttributeValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_635 = writer.prefix("Value");
    if let Some(var_636) = &input.value {
        scope_635.string(&aws_smithy_types::base64::encode(var_636));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_capacity_reservation_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CapacityReservationSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_637 = writer.prefix("CapacityReservationPreference");
    if let Some(var_638) = &input.capacity_reservation_preference {
        scope_637.string(var_638.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_639 = writer.prefix("CapacityReservationTarget");
    if let Some(var_640) = &input.capacity_reservation_target {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_target(
            scope_639, var_640,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_credit_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceCreditSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_641 = writer.prefix("InstanceId");
    if let Some(var_642) = &input.instance_id {
        scope_641.string(var_642);
    }
    #[allow(unused_mut)]
    let mut scope_643 = writer.prefix("CpuCredits");
    if let Some(var_644) = &input.cpu_credits {
        scope_643.string(var_644);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_remove_ipam_operating_region(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::RemoveIpamOperatingRegion,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_645 = writer.prefix("RegionName");
    if let Some(var_646) = &input.region_name {
        scope_645.string(var_646);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_remove_prefix_list_entry(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::RemovePrefixListEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_647 = writer.prefix("Cidr");
    if let Some(var_648) = &input.cidr {
        scope_647.string(var_648);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_network_interface_attachment_changes(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::NetworkInterfaceAttachmentChanges,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_649 = writer.prefix("AttachmentId");
    if let Some(var_650) = &input.attachment_id {
        scope_649.string(var_650);
    }
    #[allow(unused_mut)]
    let mut scope_651 = writer.prefix("DeleteOnTermination");
    if let Some(var_652) = &input.delete_on_termination {
        scope_651.boolean(*var_652);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_reserved_instances_configuration(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ReservedInstancesConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_653 = writer.prefix("AvailabilityZone");
    if let Some(var_654) = &input.availability_zone {
        scope_653.string(var_654);
    }
    #[allow(unused_mut)]
    let mut scope_655 = writer.prefix("InstanceCount");
    if let Some(var_656) = &input.instance_count {
        scope_655.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_656).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_657 = writer.prefix("InstanceType");
    if let Some(var_658) = &input.instance_type {
        scope_657.string(var_658.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_659 = writer.prefix("Platform");
    if let Some(var_660) = &input.platform {
        scope_659.string(var_660);
    }
    #[allow(unused_mut)]
    let mut scope_661 = writer.prefix("Scope");
    if let Some(var_662) = &input.scope {
        scope_661.string(var_662.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_security_group_rule_update(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SecurityGroupRuleUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_663 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_664) = &input.security_group_rule_id {
        scope_663.string(var_664);
    }
    #[allow(unused_mut)]
    let mut scope_665 = writer.prefix("SecurityGroupRule");
    if let Some(var_666) = &input.security_group_rule {
        crate::query_ser::serialize_structure_crate_model_security_group_rule_request(
            scope_665, var_666,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_create_volume_permission_modifications(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CreateVolumePermissionModifications,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_667 = writer.prefix("Add");
    if let Some(var_668) = &input.add {
        let mut list_670 = scope_667.start_list(true, Some("item"));
        for item_669 in var_668 {
            #[allow(unused_mut)]
            let mut entry_671 = list_670.entry();
            crate::query_ser::serialize_structure_crate_model_create_volume_permission(
                entry_671, item_669,
            )?;
        }
        list_670.finish();
    }
    #[allow(unused_mut)]
    let mut scope_672 = writer.prefix("Remove");
    if let Some(var_673) = &input.remove {
        let mut list_675 = scope_672.start_list(true, Some("item"));
        for item_674 in var_673 {
            #[allow(unused_mut)]
            let mut entry_676 = list_675.entry();
            crate::query_ser::serialize_structure_crate_model_create_volume_permission(
                entry_676, item_674,
            )?;
        }
        list_675.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_config(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_677 = writer.prefix("LaunchTemplateSpecification");
    if let Some(var_678) = &input.launch_template_specification {
        crate::query_ser::serialize_structure_crate_model_fleet_launch_template_specification(
            scope_677, var_678,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_679 = writer.prefix("Overrides");
    if let Some(var_680) = &input.overrides {
        let mut list_682 = scope_679.start_list(true, Some("item"));
        for item_681 in var_680 {
            #[allow(unused_mut)]
            let mut entry_683 = list_682.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_overrides(
                entry_683, item_681,
            )?;
        }
        list_682.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_modify_transit_gateway_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ModifyTransitGatewayOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_684 = writer.prefix("AddTransitGatewayCidrBlocks");
    if let Some(var_685) = &input.add_transit_gateway_cidr_blocks {
        let mut list_687 = scope_684.start_list(true, Some("item"));
        for item_686 in var_685 {
            #[allow(unused_mut)]
            let mut entry_688 = list_687.entry();
            entry_688.string(item_686);
        }
        list_687.finish();
    }
    #[allow(unused_mut)]
    let mut scope_689 = writer.prefix("RemoveTransitGatewayCidrBlocks");
    if let Some(var_690) = &input.remove_transit_gateway_cidr_blocks {
        let mut list_692 = scope_689.start_list(true, Some("item"));
        for item_691 in var_690 {
            #[allow(unused_mut)]
            let mut entry_693 = list_692.entry();
            entry_693.string(item_691);
        }
        list_692.finish();
    }
    #[allow(unused_mut)]
    let mut scope_694 = writer.prefix("VpnEcmpSupport");
    if let Some(var_695) = &input.vpn_ecmp_support {
        scope_694.string(var_695.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_696 = writer.prefix("DnsSupport");
    if let Some(var_697) = &input.dns_support {
        scope_696.string(var_697.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_698 = writer.prefix("AutoAcceptSharedAttachments");
    if let Some(var_699) = &input.auto_accept_shared_attachments {
        scope_698.string(var_699.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_700 = writer.prefix("DefaultRouteTableAssociation");
    if let Some(var_701) = &input.default_route_table_association {
        scope_700.string(var_701.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_702 = writer.prefix("AssociationDefaultRouteTableId");
    if let Some(var_703) = &input.association_default_route_table_id {
        scope_702.string(var_703);
    }
    #[allow(unused_mut)]
    let mut scope_704 = writer.prefix("DefaultRouteTablePropagation");
    if let Some(var_705) = &input.default_route_table_propagation {
        scope_704.string(var_705.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_706 = writer.prefix("PropagationDefaultRouteTableId");
    if let Some(var_707) = &input.propagation_default_route_table_id {
        scope_706.string(var_707);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_modify_transit_gateway_vpc_attachment_request_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ModifyTransitGatewayVpcAttachmentRequestOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_708 = writer.prefix("DnsSupport");
    if let Some(var_709) = &input.dns_support {
        scope_708.string(var_709.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_710 = writer.prefix("Ipv6Support");
    if let Some(var_711) = &input.ipv6_support {
        scope_710.string(var_711.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_712 = writer.prefix("ApplianceModeSupport");
    if let Some(var_713) = &input.appliance_mode_support {
        scope_712.string(var_713.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_peering_connection_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PeeringConnectionOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_714 = writer.prefix("AllowDnsResolutionFromRemoteVpc");
    if let Some(var_715) = &input.allow_dns_resolution_from_remote_vpc {
        scope_714.boolean(*var_715);
    }
    #[allow(unused_mut)]
    let mut scope_716 = writer.prefix("AllowEgressFromLocalClassicLinkToRemoteVpc");
    if let Some(var_717) = &input.allow_egress_from_local_classic_link_to_remote_vpc {
        scope_716.boolean(*var_717);
    }
    #[allow(unused_mut)]
    let mut scope_718 = writer.prefix("AllowEgressFromLocalVpcToRemoteClassicLink");
    if let Some(var_719) = &input.allow_egress_from_local_vpc_to_remote_classic_link {
        scope_718.boolean(*var_719);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_modify_vpn_tunnel_options_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ModifyVpnTunnelOptionsSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_720 = writer.prefix("TunnelInsideCidr");
    if let Some(var_721) = &input.tunnel_inside_cidr {
        scope_720.string(var_721);
    }
    #[allow(unused_mut)]
    let mut scope_722 = writer.prefix("TunnelInsideIpv6Cidr");
    if let Some(var_723) = &input.tunnel_inside_ipv6_cidr {
        scope_722.string(var_723);
    }
    #[allow(unused_mut)]
    let mut scope_724 = writer.prefix("PreSharedKey");
    if let Some(var_725) = &input.pre_shared_key {
        scope_724.string(var_725);
    }
    #[allow(unused_mut)]
    let mut scope_726 = writer.prefix("Phase1LifetimeSeconds");
    if let Some(var_727) = &input.phase1_lifetime_seconds {
        scope_726.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_727).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_728 = writer.prefix("Phase2LifetimeSeconds");
    if let Some(var_729) = &input.phase2_lifetime_seconds {
        scope_728.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_729).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_730 = writer.prefix("RekeyMarginTimeSeconds");
    if let Some(var_731) = &input.rekey_margin_time_seconds {
        scope_730.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_731).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_732 = writer.prefix("RekeyFuzzPercentage");
    if let Some(var_733) = &input.rekey_fuzz_percentage {
        scope_732.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_733).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_734 = writer.prefix("ReplayWindowSize");
    if let Some(var_735) = &input.replay_window_size {
        scope_734.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_735).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_736 = writer.prefix("DPDTimeoutSeconds");
    if let Some(var_737) = &input.dpd_timeout_seconds {
        scope_736.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_737).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_738 = writer.prefix("DPDTimeoutAction");
    if let Some(var_739) = &input.dpd_timeout_action {
        scope_738.string(var_739);
    }
    #[allow(unused_mut)]
    let mut scope_740 = writer.prefix("Phase1EncryptionAlgorithm");
    if let Some(var_741) = &input.phase1_encryption_algorithms {
        let mut list_743 = scope_740.start_list(true, Some("item"));
        for item_742 in var_741 {
            #[allow(unused_mut)]
            let mut entry_744 = list_743.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_encryption_algorithms_request_list_value(entry_744, item_742)?;
        }
        list_743.finish();
    }
    #[allow(unused_mut)]
    let mut scope_745 = writer.prefix("Phase2EncryptionAlgorithm");
    if let Some(var_746) = &input.phase2_encryption_algorithms {
        let mut list_748 = scope_745.start_list(true, Some("item"));
        for item_747 in var_746 {
            #[allow(unused_mut)]
            let mut entry_749 = list_748.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_encryption_algorithms_request_list_value(entry_749, item_747)?;
        }
        list_748.finish();
    }
    #[allow(unused_mut)]
    let mut scope_750 = writer.prefix("Phase1IntegrityAlgorithm");
    if let Some(var_751) = &input.phase1_integrity_algorithms {
        let mut list_753 = scope_750.start_list(true, Some("item"));
        for item_752 in var_751 {
            #[allow(unused_mut)]
            let mut entry_754 = list_753.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_integrity_algorithms_request_list_value(entry_754, item_752)?;
        }
        list_753.finish();
    }
    #[allow(unused_mut)]
    let mut scope_755 = writer.prefix("Phase2IntegrityAlgorithm");
    if let Some(var_756) = &input.phase2_integrity_algorithms {
        let mut list_758 = scope_755.start_list(true, Some("item"));
        for item_757 in var_756 {
            #[allow(unused_mut)]
            let mut entry_759 = list_758.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_integrity_algorithms_request_list_value(entry_759, item_757)?;
        }
        list_758.finish();
    }
    #[allow(unused_mut)]
    let mut scope_760 = writer.prefix("Phase1DHGroupNumber");
    if let Some(var_761) = &input.phase1_dh_group_numbers {
        let mut list_763 = scope_760.start_list(true, Some("item"));
        for item_762 in var_761 {
            #[allow(unused_mut)]
            let mut entry_764 = list_763.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_dh_group_numbers_request_list_value(entry_764, item_762)?;
        }
        list_763.finish();
    }
    #[allow(unused_mut)]
    let mut scope_765 = writer.prefix("Phase2DHGroupNumber");
    if let Some(var_766) = &input.phase2_dh_group_numbers {
        let mut list_768 = scope_765.start_list(true, Some("item"));
        for item_767 in var_766 {
            #[allow(unused_mut)]
            let mut entry_769 = list_768.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_dh_group_numbers_request_list_value(entry_769, item_767)?;
        }
        list_768.finish();
    }
    #[allow(unused_mut)]
    let mut scope_770 = writer.prefix("IKEVersion");
    if let Some(var_771) = &input.ike_versions {
        let mut list_773 = scope_770.start_list(true, Some("item"));
        for item_772 in var_771 {
            #[allow(unused_mut)]
            let mut entry_774 = list_773.entry();
            crate::query_ser::serialize_structure_crate_model_ike_versions_request_list_value(
                entry_774, item_772,
            )?;
        }
        list_773.finish();
    }
    #[allow(unused_mut)]
    let mut scope_775 = writer.prefix("StartupAction");
    if let Some(var_776) = &input.startup_action {
        scope_775.string(var_776);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_cidr_authorization_context(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CidrAuthorizationContext,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_777 = writer.prefix("Message");
    if let Some(var_778) = &input.message {
        scope_777.string(var_778);
    }
    #[allow(unused_mut)]
    let mut scope_779 = writer.prefix("Signature");
    if let Some(var_780) = &input.signature {
        scope_779.string(var_780);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ipam_cidr_authorization_context(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::IpamCidrAuthorizationContext,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_781 = writer.prefix("Message");
    if let Some(var_782) = &input.message {
        scope_781.string(var_782);
    }
    #[allow(unused_mut)]
    let mut scope_783 = writer.prefix("Signature");
    if let Some(var_784) = &input.signature {
        scope_783.string(var_784);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_reserved_instance_limit_price(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ReservedInstanceLimitPrice,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_785 = writer.prefix("Amount");
    if let Some(var_786) = &input.amount {
        scope_785.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_786).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_787 = writer.prefix("CurrencyCode");
    if let Some(var_788) = &input.currency_code {
        scope_787.string(var_788.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_purchase_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PurchaseRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_789 = writer.prefix("InstanceCount");
    if let Some(var_790) = &input.instance_count {
        scope_789.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_790).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_791 = writer.prefix("PurchaseToken");
    if let Some(var_792) = &input.purchase_token {
        scope_791.string(var_792);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_register_instance_tag_attribute_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::RegisterInstanceTagAttributeRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_793 = writer.prefix("IncludeAllTagsOfInstance");
    if let Some(var_794) = &input.include_all_tags_of_instance {
        scope_793.boolean(*var_794);
    }
    #[allow(unused_mut)]
    let mut scope_795 = writer.prefix("InstanceTagKey");
    if let Some(var_796) = &input.instance_tag_keys {
        let mut list_798 = scope_795.start_list(true, Some("item"));
        for item_797 in var_796 {
            #[allow(unused_mut)]
            let mut entry_799 = list_798.entry();
            entry_799.string(item_797);
        }
        list_798.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_fleet_request_config_data(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotFleetRequestConfigData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_800 = writer.prefix("AllocationStrategy");
    if let Some(var_801) = &input.allocation_strategy {
        scope_800.string(var_801.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_802 = writer.prefix("OnDemandAllocationStrategy");
    if let Some(var_803) = &input.on_demand_allocation_strategy {
        scope_802.string(var_803.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_804 = writer.prefix("SpotMaintenanceStrategies");
    if let Some(var_805) = &input.spot_maintenance_strategies {
        crate::query_ser::serialize_structure_crate_model_spot_maintenance_strategies(
            scope_804, var_805,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_806 = writer.prefix("ClientToken");
    if let Some(var_807) = &input.client_token {
        scope_806.string(var_807);
    }
    #[allow(unused_mut)]
    let mut scope_808 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_809) = &input.excess_capacity_termination_policy {
        scope_808.string(var_809.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_810 = writer.prefix("FulfilledCapacity");
    if let Some(var_811) = &input.fulfilled_capacity {
        scope_810.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_811).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_812 = writer.prefix("OnDemandFulfilledCapacity");
    if let Some(var_813) = &input.on_demand_fulfilled_capacity {
        scope_812.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_813).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_814 = writer.prefix("IamFleetRole");
    if let Some(var_815) = &input.iam_fleet_role {
        scope_814.string(var_815);
    }
    #[allow(unused_mut)]
    let mut scope_816 = writer.prefix("LaunchSpecifications");
    if let Some(var_817) = &input.launch_specifications {
        let mut list_819 = scope_816.start_list(true, Some("item"));
        for item_818 in var_817 {
            #[allow(unused_mut)]
            let mut entry_820 = list_819.entry();
            crate::query_ser::serialize_structure_crate_model_spot_fleet_launch_specification(
                entry_820, item_818,
            )?;
        }
        list_819.finish();
    }
    #[allow(unused_mut)]
    let mut scope_821 = writer.prefix("LaunchTemplateConfigs");
    if let Some(var_822) = &input.launch_template_configs {
        let mut list_824 = scope_821.start_list(true, Some("item"));
        for item_823 in var_822 {
            #[allow(unused_mut)]
            let mut entry_825 = list_824.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_config(
                entry_825, item_823,
            )?;
        }
        list_824.finish();
    }
    #[allow(unused_mut)]
    let mut scope_826 = writer.prefix("SpotPrice");
    if let Some(var_827) = &input.spot_price {
        scope_826.string(var_827);
    }
    #[allow(unused_mut)]
    let mut scope_828 = writer.prefix("TargetCapacity");
    if let Some(var_829) = &input.target_capacity {
        scope_828.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_829).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_830 = writer.prefix("OnDemandTargetCapacity");
    if let Some(var_831) = &input.on_demand_target_capacity {
        scope_830.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_831).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_832 = writer.prefix("OnDemandMaxTotalPrice");
    if let Some(var_833) = &input.on_demand_max_total_price {
        scope_832.string(var_833);
    }
    #[allow(unused_mut)]
    let mut scope_834 = writer.prefix("SpotMaxTotalPrice");
    if let Some(var_835) = &input.spot_max_total_price {
        scope_834.string(var_835);
    }
    #[allow(unused_mut)]
    let mut scope_836 = writer.prefix("TerminateInstancesWithExpiration");
    if let Some(var_837) = &input.terminate_instances_with_expiration {
        scope_836.boolean(*var_837);
    }
    #[allow(unused_mut)]
    let mut scope_838 = writer.prefix("Type");
    if let Some(var_839) = &input.r#type {
        scope_838.string(var_839.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_840 = writer.prefix("ValidFrom");
    if let Some(var_841) = &input.valid_from {
        scope_840.date_time(var_841, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_842 = writer.prefix("ValidUntil");
    if let Some(var_843) = &input.valid_until {
        scope_842.date_time(var_843, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_844 = writer.prefix("ReplaceUnhealthyInstances");
    if let Some(var_845) = &input.replace_unhealthy_instances {
        scope_844.boolean(*var_845);
    }
    #[allow(unused_mut)]
    let mut scope_846 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_847) = &input.instance_interruption_behavior {
        scope_846.string(var_847.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_848 = writer.prefix("LoadBalancersConfig");
    if let Some(var_849) = &input.load_balancers_config {
        crate::query_ser::serialize_structure_crate_model_load_balancers_config(
            scope_848, var_849,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_850 = writer.prefix("InstancePoolsToUseCount");
    if let Some(var_851) = &input.instance_pools_to_use_count {
        scope_850.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_851).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_852 = writer.prefix("Context");
    if let Some(var_853) = &input.context {
        scope_852.string(var_853);
    }
    #[allow(unused_mut)]
    let mut scope_854 = writer.prefix("TargetCapacityUnitType");
    if let Some(var_855) = &input.target_capacity_unit_type {
        scope_854.string(var_855.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_856 = writer.prefix("TagSpecification");
    if let Some(var_857) = &input.tag_specifications {
        let mut list_859 = scope_856.start_list(true, Some("item"));
        for item_858 in var_857 {
            #[allow(unused_mut)]
            let mut entry_860 = list_859.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_860, item_858,
            )?;
        }
        list_859.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_request_spot_launch_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::RequestSpotLaunchSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_861 = writer.prefix("SecurityGroupId");
    if let Some(var_862) = &input.security_group_ids {
        let mut list_864 = scope_861.start_list(true, Some("item"));
        for item_863 in var_862 {
            #[allow(unused_mut)]
            let mut entry_865 = list_864.entry();
            entry_865.string(item_863);
        }
        list_864.finish();
    }
    #[allow(unused_mut)]
    let mut scope_866 = writer.prefix("SecurityGroup");
    if let Some(var_867) = &input.security_groups {
        let mut list_869 = scope_866.start_list(true, Some("item"));
        for item_868 in var_867 {
            #[allow(unused_mut)]
            let mut entry_870 = list_869.entry();
            entry_870.string(item_868);
        }
        list_869.finish();
    }
    #[allow(unused_mut)]
    let mut scope_871 = writer.prefix("AddressingType");
    if let Some(var_872) = &input.addressing_type {
        scope_871.string(var_872);
    }
    #[allow(unused_mut)]
    let mut scope_873 = writer.prefix("BlockDeviceMapping");
    if let Some(var_874) = &input.block_device_mappings {
        let mut list_876 = scope_873.start_list(true, Some("item"));
        for item_875 in var_874 {
            #[allow(unused_mut)]
            let mut entry_877 = list_876.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_877, item_875,
            )?;
        }
        list_876.finish();
    }
    #[allow(unused_mut)]
    let mut scope_878 = writer.prefix("EbsOptimized");
    if let Some(var_879) = &input.ebs_optimized {
        scope_878.boolean(*var_879);
    }
    #[allow(unused_mut)]
    let mut scope_880 = writer.prefix("IamInstanceProfile");
    if let Some(var_881) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_880, var_881,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_882 = writer.prefix("ImageId");
    if let Some(var_883) = &input.image_id {
        scope_882.string(var_883);
    }
    #[allow(unused_mut)]
    let mut scope_884 = writer.prefix("InstanceType");
    if let Some(var_885) = &input.instance_type {
        scope_884.string(var_885.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_886 = writer.prefix("KernelId");
    if let Some(var_887) = &input.kernel_id {
        scope_886.string(var_887);
    }
    #[allow(unused_mut)]
    let mut scope_888 = writer.prefix("KeyName");
    if let Some(var_889) = &input.key_name {
        scope_888.string(var_889);
    }
    #[allow(unused_mut)]
    let mut scope_890 = writer.prefix("Monitoring");
    if let Some(var_891) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_run_instances_monitoring_enabled(
            scope_890, var_891,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_892 = writer.prefix("NetworkInterface");
    if let Some(var_893) = &input.network_interfaces {
        let mut list_895 = scope_892.start_list(true, Some("item"));
        for item_894 in var_893 {
            #[allow(unused_mut)]
            let mut entry_896 = list_895.entry();
            crate::query_ser::serialize_structure_crate_model_instance_network_interface_specification(entry_896, item_894)?;
        }
        list_895.finish();
    }
    #[allow(unused_mut)]
    let mut scope_897 = writer.prefix("Placement");
    if let Some(var_898) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_spot_placement(scope_897, var_898)?;
    }
    #[allow(unused_mut)]
    let mut scope_899 = writer.prefix("RamdiskId");
    if let Some(var_900) = &input.ramdisk_id {
        scope_899.string(var_900);
    }
    #[allow(unused_mut)]
    let mut scope_901 = writer.prefix("SubnetId");
    if let Some(var_902) = &input.subnet_id {
        scope_901.string(var_902);
    }
    #[allow(unused_mut)]
    let mut scope_903 = writer.prefix("UserData");
    if let Some(var_904) = &input.user_data {
        scope_903.string(var_904);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_run_instances_monitoring_enabled(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::RunInstancesMonitoringEnabled,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_905 = writer.prefix("Enabled");
    if let Some(var_906) = &input.enabled {
        scope_905.boolean(*var_906);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_placement(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Placement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_907 = writer.prefix("AvailabilityZone");
    if let Some(var_908) = &input.availability_zone {
        scope_907.string(var_908);
    }
    #[allow(unused_mut)]
    let mut scope_909 = writer.prefix("Affinity");
    if let Some(var_910) = &input.affinity {
        scope_909.string(var_910);
    }
    #[allow(unused_mut)]
    let mut scope_911 = writer.prefix("GroupName");
    if let Some(var_912) = &input.group_name {
        scope_911.string(var_912);
    }
    #[allow(unused_mut)]
    let mut scope_913 = writer.prefix("PartitionNumber");
    if let Some(var_914) = &input.partition_number {
        scope_913.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_914).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_915 = writer.prefix("HostId");
    if let Some(var_916) = &input.host_id {
        scope_915.string(var_916);
    }
    #[allow(unused_mut)]
    let mut scope_917 = writer.prefix("Tenancy");
    if let Some(var_918) = &input.tenancy {
        scope_917.string(var_918.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_919 = writer.prefix("SpreadDomain");
    if let Some(var_920) = &input.spread_domain {
        scope_919.string(var_920);
    }
    #[allow(unused_mut)]
    let mut scope_921 = writer.prefix("HostResourceGroupArn");
    if let Some(var_922) = &input.host_resource_group_arn {
        scope_921.string(var_922);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_network_interface_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceNetworkInterfaceSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_923 = writer.prefix("AssociatePublicIpAddress");
    if let Some(var_924) = &input.associate_public_ip_address {
        scope_923.boolean(*var_924);
    }
    #[allow(unused_mut)]
    let mut scope_925 = writer.prefix("DeleteOnTermination");
    if let Some(var_926) = &input.delete_on_termination {
        scope_925.boolean(*var_926);
    }
    #[allow(unused_mut)]
    let mut scope_927 = writer.prefix("Description");
    if let Some(var_928) = &input.description {
        scope_927.string(var_928);
    }
    #[allow(unused_mut)]
    let mut scope_929 = writer.prefix("DeviceIndex");
    if let Some(var_930) = &input.device_index {
        scope_929.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_930).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_931 = writer.prefix("SecurityGroupId");
    if let Some(var_932) = &input.groups {
        let mut list_934 = scope_931.start_list(true, Some("SecurityGroupId"));
        for item_933 in var_932 {
            #[allow(unused_mut)]
            let mut entry_935 = list_934.entry();
            entry_935.string(item_933);
        }
        list_934.finish();
    }
    #[allow(unused_mut)]
    let mut scope_936 = writer.prefix("Ipv6AddressCount");
    if let Some(var_937) = &input.ipv6_address_count {
        scope_936.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_937).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_938 = writer.prefix("Ipv6Addresses");
    if let Some(var_939) = &input.ipv6_addresses {
        let mut list_941 = scope_938.start_list(true, Some("item"));
        for item_940 in var_939 {
            #[allow(unused_mut)]
            let mut entry_942 = list_941.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address(
                entry_942, item_940,
            )?;
        }
        list_941.finish();
    }
    #[allow(unused_mut)]
    let mut scope_943 = writer.prefix("NetworkInterfaceId");
    if let Some(var_944) = &input.network_interface_id {
        scope_943.string(var_944);
    }
    #[allow(unused_mut)]
    let mut scope_945 = writer.prefix("PrivateIpAddress");
    if let Some(var_946) = &input.private_ip_address {
        scope_945.string(var_946);
    }
    #[allow(unused_mut)]
    let mut scope_947 = writer.prefix("PrivateIpAddresses");
    if let Some(var_948) = &input.private_ip_addresses {
        let mut list_950 = scope_947.start_list(true, Some("item"));
        for item_949 in var_948 {
            #[allow(unused_mut)]
            let mut entry_951 = list_950.entry();
            crate::query_ser::serialize_structure_crate_model_private_ip_address_specification(
                entry_951, item_949,
            )?;
        }
        list_950.finish();
    }
    #[allow(unused_mut)]
    let mut scope_952 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_953) = &input.secondary_private_ip_address_count {
        scope_952.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_953).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_954 = writer.prefix("SubnetId");
    if let Some(var_955) = &input.subnet_id {
        scope_954.string(var_955);
    }
    #[allow(unused_mut)]
    let mut scope_956 = writer.prefix("AssociateCarrierIpAddress");
    if let Some(var_957) = &input.associate_carrier_ip_address {
        scope_956.boolean(*var_957);
    }
    #[allow(unused_mut)]
    let mut scope_958 = writer.prefix("InterfaceType");
    if let Some(var_959) = &input.interface_type {
        scope_958.string(var_959);
    }
    #[allow(unused_mut)]
    let mut scope_960 = writer.prefix("NetworkCardIndex");
    if let Some(var_961) = &input.network_card_index {
        scope_960.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_961).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_962 = writer.prefix("Ipv4Prefix");
    if let Some(var_963) = &input.ipv4_prefixes {
        let mut list_965 = scope_962.start_list(true, Some("item"));
        for item_964 in var_963 {
            #[allow(unused_mut)]
            let mut entry_966 = list_965.entry();
            crate::query_ser::serialize_structure_crate_model_ipv4_prefix_specification_request(
                entry_966, item_964,
            )?;
        }
        list_965.finish();
    }
    #[allow(unused_mut)]
    let mut scope_967 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_968) = &input.ipv4_prefix_count {
        scope_967.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_968).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_969 = writer.prefix("Ipv6Prefix");
    if let Some(var_970) = &input.ipv6_prefixes {
        let mut list_972 = scope_969.start_list(true, Some("item"));
        for item_971 in var_970 {
            #[allow(unused_mut)]
            let mut entry_973 = list_972.entry();
            crate::query_ser::serialize_structure_crate_model_ipv6_prefix_specification_request(
                entry_973, item_971,
            )?;
        }
        list_972.finish();
    }
    #[allow(unused_mut)]
    let mut scope_974 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_975) = &input.ipv6_prefix_count {
        scope_974.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_975).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_elastic_gpu_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ElasticGpuSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_976 = writer.prefix("Type");
    if let Some(var_977) = &input.r#type {
        scope_976.string(var_977);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_elastic_inference_accelerator(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ElasticInferenceAccelerator,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_978 = writer.prefix("Type");
    if let Some(var_979) = &input.r#type {
        scope_978.string(var_979);
    }
    #[allow(unused_mut)]
    let mut scope_980 = writer.prefix("Count");
    if let Some(var_981) = &input.count {
        scope_980.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_981).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_982 = writer.prefix("LaunchTemplateId");
    if let Some(var_983) = &input.launch_template_id {
        scope_982.string(var_983);
    }
    #[allow(unused_mut)]
    let mut scope_984 = writer.prefix("LaunchTemplateName");
    if let Some(var_985) = &input.launch_template_name {
        scope_984.string(var_985);
    }
    #[allow(unused_mut)]
    let mut scope_986 = writer.prefix("Version");
    if let Some(var_987) = &input.version {
        scope_986.string(var_987);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_market_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceMarketOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_988 = writer.prefix("MarketType");
    if let Some(var_989) = &input.market_type {
        scope_988.string(var_989.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_990 = writer.prefix("SpotOptions");
    if let Some(var_991) = &input.spot_options {
        crate::query_ser::serialize_structure_crate_model_spot_market_options(scope_990, var_991)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_credit_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CreditSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_992 = writer.prefix("CpuCredits");
    if let Some(var_993) = &input.cpu_credits {
        scope_992.string(var_993);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_cpu_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CpuOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_994 = writer.prefix("CoreCount");
    if let Some(var_995) = &input.core_count {
        scope_994.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_995).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_996 = writer.prefix("ThreadsPerCore");
    if let Some(var_997) = &input.threads_per_core {
        scope_996.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_997).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_hibernation_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::HibernationOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_998 = writer.prefix("Configured");
    if let Some(var_999) = &input.configured {
        scope_998.boolean(*var_999);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_license_configuration_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LicenseConfigurationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1000 = writer.prefix("LicenseConfigurationArn");
    if let Some(var_1001) = &input.license_configuration_arn {
        scope_1000.string(var_1001);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_metadata_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceMetadataOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1002 = writer.prefix("HttpTokens");
    if let Some(var_1003) = &input.http_tokens {
        scope_1002.string(var_1003.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1004 = writer.prefix("HttpPutResponseHopLimit");
    if let Some(var_1005) = &input.http_put_response_hop_limit {
        scope_1004.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1005).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1006 = writer.prefix("HttpEndpoint");
    if let Some(var_1007) = &input.http_endpoint {
        scope_1006.string(var_1007.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1008 = writer.prefix("HttpProtocolIpv6");
    if let Some(var_1009) = &input.http_protocol_ipv6 {
        scope_1008.string(var_1009.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1010 = writer.prefix("InstanceMetadataTags");
    if let Some(var_1011) = &input.instance_metadata_tags {
        scope_1010.string(var_1011.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_enclave_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::EnclaveOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1012 = writer.prefix("Enabled");
    if let Some(var_1013) = &input.enabled {
        scope_1012.boolean(*var_1013);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_private_dns_name_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PrivateDnsNameOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1014 = writer.prefix("HostnameType");
    if let Some(var_1015) = &input.hostname_type {
        scope_1014.string(var_1015.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1016 = writer.prefix("EnableResourceNameDnsARecord");
    if let Some(var_1017) = &input.enable_resource_name_dns_a_record {
        scope_1016.boolean(*var_1017);
    }
    #[allow(unused_mut)]
    let mut scope_1018 = writer.prefix("EnableResourceNameDnsAAAARecord");
    if let Some(var_1019) = &input.enable_resource_name_dns_aaaa_record {
        scope_1018.boolean(*var_1019);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_maintenance_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceMaintenanceOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1020 = writer.prefix("AutoRecovery");
    if let Some(var_1021) = &input.auto_recovery {
        scope_1020.string(var_1021.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_launch_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesLaunchSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1022 = writer.prefix("BlockDeviceMapping");
    if let Some(var_1023) = &input.block_device_mappings {
        let mut list_1025 = scope_1022.start_list(true, Some("BlockDeviceMapping"));
        for item_1024 in var_1023 {
            #[allow(unused_mut)]
            let mut entry_1026 = list_1025.entry();
            crate::query_ser::serialize_structure_crate_model_scheduled_instances_block_device_mapping(entry_1026, item_1024)?;
        }
        list_1025.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1027 = writer.prefix("EbsOptimized");
    if let Some(var_1028) = &input.ebs_optimized {
        scope_1027.boolean(*var_1028);
    }
    #[allow(unused_mut)]
    let mut scope_1029 = writer.prefix("IamInstanceProfile");
    if let Some(var_1030) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_iam_instance_profile(
            scope_1029, var_1030,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1031 = writer.prefix("ImageId");
    if let Some(var_1032) = &input.image_id {
        scope_1031.string(var_1032);
    }
    #[allow(unused_mut)]
    let mut scope_1033 = writer.prefix("InstanceType");
    if let Some(var_1034) = &input.instance_type {
        scope_1033.string(var_1034);
    }
    #[allow(unused_mut)]
    let mut scope_1035 = writer.prefix("KernelId");
    if let Some(var_1036) = &input.kernel_id {
        scope_1035.string(var_1036);
    }
    #[allow(unused_mut)]
    let mut scope_1037 = writer.prefix("KeyName");
    if let Some(var_1038) = &input.key_name {
        scope_1037.string(var_1038);
    }
    #[allow(unused_mut)]
    let mut scope_1039 = writer.prefix("Monitoring");
    if let Some(var_1040) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_monitoring(
            scope_1039, var_1040,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1041 = writer.prefix("NetworkInterface");
    if let Some(var_1042) = &input.network_interfaces {
        let mut list_1044 = scope_1041.start_list(true, Some("NetworkInterface"));
        for item_1043 in var_1042 {
            #[allow(unused_mut)]
            let mut entry_1045 = list_1044.entry();
            crate::query_ser::serialize_structure_crate_model_scheduled_instances_network_interface(entry_1045, item_1043)?;
        }
        list_1044.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1046 = writer.prefix("Placement");
    if let Some(var_1047) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_placement(
            scope_1046, var_1047,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1048 = writer.prefix("RamdiskId");
    if let Some(var_1049) = &input.ramdisk_id {
        scope_1048.string(var_1049);
    }
    #[allow(unused_mut)]
    let mut scope_1050 = writer.prefix("SecurityGroupId");
    if let Some(var_1051) = &input.security_group_ids {
        let mut list_1053 = scope_1050.start_list(true, Some("SecurityGroupId"));
        for item_1052 in var_1051 {
            #[allow(unused_mut)]
            let mut entry_1054 = list_1053.entry();
            entry_1054.string(item_1052);
        }
        list_1053.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1055 = writer.prefix("SubnetId");
    if let Some(var_1056) = &input.subnet_id {
        scope_1055.string(var_1056);
    }
    #[allow(unused_mut)]
    let mut scope_1057 = writer.prefix("UserData");
    if let Some(var_1058) = &input.user_data {
        scope_1057.string(var_1058);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_security_group_rule_description(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SecurityGroupRuleDescription,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1059 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_1060) = &input.security_group_rule_id {
        scope_1059.string(var_1060);
    }
    #[allow(unused_mut)]
    let mut scope_1061 = writer.prefix("Description");
    if let Some(var_1062) = &input.description {
        scope_1061.string(var_1062);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ip_range(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::IpRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1063 = writer.prefix("CidrIp");
    if let Some(var_1064) = &input.cidr_ip {
        scope_1063.string(var_1064);
    }
    #[allow(unused_mut)]
    let mut scope_1065 = writer.prefix("Description");
    if let Some(var_1066) = &input.description {
        scope_1065.string(var_1066);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ipv6_range(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Ipv6Range,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1067 = writer.prefix("CidrIpv6");
    if let Some(var_1068) = &input.cidr_ipv6 {
        scope_1067.string(var_1068);
    }
    #[allow(unused_mut)]
    let mut scope_1069 = writer.prefix("Description");
    if let Some(var_1070) = &input.description {
        scope_1069.string(var_1070);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_prefix_list_id(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PrefixListId,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1071 = writer.prefix("Description");
    if let Some(var_1072) = &input.description {
        scope_1071.string(var_1072);
    }
    #[allow(unused_mut)]
    let mut scope_1073 = writer.prefix("PrefixListId");
    if let Some(var_1074) = &input.prefix_list_id {
        scope_1073.string(var_1074);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_user_id_group_pair(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::UserIdGroupPair,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1075 = writer.prefix("Description");
    if let Some(var_1076) = &input.description {
        scope_1075.string(var_1076);
    }
    #[allow(unused_mut)]
    let mut scope_1077 = writer.prefix("GroupId");
    if let Some(var_1078) = &input.group_id {
        scope_1077.string(var_1078);
    }
    #[allow(unused_mut)]
    let mut scope_1079 = writer.prefix("GroupName");
    if let Some(var_1080) = &input.group_name {
        scope_1079.string(var_1080);
    }
    #[allow(unused_mut)]
    let mut scope_1081 = writer.prefix("PeeringStatus");
    if let Some(var_1082) = &input.peering_status {
        scope_1081.string(var_1082);
    }
    #[allow(unused_mut)]
    let mut scope_1083 = writer.prefix("UserId");
    if let Some(var_1084) = &input.user_id {
        scope_1083.string(var_1084);
    }
    #[allow(unused_mut)]
    let mut scope_1085 = writer.prefix("VpcId");
    if let Some(var_1086) = &input.vpc_id {
        scope_1085.string(var_1086);
    }
    #[allow(unused_mut)]
    let mut scope_1087 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_1088) = &input.vpc_peering_connection_id {
        scope_1087.string(var_1088);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_s3_storage(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::S3Storage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1089 = writer.prefix("AWSAccessKeyId");
    if let Some(var_1090) = &input.aws_access_key_id {
        scope_1089.string(var_1090);
    }
    #[allow(unused_mut)]
    let mut scope_1091 = writer.prefix("Bucket");
    if let Some(var_1092) = &input.bucket {
        scope_1091.string(var_1092);
    }
    #[allow(unused_mut)]
    let mut scope_1093 = writer.prefix("Prefix");
    if let Some(var_1094) = &input.prefix {
        scope_1093.string(var_1094);
    }
    #[allow(unused_mut)]
    let mut scope_1095 = writer.prefix("UploadPolicy");
    if let Some(var_1096) = &input.upload_policy {
        scope_1095.string(&aws_smithy_types::base64::encode(var_1096));
    }
    #[allow(unused_mut)]
    let mut scope_1097 = writer.prefix("UploadPolicySignature");
    if let Some(var_1098) = &input.upload_policy_signature {
        scope_1097.string(var_1098);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_directory_service_authentication_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::DirectoryServiceAuthenticationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1099 = writer.prefix("DirectoryId");
    if let Some(var_1100) = &input.directory_id {
        scope_1099.string(var_1100);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_certificate_authentication_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CertificateAuthenticationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1101 = writer.prefix("ClientRootCertificateChainArn");
    if let Some(var_1102) = &input.client_root_certificate_chain_arn {
        scope_1101.string(var_1102);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_federated_authentication_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FederatedAuthenticationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1103 = writer.prefix("SAMLProviderArn");
    if let Some(var_1104) = &input.saml_provider_arn {
        scope_1103.string(var_1104);
    }
    #[allow(unused_mut)]
    let mut scope_1105 = writer.prefix("SelfServiceSAMLProviderArn");
    if let Some(var_1106) = &input.self_service_saml_provider_arn {
        scope_1105.string(var_1106);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_spot_maintenance_strategies_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FleetSpotMaintenanceStrategiesRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1107 = writer.prefix("CapacityRebalance");
    if let Some(var_1108) = &input.capacity_rebalance {
        crate::query_ser::serialize_structure_crate_model_fleet_spot_capacity_rebalance_request(
            scope_1107, var_1108,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_capacity_reservation_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CapacityReservationOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1109 = writer.prefix("UsageStrategy");
    if let Some(var_1110) = &input.usage_strategy {
        scope_1109.string(var_1110.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_launch_template_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FleetLaunchTemplateSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1111 = writer.prefix("LaunchTemplateId");
    if let Some(var_1112) = &input.launch_template_id {
        scope_1111.string(var_1112);
    }
    #[allow(unused_mut)]
    let mut scope_1113 = writer.prefix("LaunchTemplateName");
    if let Some(var_1114) = &input.launch_template_name {
        scope_1113.string(var_1114);
    }
    #[allow(unused_mut)]
    let mut scope_1115 = writer.prefix("Version");
    if let Some(var_1116) = &input.version {
        scope_1115.string(var_1116);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_launch_template_overrides_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FleetLaunchTemplateOverridesRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1117 = writer.prefix("InstanceType");
    if let Some(var_1118) = &input.instance_type {
        scope_1117.string(var_1118.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1119 = writer.prefix("MaxPrice");
    if let Some(var_1120) = &input.max_price {
        scope_1119.string(var_1120);
    }
    #[allow(unused_mut)]
    let mut scope_1121 = writer.prefix("SubnetId");
    if let Some(var_1122) = &input.subnet_id {
        scope_1121.string(var_1122);
    }
    #[allow(unused_mut)]
    let mut scope_1123 = writer.prefix("AvailabilityZone");
    if let Some(var_1124) = &input.availability_zone {
        scope_1123.string(var_1124);
    }
    #[allow(unused_mut)]
    let mut scope_1125 = writer.prefix("WeightedCapacity");
    if let Some(var_1126) = &input.weighted_capacity {
        scope_1125.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1126).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1127 = writer.prefix("Priority");
    if let Some(var_1128) = &input.priority {
        scope_1127.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1128).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1129 = writer.prefix("Placement");
    if let Some(var_1130) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_placement(scope_1129, var_1130)?;
    }
    #[allow(unused_mut)]
    let mut scope_1131 = writer.prefix("InstanceRequirements");
    if let Some(var_1132) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_request(
            scope_1131, var_1132,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ebs_block_device(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::EbsBlockDevice,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1133 = writer.prefix("DeleteOnTermination");
    if let Some(var_1134) = &input.delete_on_termination {
        scope_1133.boolean(*var_1134);
    }
    #[allow(unused_mut)]
    let mut scope_1135 = writer.prefix("Iops");
    if let Some(var_1136) = &input.iops {
        scope_1135.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1136).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1137 = writer.prefix("SnapshotId");
    if let Some(var_1138) = &input.snapshot_id {
        scope_1137.string(var_1138);
    }
    #[allow(unused_mut)]
    let mut scope_1139 = writer.prefix("VolumeSize");
    if let Some(var_1140) = &input.volume_size {
        scope_1139.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1140).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1141 = writer.prefix("VolumeType");
    if let Some(var_1142) = &input.volume_type {
        scope_1141.string(var_1142.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1143 = writer.prefix("KmsKeyId");
    if let Some(var_1144) = &input.kms_key_id {
        scope_1143.string(var_1144);
    }
    #[allow(unused_mut)]
    let mut scope_1145 = writer.prefix("Throughput");
    if let Some(var_1146) = &input.throughput {
        scope_1145.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1146).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1147 = writer.prefix("OutpostArn");
    if let Some(var_1148) = &input.outpost_arn {
        scope_1147.string(var_1148);
    }
    #[allow(unused_mut)]
    let mut scope_1149 = writer.prefix("Encrypted");
    if let Some(var_1150) = &input.encrypted {
        scope_1149.boolean(*var_1150);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_iam_instance_profile_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateIamInstanceProfileSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1151 = writer.prefix("Arn");
    if let Some(var_1152) = &input.arn {
        scope_1151.string(var_1152);
    }
    #[allow(unused_mut)]
    let mut scope_1153 = writer.prefix("Name");
    if let Some(var_1154) = &input.name {
        scope_1153.string(var_1154);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_block_device_mapping_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateBlockDeviceMappingRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1155 = writer.prefix("DeviceName");
    if let Some(var_1156) = &input.device_name {
        scope_1155.string(var_1156);
    }
    #[allow(unused_mut)]
    let mut scope_1157 = writer.prefix("VirtualName");
    if let Some(var_1158) = &input.virtual_name {
        scope_1157.string(var_1158);
    }
    #[allow(unused_mut)]
    let mut scope_1159 = writer.prefix("Ebs");
    if let Some(var_1160) = &input.ebs {
        crate::query_ser::serialize_structure_crate_model_launch_template_ebs_block_device_request(
            scope_1159, var_1160,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1161 = writer.prefix("NoDevice");
    if let Some(var_1162) = &input.no_device {
        scope_1161.string(var_1162);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_instance_network_interface_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateInstanceNetworkInterfaceSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1163 = writer.prefix("AssociateCarrierIpAddress");
    if let Some(var_1164) = &input.associate_carrier_ip_address {
        scope_1163.boolean(*var_1164);
    }
    #[allow(unused_mut)]
    let mut scope_1165 = writer.prefix("AssociatePublicIpAddress");
    if let Some(var_1166) = &input.associate_public_ip_address {
        scope_1165.boolean(*var_1166);
    }
    #[allow(unused_mut)]
    let mut scope_1167 = writer.prefix("DeleteOnTermination");
    if let Some(var_1168) = &input.delete_on_termination {
        scope_1167.boolean(*var_1168);
    }
    #[allow(unused_mut)]
    let mut scope_1169 = writer.prefix("Description");
    if let Some(var_1170) = &input.description {
        scope_1169.string(var_1170);
    }
    #[allow(unused_mut)]
    let mut scope_1171 = writer.prefix("DeviceIndex");
    if let Some(var_1172) = &input.device_index {
        scope_1171.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1172).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1173 = writer.prefix("SecurityGroupId");
    if let Some(var_1174) = &input.groups {
        let mut list_1176 = scope_1173.start_list(true, Some("SecurityGroupId"));
        for item_1175 in var_1174 {
            #[allow(unused_mut)]
            let mut entry_1177 = list_1176.entry();
            entry_1177.string(item_1175);
        }
        list_1176.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1178 = writer.prefix("InterfaceType");
    if let Some(var_1179) = &input.interface_type {
        scope_1178.string(var_1179);
    }
    #[allow(unused_mut)]
    let mut scope_1180 = writer.prefix("Ipv6AddressCount");
    if let Some(var_1181) = &input.ipv6_address_count {
        scope_1180.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1181).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1182 = writer.prefix("Ipv6Addresses");
    if let Some(var_1183) = &input.ipv6_addresses {
        let mut list_1185 = scope_1182.start_list(true, Some("InstanceIpv6Address"));
        for item_1184 in var_1183 {
            #[allow(unused_mut)]
            let mut entry_1186 = list_1185.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address_request(
                entry_1186, item_1184,
            )?;
        }
        list_1185.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1187 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1188) = &input.network_interface_id {
        scope_1187.string(var_1188);
    }
    #[allow(unused_mut)]
    let mut scope_1189 = writer.prefix("PrivateIpAddress");
    if let Some(var_1190) = &input.private_ip_address {
        scope_1189.string(var_1190);
    }
    #[allow(unused_mut)]
    let mut scope_1191 = writer.prefix("PrivateIpAddresses");
    if let Some(var_1192) = &input.private_ip_addresses {
        let mut list_1194 = scope_1191.start_list(true, Some("item"));
        for item_1193 in var_1192 {
            #[allow(unused_mut)]
            let mut entry_1195 = list_1194.entry();
            crate::query_ser::serialize_structure_crate_model_private_ip_address_specification(
                entry_1195, item_1193,
            )?;
        }
        list_1194.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1196 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_1197) = &input.secondary_private_ip_address_count {
        scope_1196.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1197).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1198 = writer.prefix("SubnetId");
    if let Some(var_1199) = &input.subnet_id {
        scope_1198.string(var_1199);
    }
    #[allow(unused_mut)]
    let mut scope_1200 = writer.prefix("NetworkCardIndex");
    if let Some(var_1201) = &input.network_card_index {
        scope_1200.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1201).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1202 = writer.prefix("Ipv4Prefix");
    if let Some(var_1203) = &input.ipv4_prefixes {
        let mut list_1205 = scope_1202.start_list(true, Some("item"));
        for item_1204 in var_1203 {
            #[allow(unused_mut)]
            let mut entry_1206 = list_1205.entry();
            crate::query_ser::serialize_structure_crate_model_ipv4_prefix_specification_request(
                entry_1206, item_1204,
            )?;
        }
        list_1205.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1207 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_1208) = &input.ipv4_prefix_count {
        scope_1207.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1208).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1209 = writer.prefix("Ipv6Prefix");
    if let Some(var_1210) = &input.ipv6_prefixes {
        let mut list_1212 = scope_1209.start_list(true, Some("item"));
        for item_1211 in var_1210 {
            #[allow(unused_mut)]
            let mut entry_1213 = list_1212.entry();
            crate::query_ser::serialize_structure_crate_model_ipv6_prefix_specification_request(
                entry_1213, item_1211,
            )?;
        }
        list_1212.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1214 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_1215) = &input.ipv6_prefix_count {
        scope_1214.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1215).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_templates_monitoring_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplatesMonitoringRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1216 = writer.prefix("Enabled");
    if let Some(var_1217) = &input.enabled {
        scope_1216.boolean(*var_1217);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_placement_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplatePlacementRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1218 = writer.prefix("AvailabilityZone");
    if let Some(var_1219) = &input.availability_zone {
        scope_1218.string(var_1219);
    }
    #[allow(unused_mut)]
    let mut scope_1220 = writer.prefix("Affinity");
    if let Some(var_1221) = &input.affinity {
        scope_1220.string(var_1221);
    }
    #[allow(unused_mut)]
    let mut scope_1222 = writer.prefix("GroupName");
    if let Some(var_1223) = &input.group_name {
        scope_1222.string(var_1223);
    }
    #[allow(unused_mut)]
    let mut scope_1224 = writer.prefix("HostId");
    if let Some(var_1225) = &input.host_id {
        scope_1224.string(var_1225);
    }
    #[allow(unused_mut)]
    let mut scope_1226 = writer.prefix("Tenancy");
    if let Some(var_1227) = &input.tenancy {
        scope_1226.string(var_1227.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1228 = writer.prefix("SpreadDomain");
    if let Some(var_1229) = &input.spread_domain {
        scope_1228.string(var_1229);
    }
    #[allow(unused_mut)]
    let mut scope_1230 = writer.prefix("HostResourceGroupArn");
    if let Some(var_1231) = &input.host_resource_group_arn {
        scope_1230.string(var_1231);
    }
    #[allow(unused_mut)]
    let mut scope_1232 = writer.prefix("PartitionNumber");
    if let Some(var_1233) = &input.partition_number {
        scope_1232.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1233).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_tag_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateTagSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1234 = writer.prefix("ResourceType");
    if let Some(var_1235) = &input.resource_type {
        scope_1234.string(var_1235.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1236 = writer.prefix("Tag");
    if let Some(var_1237) = &input.tags {
        let mut list_1239 = scope_1236.start_list(true, Some("item"));
        for item_1238 in var_1237 {
            #[allow(unused_mut)]
            let mut entry_1240 = list_1239.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1240, item_1238)?;
        }
        list_1239.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_elastic_inference_accelerator(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateElasticInferenceAccelerator,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1241 = writer.prefix("Type");
    if let Some(var_1242) = &input.r#type {
        scope_1241.string(var_1242);
    }
    #[allow(unused_mut)]
    let mut scope_1243 = writer.prefix("Count");
    if let Some(var_1244) = &input.count {
        scope_1243.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1244).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_instance_market_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateInstanceMarketOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1245 = writer.prefix("MarketType");
    if let Some(var_1246) = &input.market_type {
        scope_1245.string(var_1246.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1247 = writer.prefix("SpotOptions");
    if let Some(var_1248) = &input.spot_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_spot_market_options_request(scope_1247, var_1248)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_cpu_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateCpuOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1249 = writer.prefix("CoreCount");
    if let Some(var_1250) = &input.core_count {
        scope_1249.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1250).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1251 = writer.prefix("ThreadsPerCore");
    if let Some(var_1252) = &input.threads_per_core {
        scope_1251.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1252).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_capacity_reservation_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateCapacityReservationSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1253 = writer.prefix("CapacityReservationPreference");
    if let Some(var_1254) = &input.capacity_reservation_preference {
        scope_1253.string(var_1254.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1255 = writer.prefix("CapacityReservationTarget");
    if let Some(var_1256) = &input.capacity_reservation_target {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_target(
            scope_1255, var_1256,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_license_configuration_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateLicenseConfigurationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1257 = writer.prefix("LicenseConfigurationArn");
    if let Some(var_1258) = &input.license_configuration_arn {
        scope_1257.string(var_1258);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_hibernation_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateHibernationOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1259 = writer.prefix("Configured");
    if let Some(var_1260) = &input.configured {
        scope_1259.boolean(*var_1260);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_instance_metadata_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateInstanceMetadataOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1261 = writer.prefix("HttpTokens");
    if let Some(var_1262) = &input.http_tokens {
        scope_1261.string(var_1262.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1263 = writer.prefix("HttpPutResponseHopLimit");
    if let Some(var_1264) = &input.http_put_response_hop_limit {
        scope_1263.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1264).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1265 = writer.prefix("HttpEndpoint");
    if let Some(var_1266) = &input.http_endpoint {
        scope_1265.string(var_1266.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1267 = writer.prefix("HttpProtocolIpv6");
    if let Some(var_1268) = &input.http_protocol_ipv6 {
        scope_1267.string(var_1268.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1269 = writer.prefix("InstanceMetadataTags");
    if let Some(var_1270) = &input.instance_metadata_tags {
        scope_1269.string(var_1270.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_enclave_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateEnclaveOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1271 = writer.prefix("Enabled");
    if let Some(var_1272) = &input.enabled {
        scope_1271.boolean(*var_1272);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_private_dns_name_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplatePrivateDnsNameOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1273 = writer.prefix("HostnameType");
    if let Some(var_1274) = &input.hostname_type {
        scope_1273.string(var_1274.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1275 = writer.prefix("EnableResourceNameDnsARecord");
    if let Some(var_1276) = &input.enable_resource_name_dns_a_record {
        scope_1275.boolean(*var_1276);
    }
    #[allow(unused_mut)]
    let mut scope_1277 = writer.prefix("EnableResourceNameDnsAAAARecord");
    if let Some(var_1278) = &input.enable_resource_name_dns_aaaa_record {
        scope_1277.boolean(*var_1278);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_instance_maintenance_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateInstanceMaintenanceOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1279 = writer.prefix("AutoRecovery");
    if let Some(var_1280) = &input.auto_recovery {
        scope_1279.string(var_1280.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_path_statement_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PathStatementRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1281 = writer.prefix("PacketHeaderStatement");
    if let Some(var_1282) = &input.packet_header_statement {
        crate::query_ser::serialize_structure_crate_model_packet_header_statement_request(
            scope_1281, var_1282,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1283 = writer.prefix("ResourceStatement");
    if let Some(var_1284) = &input.resource_statement {
        crate::query_ser::serialize_structure_crate_model_resource_statement_request(
            scope_1283, var_1284,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_through_resources_statement_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ThroughResourcesStatementRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1285 = writer.prefix("ResourceStatement");
    if let Some(var_1286) = &input.resource_statement {
        crate::query_ser::serialize_structure_crate_model_resource_statement_request(
            scope_1285, var_1286,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_vpn_tunnel_options_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::VpnTunnelOptionsSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1287 = writer.prefix("TunnelInsideCidr");
    if let Some(var_1288) = &input.tunnel_inside_cidr {
        scope_1287.string(var_1288);
    }
    #[allow(unused_mut)]
    let mut scope_1289 = writer.prefix("TunnelInsideIpv6Cidr");
    if let Some(var_1290) = &input.tunnel_inside_ipv6_cidr {
        scope_1289.string(var_1290);
    }
    #[allow(unused_mut)]
    let mut scope_1291 = writer.prefix("PreSharedKey");
    if let Some(var_1292) = &input.pre_shared_key {
        scope_1291.string(var_1292);
    }
    #[allow(unused_mut)]
    let mut scope_1293 = writer.prefix("Phase1LifetimeSeconds");
    if let Some(var_1294) = &input.phase1_lifetime_seconds {
        scope_1293.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1294).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1295 = writer.prefix("Phase2LifetimeSeconds");
    if let Some(var_1296) = &input.phase2_lifetime_seconds {
        scope_1295.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1296).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1297 = writer.prefix("RekeyMarginTimeSeconds");
    if let Some(var_1298) = &input.rekey_margin_time_seconds {
        scope_1297.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1298).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1299 = writer.prefix("RekeyFuzzPercentage");
    if let Some(var_1300) = &input.rekey_fuzz_percentage {
        scope_1299.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1300).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1301 = writer.prefix("ReplayWindowSize");
    if let Some(var_1302) = &input.replay_window_size {
        scope_1301.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1302).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1303 = writer.prefix("DPDTimeoutSeconds");
    if let Some(var_1304) = &input.dpd_timeout_seconds {
        scope_1303.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1304).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1305 = writer.prefix("DPDTimeoutAction");
    if let Some(var_1306) = &input.dpd_timeout_action {
        scope_1305.string(var_1306);
    }
    #[allow(unused_mut)]
    let mut scope_1307 = writer.prefix("Phase1EncryptionAlgorithm");
    if let Some(var_1308) = &input.phase1_encryption_algorithms {
        let mut list_1310 = scope_1307.start_list(true, Some("item"));
        for item_1309 in var_1308 {
            #[allow(unused_mut)]
            let mut entry_1311 = list_1310.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_encryption_algorithms_request_list_value(entry_1311, item_1309)?;
        }
        list_1310.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1312 = writer.prefix("Phase2EncryptionAlgorithm");
    if let Some(var_1313) = &input.phase2_encryption_algorithms {
        let mut list_1315 = scope_1312.start_list(true, Some("item"));
        for item_1314 in var_1313 {
            #[allow(unused_mut)]
            let mut entry_1316 = list_1315.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_encryption_algorithms_request_list_value(entry_1316, item_1314)?;
        }
        list_1315.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1317 = writer.prefix("Phase1IntegrityAlgorithm");
    if let Some(var_1318) = &input.phase1_integrity_algorithms {
        let mut list_1320 = scope_1317.start_list(true, Some("item"));
        for item_1319 in var_1318 {
            #[allow(unused_mut)]
            let mut entry_1321 = list_1320.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_integrity_algorithms_request_list_value(entry_1321, item_1319)?;
        }
        list_1320.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1322 = writer.prefix("Phase2IntegrityAlgorithm");
    if let Some(var_1323) = &input.phase2_integrity_algorithms {
        let mut list_1325 = scope_1322.start_list(true, Some("item"));
        for item_1324 in var_1323 {
            #[allow(unused_mut)]
            let mut entry_1326 = list_1325.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_integrity_algorithms_request_list_value(entry_1326, item_1324)?;
        }
        list_1325.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1327 = writer.prefix("Phase1DHGroupNumber");
    if let Some(var_1328) = &input.phase1_dh_group_numbers {
        let mut list_1330 = scope_1327.start_list(true, Some("item"));
        for item_1329 in var_1328 {
            #[allow(unused_mut)]
            let mut entry_1331 = list_1330.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_dh_group_numbers_request_list_value(entry_1331, item_1329)?;
        }
        list_1330.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1332 = writer.prefix("Phase2DHGroupNumber");
    if let Some(var_1333) = &input.phase2_dh_group_numbers {
        let mut list_1335 = scope_1332.start_list(true, Some("item"));
        for item_1334 in var_1333 {
            #[allow(unused_mut)]
            let mut entry_1336 = list_1335.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_dh_group_numbers_request_list_value(entry_1336, item_1334)?;
        }
        list_1335.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1337 = writer.prefix("IKEVersion");
    if let Some(var_1338) = &input.ike_versions {
        let mut list_1340 = scope_1337.start_list(true, Some("item"));
        for item_1339 in var_1338 {
            #[allow(unused_mut)]
            let mut entry_1341 = list_1340.entry();
            crate::query_ser::serialize_structure_crate_model_ike_versions_request_list_value(
                entry_1341, item_1339,
            )?;
        }
        list_1340.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1342 = writer.prefix("StartupAction");
    if let Some(var_1343) = &input.startup_action {
        scope_1342.string(var_1343);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_athena_integration(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AthenaIntegration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1344 = writer.prefix("IntegrationResultS3DestinationArn");
    if let Some(var_1345) = &input.integration_result_s3_destination_arn {
        scope_1344.string(var_1345);
    }
    #[allow(unused_mut)]
    let mut scope_1346 = writer.prefix("PartitionLoadFrequency");
    if let Some(var_1347) = &input.partition_load_frequency {
        scope_1346.string(var_1347.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1348 = writer.prefix("PartitionStartDate");
    if let Some(var_1349) = &input.partition_start_date {
        scope_1348.date_time(var_1349, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_1350 = writer.prefix("PartitionEndDate");
    if let Some(var_1351) = &input.partition_end_date {
        scope_1350.date_time(var_1351, aws_smithy_types::date_time::Format::DateTime)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_v_cpu_count_range_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::VCpuCountRangeRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1352 = writer.prefix("Min");
    if let Some(var_1353) = &input.min {
        scope_1352.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1353).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1354 = writer.prefix("Max");
    if let Some(var_1355) = &input.max {
        scope_1354.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1355).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_memory_mi_b_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::MemoryMiBRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1356 = writer.prefix("Min");
    if let Some(var_1357) = &input.min {
        scope_1356.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1357).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1358 = writer.prefix("Max");
    if let Some(var_1359) = &input.max {
        scope_1358.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1359).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_memory_gi_b_per_v_cpu_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::MemoryGiBPerVCpuRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1360 = writer.prefix("Min");
    if let Some(var_1361) = &input.min {
        scope_1360.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1361).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1362 = writer.prefix("Max");
    if let Some(var_1363) = &input.max {
        scope_1362.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1363).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_network_interface_count_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::NetworkInterfaceCountRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1364 = writer.prefix("Min");
    if let Some(var_1365) = &input.min {
        scope_1364.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1365).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1366 = writer.prefix("Max");
    if let Some(var_1367) = &input.max {
        scope_1366.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1367).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_total_local_storage_gb_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TotalLocalStorageGbRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1368 = writer.prefix("Min");
    if let Some(var_1369) = &input.min {
        scope_1368.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1369).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1370 = writer.prefix("Max");
    if let Some(var_1371) = &input.max {
        scope_1370.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1371).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_baseline_ebs_bandwidth_mbps_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::BaselineEbsBandwidthMbpsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1372 = writer.prefix("Min");
    if let Some(var_1373) = &input.min {
        scope_1372.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1373).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1374 = writer.prefix("Max");
    if let Some(var_1375) = &input.max {
        scope_1374.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1375).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_accelerator_count_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AcceleratorCountRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1376 = writer.prefix("Min");
    if let Some(var_1377) = &input.min {
        scope_1376.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1377).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1378 = writer.prefix("Max");
    if let Some(var_1379) = &input.max {
        scope_1378.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1379).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_accelerator_total_memory_mi_b_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AcceleratorTotalMemoryMiBRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1380 = writer.prefix("Min");
    if let Some(var_1381) = &input.min {
        scope_1380.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1381).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1382 = writer.prefix("Max");
    if let Some(var_1383) = &input.max {
        scope_1382.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1383).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_user_bucket(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::UserBucket,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1384 = writer.prefix("S3Bucket");
    if let Some(var_1385) = &input.s3_bucket {
        scope_1384.string(var_1385);
    }
    #[allow(unused_mut)]
    let mut scope_1386 = writer.prefix("S3Key");
    if let Some(var_1387) = &input.s3_key {
        scope_1386.string(var_1387);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_user_data(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::UserData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1388 = writer.prefix("Data");
    if let Some(var_1389) = &input.data {
        scope_1388.string(var_1389);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_load_permission_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LoadPermissionRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1390 = writer.prefix("Group");
    if let Some(var_1391) = &input.group {
        scope_1390.string(var_1391.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1392 = writer.prefix("UserId");
    if let Some(var_1393) = &input.user_id {
        scope_1392.string(var_1393);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_permission(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchPermission,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1394 = writer.prefix("Group");
    if let Some(var_1395) = &input.group {
        scope_1394.string(var_1395.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1396 = writer.prefix("UserId");
    if let Some(var_1397) = &input.user_id {
        scope_1396.string(var_1397);
    }
    #[allow(unused_mut)]
    let mut scope_1398 = writer.prefix("OrganizationArn");
    if let Some(var_1399) = &input.organization_arn {
        scope_1398.string(var_1399);
    }
    #[allow(unused_mut)]
    let mut scope_1400 = writer.prefix("OrganizationalUnitArn");
    if let Some(var_1401) = &input.organizational_unit_arn {
        scope_1400.string(var_1401);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ebs_instance_block_device_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::EbsInstanceBlockDeviceSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1402 = writer.prefix("DeleteOnTermination");
    if let Some(var_1403) = &input.delete_on_termination {
        scope_1402.boolean(*var_1403);
    }
    #[allow(unused_mut)]
    let mut scope_1404 = writer.prefix("VolumeId");
    if let Some(var_1405) = &input.volume_id {
        scope_1404.string(var_1405);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_capacity_reservation_target(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CapacityReservationTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1406 = writer.prefix("CapacityReservationId");
    if let Some(var_1407) = &input.capacity_reservation_id {
        scope_1406.string(var_1407);
    }
    #[allow(unused_mut)]
    let mut scope_1408 = writer.prefix("CapacityReservationResourceGroupArn");
    if let Some(var_1409) = &input.capacity_reservation_resource_group_arn {
        scope_1408.string(var_1409);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_security_group_rule_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SecurityGroupRuleRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1410 = writer.prefix("IpProtocol");
    if let Some(var_1411) = &input.ip_protocol {
        scope_1410.string(var_1411);
    }
    #[allow(unused_mut)]
    let mut scope_1412 = writer.prefix("FromPort");
    if let Some(var_1413) = &input.from_port {
        scope_1412.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1413).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1414 = writer.prefix("ToPort");
    if let Some(var_1415) = &input.to_port {
        scope_1414.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1415).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1416 = writer.prefix("CidrIpv4");
    if let Some(var_1417) = &input.cidr_ipv4 {
        scope_1416.string(var_1417);
    }
    #[allow(unused_mut)]
    let mut scope_1418 = writer.prefix("CidrIpv6");
    if let Some(var_1419) = &input.cidr_ipv6 {
        scope_1418.string(var_1419);
    }
    #[allow(unused_mut)]
    let mut scope_1420 = writer.prefix("PrefixListId");
    if let Some(var_1421) = &input.prefix_list_id {
        scope_1420.string(var_1421);
    }
    #[allow(unused_mut)]
    let mut scope_1422 = writer.prefix("ReferencedGroupId");
    if let Some(var_1423) = &input.referenced_group_id {
        scope_1422.string(var_1423);
    }
    #[allow(unused_mut)]
    let mut scope_1424 = writer.prefix("Description");
    if let Some(var_1425) = &input.description {
        scope_1424.string(var_1425);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_create_volume_permission(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CreateVolumePermission,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1426 = writer.prefix("Group");
    if let Some(var_1427) = &input.group {
        scope_1426.string(var_1427.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1428 = writer.prefix("UserId");
    if let Some(var_1429) = &input.user_id {
        scope_1428.string(var_1429);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_launch_template_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FleetLaunchTemplateSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1430 = writer.prefix("LaunchTemplateId");
    if let Some(var_1431) = &input.launch_template_id {
        scope_1430.string(var_1431);
    }
    #[allow(unused_mut)]
    let mut scope_1432 = writer.prefix("LaunchTemplateName");
    if let Some(var_1433) = &input.launch_template_name {
        scope_1432.string(var_1433);
    }
    #[allow(unused_mut)]
    let mut scope_1434 = writer.prefix("Version");
    if let Some(var_1435) = &input.version {
        scope_1434.string(var_1435);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_overrides(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateOverrides,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1436 = writer.prefix("InstanceType");
    if let Some(var_1437) = &input.instance_type {
        scope_1436.string(var_1437.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1438 = writer.prefix("SpotPrice");
    if let Some(var_1439) = &input.spot_price {
        scope_1438.string(var_1439);
    }
    #[allow(unused_mut)]
    let mut scope_1440 = writer.prefix("SubnetId");
    if let Some(var_1441) = &input.subnet_id {
        scope_1440.string(var_1441);
    }
    #[allow(unused_mut)]
    let mut scope_1442 = writer.prefix("AvailabilityZone");
    if let Some(var_1443) = &input.availability_zone {
        scope_1442.string(var_1443);
    }
    #[allow(unused_mut)]
    let mut scope_1444 = writer.prefix("WeightedCapacity");
    if let Some(var_1445) = &input.weighted_capacity {
        scope_1444.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1445).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1446 = writer.prefix("Priority");
    if let Some(var_1447) = &input.priority {
        scope_1446.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1447).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1448 = writer.prefix("InstanceRequirements");
    if let Some(var_1449) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements(
            scope_1448, var_1449,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase1_encryption_algorithms_request_list_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Phase1EncryptionAlgorithmsRequestListValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1450 = writer.prefix("Value");
    if let Some(var_1451) = &input.value {
        scope_1450.string(var_1451);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase2_encryption_algorithms_request_list_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Phase2EncryptionAlgorithmsRequestListValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1452 = writer.prefix("Value");
    if let Some(var_1453) = &input.value {
        scope_1452.string(var_1453);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase1_integrity_algorithms_request_list_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Phase1IntegrityAlgorithmsRequestListValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1454 = writer.prefix("Value");
    if let Some(var_1455) = &input.value {
        scope_1454.string(var_1455);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase2_integrity_algorithms_request_list_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Phase2IntegrityAlgorithmsRequestListValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1456 = writer.prefix("Value");
    if let Some(var_1457) = &input.value {
        scope_1456.string(var_1457);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase1_dh_group_numbers_request_list_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Phase1DhGroupNumbersRequestListValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1458 = writer.prefix("Value");
    if let Some(var_1459) = &input.value {
        scope_1458.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1459).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase2_dh_group_numbers_request_list_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Phase2DhGroupNumbersRequestListValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1460 = writer.prefix("Value");
    if let Some(var_1461) = &input.value {
        scope_1460.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1461).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ike_versions_request_list_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::IkeVersionsRequestListValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1462 = writer.prefix("Value");
    if let Some(var_1463) = &input.value {
        scope_1462.string(var_1463);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_maintenance_strategies(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotMaintenanceStrategies,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1464 = writer.prefix("CapacityRebalance");
    if let Some(var_1465) = &input.capacity_rebalance {
        crate::query_ser::serialize_structure_crate_model_spot_capacity_rebalance(
            scope_1464, var_1465,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_fleet_launch_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotFleetLaunchSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1466 = writer.prefix("GroupSet");
    if let Some(var_1467) = &input.security_groups {
        let mut list_1469 = scope_1466.start_list(true, Some("item"));
        for item_1468 in var_1467 {
            #[allow(unused_mut)]
            let mut entry_1470 = list_1469.entry();
            crate::query_ser::serialize_structure_crate_model_group_identifier(
                entry_1470, item_1468,
            )?;
        }
        list_1469.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1471 = writer.prefix("AddressingType");
    if let Some(var_1472) = &input.addressing_type {
        scope_1471.string(var_1472);
    }
    #[allow(unused_mut)]
    let mut scope_1473 = writer.prefix("BlockDeviceMapping");
    if let Some(var_1474) = &input.block_device_mappings {
        let mut list_1476 = scope_1473.start_list(true, Some("item"));
        for item_1475 in var_1474 {
            #[allow(unused_mut)]
            let mut entry_1477 = list_1476.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_1477, item_1475,
            )?;
        }
        list_1476.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1478 = writer.prefix("EbsOptimized");
    if let Some(var_1479) = &input.ebs_optimized {
        scope_1478.boolean(*var_1479);
    }
    #[allow(unused_mut)]
    let mut scope_1480 = writer.prefix("IamInstanceProfile");
    if let Some(var_1481) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_1480, var_1481,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1482 = writer.prefix("ImageId");
    if let Some(var_1483) = &input.image_id {
        scope_1482.string(var_1483);
    }
    #[allow(unused_mut)]
    let mut scope_1484 = writer.prefix("InstanceType");
    if let Some(var_1485) = &input.instance_type {
        scope_1484.string(var_1485.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1486 = writer.prefix("KernelId");
    if let Some(var_1487) = &input.kernel_id {
        scope_1486.string(var_1487);
    }
    #[allow(unused_mut)]
    let mut scope_1488 = writer.prefix("KeyName");
    if let Some(var_1489) = &input.key_name {
        scope_1488.string(var_1489);
    }
    #[allow(unused_mut)]
    let mut scope_1490 = writer.prefix("Monitoring");
    if let Some(var_1491) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_spot_fleet_monitoring(
            scope_1490, var_1491,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1492 = writer.prefix("NetworkInterfaceSet");
    if let Some(var_1493) = &input.network_interfaces {
        let mut list_1495 = scope_1492.start_list(true, Some("item"));
        for item_1494 in var_1493 {
            #[allow(unused_mut)]
            let mut entry_1496 = list_1495.entry();
            crate::query_ser::serialize_structure_crate_model_instance_network_interface_specification(entry_1496, item_1494)?;
        }
        list_1495.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1497 = writer.prefix("Placement");
    if let Some(var_1498) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_spot_placement(scope_1497, var_1498)?;
    }
    #[allow(unused_mut)]
    let mut scope_1499 = writer.prefix("RamdiskId");
    if let Some(var_1500) = &input.ramdisk_id {
        scope_1499.string(var_1500);
    }
    #[allow(unused_mut)]
    let mut scope_1501 = writer.prefix("SpotPrice");
    if let Some(var_1502) = &input.spot_price {
        scope_1501.string(var_1502);
    }
    #[allow(unused_mut)]
    let mut scope_1503 = writer.prefix("SubnetId");
    if let Some(var_1504) = &input.subnet_id {
        scope_1503.string(var_1504);
    }
    #[allow(unused_mut)]
    let mut scope_1505 = writer.prefix("UserData");
    if let Some(var_1506) = &input.user_data {
        scope_1505.string(var_1506);
    }
    #[allow(unused_mut)]
    let mut scope_1507 = writer.prefix("WeightedCapacity");
    if let Some(var_1508) = &input.weighted_capacity {
        scope_1507.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1508).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1509 = writer.prefix("TagSpecificationSet");
    if let Some(var_1510) = &input.tag_specifications {
        let mut list_1512 = scope_1509.start_list(true, Some("item"));
        for item_1511 in var_1510 {
            #[allow(unused_mut)]
            let mut entry_1513 = list_1512.entry();
            crate::query_ser::serialize_structure_crate_model_spot_fleet_tag_specification(
                entry_1513, item_1511,
            )?;
        }
        list_1512.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1514 = writer.prefix("InstanceRequirements");
    if let Some(var_1515) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements(
            scope_1514, var_1515,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_load_balancers_config(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LoadBalancersConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1516 = writer.prefix("ClassicLoadBalancersConfig");
    if let Some(var_1517) = &input.classic_load_balancers_config {
        crate::query_ser::serialize_structure_crate_model_classic_load_balancers_config(
            scope_1516, var_1517,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1518 = writer.prefix("TargetGroupsConfig");
    if let Some(var_1519) = &input.target_groups_config {
        crate::query_ser::serialize_structure_crate_model_target_groups_config(
            scope_1518, var_1519,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_placement(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotPlacement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1520 = writer.prefix("AvailabilityZone");
    if let Some(var_1521) = &input.availability_zone {
        scope_1520.string(var_1521);
    }
    #[allow(unused_mut)]
    let mut scope_1522 = writer.prefix("GroupName");
    if let Some(var_1523) = &input.group_name {
        scope_1522.string(var_1523);
    }
    #[allow(unused_mut)]
    let mut scope_1524 = writer.prefix("Tenancy");
    if let Some(var_1525) = &input.tenancy {
        scope_1524.string(var_1525.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_market_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotMarketOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1526 = writer.prefix("MaxPrice");
    if let Some(var_1527) = &input.max_price {
        scope_1526.string(var_1527);
    }
    #[allow(unused_mut)]
    let mut scope_1528 = writer.prefix("SpotInstanceType");
    if let Some(var_1529) = &input.spot_instance_type {
        scope_1528.string(var_1529.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1530 = writer.prefix("BlockDurationMinutes");
    if let Some(var_1531) = &input.block_duration_minutes {
        scope_1530.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1531).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1532 = writer.prefix("ValidUntil");
    if let Some(var_1533) = &input.valid_until {
        scope_1532.date_time(var_1533, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_1534 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_1535) = &input.instance_interruption_behavior {
        scope_1534.string(var_1535.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_block_device_mapping(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesBlockDeviceMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1536 = writer.prefix("DeviceName");
    if let Some(var_1537) = &input.device_name {
        scope_1536.string(var_1537);
    }
    #[allow(unused_mut)]
    let mut scope_1538 = writer.prefix("Ebs");
    if let Some(var_1539) = &input.ebs {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_ebs(
            scope_1538, var_1539,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1540 = writer.prefix("NoDevice");
    if let Some(var_1541) = &input.no_device {
        scope_1540.string(var_1541);
    }
    #[allow(unused_mut)]
    let mut scope_1542 = writer.prefix("VirtualName");
    if let Some(var_1543) = &input.virtual_name {
        scope_1542.string(var_1543);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_iam_instance_profile(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesIamInstanceProfile,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1544 = writer.prefix("Arn");
    if let Some(var_1545) = &input.arn {
        scope_1544.string(var_1545);
    }
    #[allow(unused_mut)]
    let mut scope_1546 = writer.prefix("Name");
    if let Some(var_1547) = &input.name {
        scope_1546.string(var_1547);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_monitoring(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesMonitoring,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1548 = writer.prefix("Enabled");
    if let Some(var_1549) = &input.enabled {
        scope_1548.boolean(*var_1549);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_network_interface(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesNetworkInterface,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1550 = writer.prefix("AssociatePublicIpAddress");
    if let Some(var_1551) = &input.associate_public_ip_address {
        scope_1550.boolean(*var_1551);
    }
    #[allow(unused_mut)]
    let mut scope_1552 = writer.prefix("DeleteOnTermination");
    if let Some(var_1553) = &input.delete_on_termination {
        scope_1552.boolean(*var_1553);
    }
    #[allow(unused_mut)]
    let mut scope_1554 = writer.prefix("Description");
    if let Some(var_1555) = &input.description {
        scope_1554.string(var_1555);
    }
    #[allow(unused_mut)]
    let mut scope_1556 = writer.prefix("DeviceIndex");
    if let Some(var_1557) = &input.device_index {
        scope_1556.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1557).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1558 = writer.prefix("Group");
    if let Some(var_1559) = &input.groups {
        let mut list_1561 = scope_1558.start_list(true, Some("SecurityGroupId"));
        for item_1560 in var_1559 {
            #[allow(unused_mut)]
            let mut entry_1562 = list_1561.entry();
            entry_1562.string(item_1560);
        }
        list_1561.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1563 = writer.prefix("Ipv6AddressCount");
    if let Some(var_1564) = &input.ipv6_address_count {
        scope_1563.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1564).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1565 = writer.prefix("Ipv6Address");
    if let Some(var_1566) = &input.ipv6_addresses {
        let mut list_1568 = scope_1565.start_list(true, Some("Ipv6Address"));
        for item_1567 in var_1566 {
            #[allow(unused_mut)]
            let mut entry_1569 = list_1568.entry();
            crate::query_ser::serialize_structure_crate_model_scheduled_instances_ipv6_address(
                entry_1569, item_1567,
            )?;
        }
        list_1568.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1570 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1571) = &input.network_interface_id {
        scope_1570.string(var_1571);
    }
    #[allow(unused_mut)]
    let mut scope_1572 = writer.prefix("PrivateIpAddress");
    if let Some(var_1573) = &input.private_ip_address {
        scope_1572.string(var_1573);
    }
    #[allow(unused_mut)]
    let mut scope_1574 = writer.prefix("PrivateIpAddressConfig");
    if let Some(var_1575) = &input.private_ip_address_configs {
        let mut list_1577 = scope_1574.start_list(true, Some("PrivateIpAddressConfigSet"));
        for item_1576 in var_1575 {
            #[allow(unused_mut)]
            let mut entry_1578 = list_1577.entry();
            crate::query_ser::serialize_structure_crate_model_scheduled_instances_private_ip_address_config(entry_1578, item_1576)?;
        }
        list_1577.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1579 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_1580) = &input.secondary_private_ip_address_count {
        scope_1579.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1580).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1581 = writer.prefix("SubnetId");
    if let Some(var_1582) = &input.subnet_id {
        scope_1581.string(var_1582);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_placement(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesPlacement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1583 = writer.prefix("AvailabilityZone");
    if let Some(var_1584) = &input.availability_zone {
        scope_1583.string(var_1584);
    }
    #[allow(unused_mut)]
    let mut scope_1585 = writer.prefix("GroupName");
    if let Some(var_1586) = &input.group_name {
        scope_1585.string(var_1586);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_spot_capacity_rebalance_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FleetSpotCapacityRebalanceRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1587 = writer.prefix("ReplacementStrategy");
    if let Some(var_1588) = &input.replacement_strategy {
        scope_1587.string(var_1588.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1589 = writer.prefix("TerminationDelay");
    if let Some(var_1590) = &input.termination_delay {
        scope_1589.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1590).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_ebs_block_device_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateEbsBlockDeviceRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1591 = writer.prefix("Encrypted");
    if let Some(var_1592) = &input.encrypted {
        scope_1591.boolean(*var_1592);
    }
    #[allow(unused_mut)]
    let mut scope_1593 = writer.prefix("DeleteOnTermination");
    if let Some(var_1594) = &input.delete_on_termination {
        scope_1593.boolean(*var_1594);
    }
    #[allow(unused_mut)]
    let mut scope_1595 = writer.prefix("Iops");
    if let Some(var_1596) = &input.iops {
        scope_1595.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1596).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1597 = writer.prefix("KmsKeyId");
    if let Some(var_1598) = &input.kms_key_id {
        scope_1597.string(var_1598);
    }
    #[allow(unused_mut)]
    let mut scope_1599 = writer.prefix("SnapshotId");
    if let Some(var_1600) = &input.snapshot_id {
        scope_1599.string(var_1600);
    }
    #[allow(unused_mut)]
    let mut scope_1601 = writer.prefix("VolumeSize");
    if let Some(var_1602) = &input.volume_size {
        scope_1601.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1602).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1603 = writer.prefix("VolumeType");
    if let Some(var_1604) = &input.volume_type {
        scope_1603.string(var_1604.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1605 = writer.prefix("Throughput");
    if let Some(var_1606) = &input.throughput {
        scope_1605.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1606).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_ipv6_address_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceIpv6AddressRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1607 = writer.prefix("Ipv6Address");
    if let Some(var_1608) = &input.ipv6_address {
        scope_1607.string(var_1608);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_spot_market_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateSpotMarketOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1609 = writer.prefix("MaxPrice");
    if let Some(var_1610) = &input.max_price {
        scope_1609.string(var_1610);
    }
    #[allow(unused_mut)]
    let mut scope_1611 = writer.prefix("SpotInstanceType");
    if let Some(var_1612) = &input.spot_instance_type {
        scope_1611.string(var_1612.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1613 = writer.prefix("BlockDurationMinutes");
    if let Some(var_1614) = &input.block_duration_minutes {
        scope_1613.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1614).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1615 = writer.prefix("ValidUntil");
    if let Some(var_1616) = &input.valid_until {
        scope_1615.date_time(var_1616, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_1617 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_1618) = &input.instance_interruption_behavior {
        scope_1617.string(var_1618.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_packet_header_statement_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PacketHeaderStatementRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1619 = writer.prefix("SourceAddress");
    if let Some(var_1620) = &input.source_addresses {
        let mut list_1622 = scope_1619.start_list(true, Some("item"));
        for item_1621 in var_1620 {
            #[allow(unused_mut)]
            let mut entry_1623 = list_1622.entry();
            entry_1623.string(item_1621);
        }
        list_1622.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1624 = writer.prefix("DestinationAddress");
    if let Some(var_1625) = &input.destination_addresses {
        let mut list_1627 = scope_1624.start_list(true, Some("item"));
        for item_1626 in var_1625 {
            #[allow(unused_mut)]
            let mut entry_1628 = list_1627.entry();
            entry_1628.string(item_1626);
        }
        list_1627.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1629 = writer.prefix("SourcePort");
    if let Some(var_1630) = &input.source_ports {
        let mut list_1632 = scope_1629.start_list(true, Some("item"));
        for item_1631 in var_1630 {
            #[allow(unused_mut)]
            let mut entry_1633 = list_1632.entry();
            entry_1633.string(item_1631);
        }
        list_1632.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1634 = writer.prefix("DestinationPort");
    if let Some(var_1635) = &input.destination_ports {
        let mut list_1637 = scope_1634.start_list(true, Some("item"));
        for item_1636 in var_1635 {
            #[allow(unused_mut)]
            let mut entry_1638 = list_1637.entry();
            entry_1638.string(item_1636);
        }
        list_1637.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1639 = writer.prefix("SourcePrefixList");
    if let Some(var_1640) = &input.source_prefix_lists {
        let mut list_1642 = scope_1639.start_list(true, Some("item"));
        for item_1641 in var_1640 {
            #[allow(unused_mut)]
            let mut entry_1643 = list_1642.entry();
            entry_1643.string(item_1641);
        }
        list_1642.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1644 = writer.prefix("DestinationPrefixList");
    if let Some(var_1645) = &input.destination_prefix_lists {
        let mut list_1647 = scope_1644.start_list(true, Some("item"));
        for item_1646 in var_1645 {
            #[allow(unused_mut)]
            let mut entry_1648 = list_1647.entry();
            entry_1648.string(item_1646);
        }
        list_1647.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1649 = writer.prefix("Protocol");
    if let Some(var_1650) = &input.protocols {
        let mut list_1652 = scope_1649.start_list(true, Some("item"));
        for item_1651 in var_1650 {
            #[allow(unused_mut)]
            let mut entry_1653 = list_1652.entry();
            entry_1653.string(item_1651.as_str());
        }
        list_1652.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_resource_statement_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ResourceStatementRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1654 = writer.prefix("Resource");
    if let Some(var_1655) = &input.resources {
        let mut list_1657 = scope_1654.start_list(true, Some("item"));
        for item_1656 in var_1655 {
            #[allow(unused_mut)]
            let mut entry_1658 = list_1657.entry();
            entry_1658.string(item_1656);
        }
        list_1657.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1659 = writer.prefix("ResourceType");
    if let Some(var_1660) = &input.resource_types {
        let mut list_1662 = scope_1659.start_list(true, Some("item"));
        for item_1661 in var_1660 {
            #[allow(unused_mut)]
            let mut entry_1663 = list_1662.entry();
            entry_1663.string(item_1661);
        }
        list_1662.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_requirements(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceRequirements,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1664 = writer.prefix("VCpuCount");
    if let Some(var_1665) = &input.v_cpu_count {
        crate::query_ser::serialize_structure_crate_model_v_cpu_count_range(scope_1664, var_1665)?;
    }
    #[allow(unused_mut)]
    let mut scope_1666 = writer.prefix("MemoryMiB");
    if let Some(var_1667) = &input.memory_mi_b {
        crate::query_ser::serialize_structure_crate_model_memory_mi_b(scope_1666, var_1667)?;
    }
    #[allow(unused_mut)]
    let mut scope_1668 = writer.prefix("CpuManufacturerSet");
    if let Some(var_1669) = &input.cpu_manufacturers {
        let mut list_1671 = scope_1668.start_list(true, Some("item"));
        for item_1670 in var_1669 {
            #[allow(unused_mut)]
            let mut entry_1672 = list_1671.entry();
            entry_1672.string(item_1670.as_str());
        }
        list_1671.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1673 = writer.prefix("MemoryGiBPerVCpu");
    if let Some(var_1674) = &input.memory_gi_b_per_v_cpu {
        crate::query_ser::serialize_structure_crate_model_memory_gi_b_per_v_cpu(
            scope_1673, var_1674,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1675 = writer.prefix("ExcludedInstanceTypeSet");
    if let Some(var_1676) = &input.excluded_instance_types {
        let mut list_1678 = scope_1675.start_list(true, Some("item"));
        for item_1677 in var_1676 {
            #[allow(unused_mut)]
            let mut entry_1679 = list_1678.entry();
            entry_1679.string(item_1677);
        }
        list_1678.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1680 = writer.prefix("InstanceGenerationSet");
    if let Some(var_1681) = &input.instance_generations {
        let mut list_1683 = scope_1680.start_list(true, Some("item"));
        for item_1682 in var_1681 {
            #[allow(unused_mut)]
            let mut entry_1684 = list_1683.entry();
            entry_1684.string(item_1682.as_str());
        }
        list_1683.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1685 = writer.prefix("SpotMaxPricePercentageOverLowestPrice");
    if let Some(var_1686) = &input.spot_max_price_percentage_over_lowest_price {
        scope_1685.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1686).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1687 = writer.prefix("OnDemandMaxPricePercentageOverLowestPrice");
    if let Some(var_1688) = &input.on_demand_max_price_percentage_over_lowest_price {
        scope_1687.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1688).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1689 = writer.prefix("BareMetal");
    if let Some(var_1690) = &input.bare_metal {
        scope_1689.string(var_1690.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1691 = writer.prefix("BurstablePerformance");
    if let Some(var_1692) = &input.burstable_performance {
        scope_1691.string(var_1692.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1693 = writer.prefix("RequireHibernateSupport");
    if let Some(var_1694) = &input.require_hibernate_support {
        scope_1693.boolean(*var_1694);
    }
    #[allow(unused_mut)]
    let mut scope_1695 = writer.prefix("NetworkInterfaceCount");
    if let Some(var_1696) = &input.network_interface_count {
        crate::query_ser::serialize_structure_crate_model_network_interface_count(
            scope_1695, var_1696,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1697 = writer.prefix("LocalStorage");
    if let Some(var_1698) = &input.local_storage {
        scope_1697.string(var_1698.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1699 = writer.prefix("LocalStorageTypeSet");
    if let Some(var_1700) = &input.local_storage_types {
        let mut list_1702 = scope_1699.start_list(true, Some("item"));
        for item_1701 in var_1700 {
            #[allow(unused_mut)]
            let mut entry_1703 = list_1702.entry();
            entry_1703.string(item_1701.as_str());
        }
        list_1702.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1704 = writer.prefix("TotalLocalStorageGB");
    if let Some(var_1705) = &input.total_local_storage_gb {
        crate::query_ser::serialize_structure_crate_model_total_local_storage_gb(
            scope_1704, var_1705,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1706 = writer.prefix("BaselineEbsBandwidthMbps");
    if let Some(var_1707) = &input.baseline_ebs_bandwidth_mbps {
        crate::query_ser::serialize_structure_crate_model_baseline_ebs_bandwidth_mbps(
            scope_1706, var_1707,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1708 = writer.prefix("AcceleratorTypeSet");
    if let Some(var_1709) = &input.accelerator_types {
        let mut list_1711 = scope_1708.start_list(true, Some("item"));
        for item_1710 in var_1709 {
            #[allow(unused_mut)]
            let mut entry_1712 = list_1711.entry();
            entry_1712.string(item_1710.as_str());
        }
        list_1711.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1713 = writer.prefix("AcceleratorCount");
    if let Some(var_1714) = &input.accelerator_count {
        crate::query_ser::serialize_structure_crate_model_accelerator_count(scope_1713, var_1714)?;
    }
    #[allow(unused_mut)]
    let mut scope_1715 = writer.prefix("AcceleratorManufacturerSet");
    if let Some(var_1716) = &input.accelerator_manufacturers {
        let mut list_1718 = scope_1715.start_list(true, Some("item"));
        for item_1717 in var_1716 {
            #[allow(unused_mut)]
            let mut entry_1719 = list_1718.entry();
            entry_1719.string(item_1717.as_str());
        }
        list_1718.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1720 = writer.prefix("AcceleratorNameSet");
    if let Some(var_1721) = &input.accelerator_names {
        let mut list_1723 = scope_1720.start_list(true, Some("item"));
        for item_1722 in var_1721 {
            #[allow(unused_mut)]
            let mut entry_1724 = list_1723.entry();
            entry_1724.string(item_1722.as_str());
        }
        list_1723.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1725 = writer.prefix("AcceleratorTotalMemoryMiB");
    if let Some(var_1726) = &input.accelerator_total_memory_mi_b {
        crate::query_ser::serialize_structure_crate_model_accelerator_total_memory_mi_b(
            scope_1725, var_1726,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_capacity_rebalance(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotCapacityRebalance,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1727 = writer.prefix("ReplacementStrategy");
    if let Some(var_1728) = &input.replacement_strategy {
        scope_1727.string(var_1728.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1729 = writer.prefix("TerminationDelay");
    if let Some(var_1730) = &input.termination_delay {
        scope_1729.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1730).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_group_identifier(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::GroupIdentifier,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1731 = writer.prefix("GroupName");
    if let Some(var_1732) = &input.group_name {
        scope_1731.string(var_1732);
    }
    #[allow(unused_mut)]
    let mut scope_1733 = writer.prefix("GroupId");
    if let Some(var_1734) = &input.group_id {
        scope_1733.string(var_1734);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_fleet_monitoring(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotFleetMonitoring,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1735 = writer.prefix("Enabled");
    if let Some(var_1736) = &input.enabled {
        scope_1735.boolean(*var_1736);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_fleet_tag_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotFleetTagSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1737 = writer.prefix("ResourceType");
    if let Some(var_1738) = &input.resource_type {
        scope_1737.string(var_1738.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1739 = writer.prefix("Tag");
    if let Some(var_1740) = &input.tags {
        let mut list_1742 = scope_1739.start_list(true, Some("item"));
        for item_1741 in var_1740 {
            #[allow(unused_mut)]
            let mut entry_1743 = list_1742.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1743, item_1741)?;
        }
        list_1742.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_classic_load_balancers_config(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ClassicLoadBalancersConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1744 = writer.prefix("ClassicLoadBalancers");
    if let Some(var_1745) = &input.classic_load_balancers {
        let mut list_1747 = scope_1744.start_list(true, Some("item"));
        for item_1746 in var_1745 {
            #[allow(unused_mut)]
            let mut entry_1748 = list_1747.entry();
            crate::query_ser::serialize_structure_crate_model_classic_load_balancer(
                entry_1748, item_1746,
            )?;
        }
        list_1747.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_target_groups_config(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TargetGroupsConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1749 = writer.prefix("TargetGroups");
    if let Some(var_1750) = &input.target_groups {
        let mut list_1752 = scope_1749.start_list(true, Some("item"));
        for item_1751 in var_1750 {
            #[allow(unused_mut)]
            let mut entry_1753 = list_1752.entry();
            crate::query_ser::serialize_structure_crate_model_target_group(entry_1753, item_1751)?;
        }
        list_1752.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_ebs(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesEbs,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1754 = writer.prefix("DeleteOnTermination");
    if let Some(var_1755) = &input.delete_on_termination {
        scope_1754.boolean(*var_1755);
    }
    #[allow(unused_mut)]
    let mut scope_1756 = writer.prefix("Encrypted");
    if let Some(var_1757) = &input.encrypted {
        scope_1756.boolean(*var_1757);
    }
    #[allow(unused_mut)]
    let mut scope_1758 = writer.prefix("Iops");
    if let Some(var_1759) = &input.iops {
        scope_1758.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1759).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1760 = writer.prefix("SnapshotId");
    if let Some(var_1761) = &input.snapshot_id {
        scope_1760.string(var_1761);
    }
    #[allow(unused_mut)]
    let mut scope_1762 = writer.prefix("VolumeSize");
    if let Some(var_1763) = &input.volume_size {
        scope_1762.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1763).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1764 = writer.prefix("VolumeType");
    if let Some(var_1765) = &input.volume_type {
        scope_1764.string(var_1765);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_ipv6_address(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesIpv6Address,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1766 = writer.prefix("Ipv6Address");
    if let Some(var_1767) = &input.ipv6_address {
        scope_1766.string(var_1767);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_private_ip_address_config(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesPrivateIpAddressConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1768 = writer.prefix("Primary");
    if let Some(var_1769) = &input.primary {
        scope_1768.boolean(*var_1769);
    }
    #[allow(unused_mut)]
    let mut scope_1770 = writer.prefix("PrivateIpAddress");
    if let Some(var_1771) = &input.private_ip_address {
        scope_1770.string(var_1771);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_v_cpu_count_range(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::VCpuCountRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1772 = writer.prefix("Min");
    if let Some(var_1773) = &input.min {
        scope_1772.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1773).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1774 = writer.prefix("Max");
    if let Some(var_1775) = &input.max {
        scope_1774.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1775).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_memory_mi_b(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::MemoryMiB,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1776 = writer.prefix("Min");
    if let Some(var_1777) = &input.min {
        scope_1776.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1777).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1778 = writer.prefix("Max");
    if let Some(var_1779) = &input.max {
        scope_1778.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1779).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_memory_gi_b_per_v_cpu(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::MemoryGiBPerVCpu,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1780 = writer.prefix("Min");
    if let Some(var_1781) = &input.min {
        scope_1780.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1781).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1782 = writer.prefix("Max");
    if let Some(var_1783) = &input.max {
        scope_1782.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1783).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_network_interface_count(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::NetworkInterfaceCount,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1784 = writer.prefix("Min");
    if let Some(var_1785) = &input.min {
        scope_1784.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1785).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1786 = writer.prefix("Max");
    if let Some(var_1787) = &input.max {
        scope_1786.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1787).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_total_local_storage_gb(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TotalLocalStorageGb,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1788 = writer.prefix("Min");
    if let Some(var_1789) = &input.min {
        scope_1788.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1789).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1790 = writer.prefix("Max");
    if let Some(var_1791) = &input.max {
        scope_1790.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1791).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_baseline_ebs_bandwidth_mbps(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::BaselineEbsBandwidthMbps,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1792 = writer.prefix("Min");
    if let Some(var_1793) = &input.min {
        scope_1792.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1793).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1794 = writer.prefix("Max");
    if let Some(var_1795) = &input.max {
        scope_1794.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1795).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_accelerator_count(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AcceleratorCount,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1796 = writer.prefix("Min");
    if let Some(var_1797) = &input.min {
        scope_1796.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1797).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1798 = writer.prefix("Max");
    if let Some(var_1799) = &input.max {
        scope_1798.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1799).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_accelerator_total_memory_mi_b(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AcceleratorTotalMemoryMiB,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1800 = writer.prefix("Min");
    if let Some(var_1801) = &input.min {
        scope_1800.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1801).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1802 = writer.prefix("Max");
    if let Some(var_1803) = &input.max {
        scope_1802.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1803).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_classic_load_balancer(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ClassicLoadBalancer,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1804 = writer.prefix("Name");
    if let Some(var_1805) = &input.name {
        scope_1804.string(var_1805);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_target_group(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TargetGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1806 = writer.prefix("Arn");
    if let Some(var_1807) = &input.arn {
        scope_1806.string(var_1807);
    }
    Ok(())
}
