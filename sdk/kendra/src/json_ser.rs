// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_associate_entities_to_experience_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateEntitiesToExperienceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.id {
        object.key("Id").string(var_1.as_str());
    }
    if let Some(var_2) = &input.index_id {
        object.key("IndexId").string(var_2.as_str());
    }
    if let Some(var_3) = &input.entity_list {
        let mut array_4 = object.key("EntityList").start_array();
        for item_5 in var_3 {
            {
                let mut object_6 = array_4.value().start_object();
                crate::json_ser::serialize_structure_crate_model_entity_configuration(
                    &mut object_6,
                    item_5,
                )?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_personas_to_entities_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociatePersonasToEntitiesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_7) = &input.id {
        object.key("Id").string(var_7.as_str());
    }
    if let Some(var_8) = &input.index_id {
        object.key("IndexId").string(var_8.as_str());
    }
    if let Some(var_9) = &input.personas {
        let mut array_10 = object.key("Personas").start_array();
        for item_11 in var_9 {
            {
                let mut object_12 = array_10.value().start_object();
                crate::json_ser::serialize_structure_crate_model_entity_persona_configuration(
                    &mut object_12,
                    item_11,
                )?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_delete_document_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDeleteDocumentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_13) = &input.index_id {
        object.key("IndexId").string(var_13.as_str());
    }
    if let Some(var_14) = &input.document_id_list {
        let mut array_15 = object.key("DocumentIdList").start_array();
        for item_16 in var_14 {
            {
                array_15.value().string(item_16.as_str());
            }
        }
        array_15.finish();
    }
    if let Some(var_17) = &input.data_source_sync_job_metric_target {
        let mut object_18 = object.key("DataSourceSyncJobMetricTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_sync_job_metric_target(
            &mut object_18,
            var_17,
        )?;
        object_18.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_document_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetDocumentStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_19) = &input.index_id {
        object.key("IndexId").string(var_19.as_str());
    }
    if let Some(var_20) = &input.document_info_list {
        let mut array_21 = object.key("DocumentInfoList").start_array();
        for item_22 in var_20 {
            {
                let mut object_23 = array_21.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_info(
                    &mut object_23,
                    item_22,
                )?;
                object_23.finish();
            }
        }
        array_21.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_put_document_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchPutDocumentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_24) = &input.index_id {
        object.key("IndexId").string(var_24.as_str());
    }
    if let Some(var_25) = &input.role_arn {
        object.key("RoleArn").string(var_25.as_str());
    }
    if let Some(var_26) = &input.documents {
        let mut array_27 = object.key("Documents").start_array();
        for item_28 in var_26 {
            {
                let mut object_29 = array_27.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document(&mut object_29, item_28)?;
                object_29.finish();
            }
        }
        array_27.finish();
    }
    if let Some(var_30) = &input.custom_document_enrichment_configuration {
        let mut object_31 = object
            .key("CustomDocumentEnrichmentConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_custom_document_enrichment_configuration(
            &mut object_31,
            var_30,
        )?;
        object_31.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_clear_query_suggestions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ClearQuerySuggestionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_32) = &input.index_id {
        object.key("IndexId").string(var_32.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_data_source_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDataSourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_33) = &input.name {
        object.key("Name").string(var_33.as_str());
    }
    if let Some(var_34) = &input.index_id {
        object.key("IndexId").string(var_34.as_str());
    }
    if let Some(var_35) = &input.r#type {
        object.key("Type").string(var_35.as_str());
    }
    if let Some(var_36) = &input.configuration {
        let mut object_37 = object.key("Configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_configuration(
            &mut object_37,
            var_36,
        )?;
        object_37.finish();
    }
    if let Some(var_38) = &input.description {
        object.key("Description").string(var_38.as_str());
    }
    if let Some(var_39) = &input.schedule {
        object.key("Schedule").string(var_39.as_str());
    }
    if let Some(var_40) = &input.role_arn {
        object.key("RoleArn").string(var_40.as_str());
    }
    if let Some(var_41) = &input.tags {
        let mut array_42 = object.key("Tags").start_array();
        for item_43 in var_41 {
            {
                let mut object_44 = array_42.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_44, item_43)?;
                object_44.finish();
            }
        }
        array_42.finish();
    }
    if let Some(var_45) = &input.client_token {
        object.key("ClientToken").string(var_45.as_str());
    }
    if let Some(var_46) = &input.language_code {
        object.key("LanguageCode").string(var_46.as_str());
    }
    if let Some(var_47) = &input.custom_document_enrichment_configuration {
        let mut object_48 = object
            .key("CustomDocumentEnrichmentConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_custom_document_enrichment_configuration(
            &mut object_48,
            var_47,
        )?;
        object_48.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_experience_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateExperienceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_49) = &input.name {
        object.key("Name").string(var_49.as_str());
    }
    if let Some(var_50) = &input.index_id {
        object.key("IndexId").string(var_50.as_str());
    }
    if let Some(var_51) = &input.role_arn {
        object.key("RoleArn").string(var_51.as_str());
    }
    if let Some(var_52) = &input.configuration {
        let mut object_53 = object.key("Configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_experience_configuration(
            &mut object_53,
            var_52,
        )?;
        object_53.finish();
    }
    if let Some(var_54) = &input.description {
        object.key("Description").string(var_54.as_str());
    }
    if let Some(var_55) = &input.client_token {
        object.key("ClientToken").string(var_55.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_faq_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFaqInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_56) = &input.index_id {
        object.key("IndexId").string(var_56.as_str());
    }
    if let Some(var_57) = &input.name {
        object.key("Name").string(var_57.as_str());
    }
    if let Some(var_58) = &input.description {
        object.key("Description").string(var_58.as_str());
    }
    if let Some(var_59) = &input.s3_path {
        let mut object_60 = object.key("S3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_60, var_59)?;
        object_60.finish();
    }
    if let Some(var_61) = &input.role_arn {
        object.key("RoleArn").string(var_61.as_str());
    }
    if let Some(var_62) = &input.tags {
        let mut array_63 = object.key("Tags").start_array();
        for item_64 in var_62 {
            {
                let mut object_65 = array_63.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_65, item_64)?;
                object_65.finish();
            }
        }
        array_63.finish();
    }
    if let Some(var_66) = &input.file_format {
        object.key("FileFormat").string(var_66.as_str());
    }
    if let Some(var_67) = &input.client_token {
        object.key("ClientToken").string(var_67.as_str());
    }
    if let Some(var_68) = &input.language_code {
        object.key("LanguageCode").string(var_68.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_index_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateIndexInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_69) = &input.name {
        object.key("Name").string(var_69.as_str());
    }
    if let Some(var_70) = &input.edition {
        object.key("Edition").string(var_70.as_str());
    }
    if let Some(var_71) = &input.role_arn {
        object.key("RoleArn").string(var_71.as_str());
    }
    if let Some(var_72) = &input.server_side_encryption_configuration {
        let mut object_73 = object
            .key("ServerSideEncryptionConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_server_side_encryption_configuration(
            &mut object_73,
            var_72,
        )?;
        object_73.finish();
    }
    if let Some(var_74) = &input.description {
        object.key("Description").string(var_74.as_str());
    }
    if let Some(var_75) = &input.client_token {
        object.key("ClientToken").string(var_75.as_str());
    }
    if let Some(var_76) = &input.tags {
        let mut array_77 = object.key("Tags").start_array();
        for item_78 in var_76 {
            {
                let mut object_79 = array_77.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_79, item_78)?;
                object_79.finish();
            }
        }
        array_77.finish();
    }
    if let Some(var_80) = &input.user_token_configurations {
        let mut array_81 = object.key("UserTokenConfigurations").start_array();
        for item_82 in var_80 {
            {
                let mut object_83 = array_81.value().start_object();
                crate::json_ser::serialize_structure_crate_model_user_token_configuration(
                    &mut object_83,
                    item_82,
                )?;
                object_83.finish();
            }
        }
        array_81.finish();
    }
    if let Some(var_84) = &input.user_context_policy {
        object.key("UserContextPolicy").string(var_84.as_str());
    }
    if let Some(var_85) = &input.user_group_resolution_configuration {
        let mut object_86 = object
            .key("UserGroupResolutionConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_user_group_resolution_configuration(
            &mut object_86,
            var_85,
        )?;
        object_86.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_query_suggestions_block_list_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateQuerySuggestionsBlockListInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_87) = &input.index_id {
        object.key("IndexId").string(var_87.as_str());
    }
    if let Some(var_88) = &input.name {
        object.key("Name").string(var_88.as_str());
    }
    if let Some(var_89) = &input.description {
        object.key("Description").string(var_89.as_str());
    }
    if let Some(var_90) = &input.source_s3_path {
        let mut object_91 = object.key("SourceS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_91, var_90)?;
        object_91.finish();
    }
    if let Some(var_92) = &input.client_token {
        object.key("ClientToken").string(var_92.as_str());
    }
    if let Some(var_93) = &input.role_arn {
        object.key("RoleArn").string(var_93.as_str());
    }
    if let Some(var_94) = &input.tags {
        let mut array_95 = object.key("Tags").start_array();
        for item_96 in var_94 {
            {
                let mut object_97 = array_95.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_97, item_96)?;
                object_97.finish();
            }
        }
        array_95.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_thesaurus_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateThesaurusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_98) = &input.index_id {
        object.key("IndexId").string(var_98.as_str());
    }
    if let Some(var_99) = &input.name {
        object.key("Name").string(var_99.as_str());
    }
    if let Some(var_100) = &input.description {
        object.key("Description").string(var_100.as_str());
    }
    if let Some(var_101) = &input.role_arn {
        object.key("RoleArn").string(var_101.as_str());
    }
    if let Some(var_102) = &input.tags {
        let mut array_103 = object.key("Tags").start_array();
        for item_104 in var_102 {
            {
                let mut object_105 = array_103.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_105, item_104)?;
                object_105.finish();
            }
        }
        array_103.finish();
    }
    if let Some(var_106) = &input.source_s3_path {
        let mut object_107 = object.key("SourceS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_107, var_106)?;
        object_107.finish();
    }
    if let Some(var_108) = &input.client_token {
        object.key("ClientToken").string(var_108.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_data_source_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDataSourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_109) = &input.id {
        object.key("Id").string(var_109.as_str());
    }
    if let Some(var_110) = &input.index_id {
        object.key("IndexId").string(var_110.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_experience_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteExperienceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_111) = &input.id {
        object.key("Id").string(var_111.as_str());
    }
    if let Some(var_112) = &input.index_id {
        object.key("IndexId").string(var_112.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_faq_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFaqInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_113) = &input.id {
        object.key("Id").string(var_113.as_str());
    }
    if let Some(var_114) = &input.index_id {
        object.key("IndexId").string(var_114.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_index_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteIndexInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_115) = &input.id {
        object.key("Id").string(var_115.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_principal_mapping_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePrincipalMappingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_116) = &input.index_id {
        object.key("IndexId").string(var_116.as_str());
    }
    if let Some(var_117) = &input.data_source_id {
        object.key("DataSourceId").string(var_117.as_str());
    }
    if let Some(var_118) = &input.group_id {
        object.key("GroupId").string(var_118.as_str());
    }
    if let Some(var_119) = &input.ordering_id {
        object.key("OrderingId").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_119).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_query_suggestions_block_list_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteQuerySuggestionsBlockListInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_120) = &input.index_id {
        object.key("IndexId").string(var_120.as_str());
    }
    if let Some(var_121) = &input.id {
        object.key("Id").string(var_121.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_thesaurus_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteThesaurusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_122) = &input.id {
        object.key("Id").string(var_122.as_str());
    }
    if let Some(var_123) = &input.index_id {
        object.key("IndexId").string(var_123.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_data_source_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDataSourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_124) = &input.id {
        object.key("Id").string(var_124.as_str());
    }
    if let Some(var_125) = &input.index_id {
        object.key("IndexId").string(var_125.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_experience_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeExperienceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_126) = &input.id {
        object.key("Id").string(var_126.as_str());
    }
    if let Some(var_127) = &input.index_id {
        object.key("IndexId").string(var_127.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_faq_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFaqInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_128) = &input.id {
        object.key("Id").string(var_128.as_str());
    }
    if let Some(var_129) = &input.index_id {
        object.key("IndexId").string(var_129.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_index_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeIndexInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_130) = &input.id {
        object.key("Id").string(var_130.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_principal_mapping_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePrincipalMappingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_131) = &input.index_id {
        object.key("IndexId").string(var_131.as_str());
    }
    if let Some(var_132) = &input.data_source_id {
        object.key("DataSourceId").string(var_132.as_str());
    }
    if let Some(var_133) = &input.group_id {
        object.key("GroupId").string(var_133.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_query_suggestions_block_list_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeQuerySuggestionsBlockListInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_134) = &input.index_id {
        object.key("IndexId").string(var_134.as_str());
    }
    if let Some(var_135) = &input.id {
        object.key("Id").string(var_135.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_query_suggestions_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeQuerySuggestionsConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_136) = &input.index_id {
        object.key("IndexId").string(var_136.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_thesaurus_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeThesaurusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_137) = &input.id {
        object.key("Id").string(var_137.as_str());
    }
    if let Some(var_138) = &input.index_id {
        object.key("IndexId").string(var_138.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_entities_from_experience_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateEntitiesFromExperienceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_139) = &input.id {
        object.key("Id").string(var_139.as_str());
    }
    if let Some(var_140) = &input.index_id {
        object.key("IndexId").string(var_140.as_str());
    }
    if let Some(var_141) = &input.entity_list {
        let mut array_142 = object.key("EntityList").start_array();
        for item_143 in var_141 {
            {
                let mut object_144 = array_142.value().start_object();
                crate::json_ser::serialize_structure_crate_model_entity_configuration(
                    &mut object_144,
                    item_143,
                )?;
                object_144.finish();
            }
        }
        array_142.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_personas_from_entities_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociatePersonasFromEntitiesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_145) = &input.id {
        object.key("Id").string(var_145.as_str());
    }
    if let Some(var_146) = &input.index_id {
        object.key("IndexId").string(var_146.as_str());
    }
    if let Some(var_147) = &input.entity_ids {
        let mut array_148 = object.key("EntityIds").start_array();
        for item_149 in var_147 {
            {
                array_148.value().string(item_149.as_str());
            }
        }
        array_148.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_query_suggestions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetQuerySuggestionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_150) = &input.index_id {
        object.key("IndexId").string(var_150.as_str());
    }
    if let Some(var_151) = &input.query_text {
        object.key("QueryText").string(var_151.as_str());
    }
    if let Some(var_152) = &input.max_suggestions_count {
        object.key("MaxSuggestionsCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_152).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_snapshots_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSnapshotsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_153) = &input.index_id {
        object.key("IndexId").string(var_153.as_str());
    }
    if let Some(var_154) = &input.interval {
        object.key("Interval").string(var_154.as_str());
    }
    if let Some(var_155) = &input.metric_type {
        object.key("MetricType").string(var_155.as_str());
    }
    if let Some(var_156) = &input.next_token {
        object.key("NextToken").string(var_156.as_str());
    }
    if let Some(var_157) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_157).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_data_sources_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDataSourcesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_158) = &input.index_id {
        object.key("IndexId").string(var_158.as_str());
    }
    if let Some(var_159) = &input.next_token {
        object.key("NextToken").string(var_159.as_str());
    }
    if let Some(var_160) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_160).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_data_source_sync_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDataSourceSyncJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_161) = &input.id {
        object.key("Id").string(var_161.as_str());
    }
    if let Some(var_162) = &input.index_id {
        object.key("IndexId").string(var_162.as_str());
    }
    if let Some(var_163) = &input.next_token {
        object.key("NextToken").string(var_163.as_str());
    }
    if let Some(var_164) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_164).into()),
        );
    }
    if let Some(var_165) = &input.start_time_filter {
        let mut object_166 = object.key("StartTimeFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_time_range(&mut object_166, var_165)?;
        object_166.finish();
    }
    if let Some(var_167) = &input.status_filter {
        object.key("StatusFilter").string(var_167.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_entity_personas_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEntityPersonasInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_168) = &input.id {
        object.key("Id").string(var_168.as_str());
    }
    if let Some(var_169) = &input.index_id {
        object.key("IndexId").string(var_169.as_str());
    }
    if let Some(var_170) = &input.next_token {
        object.key("NextToken").string(var_170.as_str());
    }
    if let Some(var_171) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_171).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_experience_entities_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListExperienceEntitiesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_172) = &input.id {
        object.key("Id").string(var_172.as_str());
    }
    if let Some(var_173) = &input.index_id {
        object.key("IndexId").string(var_173.as_str());
    }
    if let Some(var_174) = &input.next_token {
        object.key("NextToken").string(var_174.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_experiences_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListExperiencesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_175) = &input.index_id {
        object.key("IndexId").string(var_175.as_str());
    }
    if let Some(var_176) = &input.next_token {
        object.key("NextToken").string(var_176.as_str());
    }
    if let Some(var_177) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_177).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_faqs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListFaqsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_178) = &input.index_id {
        object.key("IndexId").string(var_178.as_str());
    }
    if let Some(var_179) = &input.next_token {
        object.key("NextToken").string(var_179.as_str());
    }
    if let Some(var_180) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_180).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_groups_older_than_ordering_id_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListGroupsOlderThanOrderingIdInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_181) = &input.index_id {
        object.key("IndexId").string(var_181.as_str());
    }
    if let Some(var_182) = &input.data_source_id {
        object.key("DataSourceId").string(var_182.as_str());
    }
    if let Some(var_183) = &input.ordering_id {
        object.key("OrderingId").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_183).into()),
        );
    }
    if let Some(var_184) = &input.next_token {
        object.key("NextToken").string(var_184.as_str());
    }
    if let Some(var_185) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_185).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_indices_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListIndicesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_186) = &input.next_token {
        object.key("NextToken").string(var_186.as_str());
    }
    if let Some(var_187) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_187).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_query_suggestions_block_lists_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListQuerySuggestionsBlockListsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_188) = &input.index_id {
        object.key("IndexId").string(var_188.as_str());
    }
    if let Some(var_189) = &input.next_token {
        object.key("NextToken").string(var_189.as_str());
    }
    if let Some(var_190) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_190).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_191) = &input.resource_arn {
        object.key("ResourceARN").string(var_191.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_thesauri_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListThesauriInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_192) = &input.index_id {
        object.key("IndexId").string(var_192.as_str());
    }
    if let Some(var_193) = &input.next_token {
        object.key("NextToken").string(var_193.as_str());
    }
    if let Some(var_194) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_194).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_principal_mapping_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutPrincipalMappingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_195) = &input.index_id {
        object.key("IndexId").string(var_195.as_str());
    }
    if let Some(var_196) = &input.data_source_id {
        object.key("DataSourceId").string(var_196.as_str());
    }
    if let Some(var_197) = &input.group_id {
        object.key("GroupId").string(var_197.as_str());
    }
    if let Some(var_198) = &input.group_members {
        let mut object_199 = object.key("GroupMembers").start_object();
        crate::json_ser::serialize_structure_crate_model_group_members(&mut object_199, var_198)?;
        object_199.finish();
    }
    if let Some(var_200) = &input.ordering_id {
        object.key("OrderingId").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_200).into()),
        );
    }
    if let Some(var_201) = &input.role_arn {
        object.key("RoleArn").string(var_201.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_query_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::QueryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_202) = &input.index_id {
        object.key("IndexId").string(var_202.as_str());
    }
    if let Some(var_203) = &input.query_text {
        object.key("QueryText").string(var_203.as_str());
    }
    if let Some(var_204) = &input.attribute_filter {
        let mut object_205 = object.key("AttributeFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_attribute_filter(
            &mut object_205,
            var_204,
        )?;
        object_205.finish();
    }
    if let Some(var_206) = &input.facets {
        let mut array_207 = object.key("Facets").start_array();
        for item_208 in var_206 {
            {
                let mut object_209 = array_207.value().start_object();
                crate::json_ser::serialize_structure_crate_model_facet(&mut object_209, item_208)?;
                object_209.finish();
            }
        }
        array_207.finish();
    }
    if let Some(var_210) = &input.requested_document_attributes {
        let mut array_211 = object.key("RequestedDocumentAttributes").start_array();
        for item_212 in var_210 {
            {
                array_211.value().string(item_212.as_str());
            }
        }
        array_211.finish();
    }
    if let Some(var_213) = &input.query_result_type_filter {
        object.key("QueryResultTypeFilter").string(var_213.as_str());
    }
    if let Some(var_214) = &input.document_relevance_override_configurations {
        let mut array_215 = object
            .key("DocumentRelevanceOverrideConfigurations")
            .start_array();
        for item_216 in var_214 {
            {
                let mut object_217 = array_215.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_relevance_configuration(
                    &mut object_217,
                    item_216,
                )?;
                object_217.finish();
            }
        }
        array_215.finish();
    }
    if let Some(var_218) = &input.page_number {
        object.key("PageNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_218).into()),
        );
    }
    if let Some(var_219) = &input.page_size {
        object.key("PageSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_219).into()),
        );
    }
    if let Some(var_220) = &input.sorting_configuration {
        let mut object_221 = object.key("SortingConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_sorting_configuration(
            &mut object_221,
            var_220,
        )?;
        object_221.finish();
    }
    if let Some(var_222) = &input.user_context {
        let mut object_223 = object.key("UserContext").start_object();
        crate::json_ser::serialize_structure_crate_model_user_context(&mut object_223, var_222)?;
        object_223.finish();
    }
    if let Some(var_224) = &input.visitor_id {
        object.key("VisitorId").string(var_224.as_str());
    }
    if let Some(var_225) = &input.spell_correction_configuration {
        let mut object_226 = object.key("SpellCorrectionConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_spell_correction_configuration(
            &mut object_226,
            var_225,
        )?;
        object_226.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_data_source_sync_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartDataSourceSyncJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_227) = &input.id {
        object.key("Id").string(var_227.as_str());
    }
    if let Some(var_228) = &input.index_id {
        object.key("IndexId").string(var_228.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_data_source_sync_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopDataSourceSyncJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_229) = &input.id {
        object.key("Id").string(var_229.as_str());
    }
    if let Some(var_230) = &input.index_id {
        object.key("IndexId").string(var_230.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_submit_feedback_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SubmitFeedbackInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_231) = &input.index_id {
        object.key("IndexId").string(var_231.as_str());
    }
    if let Some(var_232) = &input.query_id {
        object.key("QueryId").string(var_232.as_str());
    }
    if let Some(var_233) = &input.click_feedback_items {
        let mut array_234 = object.key("ClickFeedbackItems").start_array();
        for item_235 in var_233 {
            {
                let mut object_236 = array_234.value().start_object();
                crate::json_ser::serialize_structure_crate_model_click_feedback(
                    &mut object_236,
                    item_235,
                )?;
                object_236.finish();
            }
        }
        array_234.finish();
    }
    if let Some(var_237) = &input.relevance_feedback_items {
        let mut array_238 = object.key("RelevanceFeedbackItems").start_array();
        for item_239 in var_237 {
            {
                let mut object_240 = array_238.value().start_object();
                crate::json_ser::serialize_structure_crate_model_relevance_feedback(
                    &mut object_240,
                    item_239,
                )?;
                object_240.finish();
            }
        }
        array_238.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_241) = &input.resource_arn {
        object.key("ResourceARN").string(var_241.as_str());
    }
    if let Some(var_242) = &input.tags {
        let mut array_243 = object.key("Tags").start_array();
        for item_244 in var_242 {
            {
                let mut object_245 = array_243.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_245, item_244)?;
                object_245.finish();
            }
        }
        array_243.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_246) = &input.resource_arn {
        object.key("ResourceARN").string(var_246.as_str());
    }
    if let Some(var_247) = &input.tag_keys {
        let mut array_248 = object.key("TagKeys").start_array();
        for item_249 in var_247 {
            {
                array_248.value().string(item_249.as_str());
            }
        }
        array_248.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_data_source_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDataSourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_250) = &input.id {
        object.key("Id").string(var_250.as_str());
    }
    if let Some(var_251) = &input.name {
        object.key("Name").string(var_251.as_str());
    }
    if let Some(var_252) = &input.index_id {
        object.key("IndexId").string(var_252.as_str());
    }
    if let Some(var_253) = &input.configuration {
        let mut object_254 = object.key("Configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_configuration(
            &mut object_254,
            var_253,
        )?;
        object_254.finish();
    }
    if let Some(var_255) = &input.description {
        object.key("Description").string(var_255.as_str());
    }
    if let Some(var_256) = &input.schedule {
        object.key("Schedule").string(var_256.as_str());
    }
    if let Some(var_257) = &input.role_arn {
        object.key("RoleArn").string(var_257.as_str());
    }
    if let Some(var_258) = &input.language_code {
        object.key("LanguageCode").string(var_258.as_str());
    }
    if let Some(var_259) = &input.custom_document_enrichment_configuration {
        let mut object_260 = object
            .key("CustomDocumentEnrichmentConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_custom_document_enrichment_configuration(
            &mut object_260,
            var_259,
        )?;
        object_260.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_experience_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateExperienceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_261) = &input.id {
        object.key("Id").string(var_261.as_str());
    }
    if let Some(var_262) = &input.name {
        object.key("Name").string(var_262.as_str());
    }
    if let Some(var_263) = &input.index_id {
        object.key("IndexId").string(var_263.as_str());
    }
    if let Some(var_264) = &input.role_arn {
        object.key("RoleArn").string(var_264.as_str());
    }
    if let Some(var_265) = &input.configuration {
        let mut object_266 = object.key("Configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_experience_configuration(
            &mut object_266,
            var_265,
        )?;
        object_266.finish();
    }
    if let Some(var_267) = &input.description {
        object.key("Description").string(var_267.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_index_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateIndexInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_268) = &input.id {
        object.key("Id").string(var_268.as_str());
    }
    if let Some(var_269) = &input.name {
        object.key("Name").string(var_269.as_str());
    }
    if let Some(var_270) = &input.role_arn {
        object.key("RoleArn").string(var_270.as_str());
    }
    if let Some(var_271) = &input.description {
        object.key("Description").string(var_271.as_str());
    }
    if let Some(var_272) = &input.document_metadata_configuration_updates {
        let mut array_273 = object
            .key("DocumentMetadataConfigurationUpdates")
            .start_array();
        for item_274 in var_272 {
            {
                let mut object_275 = array_273.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_metadata_configuration(
                    &mut object_275,
                    item_274,
                )?;
                object_275.finish();
            }
        }
        array_273.finish();
    }
    if let Some(var_276) = &input.capacity_units {
        let mut object_277 = object.key("CapacityUnits").start_object();
        crate::json_ser::serialize_structure_crate_model_capacity_units_configuration(
            &mut object_277,
            var_276,
        )?;
        object_277.finish();
    }
    if let Some(var_278) = &input.user_token_configurations {
        let mut array_279 = object.key("UserTokenConfigurations").start_array();
        for item_280 in var_278 {
            {
                let mut object_281 = array_279.value().start_object();
                crate::json_ser::serialize_structure_crate_model_user_token_configuration(
                    &mut object_281,
                    item_280,
                )?;
                object_281.finish();
            }
        }
        array_279.finish();
    }
    if let Some(var_282) = &input.user_context_policy {
        object.key("UserContextPolicy").string(var_282.as_str());
    }
    if let Some(var_283) = &input.user_group_resolution_configuration {
        let mut object_284 = object
            .key("UserGroupResolutionConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_user_group_resolution_configuration(
            &mut object_284,
            var_283,
        )?;
        object_284.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_query_suggestions_block_list_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateQuerySuggestionsBlockListInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_285) = &input.index_id {
        object.key("IndexId").string(var_285.as_str());
    }
    if let Some(var_286) = &input.id {
        object.key("Id").string(var_286.as_str());
    }
    if let Some(var_287) = &input.name {
        object.key("Name").string(var_287.as_str());
    }
    if let Some(var_288) = &input.description {
        object.key("Description").string(var_288.as_str());
    }
    if let Some(var_289) = &input.source_s3_path {
        let mut object_290 = object.key("SourceS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_290, var_289)?;
        object_290.finish();
    }
    if let Some(var_291) = &input.role_arn {
        object.key("RoleArn").string(var_291.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_query_suggestions_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateQuerySuggestionsConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_292) = &input.index_id {
        object.key("IndexId").string(var_292.as_str());
    }
    if let Some(var_293) = &input.mode {
        object.key("Mode").string(var_293.as_str());
    }
    if let Some(var_294) = &input.query_log_look_back_window_in_days {
        object.key("QueryLogLookBackWindowInDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_294).into()),
        );
    }
    if let Some(var_295) = &input.include_queries_without_user_information {
        object
            .key("IncludeQueriesWithoutUserInformation")
            .boolean(*var_295);
    }
    if let Some(var_296) = &input.minimum_number_of_querying_users {
        object.key("MinimumNumberOfQueryingUsers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_296).into()),
        );
    }
    if let Some(var_297) = &input.minimum_query_count {
        object.key("MinimumQueryCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_297).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_thesaurus_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateThesaurusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_298) = &input.id {
        object.key("Id").string(var_298.as_str());
    }
    if let Some(var_299) = &input.name {
        object.key("Name").string(var_299.as_str());
    }
    if let Some(var_300) = &input.index_id {
        object.key("IndexId").string(var_300.as_str());
    }
    if let Some(var_301) = &input.description {
        object.key("Description").string(var_301.as_str());
    }
    if let Some(var_302) = &input.role_arn {
        object.key("RoleArn").string(var_302.as_str());
    }
    if let Some(var_303) = &input.source_s3_path {
        let mut object_304 = object.key("SourceS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_304, var_303)?;
        object_304.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_entity_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EntityConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_305) = &input.entity_id {
        object.key("EntityId").string(var_305.as_str());
    }
    if let Some(var_306) = &input.entity_type {
        object.key("EntityType").string(var_306.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_entity_persona_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EntityPersonaConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_307) = &input.entity_id {
        object.key("EntityId").string(var_307.as_str());
    }
    if let Some(var_308) = &input.persona {
        object.key("Persona").string(var_308.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_source_sync_job_metric_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceSyncJobMetricTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_309) = &input.data_source_id {
        object.key("DataSourceId").string(var_309.as_str());
    }
    if let Some(var_310) = &input.data_source_sync_job_id {
        object.key("DataSourceSyncJobId").string(var_310.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_311) = &input.document_id {
        object.key("DocumentId").string(var_311.as_str());
    }
    if let Some(var_312) = &input.attributes {
        let mut array_313 = object.key("Attributes").start_array();
        for item_314 in var_312 {
            {
                let mut object_315 = array_313.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_attribute(
                    &mut object_315,
                    item_314,
                )?;
                object_315.finish();
            }
        }
        array_313.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Document,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_316) = &input.id {
        object.key("Id").string(var_316.as_str());
    }
    if let Some(var_317) = &input.title {
        object.key("Title").string(var_317.as_str());
    }
    if let Some(var_318) = &input.blob {
        object
            .key("Blob")
            .string_unchecked(&aws_smithy_types::base64::encode(var_318));
    }
    if let Some(var_319) = &input.s3_path {
        let mut object_320 = object.key("S3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_320, var_319)?;
        object_320.finish();
    }
    if let Some(var_321) = &input.attributes {
        let mut array_322 = object.key("Attributes").start_array();
        for item_323 in var_321 {
            {
                let mut object_324 = array_322.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_attribute(
                    &mut object_324,
                    item_323,
                )?;
                object_324.finish();
            }
        }
        array_322.finish();
    }
    if let Some(var_325) = &input.access_control_list {
        let mut array_326 = object.key("AccessControlList").start_array();
        for item_327 in var_325 {
            {
                let mut object_328 = array_326.value().start_object();
                crate::json_ser::serialize_structure_crate_model_principal(
                    &mut object_328,
                    item_327,
                )?;
                object_328.finish();
            }
        }
        array_326.finish();
    }
    if let Some(var_329) = &input.hierarchical_access_control_list {
        let mut array_330 = object.key("HierarchicalAccessControlList").start_array();
        for item_331 in var_329 {
            {
                let mut object_332 = array_330.value().start_object();
                crate::json_ser::serialize_structure_crate_model_hierarchical_principal(
                    &mut object_332,
                    item_331,
                )?;
                object_332.finish();
            }
        }
        array_330.finish();
    }
    if let Some(var_333) = &input.content_type {
        object.key("ContentType").string(var_333.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_document_enrichment_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomDocumentEnrichmentConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_334) = &input.inline_configurations {
        let mut array_335 = object.key("InlineConfigurations").start_array();
        for item_336 in var_334 {
            {
                let mut object_337 = array_335.value().start_object();
                crate::json_ser::serialize_structure_crate_model_inline_custom_document_enrichment_configuration(&mut object_337, item_336)?;
                object_337.finish();
            }
        }
        array_335.finish();
    }
    if let Some(var_338) = &input.pre_extraction_hook_configuration {
        let mut object_339 = object.key("PreExtractionHookConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_hook_configuration(
            &mut object_339,
            var_338,
        )?;
        object_339.finish();
    }
    if let Some(var_340) = &input.post_extraction_hook_configuration {
        let mut object_341 = object.key("PostExtractionHookConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_hook_configuration(
            &mut object_341,
            var_340,
        )?;
        object_341.finish();
    }
    if let Some(var_342) = &input.role_arn {
        object.key("RoleArn").string(var_342.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_source_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_343) = &input.s3_configuration {
        let mut object_344 = object.key("S3Configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_data_source_configuration(
            &mut object_344,
            var_343,
        )?;
        object_344.finish();
    }
    if let Some(var_345) = &input.share_point_configuration {
        let mut object_346 = object.key("SharePointConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_share_point_configuration(
            &mut object_346,
            var_345,
        )?;
        object_346.finish();
    }
    if let Some(var_347) = &input.database_configuration {
        let mut object_348 = object.key("DatabaseConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_database_configuration(
            &mut object_348,
            var_347,
        )?;
        object_348.finish();
    }
    if let Some(var_349) = &input.salesforce_configuration {
        let mut object_350 = object.key("SalesforceConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_salesforce_configuration(
            &mut object_350,
            var_349,
        )?;
        object_350.finish();
    }
    if let Some(var_351) = &input.one_drive_configuration {
        let mut object_352 = object.key("OneDriveConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_one_drive_configuration(
            &mut object_352,
            var_351,
        )?;
        object_352.finish();
    }
    if let Some(var_353) = &input.service_now_configuration {
        let mut object_354 = object.key("ServiceNowConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_service_now_configuration(
            &mut object_354,
            var_353,
        )?;
        object_354.finish();
    }
    if let Some(var_355) = &input.confluence_configuration {
        let mut object_356 = object.key("ConfluenceConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_confluence_configuration(
            &mut object_356,
            var_355,
        )?;
        object_356.finish();
    }
    if let Some(var_357) = &input.google_drive_configuration {
        let mut object_358 = object.key("GoogleDriveConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_google_drive_configuration(
            &mut object_358,
            var_357,
        )?;
        object_358.finish();
    }
    if let Some(var_359) = &input.web_crawler_configuration {
        let mut object_360 = object.key("WebCrawlerConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_web_crawler_configuration(
            &mut object_360,
            var_359,
        )?;
        object_360.finish();
    }
    if let Some(var_361) = &input.work_docs_configuration {
        let mut object_362 = object.key("WorkDocsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_work_docs_configuration(
            &mut object_362,
            var_361,
        )?;
        object_362.finish();
    }
    if let Some(var_363) = &input.fsx_configuration {
        let mut object_364 = object.key("FsxConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_fsx_configuration(
            &mut object_364,
            var_363,
        )?;
        object_364.finish();
    }
    if let Some(var_365) = &input.slack_configuration {
        let mut object_366 = object.key("SlackConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_slack_configuration(
            &mut object_366,
            var_365,
        )?;
        object_366.finish();
    }
    if let Some(var_367) = &input.box_configuration {
        let mut object_368 = object.key("BoxConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_box_configuration(
            &mut object_368,
            var_367,
        )?;
        object_368.finish();
    }
    if let Some(var_369) = &input.quip_configuration {
        let mut object_370 = object.key("QuipConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_quip_configuration(
            &mut object_370,
            var_369,
        )?;
        object_370.finish();
    }
    if let Some(var_371) = &input.jira_configuration {
        let mut object_372 = object.key("JiraConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_jira_configuration(
            &mut object_372,
            var_371,
        )?;
        object_372.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_373) = &input.key {
        object.key("Key").string(var_373.as_str());
    }
    if let Some(var_374) = &input.value {
        object.key("Value").string(var_374.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_experience_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExperienceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_375) = &input.content_source_configuration {
        let mut object_376 = object.key("ContentSourceConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_content_source_configuration(
            &mut object_376,
            var_375,
        )?;
        object_376.finish();
    }
    if let Some(var_377) = &input.user_identity_configuration {
        let mut object_378 = object.key("UserIdentityConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_user_identity_configuration(
            &mut object_378,
            var_377,
        )?;
        object_378.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_path(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Path,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_379) = &input.bucket {
        object.key("Bucket").string(var_379.as_str());
    }
    if let Some(var_380) = &input.key {
        object.key("Key").string(var_380.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_server_side_encryption_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServerSideEncryptionConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_381) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_381.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_token_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserTokenConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_382) = &input.jwt_token_type_configuration {
        let mut object_383 = object.key("JwtTokenTypeConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_jwt_token_type_configuration(
            &mut object_383,
            var_382,
        )?;
        object_383.finish();
    }
    if let Some(var_384) = &input.json_token_type_configuration {
        let mut object_385 = object.key("JsonTokenTypeConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_json_token_type_configuration(
            &mut object_385,
            var_384,
        )?;
        object_385.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_group_resolution_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserGroupResolutionConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_386) = &input.user_group_resolution_mode {
        object
            .key("UserGroupResolutionMode")
            .string(var_386.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_time_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TimeRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_387) = &input.start_time {
        object
            .key("StartTime")
            .date_time(var_387, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_388) = &input.end_time {
        object
            .key("EndTime")
            .date_time(var_388, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_group_members(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GroupMembers,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_389) = &input.member_groups {
        let mut array_390 = object.key("MemberGroups").start_array();
        for item_391 in var_389 {
            {
                let mut object_392 = array_390.value().start_object();
                crate::json_ser::serialize_structure_crate_model_member_group(
                    &mut object_392,
                    item_391,
                )?;
                object_392.finish();
            }
        }
        array_390.finish();
    }
    if let Some(var_393) = &input.member_users {
        let mut array_394 = object.key("MemberUsers").start_array();
        for item_395 in var_393 {
            {
                let mut object_396 = array_394.value().start_object();
                crate::json_ser::serialize_structure_crate_model_member_user(
                    &mut object_396,
                    item_395,
                )?;
                object_396.finish();
            }
        }
        array_394.finish();
    }
    if let Some(var_397) = &input.s3_pathfor_group_members {
        let mut object_398 = object.key("S3PathforGroupMembers").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_398, var_397)?;
        object_398.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_attribute_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AttributeFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_399) = &input.and_all_filters {
        let mut array_400 = object.key("AndAllFilters").start_array();
        for item_401 in var_399 {
            {
                let mut object_402 = array_400.value().start_object();
                crate::json_ser::serialize_structure_crate_model_attribute_filter(
                    &mut object_402,
                    item_401,
                )?;
                object_402.finish();
            }
        }
        array_400.finish();
    }
    if let Some(var_403) = &input.or_all_filters {
        let mut array_404 = object.key("OrAllFilters").start_array();
        for item_405 in var_403 {
            {
                let mut object_406 = array_404.value().start_object();
                crate::json_ser::serialize_structure_crate_model_attribute_filter(
                    &mut object_406,
                    item_405,
                )?;
                object_406.finish();
            }
        }
        array_404.finish();
    }
    if let Some(var_407) = &input.not_filter {
        let mut object_408 = object.key("NotFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_attribute_filter(
            &mut object_408,
            var_407,
        )?;
        object_408.finish();
    }
    if let Some(var_409) = &input.equals_to {
        let mut object_410 = object.key("EqualsTo").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_410,
            var_409,
        )?;
        object_410.finish();
    }
    if let Some(var_411) = &input.contains_all {
        let mut object_412 = object.key("ContainsAll").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_412,
            var_411,
        )?;
        object_412.finish();
    }
    if let Some(var_413) = &input.contains_any {
        let mut object_414 = object.key("ContainsAny").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_414,
            var_413,
        )?;
        object_414.finish();
    }
    if let Some(var_415) = &input.greater_than {
        let mut object_416 = object.key("GreaterThan").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_416,
            var_415,
        )?;
        object_416.finish();
    }
    if let Some(var_417) = &input.greater_than_or_equals {
        let mut object_418 = object.key("GreaterThanOrEquals").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_418,
            var_417,
        )?;
        object_418.finish();
    }
    if let Some(var_419) = &input.less_than {
        let mut object_420 = object.key("LessThan").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_420,
            var_419,
        )?;
        object_420.finish();
    }
    if let Some(var_421) = &input.less_than_or_equals {
        let mut object_422 = object.key("LessThanOrEquals").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_422,
            var_421,
        )?;
        object_422.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_facet(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Facet,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_423) = &input.document_attribute_key {
        object.key("DocumentAttributeKey").string(var_423.as_str());
    }
    if let Some(var_424) = &input.facets {
        let mut array_425 = object.key("Facets").start_array();
        for item_426 in var_424 {
            {
                let mut object_427 = array_425.value().start_object();
                crate::json_ser::serialize_structure_crate_model_facet(&mut object_427, item_426)?;
                object_427.finish();
            }
        }
        array_425.finish();
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_relevance_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentRelevanceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_428) = &input.name {
        object.key("Name").string(var_428.as_str());
    }
    if let Some(var_429) = &input.relevance {
        let mut object_430 = object.key("Relevance").start_object();
        crate::json_ser::serialize_structure_crate_model_relevance(&mut object_430, var_429)?;
        object_430.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sorting_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SortingConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_431) = &input.document_attribute_key {
        object.key("DocumentAttributeKey").string(var_431.as_str());
    }
    if let Some(var_432) = &input.sort_order {
        object.key("SortOrder").string(var_432.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_context(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserContext,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_433) = &input.token {
        object.key("Token").string(var_433.as_str());
    }
    if let Some(var_434) = &input.user_id {
        object.key("UserId").string(var_434.as_str());
    }
    if let Some(var_435) = &input.groups {
        let mut array_436 = object.key("Groups").start_array();
        for item_437 in var_435 {
            {
                array_436.value().string(item_437.as_str());
            }
        }
        array_436.finish();
    }
    if let Some(var_438) = &input.data_source_groups {
        let mut array_439 = object.key("DataSourceGroups").start_array();
        for item_440 in var_438 {
            {
                let mut object_441 = array_439.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_group(
                    &mut object_441,
                    item_440,
                )?;
                object_441.finish();
            }
        }
        array_439.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_spell_correction_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SpellCorrectionConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object
            .key("IncludeQuerySpellCheckSuggestions")
            .boolean(input.include_query_spell_check_suggestions);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_click_feedback(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ClickFeedback,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_442) = &input.result_id {
        object.key("ResultId").string(var_442.as_str());
    }
    if let Some(var_443) = &input.click_time {
        object
            .key("ClickTime")
            .date_time(var_443, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_relevance_feedback(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RelevanceFeedback,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_444) = &input.result_id {
        object.key("ResultId").string(var_444.as_str());
    }
    if let Some(var_445) = &input.relevance_value {
        object.key("RelevanceValue").string(var_445.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_metadata_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentMetadataConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_446) = &input.name {
        object.key("Name").string(var_446.as_str());
    }
    if let Some(var_447) = &input.r#type {
        object.key("Type").string(var_447.as_str());
    }
    if let Some(var_448) = &input.relevance {
        let mut object_449 = object.key("Relevance").start_object();
        crate::json_ser::serialize_structure_crate_model_relevance(&mut object_449, var_448)?;
        object_449.finish();
    }
    if let Some(var_450) = &input.search {
        let mut object_451 = object.key("Search").start_object();
        crate::json_ser::serialize_structure_crate_model_search(&mut object_451, var_450)?;
        object_451.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_capacity_units_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CapacityUnitsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_452) = &input.storage_capacity_units {
        object.key("StorageCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_452).into()),
        );
    }
    if let Some(var_453) = &input.query_capacity_units {
        object.key("QueryCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_453).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_attribute(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentAttribute,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_454) = &input.key {
        object.key("Key").string(var_454.as_str());
    }
    if let Some(var_455) = &input.value {
        let mut object_456 = object.key("Value").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute_value(
            &mut object_456,
            var_455,
        )?;
        object_456.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_principal(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Principal,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_457) = &input.name {
        object.key("Name").string(var_457.as_str());
    }
    if let Some(var_458) = &input.r#type {
        object.key("Type").string(var_458.as_str());
    }
    if let Some(var_459) = &input.access {
        object.key("Access").string(var_459.as_str());
    }
    if let Some(var_460) = &input.data_source_id {
        object.key("DataSourceId").string(var_460.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hierarchical_principal(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HierarchicalPrincipal,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_461) = &input.principal_list {
        let mut array_462 = object.key("PrincipalList").start_array();
        for item_463 in var_461 {
            {
                let mut object_464 = array_462.value().start_object();
                crate::json_ser::serialize_structure_crate_model_principal(
                    &mut object_464,
                    item_463,
                )?;
                object_464.finish();
            }
        }
        array_462.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_inline_custom_document_enrichment_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InlineCustomDocumentEnrichmentConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_465) = &input.condition {
        let mut object_466 = object.key("Condition").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute_condition(
            &mut object_466,
            var_465,
        )?;
        object_466.finish();
    }
    if let Some(var_467) = &input.target {
        let mut object_468 = object.key("Target").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute_target(
            &mut object_468,
            var_467,
        )?;
        object_468.finish();
    }
    if input.document_content_deletion {
        object
            .key("DocumentContentDeletion")
            .boolean(input.document_content_deletion);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hook_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HookConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_469) = &input.invocation_condition {
        let mut object_470 = object.key("InvocationCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute_condition(
            &mut object_470,
            var_469,
        )?;
        object_470.finish();
    }
    if let Some(var_471) = &input.lambda_arn {
        object.key("LambdaArn").string(var_471.as_str());
    }
    if let Some(var_472) = &input.s3_bucket {
        object.key("S3Bucket").string(var_472.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_data_source_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3DataSourceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_473) = &input.bucket_name {
        object.key("BucketName").string(var_473.as_str());
    }
    if let Some(var_474) = &input.inclusion_prefixes {
        let mut array_475 = object.key("InclusionPrefixes").start_array();
        for item_476 in var_474 {
            {
                array_475.value().string(item_476.as_str());
            }
        }
        array_475.finish();
    }
    if let Some(var_477) = &input.inclusion_patterns {
        let mut array_478 = object.key("InclusionPatterns").start_array();
        for item_479 in var_477 {
            {
                array_478.value().string(item_479.as_str());
            }
        }
        array_478.finish();
    }
    if let Some(var_480) = &input.exclusion_patterns {
        let mut array_481 = object.key("ExclusionPatterns").start_array();
        for item_482 in var_480 {
            {
                array_481.value().string(item_482.as_str());
            }
        }
        array_481.finish();
    }
    if let Some(var_483) = &input.documents_metadata_configuration {
        let mut object_484 = object.key("DocumentsMetadataConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_documents_metadata_configuration(
            &mut object_484,
            var_483,
        )?;
        object_484.finish();
    }
    if let Some(var_485) = &input.access_control_list_configuration {
        let mut object_486 = object.key("AccessControlListConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_access_control_list_configuration(
            &mut object_486,
            var_485,
        )?;
        object_486.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_share_point_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SharePointConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_487) = &input.share_point_version {
        object.key("SharePointVersion").string(var_487.as_str());
    }
    if let Some(var_488) = &input.urls {
        let mut array_489 = object.key("Urls").start_array();
        for item_490 in var_488 {
            {
                array_489.value().string(item_490.as_str());
            }
        }
        array_489.finish();
    }
    if let Some(var_491) = &input.secret_arn {
        object.key("SecretArn").string(var_491.as_str());
    }
    if input.crawl_attachments {
        object
            .key("CrawlAttachments")
            .boolean(input.crawl_attachments);
    }
    if input.use_change_log {
        object.key("UseChangeLog").boolean(input.use_change_log);
    }
    if let Some(var_492) = &input.inclusion_patterns {
        let mut array_493 = object.key("InclusionPatterns").start_array();
        for item_494 in var_492 {
            {
                array_493.value().string(item_494.as_str());
            }
        }
        array_493.finish();
    }
    if let Some(var_495) = &input.exclusion_patterns {
        let mut array_496 = object.key("ExclusionPatterns").start_array();
        for item_497 in var_495 {
            {
                array_496.value().string(item_497.as_str());
            }
        }
        array_496.finish();
    }
    if let Some(var_498) = &input.vpc_configuration {
        let mut object_499 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_499,
            var_498,
        )?;
        object_499.finish();
    }
    if let Some(var_500) = &input.field_mappings {
        let mut array_501 = object.key("FieldMappings").start_array();
        for item_502 in var_500 {
            {
                let mut object_503 = array_501.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_503, item_502)?;
                object_503.finish();
            }
        }
        array_501.finish();
    }
    if let Some(var_504) = &input.document_title_field_name {
        object
            .key("DocumentTitleFieldName")
            .string(var_504.as_str());
    }
    if input.disable_local_groups {
        object
            .key("DisableLocalGroups")
            .boolean(input.disable_local_groups);
    }
    if let Some(var_505) = &input.ssl_certificate_s3_path {
        let mut object_506 = object.key("SslCertificateS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_506, var_505)?;
        object_506.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_database_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DatabaseConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_507) = &input.database_engine_type {
        object.key("DatabaseEngineType").string(var_507.as_str());
    }
    if let Some(var_508) = &input.connection_configuration {
        let mut object_509 = object.key("ConnectionConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_connection_configuration(
            &mut object_509,
            var_508,
        )?;
        object_509.finish();
    }
    if let Some(var_510) = &input.vpc_configuration {
        let mut object_511 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_511,
            var_510,
        )?;
        object_511.finish();
    }
    if let Some(var_512) = &input.column_configuration {
        let mut object_513 = object.key("ColumnConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_column_configuration(
            &mut object_513,
            var_512,
        )?;
        object_513.finish();
    }
    if let Some(var_514) = &input.acl_configuration {
        let mut object_515 = object.key("AclConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_acl_configuration(
            &mut object_515,
            var_514,
        )?;
        object_515.finish();
    }
    if let Some(var_516) = &input.sql_configuration {
        let mut object_517 = object.key("SqlConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_sql_configuration(
            &mut object_517,
            var_516,
        )?;
        object_517.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_salesforce_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_518) = &input.server_url {
        object.key("ServerUrl").string(var_518.as_str());
    }
    if let Some(var_519) = &input.secret_arn {
        object.key("SecretArn").string(var_519.as_str());
    }
    if let Some(var_520) = &input.standard_object_configurations {
        let mut array_521 = object.key("StandardObjectConfigurations").start_array();
        for item_522 in var_520 {
            {
                let mut object_523 = array_521.value().start_object();
                crate::json_ser::serialize_structure_crate_model_salesforce_standard_object_configuration(&mut object_523, item_522)?;
                object_523.finish();
            }
        }
        array_521.finish();
    }
    if let Some(var_524) = &input.knowledge_article_configuration {
        let mut object_525 = object.key("KnowledgeArticleConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_salesforce_knowledge_article_configuration(&mut object_525, var_524)?;
        object_525.finish();
    }
    if let Some(var_526) = &input.chatter_feed_configuration {
        let mut object_527 = object.key("ChatterFeedConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_salesforce_chatter_feed_configuration(
            &mut object_527,
            var_526,
        )?;
        object_527.finish();
    }
    if input.crawl_attachments {
        object
            .key("CrawlAttachments")
            .boolean(input.crawl_attachments);
    }
    if let Some(var_528) = &input.standard_object_attachment_configuration {
        let mut object_529 = object
            .key("StandardObjectAttachmentConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_salesforce_standard_object_attachment_configuration(&mut object_529, var_528)?;
        object_529.finish();
    }
    if let Some(var_530) = &input.include_attachment_file_patterns {
        let mut array_531 = object.key("IncludeAttachmentFilePatterns").start_array();
        for item_532 in var_530 {
            {
                array_531.value().string(item_532.as_str());
            }
        }
        array_531.finish();
    }
    if let Some(var_533) = &input.exclude_attachment_file_patterns {
        let mut array_534 = object.key("ExcludeAttachmentFilePatterns").start_array();
        for item_535 in var_533 {
            {
                array_534.value().string(item_535.as_str());
            }
        }
        array_534.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_one_drive_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OneDriveConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_536) = &input.tenant_domain {
        object.key("TenantDomain").string(var_536.as_str());
    }
    if let Some(var_537) = &input.secret_arn {
        object.key("SecretArn").string(var_537.as_str());
    }
    if let Some(var_538) = &input.one_drive_users {
        let mut object_539 = object.key("OneDriveUsers").start_object();
        crate::json_ser::serialize_structure_crate_model_one_drive_users(&mut object_539, var_538)?;
        object_539.finish();
    }
    if let Some(var_540) = &input.inclusion_patterns {
        let mut array_541 = object.key("InclusionPatterns").start_array();
        for item_542 in var_540 {
            {
                array_541.value().string(item_542.as_str());
            }
        }
        array_541.finish();
    }
    if let Some(var_543) = &input.exclusion_patterns {
        let mut array_544 = object.key("ExclusionPatterns").start_array();
        for item_545 in var_543 {
            {
                array_544.value().string(item_545.as_str());
            }
        }
        array_544.finish();
    }
    if let Some(var_546) = &input.field_mappings {
        let mut array_547 = object.key("FieldMappings").start_array();
        for item_548 in var_546 {
            {
                let mut object_549 = array_547.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_549, item_548)?;
                object_549.finish();
            }
        }
        array_547.finish();
    }
    if input.disable_local_groups {
        object
            .key("DisableLocalGroups")
            .boolean(input.disable_local_groups);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_service_now_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceNowConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_550) = &input.host_url {
        object.key("HostUrl").string(var_550.as_str());
    }
    if let Some(var_551) = &input.secret_arn {
        object.key("SecretArn").string(var_551.as_str());
    }
    if let Some(var_552) = &input.service_now_build_version {
        object
            .key("ServiceNowBuildVersion")
            .string(var_552.as_str());
    }
    if let Some(var_553) = &input.knowledge_article_configuration {
        let mut object_554 = object.key("KnowledgeArticleConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_service_now_knowledge_article_configuration(&mut object_554, var_553)?;
        object_554.finish();
    }
    if let Some(var_555) = &input.service_catalog_configuration {
        let mut object_556 = object.key("ServiceCatalogConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_service_now_service_catalog_configuration(
            &mut object_556,
            var_555,
        )?;
        object_556.finish();
    }
    if let Some(var_557) = &input.authentication_type {
        object.key("AuthenticationType").string(var_557.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_558) = &input.server_url {
        object.key("ServerUrl").string(var_558.as_str());
    }
    if let Some(var_559) = &input.secret_arn {
        object.key("SecretArn").string(var_559.as_str());
    }
    if let Some(var_560) = &input.version {
        object.key("Version").string(var_560.as_str());
    }
    if let Some(var_561) = &input.space_configuration {
        let mut object_562 = object.key("SpaceConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_confluence_space_configuration(
            &mut object_562,
            var_561,
        )?;
        object_562.finish();
    }
    if let Some(var_563) = &input.page_configuration {
        let mut object_564 = object.key("PageConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_confluence_page_configuration(
            &mut object_564,
            var_563,
        )?;
        object_564.finish();
    }
    if let Some(var_565) = &input.blog_configuration {
        let mut object_566 = object.key("BlogConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_confluence_blog_configuration(
            &mut object_566,
            var_565,
        )?;
        object_566.finish();
    }
    if let Some(var_567) = &input.attachment_configuration {
        let mut object_568 = object.key("AttachmentConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_confluence_attachment_configuration(
            &mut object_568,
            var_567,
        )?;
        object_568.finish();
    }
    if let Some(var_569) = &input.vpc_configuration {
        let mut object_570 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_570,
            var_569,
        )?;
        object_570.finish();
    }
    if let Some(var_571) = &input.inclusion_patterns {
        let mut array_572 = object.key("InclusionPatterns").start_array();
        for item_573 in var_571 {
            {
                array_572.value().string(item_573.as_str());
            }
        }
        array_572.finish();
    }
    if let Some(var_574) = &input.exclusion_patterns {
        let mut array_575 = object.key("ExclusionPatterns").start_array();
        for item_576 in var_574 {
            {
                array_575.value().string(item_576.as_str());
            }
        }
        array_575.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_google_drive_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GoogleDriveConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_577) = &input.secret_arn {
        object.key("SecretArn").string(var_577.as_str());
    }
    if let Some(var_578) = &input.inclusion_patterns {
        let mut array_579 = object.key("InclusionPatterns").start_array();
        for item_580 in var_578 {
            {
                array_579.value().string(item_580.as_str());
            }
        }
        array_579.finish();
    }
    if let Some(var_581) = &input.exclusion_patterns {
        let mut array_582 = object.key("ExclusionPatterns").start_array();
        for item_583 in var_581 {
            {
                array_582.value().string(item_583.as_str());
            }
        }
        array_582.finish();
    }
    if let Some(var_584) = &input.field_mappings {
        let mut array_585 = object.key("FieldMappings").start_array();
        for item_586 in var_584 {
            {
                let mut object_587 = array_585.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_587, item_586)?;
                object_587.finish();
            }
        }
        array_585.finish();
    }
    if let Some(var_588) = &input.exclude_mime_types {
        let mut array_589 = object.key("ExcludeMimeTypes").start_array();
        for item_590 in var_588 {
            {
                array_589.value().string(item_590.as_str());
            }
        }
        array_589.finish();
    }
    if let Some(var_591) = &input.exclude_user_accounts {
        let mut array_592 = object.key("ExcludeUserAccounts").start_array();
        for item_593 in var_591 {
            {
                array_592.value().string(item_593.as_str());
            }
        }
        array_592.finish();
    }
    if let Some(var_594) = &input.exclude_shared_drives {
        let mut array_595 = object.key("ExcludeSharedDrives").start_array();
        for item_596 in var_594 {
            {
                array_595.value().string(item_596.as_str());
            }
        }
        array_595.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_web_crawler_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WebCrawlerConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_597) = &input.urls {
        let mut object_598 = object.key("Urls").start_object();
        crate::json_ser::serialize_structure_crate_model_urls(&mut object_598, var_597)?;
        object_598.finish();
    }
    if let Some(var_599) = &input.crawl_depth {
        object.key("CrawlDepth").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_599).into()),
        );
    }
    if let Some(var_600) = &input.max_links_per_page {
        object.key("MaxLinksPerPage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_600).into()),
        );
    }
    if let Some(var_601) = &input.max_content_size_per_page_in_mega_bytes {
        object.key("MaxContentSizePerPageInMegaBytes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_601).into()),
        );
    }
    if let Some(var_602) = &input.max_urls_per_minute_crawl_rate {
        object.key("MaxUrlsPerMinuteCrawlRate").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_602).into()),
        );
    }
    if let Some(var_603) = &input.url_inclusion_patterns {
        let mut array_604 = object.key("UrlInclusionPatterns").start_array();
        for item_605 in var_603 {
            {
                array_604.value().string(item_605.as_str());
            }
        }
        array_604.finish();
    }
    if let Some(var_606) = &input.url_exclusion_patterns {
        let mut array_607 = object.key("UrlExclusionPatterns").start_array();
        for item_608 in var_606 {
            {
                array_607.value().string(item_608.as_str());
            }
        }
        array_607.finish();
    }
    if let Some(var_609) = &input.proxy_configuration {
        let mut object_610 = object.key("ProxyConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_proxy_configuration(
            &mut object_610,
            var_609,
        )?;
        object_610.finish();
    }
    if let Some(var_611) = &input.authentication_configuration {
        let mut object_612 = object.key("AuthenticationConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_authentication_configuration(
            &mut object_612,
            var_611,
        )?;
        object_612.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_work_docs_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WorkDocsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_613) = &input.organization_id {
        object.key("OrganizationId").string(var_613.as_str());
    }
    if input.crawl_comments {
        object.key("CrawlComments").boolean(input.crawl_comments);
    }
    if input.use_change_log {
        object.key("UseChangeLog").boolean(input.use_change_log);
    }
    if let Some(var_614) = &input.inclusion_patterns {
        let mut array_615 = object.key("InclusionPatterns").start_array();
        for item_616 in var_614 {
            {
                array_615.value().string(item_616.as_str());
            }
        }
        array_615.finish();
    }
    if let Some(var_617) = &input.exclusion_patterns {
        let mut array_618 = object.key("ExclusionPatterns").start_array();
        for item_619 in var_617 {
            {
                array_618.value().string(item_619.as_str());
            }
        }
        array_618.finish();
    }
    if let Some(var_620) = &input.field_mappings {
        let mut array_621 = object.key("FieldMappings").start_array();
        for item_622 in var_620 {
            {
                let mut object_623 = array_621.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_623, item_622)?;
                object_623.finish();
            }
        }
        array_621.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_fsx_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FsxConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_624) = &input.file_system_id {
        object.key("FileSystemId").string(var_624.as_str());
    }
    if let Some(var_625) = &input.file_system_type {
        object.key("FileSystemType").string(var_625.as_str());
    }
    if let Some(var_626) = &input.vpc_configuration {
        let mut object_627 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_627,
            var_626,
        )?;
        object_627.finish();
    }
    if let Some(var_628) = &input.secret_arn {
        object.key("SecretArn").string(var_628.as_str());
    }
    if let Some(var_629) = &input.inclusion_patterns {
        let mut array_630 = object.key("InclusionPatterns").start_array();
        for item_631 in var_629 {
            {
                array_630.value().string(item_631.as_str());
            }
        }
        array_630.finish();
    }
    if let Some(var_632) = &input.exclusion_patterns {
        let mut array_633 = object.key("ExclusionPatterns").start_array();
        for item_634 in var_632 {
            {
                array_633.value().string(item_634.as_str());
            }
        }
        array_633.finish();
    }
    if let Some(var_635) = &input.field_mappings {
        let mut array_636 = object.key("FieldMappings").start_array();
        for item_637 in var_635 {
            {
                let mut object_638 = array_636.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_638, item_637)?;
                object_638.finish();
            }
        }
        array_636.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slack_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlackConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_639) = &input.team_id {
        object.key("TeamId").string(var_639.as_str());
    }
    if let Some(var_640) = &input.secret_arn {
        object.key("SecretArn").string(var_640.as_str());
    }
    if let Some(var_641) = &input.vpc_configuration {
        let mut object_642 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_642,
            var_641,
        )?;
        object_642.finish();
    }
    if let Some(var_643) = &input.slack_entity_list {
        let mut array_644 = object.key("SlackEntityList").start_array();
        for item_645 in var_643 {
            {
                array_644.value().string(item_645.as_str());
            }
        }
        array_644.finish();
    }
    if input.use_change_log {
        object.key("UseChangeLog").boolean(input.use_change_log);
    }
    if input.crawl_bot_message {
        object
            .key("CrawlBotMessage")
            .boolean(input.crawl_bot_message);
    }
    if input.exclude_archived {
        object
            .key("ExcludeArchived")
            .boolean(input.exclude_archived);
    }
    if let Some(var_646) = &input.since_crawl_date {
        object.key("SinceCrawlDate").string(var_646.as_str());
    }
    if let Some(var_647) = &input.look_back_period {
        object.key("LookBackPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_647).into()),
        );
    }
    if let Some(var_648) = &input.private_channel_filter {
        let mut array_649 = object.key("PrivateChannelFilter").start_array();
        for item_650 in var_648 {
            {
                array_649.value().string(item_650.as_str());
            }
        }
        array_649.finish();
    }
    if let Some(var_651) = &input.public_channel_filter {
        let mut array_652 = object.key("PublicChannelFilter").start_array();
        for item_653 in var_651 {
            {
                array_652.value().string(item_653.as_str());
            }
        }
        array_652.finish();
    }
    if let Some(var_654) = &input.inclusion_patterns {
        let mut array_655 = object.key("InclusionPatterns").start_array();
        for item_656 in var_654 {
            {
                array_655.value().string(item_656.as_str());
            }
        }
        array_655.finish();
    }
    if let Some(var_657) = &input.exclusion_patterns {
        let mut array_658 = object.key("ExclusionPatterns").start_array();
        for item_659 in var_657 {
            {
                array_658.value().string(item_659.as_str());
            }
        }
        array_658.finish();
    }
    if let Some(var_660) = &input.field_mappings {
        let mut array_661 = object.key("FieldMappings").start_array();
        for item_662 in var_660 {
            {
                let mut object_663 = array_661.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_663, item_662)?;
                object_663.finish();
            }
        }
        array_661.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_box_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BoxConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_664) = &input.enterprise_id {
        object.key("EnterpriseId").string(var_664.as_str());
    }
    if let Some(var_665) = &input.secret_arn {
        object.key("SecretArn").string(var_665.as_str());
    }
    if input.use_change_log {
        object.key("UseChangeLog").boolean(input.use_change_log);
    }
    if input.crawl_comments {
        object.key("CrawlComments").boolean(input.crawl_comments);
    }
    if input.crawl_tasks {
        object.key("CrawlTasks").boolean(input.crawl_tasks);
    }
    if input.crawl_web_links {
        object.key("CrawlWebLinks").boolean(input.crawl_web_links);
    }
    if let Some(var_666) = &input.file_field_mappings {
        let mut array_667 = object.key("FileFieldMappings").start_array();
        for item_668 in var_666 {
            {
                let mut object_669 = array_667.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_669, item_668)?;
                object_669.finish();
            }
        }
        array_667.finish();
    }
    if let Some(var_670) = &input.task_field_mappings {
        let mut array_671 = object.key("TaskFieldMappings").start_array();
        for item_672 in var_670 {
            {
                let mut object_673 = array_671.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_673, item_672)?;
                object_673.finish();
            }
        }
        array_671.finish();
    }
    if let Some(var_674) = &input.comment_field_mappings {
        let mut array_675 = object.key("CommentFieldMappings").start_array();
        for item_676 in var_674 {
            {
                let mut object_677 = array_675.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_677, item_676)?;
                object_677.finish();
            }
        }
        array_675.finish();
    }
    if let Some(var_678) = &input.web_link_field_mappings {
        let mut array_679 = object.key("WebLinkFieldMappings").start_array();
        for item_680 in var_678 {
            {
                let mut object_681 = array_679.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_681, item_680)?;
                object_681.finish();
            }
        }
        array_679.finish();
    }
    if let Some(var_682) = &input.inclusion_patterns {
        let mut array_683 = object.key("InclusionPatterns").start_array();
        for item_684 in var_682 {
            {
                array_683.value().string(item_684.as_str());
            }
        }
        array_683.finish();
    }
    if let Some(var_685) = &input.exclusion_patterns {
        let mut array_686 = object.key("ExclusionPatterns").start_array();
        for item_687 in var_685 {
            {
                array_686.value().string(item_687.as_str());
            }
        }
        array_686.finish();
    }
    if let Some(var_688) = &input.vpc_configuration {
        let mut object_689 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_689,
            var_688,
        )?;
        object_689.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_quip_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::QuipConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_690) = &input.domain {
        object.key("Domain").string(var_690.as_str());
    }
    if let Some(var_691) = &input.secret_arn {
        object.key("SecretArn").string(var_691.as_str());
    }
    if input.crawl_file_comments {
        object
            .key("CrawlFileComments")
            .boolean(input.crawl_file_comments);
    }
    if input.crawl_chat_rooms {
        object.key("CrawlChatRooms").boolean(input.crawl_chat_rooms);
    }
    if input.crawl_attachments {
        object
            .key("CrawlAttachments")
            .boolean(input.crawl_attachments);
    }
    if let Some(var_692) = &input.folder_ids {
        let mut array_693 = object.key("FolderIds").start_array();
        for item_694 in var_692 {
            {
                array_693.value().string(item_694.as_str());
            }
        }
        array_693.finish();
    }
    if let Some(var_695) = &input.thread_field_mappings {
        let mut array_696 = object.key("ThreadFieldMappings").start_array();
        for item_697 in var_695 {
            {
                let mut object_698 = array_696.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_698, item_697)?;
                object_698.finish();
            }
        }
        array_696.finish();
    }
    if let Some(var_699) = &input.message_field_mappings {
        let mut array_700 = object.key("MessageFieldMappings").start_array();
        for item_701 in var_699 {
            {
                let mut object_702 = array_700.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_702, item_701)?;
                object_702.finish();
            }
        }
        array_700.finish();
    }
    if let Some(var_703) = &input.attachment_field_mappings {
        let mut array_704 = object.key("AttachmentFieldMappings").start_array();
        for item_705 in var_703 {
            {
                let mut object_706 = array_704.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_706, item_705)?;
                object_706.finish();
            }
        }
        array_704.finish();
    }
    if let Some(var_707) = &input.inclusion_patterns {
        let mut array_708 = object.key("InclusionPatterns").start_array();
        for item_709 in var_707 {
            {
                array_708.value().string(item_709.as_str());
            }
        }
        array_708.finish();
    }
    if let Some(var_710) = &input.exclusion_patterns {
        let mut array_711 = object.key("ExclusionPatterns").start_array();
        for item_712 in var_710 {
            {
                array_711.value().string(item_712.as_str());
            }
        }
        array_711.finish();
    }
    if let Some(var_713) = &input.vpc_configuration {
        let mut object_714 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_714,
            var_713,
        )?;
        object_714.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_jira_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JiraConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_715) = &input.jira_account_url {
        object.key("JiraAccountUrl").string(var_715.as_str());
    }
    if let Some(var_716) = &input.secret_arn {
        object.key("SecretArn").string(var_716.as_str());
    }
    if input.use_change_log {
        object.key("UseChangeLog").boolean(input.use_change_log);
    }
    if let Some(var_717) = &input.project {
        let mut array_718 = object.key("Project").start_array();
        for item_719 in var_717 {
            {
                array_718.value().string(item_719.as_str());
            }
        }
        array_718.finish();
    }
    if let Some(var_720) = &input.issue_type {
        let mut array_721 = object.key("IssueType").start_array();
        for item_722 in var_720 {
            {
                array_721.value().string(item_722.as_str());
            }
        }
        array_721.finish();
    }
    if let Some(var_723) = &input.status {
        let mut array_724 = object.key("Status").start_array();
        for item_725 in var_723 {
            {
                array_724.value().string(item_725.as_str());
            }
        }
        array_724.finish();
    }
    if let Some(var_726) = &input.issue_sub_entity_filter {
        let mut array_727 = object.key("IssueSubEntityFilter").start_array();
        for item_728 in var_726 {
            {
                array_727.value().string(item_728.as_str());
            }
        }
        array_727.finish();
    }
    if let Some(var_729) = &input.attachment_field_mappings {
        let mut array_730 = object.key("AttachmentFieldMappings").start_array();
        for item_731 in var_729 {
            {
                let mut object_732 = array_730.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_732, item_731)?;
                object_732.finish();
            }
        }
        array_730.finish();
    }
    if let Some(var_733) = &input.comment_field_mappings {
        let mut array_734 = object.key("CommentFieldMappings").start_array();
        for item_735 in var_733 {
            {
                let mut object_736 = array_734.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_736, item_735)?;
                object_736.finish();
            }
        }
        array_734.finish();
    }
    if let Some(var_737) = &input.issue_field_mappings {
        let mut array_738 = object.key("IssueFieldMappings").start_array();
        for item_739 in var_737 {
            {
                let mut object_740 = array_738.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_740, item_739)?;
                object_740.finish();
            }
        }
        array_738.finish();
    }
    if let Some(var_741) = &input.project_field_mappings {
        let mut array_742 = object.key("ProjectFieldMappings").start_array();
        for item_743 in var_741 {
            {
                let mut object_744 = array_742.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_744, item_743)?;
                object_744.finish();
            }
        }
        array_742.finish();
    }
    if let Some(var_745) = &input.work_log_field_mappings {
        let mut array_746 = object.key("WorkLogFieldMappings").start_array();
        for item_747 in var_745 {
            {
                let mut object_748 = array_746.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_748, item_747)?;
                object_748.finish();
            }
        }
        array_746.finish();
    }
    if let Some(var_749) = &input.inclusion_patterns {
        let mut array_750 = object.key("InclusionPatterns").start_array();
        for item_751 in var_749 {
            {
                array_750.value().string(item_751.as_str());
            }
        }
        array_750.finish();
    }
    if let Some(var_752) = &input.exclusion_patterns {
        let mut array_753 = object.key("ExclusionPatterns").start_array();
        for item_754 in var_752 {
            {
                array_753.value().string(item_754.as_str());
            }
        }
        array_753.finish();
    }
    if let Some(var_755) = &input.vpc_configuration {
        let mut object_756 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_756,
            var_755,
        )?;
        object_756.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_content_source_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContentSourceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_757) = &input.data_source_ids {
        let mut array_758 = object.key("DataSourceIds").start_array();
        for item_759 in var_757 {
            {
                array_758.value().string(item_759.as_str());
            }
        }
        array_758.finish();
    }
    if let Some(var_760) = &input.faq_ids {
        let mut array_761 = object.key("FaqIds").start_array();
        for item_762 in var_760 {
            {
                array_761.value().string(item_762.as_str());
            }
        }
        array_761.finish();
    }
    if input.direct_put_content {
        object
            .key("DirectPutContent")
            .boolean(input.direct_put_content);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_identity_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserIdentityConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_763) = &input.identity_attribute_name {
        object.key("IdentityAttributeName").string(var_763.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_jwt_token_type_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JwtTokenTypeConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_764) = &input.key_location {
        object.key("KeyLocation").string(var_764.as_str());
    }
    if let Some(var_765) = &input.url {
        object.key("URL").string(var_765.as_str());
    }
    if let Some(var_766) = &input.secret_manager_arn {
        object.key("SecretManagerArn").string(var_766.as_str());
    }
    if let Some(var_767) = &input.user_name_attribute_field {
        object
            .key("UserNameAttributeField")
            .string(var_767.as_str());
    }
    if let Some(var_768) = &input.group_attribute_field {
        object.key("GroupAttributeField").string(var_768.as_str());
    }
    if let Some(var_769) = &input.issuer {
        object.key("Issuer").string(var_769.as_str());
    }
    if let Some(var_770) = &input.claim_regex {
        object.key("ClaimRegex").string(var_770.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_json_token_type_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JsonTokenTypeConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_771) = &input.user_name_attribute_field {
        object
            .key("UserNameAttributeField")
            .string(var_771.as_str());
    }
    if let Some(var_772) = &input.group_attribute_field {
        object.key("GroupAttributeField").string(var_772.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_member_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MemberGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_773) = &input.group_id {
        object.key("GroupId").string(var_773.as_str());
    }
    if let Some(var_774) = &input.data_source_id {
        object.key("DataSourceId").string(var_774.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_member_user(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MemberUser,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_775) = &input.user_id {
        object.key("UserId").string(var_775.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_relevance(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Relevance,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_776) = &input.freshness {
        object.key("Freshness").boolean(*var_776);
    }
    if let Some(var_777) = &input.importance {
        object.key("Importance").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_777).into()),
        );
    }
    if let Some(var_778) = &input.duration {
        object.key("Duration").string(var_778.as_str());
    }
    if let Some(var_779) = &input.rank_order {
        object.key("RankOrder").string(var_779.as_str());
    }
    if let Some(var_780) = &input.value_importance_map {
        let mut object_781 = object.key("ValueImportanceMap").start_object();
        for (key_782, value_783) in var_780 {
            {
                object_781.key(key_782).number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::NegInt((*value_783).into()),
                );
            }
        }
        object_781.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_source_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_784) = &input.group_id {
        object.key("GroupId").string(var_784.as_str());
    }
    if let Some(var_785) = &input.data_source_id {
        object.key("DataSourceId").string(var_785.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_search(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Search,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.facetable {
        object.key("Facetable").boolean(input.facetable);
    }
    if input.searchable {
        object.key("Searchable").boolean(input.searchable);
    }
    if input.displayable {
        object.key("Displayable").boolean(input.displayable);
    }
    if input.sortable {
        object.key("Sortable").boolean(input.sortable);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_attribute_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentAttributeValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_786) = &input.string_value {
        object.key("StringValue").string(var_786.as_str());
    }
    if let Some(var_787) = &input.string_list_value {
        let mut array_788 = object.key("StringListValue").start_array();
        for item_789 in var_787 {
            {
                array_788.value().string(item_789.as_str());
            }
        }
        array_788.finish();
    }
    if let Some(var_790) = &input.long_value {
        object.key("LongValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_790).into()),
        );
    }
    if let Some(var_791) = &input.date_value {
        object
            .key("DateValue")
            .date_time(var_791, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_attribute_condition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentAttributeCondition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_792) = &input.condition_document_attribute_key {
        object
            .key("ConditionDocumentAttributeKey")
            .string(var_792.as_str());
    }
    if let Some(var_793) = &input.operator {
        object.key("Operator").string(var_793.as_str());
    }
    if let Some(var_794) = &input.condition_on_value {
        let mut object_795 = object.key("ConditionOnValue").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute_value(
            &mut object_795,
            var_794,
        )?;
        object_795.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_attribute_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentAttributeTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_796) = &input.target_document_attribute_key {
        object
            .key("TargetDocumentAttributeKey")
            .string(var_796.as_str());
    }
    if input.target_document_attribute_value_deletion {
        object
            .key("TargetDocumentAttributeValueDeletion")
            .boolean(input.target_document_attribute_value_deletion);
    }
    if let Some(var_797) = &input.target_document_attribute_value {
        let mut object_798 = object.key("TargetDocumentAttributeValue").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute_value(
            &mut object_798,
            var_797,
        )?;
        object_798.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_documents_metadata_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentsMetadataConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_799) = &input.s3_prefix {
        object.key("S3Prefix").string(var_799.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_access_control_list_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AccessControlListConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_800) = &input.key_path {
        object.key("KeyPath").string(var_800.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_source_vpc_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceVpcConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_801) = &input.subnet_ids {
        let mut array_802 = object.key("SubnetIds").start_array();
        for item_803 in var_801 {
            {
                array_802.value().string(item_803.as_str());
            }
        }
        array_802.finish();
    }
    if let Some(var_804) = &input.security_group_ids {
        let mut array_805 = object.key("SecurityGroupIds").start_array();
        for item_806 in var_804 {
            {
                array_805.value().string(item_806.as_str());
            }
        }
        array_805.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_source_to_index_field_mapping(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceToIndexFieldMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_807) = &input.data_source_field_name {
        object.key("DataSourceFieldName").string(var_807.as_str());
    }
    if let Some(var_808) = &input.date_field_format {
        object.key("DateFieldFormat").string(var_808.as_str());
    }
    if let Some(var_809) = &input.index_field_name {
        object.key("IndexFieldName").string(var_809.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connection_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectionConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_810) = &input.database_host {
        object.key("DatabaseHost").string(var_810.as_str());
    }
    if let Some(var_811) = &input.database_port {
        object.key("DatabasePort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_811).into()),
        );
    }
    if let Some(var_812) = &input.database_name {
        object.key("DatabaseName").string(var_812.as_str());
    }
    if let Some(var_813) = &input.table_name {
        object.key("TableName").string(var_813.as_str());
    }
    if let Some(var_814) = &input.secret_arn {
        object.key("SecretArn").string(var_814.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_column_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ColumnConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_815) = &input.document_id_column_name {
        object.key("DocumentIdColumnName").string(var_815.as_str());
    }
    if let Some(var_816) = &input.document_data_column_name {
        object
            .key("DocumentDataColumnName")
            .string(var_816.as_str());
    }
    if let Some(var_817) = &input.document_title_column_name {
        object
            .key("DocumentTitleColumnName")
            .string(var_817.as_str());
    }
    if let Some(var_818) = &input.field_mappings {
        let mut array_819 = object.key("FieldMappings").start_array();
        for item_820 in var_818 {
            {
                let mut object_821 = array_819.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_821, item_820)?;
                object_821.finish();
            }
        }
        array_819.finish();
    }
    if let Some(var_822) = &input.change_detecting_columns {
        let mut array_823 = object.key("ChangeDetectingColumns").start_array();
        for item_824 in var_822 {
            {
                array_823.value().string(item_824.as_str());
            }
        }
        array_823.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_acl_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AclConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_825) = &input.allowed_groups_column_name {
        object
            .key("AllowedGroupsColumnName")
            .string(var_825.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sql_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SqlConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_826) = &input.query_identifiers_enclosing_option {
        object
            .key("QueryIdentifiersEnclosingOption")
            .string(var_826.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_salesforce_standard_object_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceStandardObjectConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_827) = &input.name {
        object.key("Name").string(var_827.as_str());
    }
    if let Some(var_828) = &input.document_data_field_name {
        object.key("DocumentDataFieldName").string(var_828.as_str());
    }
    if let Some(var_829) = &input.document_title_field_name {
        object
            .key("DocumentTitleFieldName")
            .string(var_829.as_str());
    }
    if let Some(var_830) = &input.field_mappings {
        let mut array_831 = object.key("FieldMappings").start_array();
        for item_832 in var_830 {
            {
                let mut object_833 = array_831.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_833, item_832)?;
                object_833.finish();
            }
        }
        array_831.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_salesforce_knowledge_article_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceKnowledgeArticleConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_834) = &input.included_states {
        let mut array_835 = object.key("IncludedStates").start_array();
        for item_836 in var_834 {
            {
                array_835.value().string(item_836.as_str());
            }
        }
        array_835.finish();
    }
    if let Some(var_837) = &input.standard_knowledge_article_type_configuration {
        let mut object_838 = object
            .key("StandardKnowledgeArticleTypeConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_salesforce_standard_knowledge_article_type_configuration(&mut object_838, var_837)?;
        object_838.finish();
    }
    if let Some(var_839) = &input.custom_knowledge_article_type_configurations {
        let mut array_840 = object
            .key("CustomKnowledgeArticleTypeConfigurations")
            .start_array();
        for item_841 in var_839 {
            {
                let mut object_842 = array_840.value().start_object();
                crate::json_ser::serialize_structure_crate_model_salesforce_custom_knowledge_article_type_configuration(&mut object_842, item_841)?;
                object_842.finish();
            }
        }
        array_840.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_salesforce_chatter_feed_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceChatterFeedConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_843) = &input.document_data_field_name {
        object.key("DocumentDataFieldName").string(var_843.as_str());
    }
    if let Some(var_844) = &input.document_title_field_name {
        object
            .key("DocumentTitleFieldName")
            .string(var_844.as_str());
    }
    if let Some(var_845) = &input.field_mappings {
        let mut array_846 = object.key("FieldMappings").start_array();
        for item_847 in var_845 {
            {
                let mut object_848 = array_846.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_848, item_847)?;
                object_848.finish();
            }
        }
        array_846.finish();
    }
    if let Some(var_849) = &input.include_filter_types {
        let mut array_850 = object.key("IncludeFilterTypes").start_array();
        for item_851 in var_849 {
            {
                array_850.value().string(item_851.as_str());
            }
        }
        array_850.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_salesforce_standard_object_attachment_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceStandardObjectAttachmentConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_852) = &input.document_title_field_name {
        object
            .key("DocumentTitleFieldName")
            .string(var_852.as_str());
    }
    if let Some(var_853) = &input.field_mappings {
        let mut array_854 = object.key("FieldMappings").start_array();
        for item_855 in var_853 {
            {
                let mut object_856 = array_854.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_856, item_855)?;
                object_856.finish();
            }
        }
        array_854.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_one_drive_users(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OneDriveUsers,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_857) = &input.one_drive_user_list {
        let mut array_858 = object.key("OneDriveUserList").start_array();
        for item_859 in var_857 {
            {
                array_858.value().string(item_859.as_str());
            }
        }
        array_858.finish();
    }
    if let Some(var_860) = &input.one_drive_user_s3_path {
        let mut object_861 = object.key("OneDriveUserS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_861, var_860)?;
        object_861.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_service_now_knowledge_article_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceNowKnowledgeArticleConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.crawl_attachments {
        object
            .key("CrawlAttachments")
            .boolean(input.crawl_attachments);
    }
    if let Some(var_862) = &input.include_attachment_file_patterns {
        let mut array_863 = object.key("IncludeAttachmentFilePatterns").start_array();
        for item_864 in var_862 {
            {
                array_863.value().string(item_864.as_str());
            }
        }
        array_863.finish();
    }
    if let Some(var_865) = &input.exclude_attachment_file_patterns {
        let mut array_866 = object.key("ExcludeAttachmentFilePatterns").start_array();
        for item_867 in var_865 {
            {
                array_866.value().string(item_867.as_str());
            }
        }
        array_866.finish();
    }
    if let Some(var_868) = &input.document_data_field_name {
        object.key("DocumentDataFieldName").string(var_868.as_str());
    }
    if let Some(var_869) = &input.document_title_field_name {
        object
            .key("DocumentTitleFieldName")
            .string(var_869.as_str());
    }
    if let Some(var_870) = &input.field_mappings {
        let mut array_871 = object.key("FieldMappings").start_array();
        for item_872 in var_870 {
            {
                let mut object_873 = array_871.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_873, item_872)?;
                object_873.finish();
            }
        }
        array_871.finish();
    }
    if let Some(var_874) = &input.filter_query {
        object.key("FilterQuery").string(var_874.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_service_now_service_catalog_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceNowServiceCatalogConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.crawl_attachments {
        object
            .key("CrawlAttachments")
            .boolean(input.crawl_attachments);
    }
    if let Some(var_875) = &input.include_attachment_file_patterns {
        let mut array_876 = object.key("IncludeAttachmentFilePatterns").start_array();
        for item_877 in var_875 {
            {
                array_876.value().string(item_877.as_str());
            }
        }
        array_876.finish();
    }
    if let Some(var_878) = &input.exclude_attachment_file_patterns {
        let mut array_879 = object.key("ExcludeAttachmentFilePatterns").start_array();
        for item_880 in var_878 {
            {
                array_879.value().string(item_880.as_str());
            }
        }
        array_879.finish();
    }
    if let Some(var_881) = &input.document_data_field_name {
        object.key("DocumentDataFieldName").string(var_881.as_str());
    }
    if let Some(var_882) = &input.document_title_field_name {
        object
            .key("DocumentTitleFieldName")
            .string(var_882.as_str());
    }
    if let Some(var_883) = &input.field_mappings {
        let mut array_884 = object.key("FieldMappings").start_array();
        for item_885 in var_883 {
            {
                let mut object_886 = array_884.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_886, item_885)?;
                object_886.finish();
            }
        }
        array_884.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_space_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceSpaceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.crawl_personal_spaces {
        object
            .key("CrawlPersonalSpaces")
            .boolean(input.crawl_personal_spaces);
    }
    if input.crawl_archived_spaces {
        object
            .key("CrawlArchivedSpaces")
            .boolean(input.crawl_archived_spaces);
    }
    if let Some(var_887) = &input.include_spaces {
        let mut array_888 = object.key("IncludeSpaces").start_array();
        for item_889 in var_887 {
            {
                array_888.value().string(item_889.as_str());
            }
        }
        array_888.finish();
    }
    if let Some(var_890) = &input.exclude_spaces {
        let mut array_891 = object.key("ExcludeSpaces").start_array();
        for item_892 in var_890 {
            {
                array_891.value().string(item_892.as_str());
            }
        }
        array_891.finish();
    }
    if let Some(var_893) = &input.space_field_mappings {
        let mut array_894 = object.key("SpaceFieldMappings").start_array();
        for item_895 in var_893 {
            {
                let mut object_896 = array_894.value().start_object();
                crate::json_ser::serialize_structure_crate_model_confluence_space_to_index_field_mapping(&mut object_896, item_895)?;
                object_896.finish();
            }
        }
        array_894.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_page_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluencePageConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_897) = &input.page_field_mappings {
        let mut array_898 = object.key("PageFieldMappings").start_array();
        for item_899 in var_897 {
            {
                let mut object_900 = array_898.value().start_object();
                crate::json_ser::serialize_structure_crate_model_confluence_page_to_index_field_mapping(&mut object_900, item_899)?;
                object_900.finish();
            }
        }
        array_898.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_blog_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceBlogConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_901) = &input.blog_field_mappings {
        let mut array_902 = object.key("BlogFieldMappings").start_array();
        for item_903 in var_901 {
            {
                let mut object_904 = array_902.value().start_object();
                crate::json_ser::serialize_structure_crate_model_confluence_blog_to_index_field_mapping(&mut object_904, item_903)?;
                object_904.finish();
            }
        }
        array_902.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_attachment_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceAttachmentConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.crawl_attachments {
        object
            .key("CrawlAttachments")
            .boolean(input.crawl_attachments);
    }
    if let Some(var_905) = &input.attachment_field_mappings {
        let mut array_906 = object.key("AttachmentFieldMappings").start_array();
        for item_907 in var_905 {
            {
                let mut object_908 = array_906.value().start_object();
                crate::json_ser::serialize_structure_crate_model_confluence_attachment_to_index_field_mapping(&mut object_908, item_907)?;
                object_908.finish();
            }
        }
        array_906.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_urls(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Urls,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_909) = &input.seed_url_configuration {
        let mut object_910 = object.key("SeedUrlConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_seed_url_configuration(
            &mut object_910,
            var_909,
        )?;
        object_910.finish();
    }
    if let Some(var_911) = &input.site_maps_configuration {
        let mut object_912 = object.key("SiteMapsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_site_maps_configuration(
            &mut object_912,
            var_911,
        )?;
        object_912.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_proxy_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProxyConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_913) = &input.host {
        object.key("Host").string(var_913.as_str());
    }
    if let Some(var_914) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_914).into()),
        );
    }
    if let Some(var_915) = &input.credentials {
        object.key("Credentials").string(var_915.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_authentication_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AuthenticationConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_916) = &input.basic_authentication {
        let mut array_917 = object.key("BasicAuthentication").start_array();
        for item_918 in var_916 {
            {
                let mut object_919 = array_917.value().start_object();
                crate::json_ser::serialize_structure_crate_model_basic_authentication_configuration(&mut object_919, item_918)?;
                object_919.finish();
            }
        }
        array_917.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_salesforce_standard_knowledge_article_type_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceStandardKnowledgeArticleTypeConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_920) = &input.document_data_field_name {
        object.key("DocumentDataFieldName").string(var_920.as_str());
    }
    if let Some(var_921) = &input.document_title_field_name {
        object
            .key("DocumentTitleFieldName")
            .string(var_921.as_str());
    }
    if let Some(var_922) = &input.field_mappings {
        let mut array_923 = object.key("FieldMappings").start_array();
        for item_924 in var_922 {
            {
                let mut object_925 = array_923.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_925, item_924)?;
                object_925.finish();
            }
        }
        array_923.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_salesforce_custom_knowledge_article_type_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceCustomKnowledgeArticleTypeConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_926) = &input.name {
        object.key("Name").string(var_926.as_str());
    }
    if let Some(var_927) = &input.document_data_field_name {
        object.key("DocumentDataFieldName").string(var_927.as_str());
    }
    if let Some(var_928) = &input.document_title_field_name {
        object
            .key("DocumentTitleFieldName")
            .string(var_928.as_str());
    }
    if let Some(var_929) = &input.field_mappings {
        let mut array_930 = object.key("FieldMappings").start_array();
        for item_931 in var_929 {
            {
                let mut object_932 = array_930.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_932, item_931)?;
                object_932.finish();
            }
        }
        array_930.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_space_to_index_field_mapping(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceSpaceToIndexFieldMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_933) = &input.data_source_field_name {
        object.key("DataSourceFieldName").string(var_933.as_str());
    }
    if let Some(var_934) = &input.date_field_format {
        object.key("DateFieldFormat").string(var_934.as_str());
    }
    if let Some(var_935) = &input.index_field_name {
        object.key("IndexFieldName").string(var_935.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_page_to_index_field_mapping(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluencePageToIndexFieldMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_936) = &input.data_source_field_name {
        object.key("DataSourceFieldName").string(var_936.as_str());
    }
    if let Some(var_937) = &input.date_field_format {
        object.key("DateFieldFormat").string(var_937.as_str());
    }
    if let Some(var_938) = &input.index_field_name {
        object.key("IndexFieldName").string(var_938.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_blog_to_index_field_mapping(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceBlogToIndexFieldMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_939) = &input.data_source_field_name {
        object.key("DataSourceFieldName").string(var_939.as_str());
    }
    if let Some(var_940) = &input.date_field_format {
        object.key("DateFieldFormat").string(var_940.as_str());
    }
    if let Some(var_941) = &input.index_field_name {
        object.key("IndexFieldName").string(var_941.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_attachment_to_index_field_mapping(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceAttachmentToIndexFieldMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_942) = &input.data_source_field_name {
        object.key("DataSourceFieldName").string(var_942.as_str());
    }
    if let Some(var_943) = &input.date_field_format {
        object.key("DateFieldFormat").string(var_943.as_str());
    }
    if let Some(var_944) = &input.index_field_name {
        object.key("IndexFieldName").string(var_944.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_seed_url_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SeedUrlConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_945) = &input.seed_urls {
        let mut array_946 = object.key("SeedUrls").start_array();
        for item_947 in var_945 {
            {
                array_946.value().string(item_947.as_str());
            }
        }
        array_946.finish();
    }
    if let Some(var_948) = &input.web_crawler_mode {
        object.key("WebCrawlerMode").string(var_948.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_site_maps_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SiteMapsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_949) = &input.site_maps {
        let mut array_950 = object.key("SiteMaps").start_array();
        for item_951 in var_949 {
            {
                array_950.value().string(item_951.as_str());
            }
        }
        array_950.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_basic_authentication_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BasicAuthenticationConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_952) = &input.host {
        object.key("Host").string(var_952.as_str());
    }
    if let Some(var_953) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_953).into()),
        );
    }
    if let Some(var_954) = &input.credentials {
        object.key("Credentials").string(var_954.as_str());
    }
    Ok(())
}
