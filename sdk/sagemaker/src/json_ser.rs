// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_add_association_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddAssociationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.source_arn {
        object.key("SourceArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.destination_arn {
        object.key("DestinationArn").string(var_2.as_str());
    }
    if let Some(var_3) = &input.association_type {
        object.key("AssociationType").string(var_3.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_add_tags_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddTagsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_4) = &input.resource_arn {
        object.key("ResourceArn").string(var_4.as_str());
    }
    if let Some(var_5) = &input.tags {
        let mut array_6 = object.key("Tags").start_array();
        for item_7 in var_5 {
            {
                let mut object_8 = array_6.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_trial_component_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateTrialComponentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_9) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_9.as_str());
    }
    if let Some(var_10) = &input.trial_name {
        object.key("TrialName").string(var_10.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_describe_model_package_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDescribeModelPackageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_11) = &input.model_package_arn_list {
        let mut array_12 = object.key("ModelPackageArnList").start_array();
        for item_13 in var_11 {
            {
                array_12.value().string(item_13.as_str());
            }
        }
        array_12.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_action_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateActionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_14) = &input.action_name {
        object.key("ActionName").string(var_14.as_str());
    }
    if let Some(var_15) = &input.source {
        let mut object_16 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_crate_model_action_source(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.action_type {
        object.key("ActionType").string(var_17.as_str());
    }
    if let Some(var_18) = &input.description {
        object.key("Description").string(var_18.as_str());
    }
    if let Some(var_19) = &input.status {
        object.key("Status").string(var_19.as_str());
    }
    if let Some(var_20) = &input.properties {
        let mut object_21 = object.key("Properties").start_object();
        for (key_22, value_23) in var_20 {
            {
                object_21.key(key_22).string(value_23.as_str());
            }
        }
        object_21.finish();
    }
    if let Some(var_24) = &input.metadata_properties {
        let mut object_25 = object.key("MetadataProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_metadata_properties(
            &mut object_25,
            var_24,
        )?;
        object_25.finish();
    }
    if let Some(var_26) = &input.tags {
        let mut array_27 = object.key("Tags").start_array();
        for item_28 in var_26 {
            {
                let mut object_29 = array_27.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_29, item_28)?;
                object_29.finish();
            }
        }
        array_27.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_algorithm_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAlgorithmInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_30) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_30.as_str());
    }
    if let Some(var_31) = &input.algorithm_description {
        object.key("AlgorithmDescription").string(var_31.as_str());
    }
    if let Some(var_32) = &input.training_specification {
        let mut object_33 = object.key("TrainingSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_training_specification(
            &mut object_33,
            var_32,
        )?;
        object_33.finish();
    }
    if let Some(var_34) = &input.inference_specification {
        let mut object_35 = object.key("InferenceSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_inference_specification(
            &mut object_35,
            var_34,
        )?;
        object_35.finish();
    }
    if let Some(var_36) = &input.validation_specification {
        let mut object_37 = object.key("ValidationSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_algorithm_validation_specification(
            &mut object_37,
            var_36,
        )?;
        object_37.finish();
    }
    if input.certify_for_marketplace {
        object
            .key("CertifyForMarketplace")
            .boolean(input.certify_for_marketplace);
    }
    if let Some(var_38) = &input.tags {
        let mut array_39 = object.key("Tags").start_array();
        for item_40 in var_38 {
            {
                let mut object_41 = array_39.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_41, item_40)?;
                object_41.finish();
            }
        }
        array_39.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_app_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAppInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_42) = &input.domain_id {
        object.key("DomainId").string(var_42.as_str());
    }
    if let Some(var_43) = &input.user_profile_name {
        object.key("UserProfileName").string(var_43.as_str());
    }
    if let Some(var_44) = &input.app_type {
        object.key("AppType").string(var_44.as_str());
    }
    if let Some(var_45) = &input.app_name {
        object.key("AppName").string(var_45.as_str());
    }
    if let Some(var_46) = &input.tags {
        let mut array_47 = object.key("Tags").start_array();
        for item_48 in var_46 {
            {
                let mut object_49 = array_47.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_49, item_48)?;
                object_49.finish();
            }
        }
        array_47.finish();
    }
    if let Some(var_50) = &input.resource_spec {
        let mut object_51 = object.key("ResourceSpec").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_spec(&mut object_51, var_50)?;
        object_51.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_app_image_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAppImageConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_52) = &input.app_image_config_name {
        object.key("AppImageConfigName").string(var_52.as_str());
    }
    if let Some(var_53) = &input.tags {
        let mut array_54 = object.key("Tags").start_array();
        for item_55 in var_53 {
            {
                let mut object_56 = array_54.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_56, item_55)?;
                object_56.finish();
            }
        }
        array_54.finish();
    }
    if let Some(var_57) = &input.kernel_gateway_image_config {
        let mut object_58 = object.key("KernelGatewayImageConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_kernel_gateway_image_config(
            &mut object_58,
            var_57,
        )?;
        object_58.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_artifact_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateArtifactInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_59) = &input.artifact_name {
        object.key("ArtifactName").string(var_59.as_str());
    }
    if let Some(var_60) = &input.source {
        let mut object_61 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_crate_model_artifact_source(&mut object_61, var_60)?;
        object_61.finish();
    }
    if let Some(var_62) = &input.artifact_type {
        object.key("ArtifactType").string(var_62.as_str());
    }
    if let Some(var_63) = &input.properties {
        let mut object_64 = object.key("Properties").start_object();
        for (key_65, value_66) in var_63 {
            {
                object_64.key(key_65).string(value_66.as_str());
            }
        }
        object_64.finish();
    }
    if let Some(var_67) = &input.metadata_properties {
        let mut object_68 = object.key("MetadataProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_metadata_properties(
            &mut object_68,
            var_67,
        )?;
        object_68.finish();
    }
    if let Some(var_69) = &input.tags {
        let mut array_70 = object.key("Tags").start_array();
        for item_71 in var_69 {
            {
                let mut object_72 = array_70.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_72, item_71)?;
                object_72.finish();
            }
        }
        array_70.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_auto_ml_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAutoMlJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_73) = &input.auto_ml_job_name {
        object.key("AutoMLJobName").string(var_73.as_str());
    }
    if let Some(var_74) = &input.input_data_config {
        let mut array_75 = object.key("InputDataConfig").start_array();
        for item_76 in var_74 {
            {
                let mut object_77 = array_75.value().start_object();
                crate::json_ser::serialize_structure_crate_model_auto_ml_channel(
                    &mut object_77,
                    item_76,
                )?;
                object_77.finish();
            }
        }
        array_75.finish();
    }
    if let Some(var_78) = &input.output_data_config {
        let mut object_79 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_ml_output_data_config(
            &mut object_79,
            var_78,
        )?;
        object_79.finish();
    }
    if let Some(var_80) = &input.problem_type {
        object.key("ProblemType").string(var_80.as_str());
    }
    if let Some(var_81) = &input.auto_ml_job_objective {
        let mut object_82 = object.key("AutoMLJobObjective").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_ml_job_objective(
            &mut object_82,
            var_81,
        )?;
        object_82.finish();
    }
    if let Some(var_83) = &input.auto_ml_job_config {
        let mut object_84 = object.key("AutoMLJobConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_ml_job_config(
            &mut object_84,
            var_83,
        )?;
        object_84.finish();
    }
    if let Some(var_85) = &input.role_arn {
        object.key("RoleArn").string(var_85.as_str());
    }
    if input.generate_candidate_definitions_only {
        object
            .key("GenerateCandidateDefinitionsOnly")
            .boolean(input.generate_candidate_definitions_only);
    }
    if let Some(var_86) = &input.tags {
        let mut array_87 = object.key("Tags").start_array();
        for item_88 in var_86 {
            {
                let mut object_89 = array_87.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_89, item_88)?;
                object_89.finish();
            }
        }
        array_87.finish();
    }
    if let Some(var_90) = &input.model_deploy_config {
        let mut object_91 = object.key("ModelDeployConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_model_deploy_config(
            &mut object_91,
            var_90,
        )?;
        object_91.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_code_repository_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCodeRepositoryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_92) = &input.code_repository_name {
        object.key("CodeRepositoryName").string(var_92.as_str());
    }
    if let Some(var_93) = &input.git_config {
        let mut object_94 = object.key("GitConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_git_config(&mut object_94, var_93)?;
        object_94.finish();
    }
    if let Some(var_95) = &input.tags {
        let mut array_96 = object.key("Tags").start_array();
        for item_97 in var_95 {
            {
                let mut object_98 = array_96.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_98, item_97)?;
                object_98.finish();
            }
        }
        array_96.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_compilation_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCompilationJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_99) = &input.compilation_job_name {
        object.key("CompilationJobName").string(var_99.as_str());
    }
    if let Some(var_100) = &input.role_arn {
        object.key("RoleArn").string(var_100.as_str());
    }
    if let Some(var_101) = &input.model_package_version_arn {
        object
            .key("ModelPackageVersionArn")
            .string(var_101.as_str());
    }
    if let Some(var_102) = &input.input_config {
        let mut object_103 = object.key("InputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_input_config(&mut object_103, var_102)?;
        object_103.finish();
    }
    if let Some(var_104) = &input.output_config {
        let mut object_105 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_output_config(&mut object_105, var_104)?;
        object_105.finish();
    }
    if let Some(var_106) = &input.vpc_config {
        let mut object_107 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_neo_vpc_config(&mut object_107, var_106)?;
        object_107.finish();
    }
    if let Some(var_108) = &input.stopping_condition {
        let mut object_109 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_stopping_condition(
            &mut object_109,
            var_108,
        )?;
        object_109.finish();
    }
    if let Some(var_110) = &input.tags {
        let mut array_111 = object.key("Tags").start_array();
        for item_112 in var_110 {
            {
                let mut object_113 = array_111.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_113, item_112)?;
                object_113.finish();
            }
        }
        array_111.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_context_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateContextInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_114) = &input.context_name {
        object.key("ContextName").string(var_114.as_str());
    }
    if let Some(var_115) = &input.source {
        let mut object_116 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_crate_model_context_source(&mut object_116, var_115)?;
        object_116.finish();
    }
    if let Some(var_117) = &input.context_type {
        object.key("ContextType").string(var_117.as_str());
    }
    if let Some(var_118) = &input.description {
        object.key("Description").string(var_118.as_str());
    }
    if let Some(var_119) = &input.properties {
        let mut object_120 = object.key("Properties").start_object();
        for (key_121, value_122) in var_119 {
            {
                object_120.key(key_121).string(value_122.as_str());
            }
        }
        object_120.finish();
    }
    if let Some(var_123) = &input.tags {
        let mut array_124 = object.key("Tags").start_array();
        for item_125 in var_123 {
            {
                let mut object_126 = array_124.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_126, item_125)?;
                object_126.finish();
            }
        }
        array_124.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_data_quality_job_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDataQualityJobDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_127) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_127.as_str());
    }
    if let Some(var_128) = &input.data_quality_baseline_config {
        let mut object_129 = object.key("DataQualityBaselineConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_data_quality_baseline_config(
            &mut object_129,
            var_128,
        )?;
        object_129.finish();
    }
    if let Some(var_130) = &input.data_quality_app_specification {
        let mut object_131 = object.key("DataQualityAppSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_data_quality_app_specification(
            &mut object_131,
            var_130,
        )?;
        object_131.finish();
    }
    if let Some(var_132) = &input.data_quality_job_input {
        let mut object_133 = object.key("DataQualityJobInput").start_object();
        crate::json_ser::serialize_structure_crate_model_data_quality_job_input(
            &mut object_133,
            var_132,
        )?;
        object_133.finish();
    }
    if let Some(var_134) = &input.data_quality_job_output_config {
        let mut object_135 = object.key("DataQualityJobOutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_output_config(
            &mut object_135,
            var_134,
        )?;
        object_135.finish();
    }
    if let Some(var_136) = &input.job_resources {
        let mut object_137 = object.key("JobResources").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_resources(
            &mut object_137,
            var_136,
        )?;
        object_137.finish();
    }
    if let Some(var_138) = &input.network_config {
        let mut object_139 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_network_config(
            &mut object_139,
            var_138,
        )?;
        object_139.finish();
    }
    if let Some(var_140) = &input.role_arn {
        object.key("RoleArn").string(var_140.as_str());
    }
    if let Some(var_141) = &input.stopping_condition {
        let mut object_142 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_stopping_condition(
            &mut object_142,
            var_141,
        )?;
        object_142.finish();
    }
    if let Some(var_143) = &input.tags {
        let mut array_144 = object.key("Tags").start_array();
        for item_145 in var_143 {
            {
                let mut object_146 = array_144.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_146, item_145)?;
                object_146.finish();
            }
        }
        array_144.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_device_fleet_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDeviceFleetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_147) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_147.as_str());
    }
    if let Some(var_148) = &input.role_arn {
        object.key("RoleArn").string(var_148.as_str());
    }
    if let Some(var_149) = &input.description {
        object.key("Description").string(var_149.as_str());
    }
    if let Some(var_150) = &input.output_config {
        let mut object_151 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_edge_output_config(
            &mut object_151,
            var_150,
        )?;
        object_151.finish();
    }
    if let Some(var_152) = &input.tags {
        let mut array_153 = object.key("Tags").start_array();
        for item_154 in var_152 {
            {
                let mut object_155 = array_153.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_155, item_154)?;
                object_155.finish();
            }
        }
        array_153.finish();
    }
    if let Some(var_156) = &input.enable_iot_role_alias {
        object.key("EnableIotRoleAlias").boolean(*var_156);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_domain_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDomainInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_157) = &input.domain_name {
        object.key("DomainName").string(var_157.as_str());
    }
    if let Some(var_158) = &input.auth_mode {
        object.key("AuthMode").string(var_158.as_str());
    }
    if let Some(var_159) = &input.default_user_settings {
        let mut object_160 = object.key("DefaultUserSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_user_settings(&mut object_160, var_159)?;
        object_160.finish();
    }
    if let Some(var_161) = &input.subnet_ids {
        let mut array_162 = object.key("SubnetIds").start_array();
        for item_163 in var_161 {
            {
                array_162.value().string(item_163.as_str());
            }
        }
        array_162.finish();
    }
    if let Some(var_164) = &input.vpc_id {
        object.key("VpcId").string(var_164.as_str());
    }
    if let Some(var_165) = &input.tags {
        let mut array_166 = object.key("Tags").start_array();
        for item_167 in var_165 {
            {
                let mut object_168 = array_166.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_168, item_167)?;
                object_168.finish();
            }
        }
        array_166.finish();
    }
    if let Some(var_169) = &input.app_network_access_type {
        object.key("AppNetworkAccessType").string(var_169.as_str());
    }
    if let Some(var_170) = &input.home_efs_file_system_kms_key_id {
        object
            .key("HomeEfsFileSystemKmsKeyId")
            .string(var_170.as_str());
    }
    if let Some(var_171) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_171.as_str());
    }
    if let Some(var_172) = &input.app_security_group_management {
        object
            .key("AppSecurityGroupManagement")
            .string(var_172.as_str());
    }
    if let Some(var_173) = &input.domain_settings {
        let mut object_174 = object.key("DomainSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_domain_settings(&mut object_174, var_173)?;
        object_174.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_edge_packaging_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEdgePackagingJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_175) = &input.edge_packaging_job_name {
        object.key("EdgePackagingJobName").string(var_175.as_str());
    }
    if let Some(var_176) = &input.compilation_job_name {
        object.key("CompilationJobName").string(var_176.as_str());
    }
    if let Some(var_177) = &input.model_name {
        object.key("ModelName").string(var_177.as_str());
    }
    if let Some(var_178) = &input.model_version {
        object.key("ModelVersion").string(var_178.as_str());
    }
    if let Some(var_179) = &input.role_arn {
        object.key("RoleArn").string(var_179.as_str());
    }
    if let Some(var_180) = &input.output_config {
        let mut object_181 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_edge_output_config(
            &mut object_181,
            var_180,
        )?;
        object_181.finish();
    }
    if let Some(var_182) = &input.resource_key {
        object.key("ResourceKey").string(var_182.as_str());
    }
    if let Some(var_183) = &input.tags {
        let mut array_184 = object.key("Tags").start_array();
        for item_185 in var_183 {
            {
                let mut object_186 = array_184.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_186, item_185)?;
                object_186.finish();
            }
        }
        array_184.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEndpointInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_187) = &input.endpoint_name {
        object.key("EndpointName").string(var_187.as_str());
    }
    if let Some(var_188) = &input.endpoint_config_name {
        object.key("EndpointConfigName").string(var_188.as_str());
    }
    if let Some(var_189) = &input.deployment_config {
        let mut object_190 = object.key("DeploymentConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_deployment_config(
            &mut object_190,
            var_189,
        )?;
        object_190.finish();
    }
    if let Some(var_191) = &input.tags {
        let mut array_192 = object.key("Tags").start_array();
        for item_193 in var_191 {
            {
                let mut object_194 = array_192.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_194, item_193)?;
                object_194.finish();
            }
        }
        array_192.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_endpoint_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEndpointConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_195) = &input.endpoint_config_name {
        object.key("EndpointConfigName").string(var_195.as_str());
    }
    if let Some(var_196) = &input.production_variants {
        let mut array_197 = object.key("ProductionVariants").start_array();
        for item_198 in var_196 {
            {
                let mut object_199 = array_197.value().start_object();
                crate::json_ser::serialize_structure_crate_model_production_variant(
                    &mut object_199,
                    item_198,
                )?;
                object_199.finish();
            }
        }
        array_197.finish();
    }
    if let Some(var_200) = &input.data_capture_config {
        let mut object_201 = object.key("DataCaptureConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_data_capture_config(
            &mut object_201,
            var_200,
        )?;
        object_201.finish();
    }
    if let Some(var_202) = &input.tags {
        let mut array_203 = object.key("Tags").start_array();
        for item_204 in var_202 {
            {
                let mut object_205 = array_203.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_205, item_204)?;
                object_205.finish();
            }
        }
        array_203.finish();
    }
    if let Some(var_206) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_206.as_str());
    }
    if let Some(var_207) = &input.async_inference_config {
        let mut object_208 = object.key("AsyncInferenceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_async_inference_config(
            &mut object_208,
            var_207,
        )?;
        object_208.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_experiment_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateExperimentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_209) = &input.experiment_name {
        object.key("ExperimentName").string(var_209.as_str());
    }
    if let Some(var_210) = &input.display_name {
        object.key("DisplayName").string(var_210.as_str());
    }
    if let Some(var_211) = &input.description {
        object.key("Description").string(var_211.as_str());
    }
    if let Some(var_212) = &input.tags {
        let mut array_213 = object.key("Tags").start_array();
        for item_214 in var_212 {
            {
                let mut object_215 = array_213.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_215, item_214)?;
                object_215.finish();
            }
        }
        array_213.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_feature_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFeatureGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_216) = &input.feature_group_name {
        object.key("FeatureGroupName").string(var_216.as_str());
    }
    if let Some(var_217) = &input.record_identifier_feature_name {
        object
            .key("RecordIdentifierFeatureName")
            .string(var_217.as_str());
    }
    if let Some(var_218) = &input.event_time_feature_name {
        object.key("EventTimeFeatureName").string(var_218.as_str());
    }
    if let Some(var_219) = &input.feature_definitions {
        let mut array_220 = object.key("FeatureDefinitions").start_array();
        for item_221 in var_219 {
            {
                let mut object_222 = array_220.value().start_object();
                crate::json_ser::serialize_structure_crate_model_feature_definition(
                    &mut object_222,
                    item_221,
                )?;
                object_222.finish();
            }
        }
        array_220.finish();
    }
    if let Some(var_223) = &input.online_store_config {
        let mut object_224 = object.key("OnlineStoreConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_online_store_config(
            &mut object_224,
            var_223,
        )?;
        object_224.finish();
    }
    if let Some(var_225) = &input.offline_store_config {
        let mut object_226 = object.key("OfflineStoreConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_offline_store_config(
            &mut object_226,
            var_225,
        )?;
        object_226.finish();
    }
    if let Some(var_227) = &input.role_arn {
        object.key("RoleArn").string(var_227.as_str());
    }
    if let Some(var_228) = &input.description {
        object.key("Description").string(var_228.as_str());
    }
    if let Some(var_229) = &input.tags {
        let mut array_230 = object.key("Tags").start_array();
        for item_231 in var_229 {
            {
                let mut object_232 = array_230.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_232, item_231)?;
                object_232.finish();
            }
        }
        array_230.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_flow_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFlowDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_233) = &input.flow_definition_name {
        object.key("FlowDefinitionName").string(var_233.as_str());
    }
    if let Some(var_234) = &input.human_loop_request_source {
        let mut object_235 = object.key("HumanLoopRequestSource").start_object();
        crate::json_ser::serialize_structure_crate_model_human_loop_request_source(
            &mut object_235,
            var_234,
        )?;
        object_235.finish();
    }
    if let Some(var_236) = &input.human_loop_activation_config {
        let mut object_237 = object.key("HumanLoopActivationConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_human_loop_activation_config(
            &mut object_237,
            var_236,
        )?;
        object_237.finish();
    }
    if let Some(var_238) = &input.human_loop_config {
        let mut object_239 = object.key("HumanLoopConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_human_loop_config(
            &mut object_239,
            var_238,
        )?;
        object_239.finish();
    }
    if let Some(var_240) = &input.output_config {
        let mut object_241 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_flow_definition_output_config(
            &mut object_241,
            var_240,
        )?;
        object_241.finish();
    }
    if let Some(var_242) = &input.role_arn {
        object.key("RoleArn").string(var_242.as_str());
    }
    if let Some(var_243) = &input.tags {
        let mut array_244 = object.key("Tags").start_array();
        for item_245 in var_243 {
            {
                let mut object_246 = array_244.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_246, item_245)?;
                object_246.finish();
            }
        }
        array_244.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_human_task_ui_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateHumanTaskUiInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_247) = &input.human_task_ui_name {
        object.key("HumanTaskUiName").string(var_247.as_str());
    }
    if let Some(var_248) = &input.ui_template {
        let mut object_249 = object.key("UiTemplate").start_object();
        crate::json_ser::serialize_structure_crate_model_ui_template(&mut object_249, var_248)?;
        object_249.finish();
    }
    if let Some(var_250) = &input.tags {
        let mut array_251 = object.key("Tags").start_array();
        for item_252 in var_250 {
            {
                let mut object_253 = array_251.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_253, item_252)?;
                object_253.finish();
            }
        }
        array_251.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_hyper_parameter_tuning_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateHyperParameterTuningJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_254) = &input.hyper_parameter_tuning_job_name {
        object
            .key("HyperParameterTuningJobName")
            .string(var_254.as_str());
    }
    if let Some(var_255) = &input.hyper_parameter_tuning_job_config {
        let mut object_256 = object.key("HyperParameterTuningJobConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_hyper_parameter_tuning_job_config(
            &mut object_256,
            var_255,
        )?;
        object_256.finish();
    }
    if let Some(var_257) = &input.training_job_definition {
        let mut object_258 = object.key("TrainingJobDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_hyper_parameter_training_job_definition(
            &mut object_258,
            var_257,
        )?;
        object_258.finish();
    }
    if let Some(var_259) = &input.training_job_definitions {
        let mut array_260 = object.key("TrainingJobDefinitions").start_array();
        for item_261 in var_259 {
            {
                let mut object_262 = array_260.value().start_object();
                crate::json_ser::serialize_structure_crate_model_hyper_parameter_training_job_definition(&mut object_262, item_261)?;
                object_262.finish();
            }
        }
        array_260.finish();
    }
    if let Some(var_263) = &input.warm_start_config {
        let mut object_264 = object.key("WarmStartConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_hyper_parameter_tuning_job_warm_start_config(&mut object_264, var_263)?;
        object_264.finish();
    }
    if let Some(var_265) = &input.tags {
        let mut array_266 = object.key("Tags").start_array();
        for item_267 in var_265 {
            {
                let mut object_268 = array_266.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_268, item_267)?;
                object_268.finish();
            }
        }
        array_266.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_image_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateImageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_269) = &input.description {
        object.key("Description").string(var_269.as_str());
    }
    if let Some(var_270) = &input.display_name {
        object.key("DisplayName").string(var_270.as_str());
    }
    if let Some(var_271) = &input.image_name {
        object.key("ImageName").string(var_271.as_str());
    }
    if let Some(var_272) = &input.role_arn {
        object.key("RoleArn").string(var_272.as_str());
    }
    if let Some(var_273) = &input.tags {
        let mut array_274 = object.key("Tags").start_array();
        for item_275 in var_273 {
            {
                let mut object_276 = array_274.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_276, item_275)?;
                object_276.finish();
            }
        }
        array_274.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_image_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateImageVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_277) = &input.base_image {
        object.key("BaseImage").string(var_277.as_str());
    }
    if let Some(var_278) = &input.client_token {
        object.key("ClientToken").string(var_278.as_str());
    }
    if let Some(var_279) = &input.image_name {
        object.key("ImageName").string(var_279.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_inference_recommendations_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateInferenceRecommendationsJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_280) = &input.job_name {
        object.key("JobName").string(var_280.as_str());
    }
    if let Some(var_281) = &input.job_type {
        object.key("JobType").string(var_281.as_str());
    }
    if let Some(var_282) = &input.role_arn {
        object.key("RoleArn").string(var_282.as_str());
    }
    if let Some(var_283) = &input.input_config {
        let mut object_284 = object.key("InputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_recommendation_job_input_config(
            &mut object_284,
            var_283,
        )?;
        object_284.finish();
    }
    if let Some(var_285) = &input.job_description {
        object.key("JobDescription").string(var_285.as_str());
    }
    if let Some(var_286) = &input.stopping_conditions {
        let mut object_287 = object.key("StoppingConditions").start_object();
        crate::json_ser::serialize_structure_crate_model_recommendation_job_stopping_conditions(
            &mut object_287,
            var_286,
        )?;
        object_287.finish();
    }
    if let Some(var_288) = &input.output_config {
        let mut object_289 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_recommendation_job_output_config(
            &mut object_289,
            var_288,
        )?;
        object_289.finish();
    }
    if let Some(var_290) = &input.tags {
        let mut array_291 = object.key("Tags").start_array();
        for item_292 in var_290 {
            {
                let mut object_293 = array_291.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_293, item_292)?;
                object_293.finish();
            }
        }
        array_291.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_labeling_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateLabelingJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_294) = &input.labeling_job_name {
        object.key("LabelingJobName").string(var_294.as_str());
    }
    if let Some(var_295) = &input.label_attribute_name {
        object.key("LabelAttributeName").string(var_295.as_str());
    }
    if let Some(var_296) = &input.input_config {
        let mut object_297 = object.key("InputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_labeling_job_input_config(
            &mut object_297,
            var_296,
        )?;
        object_297.finish();
    }
    if let Some(var_298) = &input.output_config {
        let mut object_299 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_labeling_job_output_config(
            &mut object_299,
            var_298,
        )?;
        object_299.finish();
    }
    if let Some(var_300) = &input.role_arn {
        object.key("RoleArn").string(var_300.as_str());
    }
    if let Some(var_301) = &input.label_category_config_s3_uri {
        object
            .key("LabelCategoryConfigS3Uri")
            .string(var_301.as_str());
    }
    if let Some(var_302) = &input.stopping_conditions {
        let mut object_303 = object.key("StoppingConditions").start_object();
        crate::json_ser::serialize_structure_crate_model_labeling_job_stopping_conditions(
            &mut object_303,
            var_302,
        )?;
        object_303.finish();
    }
    if let Some(var_304) = &input.labeling_job_algorithms_config {
        let mut object_305 = object.key("LabelingJobAlgorithmsConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_labeling_job_algorithms_config(
            &mut object_305,
            var_304,
        )?;
        object_305.finish();
    }
    if let Some(var_306) = &input.human_task_config {
        let mut object_307 = object.key("HumanTaskConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_human_task_config(
            &mut object_307,
            var_306,
        )?;
        object_307.finish();
    }
    if let Some(var_308) = &input.tags {
        let mut array_309 = object.key("Tags").start_array();
        for item_310 in var_308 {
            {
                let mut object_311 = array_309.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_311, item_310)?;
                object_311.finish();
            }
        }
        array_309.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_model_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_312) = &input.model_name {
        object.key("ModelName").string(var_312.as_str());
    }
    if let Some(var_313) = &input.primary_container {
        let mut object_314 = object.key("PrimaryContainer").start_object();
        crate::json_ser::serialize_structure_crate_model_container_definition(
            &mut object_314,
            var_313,
        )?;
        object_314.finish();
    }
    if let Some(var_315) = &input.containers {
        let mut array_316 = object.key("Containers").start_array();
        for item_317 in var_315 {
            {
                let mut object_318 = array_316.value().start_object();
                crate::json_ser::serialize_structure_crate_model_container_definition(
                    &mut object_318,
                    item_317,
                )?;
                object_318.finish();
            }
        }
        array_316.finish();
    }
    if let Some(var_319) = &input.inference_execution_config {
        let mut object_320 = object.key("InferenceExecutionConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_inference_execution_config(
            &mut object_320,
            var_319,
        )?;
        object_320.finish();
    }
    if let Some(var_321) = &input.execution_role_arn {
        object.key("ExecutionRoleArn").string(var_321.as_str());
    }
    if let Some(var_322) = &input.tags {
        let mut array_323 = object.key("Tags").start_array();
        for item_324 in var_322 {
            {
                let mut object_325 = array_323.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_325, item_324)?;
                object_325.finish();
            }
        }
        array_323.finish();
    }
    if let Some(var_326) = &input.vpc_config {
        let mut object_327 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config(&mut object_327, var_326)?;
        object_327.finish();
    }
    if input.enable_network_isolation {
        object
            .key("EnableNetworkIsolation")
            .boolean(input.enable_network_isolation);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_model_bias_job_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelBiasJobDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_328) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_328.as_str());
    }
    if let Some(var_329) = &input.model_bias_baseline_config {
        let mut object_330 = object.key("ModelBiasBaselineConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_model_bias_baseline_config(
            &mut object_330,
            var_329,
        )?;
        object_330.finish();
    }
    if let Some(var_331) = &input.model_bias_app_specification {
        let mut object_332 = object.key("ModelBiasAppSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_model_bias_app_specification(
            &mut object_332,
            var_331,
        )?;
        object_332.finish();
    }
    if let Some(var_333) = &input.model_bias_job_input {
        let mut object_334 = object.key("ModelBiasJobInput").start_object();
        crate::json_ser::serialize_structure_crate_model_model_bias_job_input(
            &mut object_334,
            var_333,
        )?;
        object_334.finish();
    }
    if let Some(var_335) = &input.model_bias_job_output_config {
        let mut object_336 = object.key("ModelBiasJobOutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_output_config(
            &mut object_336,
            var_335,
        )?;
        object_336.finish();
    }
    if let Some(var_337) = &input.job_resources {
        let mut object_338 = object.key("JobResources").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_resources(
            &mut object_338,
            var_337,
        )?;
        object_338.finish();
    }
    if let Some(var_339) = &input.network_config {
        let mut object_340 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_network_config(
            &mut object_340,
            var_339,
        )?;
        object_340.finish();
    }
    if let Some(var_341) = &input.role_arn {
        object.key("RoleArn").string(var_341.as_str());
    }
    if let Some(var_342) = &input.stopping_condition {
        let mut object_343 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_stopping_condition(
            &mut object_343,
            var_342,
        )?;
        object_343.finish();
    }
    if let Some(var_344) = &input.tags {
        let mut array_345 = object.key("Tags").start_array();
        for item_346 in var_344 {
            {
                let mut object_347 = array_345.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_347, item_346)?;
                object_347.finish();
            }
        }
        array_345.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_model_explainability_job_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelExplainabilityJobDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_348) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_348.as_str());
    }
    if let Some(var_349) = &input.model_explainability_baseline_config {
        let mut object_350 = object
            .key("ModelExplainabilityBaselineConfig")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_model_explainability_baseline_config(
            &mut object_350,
            var_349,
        )?;
        object_350.finish();
    }
    if let Some(var_351) = &input.model_explainability_app_specification {
        let mut object_352 = object
            .key("ModelExplainabilityAppSpecification")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_model_explainability_app_specification(
            &mut object_352,
            var_351,
        )?;
        object_352.finish();
    }
    if let Some(var_353) = &input.model_explainability_job_input {
        let mut object_354 = object.key("ModelExplainabilityJobInput").start_object();
        crate::json_ser::serialize_structure_crate_model_model_explainability_job_input(
            &mut object_354,
            var_353,
        )?;
        object_354.finish();
    }
    if let Some(var_355) = &input.model_explainability_job_output_config {
        let mut object_356 = object
            .key("ModelExplainabilityJobOutputConfig")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_output_config(
            &mut object_356,
            var_355,
        )?;
        object_356.finish();
    }
    if let Some(var_357) = &input.job_resources {
        let mut object_358 = object.key("JobResources").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_resources(
            &mut object_358,
            var_357,
        )?;
        object_358.finish();
    }
    if let Some(var_359) = &input.network_config {
        let mut object_360 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_network_config(
            &mut object_360,
            var_359,
        )?;
        object_360.finish();
    }
    if let Some(var_361) = &input.role_arn {
        object.key("RoleArn").string(var_361.as_str());
    }
    if let Some(var_362) = &input.stopping_condition {
        let mut object_363 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_stopping_condition(
            &mut object_363,
            var_362,
        )?;
        object_363.finish();
    }
    if let Some(var_364) = &input.tags {
        let mut array_365 = object.key("Tags").start_array();
        for item_366 in var_364 {
            {
                let mut object_367 = array_365.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_367, item_366)?;
                object_367.finish();
            }
        }
        array_365.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_model_package_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelPackageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_368) = &input.model_package_name {
        object.key("ModelPackageName").string(var_368.as_str());
    }
    if let Some(var_369) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_369.as_str());
    }
    if let Some(var_370) = &input.model_package_description {
        object
            .key("ModelPackageDescription")
            .string(var_370.as_str());
    }
    if let Some(var_371) = &input.inference_specification {
        let mut object_372 = object.key("InferenceSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_inference_specification(
            &mut object_372,
            var_371,
        )?;
        object_372.finish();
    }
    if let Some(var_373) = &input.validation_specification {
        let mut object_374 = object.key("ValidationSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_model_package_validation_specification(
            &mut object_374,
            var_373,
        )?;
        object_374.finish();
    }
    if let Some(var_375) = &input.source_algorithm_specification {
        let mut object_376 = object.key("SourceAlgorithmSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_source_algorithm_specification(
            &mut object_376,
            var_375,
        )?;
        object_376.finish();
    }
    if input.certify_for_marketplace {
        object
            .key("CertifyForMarketplace")
            .boolean(input.certify_for_marketplace);
    }
    if let Some(var_377) = &input.tags {
        let mut array_378 = object.key("Tags").start_array();
        for item_379 in var_377 {
            {
                let mut object_380 = array_378.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_380, item_379)?;
                object_380.finish();
            }
        }
        array_378.finish();
    }
    if let Some(var_381) = &input.model_approval_status {
        object.key("ModelApprovalStatus").string(var_381.as_str());
    }
    if let Some(var_382) = &input.metadata_properties {
        let mut object_383 = object.key("MetadataProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_metadata_properties(
            &mut object_383,
            var_382,
        )?;
        object_383.finish();
    }
    if let Some(var_384) = &input.model_metrics {
        let mut object_385 = object.key("ModelMetrics").start_object();
        crate::json_ser::serialize_structure_crate_model_model_metrics(&mut object_385, var_384)?;
        object_385.finish();
    }
    if let Some(var_386) = &input.client_token {
        object.key("ClientToken").string(var_386.as_str());
    }
    if let Some(var_387) = &input.customer_metadata_properties {
        let mut object_388 = object.key("CustomerMetadataProperties").start_object();
        for (key_389, value_390) in var_387 {
            {
                object_388.key(key_389).string(value_390.as_str());
            }
        }
        object_388.finish();
    }
    if let Some(var_391) = &input.drift_check_baselines {
        let mut object_392 = object.key("DriftCheckBaselines").start_object();
        crate::json_ser::serialize_structure_crate_model_drift_check_baselines(
            &mut object_392,
            var_391,
        )?;
        object_392.finish();
    }
    if let Some(var_393) = &input.domain {
        object.key("Domain").string(var_393.as_str());
    }
    if let Some(var_394) = &input.task {
        object.key("Task").string(var_394.as_str());
    }
    if let Some(var_395) = &input.sample_payload_url {
        object.key("SamplePayloadUrl").string(var_395.as_str());
    }
    if let Some(var_396) = &input.additional_inference_specifications {
        let mut array_397 = object
            .key("AdditionalInferenceSpecifications")
            .start_array();
        for item_398 in var_396 {
            {
                let mut object_399 = array_397.value().start_object();
                crate::json_ser::serialize_structure_crate_model_additional_inference_specification_definition(&mut object_399, item_398)?;
                object_399.finish();
            }
        }
        array_397.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_model_package_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelPackageGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_400) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_400.as_str());
    }
    if let Some(var_401) = &input.model_package_group_description {
        object
            .key("ModelPackageGroupDescription")
            .string(var_401.as_str());
    }
    if let Some(var_402) = &input.tags {
        let mut array_403 = object.key("Tags").start_array();
        for item_404 in var_402 {
            {
                let mut object_405 = array_403.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_405, item_404)?;
                object_405.finish();
            }
        }
        array_403.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_model_quality_job_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelQualityJobDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_406) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_406.as_str());
    }
    if let Some(var_407) = &input.model_quality_baseline_config {
        let mut object_408 = object.key("ModelQualityBaselineConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_model_quality_baseline_config(
            &mut object_408,
            var_407,
        )?;
        object_408.finish();
    }
    if let Some(var_409) = &input.model_quality_app_specification {
        let mut object_410 = object.key("ModelQualityAppSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_model_quality_app_specification(
            &mut object_410,
            var_409,
        )?;
        object_410.finish();
    }
    if let Some(var_411) = &input.model_quality_job_input {
        let mut object_412 = object.key("ModelQualityJobInput").start_object();
        crate::json_ser::serialize_structure_crate_model_model_quality_job_input(
            &mut object_412,
            var_411,
        )?;
        object_412.finish();
    }
    if let Some(var_413) = &input.model_quality_job_output_config {
        let mut object_414 = object.key("ModelQualityJobOutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_output_config(
            &mut object_414,
            var_413,
        )?;
        object_414.finish();
    }
    if let Some(var_415) = &input.job_resources {
        let mut object_416 = object.key("JobResources").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_resources(
            &mut object_416,
            var_415,
        )?;
        object_416.finish();
    }
    if let Some(var_417) = &input.network_config {
        let mut object_418 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_network_config(
            &mut object_418,
            var_417,
        )?;
        object_418.finish();
    }
    if let Some(var_419) = &input.role_arn {
        object.key("RoleArn").string(var_419.as_str());
    }
    if let Some(var_420) = &input.stopping_condition {
        let mut object_421 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_stopping_condition(
            &mut object_421,
            var_420,
        )?;
        object_421.finish();
    }
    if let Some(var_422) = &input.tags {
        let mut array_423 = object.key("Tags").start_array();
        for item_424 in var_422 {
            {
                let mut object_425 = array_423.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_425, item_424)?;
                object_425.finish();
            }
        }
        array_423.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_monitoring_schedule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMonitoringScheduleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_426) = &input.monitoring_schedule_name {
        object
            .key("MonitoringScheduleName")
            .string(var_426.as_str());
    }
    if let Some(var_427) = &input.monitoring_schedule_config {
        let mut object_428 = object.key("MonitoringScheduleConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_schedule_config(
            &mut object_428,
            var_427,
        )?;
        object_428.finish();
    }
    if let Some(var_429) = &input.tags {
        let mut array_430 = object.key("Tags").start_array();
        for item_431 in var_429 {
            {
                let mut object_432 = array_430.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_432, item_431)?;
                object_432.finish();
            }
        }
        array_430.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_notebook_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateNotebookInstanceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_433) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_433.as_str());
    }
    if let Some(var_434) = &input.instance_type {
        object.key("InstanceType").string(var_434.as_str());
    }
    if let Some(var_435) = &input.subnet_id {
        object.key("SubnetId").string(var_435.as_str());
    }
    if let Some(var_436) = &input.security_group_ids {
        let mut array_437 = object.key("SecurityGroupIds").start_array();
        for item_438 in var_436 {
            {
                array_437.value().string(item_438.as_str());
            }
        }
        array_437.finish();
    }
    if let Some(var_439) = &input.role_arn {
        object.key("RoleArn").string(var_439.as_str());
    }
    if let Some(var_440) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_440.as_str());
    }
    if let Some(var_441) = &input.tags {
        let mut array_442 = object.key("Tags").start_array();
        for item_443 in var_441 {
            {
                let mut object_444 = array_442.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_444, item_443)?;
                object_444.finish();
            }
        }
        array_442.finish();
    }
    if let Some(var_445) = &input.lifecycle_config_name {
        object.key("LifecycleConfigName").string(var_445.as_str());
    }
    if let Some(var_446) = &input.direct_internet_access {
        object.key("DirectInternetAccess").string(var_446.as_str());
    }
    if let Some(var_447) = &input.volume_size_in_gb {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_447).into()),
        );
    }
    if let Some(var_448) = &input.accelerator_types {
        let mut array_449 = object.key("AcceleratorTypes").start_array();
        for item_450 in var_448 {
            {
                array_449.value().string(item_450.as_str());
            }
        }
        array_449.finish();
    }
    if let Some(var_451) = &input.default_code_repository {
        object.key("DefaultCodeRepository").string(var_451.as_str());
    }
    if let Some(var_452) = &input.additional_code_repositories {
        let mut array_453 = object.key("AdditionalCodeRepositories").start_array();
        for item_454 in var_452 {
            {
                array_453.value().string(item_454.as_str());
            }
        }
        array_453.finish();
    }
    if let Some(var_455) = &input.root_access {
        object.key("RootAccess").string(var_455.as_str());
    }
    if let Some(var_456) = &input.platform_identifier {
        object.key("PlatformIdentifier").string(var_456.as_str());
    }
    if let Some(var_457) = &input.instance_metadata_service_configuration {
        let mut object_458 = object
            .key("InstanceMetadataServiceConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_instance_metadata_service_configuration(
            &mut object_458,
            var_457,
        )?;
        object_458.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_notebook_instance_lifecycle_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateNotebookInstanceLifecycleConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_459) = &input.notebook_instance_lifecycle_config_name {
        object
            .key("NotebookInstanceLifecycleConfigName")
            .string(var_459.as_str());
    }
    if let Some(var_460) = &input.on_create {
        let mut array_461 = object.key("OnCreate").start_array();
        for item_462 in var_460 {
            {
                let mut object_463 = array_461.value().start_object();
                crate::json_ser::serialize_structure_crate_model_notebook_instance_lifecycle_hook(
                    &mut object_463,
                    item_462,
                )?;
                object_463.finish();
            }
        }
        array_461.finish();
    }
    if let Some(var_464) = &input.on_start {
        let mut array_465 = object.key("OnStart").start_array();
        for item_466 in var_464 {
            {
                let mut object_467 = array_465.value().start_object();
                crate::json_ser::serialize_structure_crate_model_notebook_instance_lifecycle_hook(
                    &mut object_467,
                    item_466,
                )?;
                object_467.finish();
            }
        }
        array_465.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_pipeline_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePipelineInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_468) = &input.pipeline_name {
        object.key("PipelineName").string(var_468.as_str());
    }
    if let Some(var_469) = &input.pipeline_display_name {
        object.key("PipelineDisplayName").string(var_469.as_str());
    }
    if let Some(var_470) = &input.pipeline_definition {
        object.key("PipelineDefinition").string(var_470.as_str());
    }
    if let Some(var_471) = &input.pipeline_definition_s3_location {
        let mut object_472 = object.key("PipelineDefinitionS3Location").start_object();
        crate::json_ser::serialize_structure_crate_model_pipeline_definition_s3_location(
            &mut object_472,
            var_471,
        )?;
        object_472.finish();
    }
    if let Some(var_473) = &input.pipeline_description {
        object.key("PipelineDescription").string(var_473.as_str());
    }
    if let Some(var_474) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_474.as_str());
    }
    if let Some(var_475) = &input.role_arn {
        object.key("RoleArn").string(var_475.as_str());
    }
    if let Some(var_476) = &input.tags {
        let mut array_477 = object.key("Tags").start_array();
        for item_478 in var_476 {
            {
                let mut object_479 = array_477.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_479, item_478)?;
                object_479.finish();
            }
        }
        array_477.finish();
    }
    if let Some(var_480) = &input.parallelism_configuration {
        let mut object_481 = object.key("ParallelismConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_parallelism_configuration(
            &mut object_481,
            var_480,
        )?;
        object_481.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_presigned_domain_url_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePresignedDomainUrlInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_482) = &input.domain_id {
        object.key("DomainId").string(var_482.as_str());
    }
    if let Some(var_483) = &input.user_profile_name {
        object.key("UserProfileName").string(var_483.as_str());
    }
    if let Some(var_484) = &input.session_expiration_duration_in_seconds {
        object.key("SessionExpirationDurationInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_484).into()),
        );
    }
    if let Some(var_485) = &input.expires_in_seconds {
        object.key("ExpiresInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_485).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_presigned_notebook_instance_url_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePresignedNotebookInstanceUrlInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_486) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_486.as_str());
    }
    if let Some(var_487) = &input.session_expiration_duration_in_seconds {
        object.key("SessionExpirationDurationInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_487).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_processing_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateProcessingJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_488) = &input.processing_inputs {
        let mut array_489 = object.key("ProcessingInputs").start_array();
        for item_490 in var_488 {
            {
                let mut object_491 = array_489.value().start_object();
                crate::json_ser::serialize_structure_crate_model_processing_input(
                    &mut object_491,
                    item_490,
                )?;
                object_491.finish();
            }
        }
        array_489.finish();
    }
    if let Some(var_492) = &input.processing_output_config {
        let mut object_493 = object.key("ProcessingOutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_processing_output_config(
            &mut object_493,
            var_492,
        )?;
        object_493.finish();
    }
    if let Some(var_494) = &input.processing_job_name {
        object.key("ProcessingJobName").string(var_494.as_str());
    }
    if let Some(var_495) = &input.processing_resources {
        let mut object_496 = object.key("ProcessingResources").start_object();
        crate::json_ser::serialize_structure_crate_model_processing_resources(
            &mut object_496,
            var_495,
        )?;
        object_496.finish();
    }
    if let Some(var_497) = &input.stopping_condition {
        let mut object_498 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_processing_stopping_condition(
            &mut object_498,
            var_497,
        )?;
        object_498.finish();
    }
    if let Some(var_499) = &input.app_specification {
        let mut object_500 = object.key("AppSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_app_specification(
            &mut object_500,
            var_499,
        )?;
        object_500.finish();
    }
    if let Some(var_501) = &input.environment {
        let mut object_502 = object.key("Environment").start_object();
        for (key_503, value_504) in var_501 {
            {
                object_502.key(key_503).string(value_504.as_str());
            }
        }
        object_502.finish();
    }
    if let Some(var_505) = &input.network_config {
        let mut object_506 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_network_config(&mut object_506, var_505)?;
        object_506.finish();
    }
    if let Some(var_507) = &input.role_arn {
        object.key("RoleArn").string(var_507.as_str());
    }
    if let Some(var_508) = &input.tags {
        let mut array_509 = object.key("Tags").start_array();
        for item_510 in var_508 {
            {
                let mut object_511 = array_509.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_511, item_510)?;
                object_511.finish();
            }
        }
        array_509.finish();
    }
    if let Some(var_512) = &input.experiment_config {
        let mut object_513 = object.key("ExperimentConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_experiment_config(
            &mut object_513,
            var_512,
        )?;
        object_513.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_project_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateProjectInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_514) = &input.project_name {
        object.key("ProjectName").string(var_514.as_str());
    }
    if let Some(var_515) = &input.project_description {
        object.key("ProjectDescription").string(var_515.as_str());
    }
    if let Some(var_516) = &input.service_catalog_provisioning_details {
        let mut object_517 = object
            .key("ServiceCatalogProvisioningDetails")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_service_catalog_provisioning_details(
            &mut object_517,
            var_516,
        )?;
        object_517.finish();
    }
    if let Some(var_518) = &input.tags {
        let mut array_519 = object.key("Tags").start_array();
        for item_520 in var_518 {
            {
                let mut object_521 = array_519.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_521, item_520)?;
                object_521.finish();
            }
        }
        array_519.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_studio_lifecycle_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateStudioLifecycleConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_522) = &input.studio_lifecycle_config_name {
        object
            .key("StudioLifecycleConfigName")
            .string(var_522.as_str());
    }
    if let Some(var_523) = &input.studio_lifecycle_config_content {
        object
            .key("StudioLifecycleConfigContent")
            .string(var_523.as_str());
    }
    if let Some(var_524) = &input.studio_lifecycle_config_app_type {
        object
            .key("StudioLifecycleConfigAppType")
            .string(var_524.as_str());
    }
    if let Some(var_525) = &input.tags {
        let mut array_526 = object.key("Tags").start_array();
        for item_527 in var_525 {
            {
                let mut object_528 = array_526.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_528, item_527)?;
                object_528.finish();
            }
        }
        array_526.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_training_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTrainingJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_529) = &input.training_job_name {
        object.key("TrainingJobName").string(var_529.as_str());
    }
    if let Some(var_530) = &input.hyper_parameters {
        let mut object_531 = object.key("HyperParameters").start_object();
        for (key_532, value_533) in var_530 {
            {
                object_531.key(key_532).string(value_533.as_str());
            }
        }
        object_531.finish();
    }
    if let Some(var_534) = &input.algorithm_specification {
        let mut object_535 = object.key("AlgorithmSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_algorithm_specification(
            &mut object_535,
            var_534,
        )?;
        object_535.finish();
    }
    if let Some(var_536) = &input.role_arn {
        object.key("RoleArn").string(var_536.as_str());
    }
    if let Some(var_537) = &input.input_data_config {
        let mut array_538 = object.key("InputDataConfig").start_array();
        for item_539 in var_537 {
            {
                let mut object_540 = array_538.value().start_object();
                crate::json_ser::serialize_structure_crate_model_channel(
                    &mut object_540,
                    item_539,
                )?;
                object_540.finish();
            }
        }
        array_538.finish();
    }
    if let Some(var_541) = &input.output_data_config {
        let mut object_542 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_output_data_config(
            &mut object_542,
            var_541,
        )?;
        object_542.finish();
    }
    if let Some(var_543) = &input.resource_config {
        let mut object_544 = object.key("ResourceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_config(&mut object_544, var_543)?;
        object_544.finish();
    }
    if let Some(var_545) = &input.vpc_config {
        let mut object_546 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config(&mut object_546, var_545)?;
        object_546.finish();
    }
    if let Some(var_547) = &input.stopping_condition {
        let mut object_548 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_stopping_condition(
            &mut object_548,
            var_547,
        )?;
        object_548.finish();
    }
    if let Some(var_549) = &input.tags {
        let mut array_550 = object.key("Tags").start_array();
        for item_551 in var_549 {
            {
                let mut object_552 = array_550.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_552, item_551)?;
                object_552.finish();
            }
        }
        array_550.finish();
    }
    if input.enable_network_isolation {
        object
            .key("EnableNetworkIsolation")
            .boolean(input.enable_network_isolation);
    }
    if input.enable_inter_container_traffic_encryption {
        object
            .key("EnableInterContainerTrafficEncryption")
            .boolean(input.enable_inter_container_traffic_encryption);
    }
    if input.enable_managed_spot_training {
        object
            .key("EnableManagedSpotTraining")
            .boolean(input.enable_managed_spot_training);
    }
    if let Some(var_553) = &input.checkpoint_config {
        let mut object_554 = object.key("CheckpointConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_checkpoint_config(
            &mut object_554,
            var_553,
        )?;
        object_554.finish();
    }
    if let Some(var_555) = &input.debug_hook_config {
        let mut object_556 = object.key("DebugHookConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_debug_hook_config(
            &mut object_556,
            var_555,
        )?;
        object_556.finish();
    }
    if let Some(var_557) = &input.debug_rule_configurations {
        let mut array_558 = object.key("DebugRuleConfigurations").start_array();
        for item_559 in var_557 {
            {
                let mut object_560 = array_558.value().start_object();
                crate::json_ser::serialize_structure_crate_model_debug_rule_configuration(
                    &mut object_560,
                    item_559,
                )?;
                object_560.finish();
            }
        }
        array_558.finish();
    }
    if let Some(var_561) = &input.tensor_board_output_config {
        let mut object_562 = object.key("TensorBoardOutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_tensor_board_output_config(
            &mut object_562,
            var_561,
        )?;
        object_562.finish();
    }
    if let Some(var_563) = &input.experiment_config {
        let mut object_564 = object.key("ExperimentConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_experiment_config(
            &mut object_564,
            var_563,
        )?;
        object_564.finish();
    }
    if let Some(var_565) = &input.profiler_config {
        let mut object_566 = object.key("ProfilerConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_profiler_config(&mut object_566, var_565)?;
        object_566.finish();
    }
    if let Some(var_567) = &input.profiler_rule_configurations {
        let mut array_568 = object.key("ProfilerRuleConfigurations").start_array();
        for item_569 in var_567 {
            {
                let mut object_570 = array_568.value().start_object();
                crate::json_ser::serialize_structure_crate_model_profiler_rule_configuration(
                    &mut object_570,
                    item_569,
                )?;
                object_570.finish();
            }
        }
        array_568.finish();
    }
    if let Some(var_571) = &input.environment {
        let mut object_572 = object.key("Environment").start_object();
        for (key_573, value_574) in var_571 {
            {
                object_572.key(key_573).string(value_574.as_str());
            }
        }
        object_572.finish();
    }
    if let Some(var_575) = &input.retry_strategy {
        let mut object_576 = object.key("RetryStrategy").start_object();
        crate::json_ser::serialize_structure_crate_model_retry_strategy(&mut object_576, var_575)?;
        object_576.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_transform_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTransformJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_577) = &input.transform_job_name {
        object.key("TransformJobName").string(var_577.as_str());
    }
    if let Some(var_578) = &input.model_name {
        object.key("ModelName").string(var_578.as_str());
    }
    if let Some(var_579) = &input.max_concurrent_transforms {
        object.key("MaxConcurrentTransforms").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_579).into()),
        );
    }
    if let Some(var_580) = &input.model_client_config {
        let mut object_581 = object.key("ModelClientConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_model_client_config(
            &mut object_581,
            var_580,
        )?;
        object_581.finish();
    }
    if let Some(var_582) = &input.max_payload_in_mb {
        object.key("MaxPayloadInMB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_582).into()),
        );
    }
    if let Some(var_583) = &input.batch_strategy {
        object.key("BatchStrategy").string(var_583.as_str());
    }
    if let Some(var_584) = &input.environment {
        let mut object_585 = object.key("Environment").start_object();
        for (key_586, value_587) in var_584 {
            {
                object_585.key(key_586).string(value_587.as_str());
            }
        }
        object_585.finish();
    }
    if let Some(var_588) = &input.transform_input {
        let mut object_589 = object.key("TransformInput").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_input(&mut object_589, var_588)?;
        object_589.finish();
    }
    if let Some(var_590) = &input.transform_output {
        let mut object_591 = object.key("TransformOutput").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_output(
            &mut object_591,
            var_590,
        )?;
        object_591.finish();
    }
    if let Some(var_592) = &input.transform_resources {
        let mut object_593 = object.key("TransformResources").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_resources(
            &mut object_593,
            var_592,
        )?;
        object_593.finish();
    }
    if let Some(var_594) = &input.data_processing {
        let mut object_595 = object.key("DataProcessing").start_object();
        crate::json_ser::serialize_structure_crate_model_data_processing(&mut object_595, var_594)?;
        object_595.finish();
    }
    if let Some(var_596) = &input.tags {
        let mut array_597 = object.key("Tags").start_array();
        for item_598 in var_596 {
            {
                let mut object_599 = array_597.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_599, item_598)?;
                object_599.finish();
            }
        }
        array_597.finish();
    }
    if let Some(var_600) = &input.experiment_config {
        let mut object_601 = object.key("ExperimentConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_experiment_config(
            &mut object_601,
            var_600,
        )?;
        object_601.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_trial_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTrialInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_602) = &input.trial_name {
        object.key("TrialName").string(var_602.as_str());
    }
    if let Some(var_603) = &input.display_name {
        object.key("DisplayName").string(var_603.as_str());
    }
    if let Some(var_604) = &input.experiment_name {
        object.key("ExperimentName").string(var_604.as_str());
    }
    if let Some(var_605) = &input.metadata_properties {
        let mut object_606 = object.key("MetadataProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_metadata_properties(
            &mut object_606,
            var_605,
        )?;
        object_606.finish();
    }
    if let Some(var_607) = &input.tags {
        let mut array_608 = object.key("Tags").start_array();
        for item_609 in var_607 {
            {
                let mut object_610 = array_608.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_610, item_609)?;
                object_610.finish();
            }
        }
        array_608.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_trial_component_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTrialComponentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_611) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_611.as_str());
    }
    if let Some(var_612) = &input.display_name {
        object.key("DisplayName").string(var_612.as_str());
    }
    if let Some(var_613) = &input.status {
        let mut object_614 = object.key("Status").start_object();
        crate::json_ser::serialize_structure_crate_model_trial_component_status(
            &mut object_614,
            var_613,
        )?;
        object_614.finish();
    }
    if let Some(var_615) = &input.start_time {
        object
            .key("StartTime")
            .date_time(var_615, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_616) = &input.end_time {
        object
            .key("EndTime")
            .date_time(var_616, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_617) = &input.parameters {
        let mut object_618 = object.key("Parameters").start_object();
        for (key_619, value_620) in var_617 {
            {
                let mut object_621 = object_618.key(key_619).start_object();
                crate::json_ser::serialize_union_crate_model_trial_component_parameter_value(
                    &mut object_621,
                    value_620,
                )?;
                object_621.finish();
            }
        }
        object_618.finish();
    }
    if let Some(var_622) = &input.input_artifacts {
        let mut object_623 = object.key("InputArtifacts").start_object();
        for (key_624, value_625) in var_622 {
            {
                let mut object_626 = object_623.key(key_624).start_object();
                crate::json_ser::serialize_structure_crate_model_trial_component_artifact(
                    &mut object_626,
                    value_625,
                )?;
                object_626.finish();
            }
        }
        object_623.finish();
    }
    if let Some(var_627) = &input.output_artifacts {
        let mut object_628 = object.key("OutputArtifacts").start_object();
        for (key_629, value_630) in var_627 {
            {
                let mut object_631 = object_628.key(key_629).start_object();
                crate::json_ser::serialize_structure_crate_model_trial_component_artifact(
                    &mut object_631,
                    value_630,
                )?;
                object_631.finish();
            }
        }
        object_628.finish();
    }
    if let Some(var_632) = &input.metadata_properties {
        let mut object_633 = object.key("MetadataProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_metadata_properties(
            &mut object_633,
            var_632,
        )?;
        object_633.finish();
    }
    if let Some(var_634) = &input.tags {
        let mut array_635 = object.key("Tags").start_array();
        for item_636 in var_634 {
            {
                let mut object_637 = array_635.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_637, item_636)?;
                object_637.finish();
            }
        }
        array_635.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_user_profile_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateUserProfileInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_638) = &input.domain_id {
        object.key("DomainId").string(var_638.as_str());
    }
    if let Some(var_639) = &input.user_profile_name {
        object.key("UserProfileName").string(var_639.as_str());
    }
    if let Some(var_640) = &input.single_sign_on_user_identifier {
        object
            .key("SingleSignOnUserIdentifier")
            .string(var_640.as_str());
    }
    if let Some(var_641) = &input.single_sign_on_user_value {
        object.key("SingleSignOnUserValue").string(var_641.as_str());
    }
    if let Some(var_642) = &input.tags {
        let mut array_643 = object.key("Tags").start_array();
        for item_644 in var_642 {
            {
                let mut object_645 = array_643.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_645, item_644)?;
                object_645.finish();
            }
        }
        array_643.finish();
    }
    if let Some(var_646) = &input.user_settings {
        let mut object_647 = object.key("UserSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_user_settings(&mut object_647, var_646)?;
        object_647.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_workforce_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWorkforceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_648) = &input.cognito_config {
        let mut object_649 = object.key("CognitoConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_cognito_config(&mut object_649, var_648)?;
        object_649.finish();
    }
    if let Some(var_650) = &input.oidc_config {
        let mut object_651 = object.key("OidcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_oidc_config(&mut object_651, var_650)?;
        object_651.finish();
    }
    if let Some(var_652) = &input.source_ip_config {
        let mut object_653 = object.key("SourceIpConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_source_ip_config(
            &mut object_653,
            var_652,
        )?;
        object_653.finish();
    }
    if let Some(var_654) = &input.workforce_name {
        object.key("WorkforceName").string(var_654.as_str());
    }
    if let Some(var_655) = &input.tags {
        let mut array_656 = object.key("Tags").start_array();
        for item_657 in var_655 {
            {
                let mut object_658 = array_656.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_658, item_657)?;
                object_658.finish();
            }
        }
        array_656.finish();
    }
    if let Some(var_659) = &input.workforce_vpc_config {
        let mut object_660 = object.key("WorkforceVpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_workforce_vpc_config_request(
            &mut object_660,
            var_659,
        )?;
        object_660.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_workteam_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWorkteamInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_661) = &input.workteam_name {
        object.key("WorkteamName").string(var_661.as_str());
    }
    if let Some(var_662) = &input.workforce_name {
        object.key("WorkforceName").string(var_662.as_str());
    }
    if let Some(var_663) = &input.member_definitions {
        let mut array_664 = object.key("MemberDefinitions").start_array();
        for item_665 in var_663 {
            {
                let mut object_666 = array_664.value().start_object();
                crate::json_ser::serialize_structure_crate_model_member_definition(
                    &mut object_666,
                    item_665,
                )?;
                object_666.finish();
            }
        }
        array_664.finish();
    }
    if let Some(var_667) = &input.description {
        object.key("Description").string(var_667.as_str());
    }
    if let Some(var_668) = &input.notification_configuration {
        let mut object_669 = object.key("NotificationConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_configuration(
            &mut object_669,
            var_668,
        )?;
        object_669.finish();
    }
    if let Some(var_670) = &input.tags {
        let mut array_671 = object.key("Tags").start_array();
        for item_672 in var_670 {
            {
                let mut object_673 = array_671.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_673, item_672)?;
                object_673.finish();
            }
        }
        array_671.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_action_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteActionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_674) = &input.action_name {
        object.key("ActionName").string(var_674.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_algorithm_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAlgorithmInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_675) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_675.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_app_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAppInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_676) = &input.domain_id {
        object.key("DomainId").string(var_676.as_str());
    }
    if let Some(var_677) = &input.user_profile_name {
        object.key("UserProfileName").string(var_677.as_str());
    }
    if let Some(var_678) = &input.app_type {
        object.key("AppType").string(var_678.as_str());
    }
    if let Some(var_679) = &input.app_name {
        object.key("AppName").string(var_679.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_app_image_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAppImageConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_680) = &input.app_image_config_name {
        object.key("AppImageConfigName").string(var_680.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_artifact_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteArtifactInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_681) = &input.artifact_arn {
        object.key("ArtifactArn").string(var_681.as_str());
    }
    if let Some(var_682) = &input.source {
        let mut object_683 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_crate_model_artifact_source(&mut object_683, var_682)?;
        object_683.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_association_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAssociationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_684) = &input.source_arn {
        object.key("SourceArn").string(var_684.as_str());
    }
    if let Some(var_685) = &input.destination_arn {
        object.key("DestinationArn").string(var_685.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_code_repository_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteCodeRepositoryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_686) = &input.code_repository_name {
        object.key("CodeRepositoryName").string(var_686.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_context_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteContextInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_687) = &input.context_name {
        object.key("ContextName").string(var_687.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_data_quality_job_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDataQualityJobDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_688) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_688.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_device_fleet_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDeviceFleetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_689) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_689.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_domain_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDomainInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_690) = &input.domain_id {
        object.key("DomainId").string(var_690.as_str());
    }
    if let Some(var_691) = &input.retention_policy {
        let mut object_692 = object.key("RetentionPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_retention_policy(
            &mut object_692,
            var_691,
        )?;
        object_692.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteEndpointInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_693) = &input.endpoint_name {
        object.key("EndpointName").string(var_693.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_endpoint_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteEndpointConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_694) = &input.endpoint_config_name {
        object.key("EndpointConfigName").string(var_694.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_experiment_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteExperimentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_695) = &input.experiment_name {
        object.key("ExperimentName").string(var_695.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_feature_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFeatureGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_696) = &input.feature_group_name {
        object.key("FeatureGroupName").string(var_696.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_flow_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFlowDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_697) = &input.flow_definition_name {
        object.key("FlowDefinitionName").string(var_697.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_human_task_ui_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteHumanTaskUiInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_698) = &input.human_task_ui_name {
        object.key("HumanTaskUiName").string(var_698.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_image_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteImageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_699) = &input.image_name {
        object.key("ImageName").string(var_699.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_image_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteImageVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_700) = &input.image_name {
        object.key("ImageName").string(var_700.as_str());
    }
    if let Some(var_701) = &input.version {
        object.key("Version").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_701).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_model_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_702) = &input.model_name {
        object.key("ModelName").string(var_702.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_model_bias_job_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelBiasJobDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_703) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_703.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_model_explainability_job_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelExplainabilityJobDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_704) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_704.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_model_package_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelPackageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_705) = &input.model_package_name {
        object.key("ModelPackageName").string(var_705.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_model_package_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelPackageGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_706) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_706.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_model_package_group_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelPackageGroupPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_707) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_707.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_model_quality_job_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelQualityJobDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_708) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_708.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_monitoring_schedule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteMonitoringScheduleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_709) = &input.monitoring_schedule_name {
        object
            .key("MonitoringScheduleName")
            .string(var_709.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_notebook_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteNotebookInstanceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_710) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_710.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_notebook_instance_lifecycle_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteNotebookInstanceLifecycleConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_711) = &input.notebook_instance_lifecycle_config_name {
        object
            .key("NotebookInstanceLifecycleConfigName")
            .string(var_711.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_pipeline_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePipelineInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_712) = &input.pipeline_name {
        object.key("PipelineName").string(var_712.as_str());
    }
    if let Some(var_713) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_713.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_project_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteProjectInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_714) = &input.project_name {
        object.key("ProjectName").string(var_714.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_studio_lifecycle_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteStudioLifecycleConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_715) = &input.studio_lifecycle_config_name {
        object
            .key("StudioLifecycleConfigName")
            .string(var_715.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_tags_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTagsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_716) = &input.resource_arn {
        object.key("ResourceArn").string(var_716.as_str());
    }
    if let Some(var_717) = &input.tag_keys {
        let mut array_718 = object.key("TagKeys").start_array();
        for item_719 in var_717 {
            {
                array_718.value().string(item_719.as_str());
            }
        }
        array_718.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_trial_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTrialInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_720) = &input.trial_name {
        object.key("TrialName").string(var_720.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_trial_component_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTrialComponentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_721) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_721.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_user_profile_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteUserProfileInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_722) = &input.domain_id {
        object.key("DomainId").string(var_722.as_str());
    }
    if let Some(var_723) = &input.user_profile_name {
        object.key("UserProfileName").string(var_723.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_workforce_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteWorkforceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_724) = &input.workforce_name {
        object.key("WorkforceName").string(var_724.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_workteam_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteWorkteamInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_725) = &input.workteam_name {
        object.key("WorkteamName").string(var_725.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_deregister_devices_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeregisterDevicesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_726) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_726.as_str());
    }
    if let Some(var_727) = &input.device_names {
        let mut array_728 = object.key("DeviceNames").start_array();
        for item_729 in var_727 {
            {
                array_728.value().string(item_729.as_str());
            }
        }
        array_728.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_action_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeActionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_730) = &input.action_name {
        object.key("ActionName").string(var_730.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_algorithm_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAlgorithmInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_731) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_731.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_app_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAppInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_732) = &input.domain_id {
        object.key("DomainId").string(var_732.as_str());
    }
    if let Some(var_733) = &input.user_profile_name {
        object.key("UserProfileName").string(var_733.as_str());
    }
    if let Some(var_734) = &input.app_type {
        object.key("AppType").string(var_734.as_str());
    }
    if let Some(var_735) = &input.app_name {
        object.key("AppName").string(var_735.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_app_image_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAppImageConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_736) = &input.app_image_config_name {
        object.key("AppImageConfigName").string(var_736.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_artifact_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeArtifactInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_737) = &input.artifact_arn {
        object.key("ArtifactArn").string(var_737.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_auto_ml_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAutoMlJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_738) = &input.auto_ml_job_name {
        object.key("AutoMLJobName").string(var_738.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_code_repository_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeCodeRepositoryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_739) = &input.code_repository_name {
        object.key("CodeRepositoryName").string(var_739.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_compilation_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeCompilationJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_740) = &input.compilation_job_name {
        object.key("CompilationJobName").string(var_740.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_context_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeContextInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_741) = &input.context_name {
        object.key("ContextName").string(var_741.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_data_quality_job_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDataQualityJobDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_742) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_742.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_device_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDeviceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_743) = &input.next_token {
        object.key("NextToken").string(var_743.as_str());
    }
    if let Some(var_744) = &input.device_name {
        object.key("DeviceName").string(var_744.as_str());
    }
    if let Some(var_745) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_745.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_device_fleet_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDeviceFleetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_746) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_746.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_domain_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDomainInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_747) = &input.domain_id {
        object.key("DomainId").string(var_747.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_edge_packaging_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEdgePackagingJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_748) = &input.edge_packaging_job_name {
        object.key("EdgePackagingJobName").string(var_748.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEndpointInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_749) = &input.endpoint_name {
        object.key("EndpointName").string(var_749.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_endpoint_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEndpointConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_750) = &input.endpoint_config_name {
        object.key("EndpointConfigName").string(var_750.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_experiment_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeExperimentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_751) = &input.experiment_name {
        object.key("ExperimentName").string(var_751.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_feature_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFeatureGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_752) = &input.feature_group_name {
        object.key("FeatureGroupName").string(var_752.as_str());
    }
    if let Some(var_753) = &input.next_token {
        object.key("NextToken").string(var_753.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_flow_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFlowDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_754) = &input.flow_definition_name {
        object.key("FlowDefinitionName").string(var_754.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_human_task_ui_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeHumanTaskUiInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_755) = &input.human_task_ui_name {
        object.key("HumanTaskUiName").string(var_755.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_hyper_parameter_tuning_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeHyperParameterTuningJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_756) = &input.hyper_parameter_tuning_job_name {
        object
            .key("HyperParameterTuningJobName")
            .string(var_756.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_image_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeImageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_757) = &input.image_name {
        object.key("ImageName").string(var_757.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_image_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeImageVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_758) = &input.image_name {
        object.key("ImageName").string(var_758.as_str());
    }
    if let Some(var_759) = &input.version {
        object.key("Version").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_759).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_inference_recommendations_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeInferenceRecommendationsJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_760) = &input.job_name {
        object.key("JobName").string(var_760.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_labeling_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeLabelingJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_761) = &input.labeling_job_name {
        object.key("LabelingJobName").string(var_761.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_lineage_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeLineageGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_762) = &input.lineage_group_name {
        object.key("LineageGroupName").string(var_762.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_model_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeModelInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_763) = &input.model_name {
        object.key("ModelName").string(var_763.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_model_bias_job_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeModelBiasJobDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_764) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_764.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_model_explainability_job_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeModelExplainabilityJobDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_765) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_765.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_model_package_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeModelPackageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_766) = &input.model_package_name {
        object.key("ModelPackageName").string(var_766.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_model_package_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeModelPackageGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_767) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_767.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_model_quality_job_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeModelQualityJobDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_768) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_768.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_monitoring_schedule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeMonitoringScheduleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_769) = &input.monitoring_schedule_name {
        object
            .key("MonitoringScheduleName")
            .string(var_769.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_notebook_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeNotebookInstanceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_770) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_770.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_notebook_instance_lifecycle_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeNotebookInstanceLifecycleConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_771) = &input.notebook_instance_lifecycle_config_name {
        object
            .key("NotebookInstanceLifecycleConfigName")
            .string(var_771.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_pipeline_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePipelineInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_772) = &input.pipeline_name {
        object.key("PipelineName").string(var_772.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_pipeline_definition_for_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePipelineDefinitionForExecutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_773) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_773.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_pipeline_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePipelineExecutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_774) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_774.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_processing_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeProcessingJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_775) = &input.processing_job_name {
        object.key("ProcessingJobName").string(var_775.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_project_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeProjectInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_776) = &input.project_name {
        object.key("ProjectName").string(var_776.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_studio_lifecycle_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeStudioLifecycleConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_777) = &input.studio_lifecycle_config_name {
        object
            .key("StudioLifecycleConfigName")
            .string(var_777.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_subscribed_workteam_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeSubscribedWorkteamInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_778) = &input.workteam_arn {
        object.key("WorkteamArn").string(var_778.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_training_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTrainingJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_779) = &input.training_job_name {
        object.key("TrainingJobName").string(var_779.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_transform_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTransformJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_780) = &input.transform_job_name {
        object.key("TransformJobName").string(var_780.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_trial_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTrialInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_781) = &input.trial_name {
        object.key("TrialName").string(var_781.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_trial_component_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTrialComponentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_782) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_782.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_user_profile_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeUserProfileInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_783) = &input.domain_id {
        object.key("DomainId").string(var_783.as_str());
    }
    if let Some(var_784) = &input.user_profile_name {
        object.key("UserProfileName").string(var_784.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_workforce_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeWorkforceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_785) = &input.workforce_name {
        object.key("WorkforceName").string(var_785.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_workteam_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeWorkteamInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_786) = &input.workteam_name {
        object.key("WorkteamName").string(var_786.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_trial_component_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateTrialComponentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_787) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_787.as_str());
    }
    if let Some(var_788) = &input.trial_name {
        object.key("TrialName").string(var_788.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_device_fleet_report_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDeviceFleetReportInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_789) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_789.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_lineage_group_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetLineageGroupPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_790) = &input.lineage_group_name {
        object.key("LineageGroupName").string(var_790.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_model_package_group_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetModelPackageGroupPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_791) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_791.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_search_suggestions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSearchSuggestionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_792) = &input.resource {
        object.key("Resource").string(var_792.as_str());
    }
    if let Some(var_793) = &input.suggestion_query {
        let mut object_794 = object.key("SuggestionQuery").start_object();
        crate::json_ser::serialize_structure_crate_model_suggestion_query(
            &mut object_794,
            var_793,
        )?;
        object_794.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_actions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListActionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_795) = &input.source_uri {
        object.key("SourceUri").string(var_795.as_str());
    }
    if let Some(var_796) = &input.action_type {
        object.key("ActionType").string(var_796.as_str());
    }
    if let Some(var_797) = &input.created_after {
        object
            .key("CreatedAfter")
            .date_time(var_797, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_798) = &input.created_before {
        object
            .key("CreatedBefore")
            .date_time(var_798, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_799) = &input.sort_by {
        object.key("SortBy").string(var_799.as_str());
    }
    if let Some(var_800) = &input.sort_order {
        object.key("SortOrder").string(var_800.as_str());
    }
    if let Some(var_801) = &input.next_token {
        object.key("NextToken").string(var_801.as_str());
    }
    if let Some(var_802) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_802).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_algorithms_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAlgorithmsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_803) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_803, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_804) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_804, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_805) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_805).into()),
        );
    }
    if let Some(var_806) = &input.name_contains {
        object.key("NameContains").string(var_806.as_str());
    }
    if let Some(var_807) = &input.next_token {
        object.key("NextToken").string(var_807.as_str());
    }
    if let Some(var_808) = &input.sort_by {
        object.key("SortBy").string(var_808.as_str());
    }
    if let Some(var_809) = &input.sort_order {
        object.key("SortOrder").string(var_809.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_app_image_configs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAppImageConfigsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_810) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_810).into()),
        );
    }
    if let Some(var_811) = &input.next_token {
        object.key("NextToken").string(var_811.as_str());
    }
    if let Some(var_812) = &input.name_contains {
        object.key("NameContains").string(var_812.as_str());
    }
    if let Some(var_813) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_813, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_814) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_814, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_815) = &input.modified_time_before {
        object
            .key("ModifiedTimeBefore")
            .date_time(var_815, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_816) = &input.modified_time_after {
        object
            .key("ModifiedTimeAfter")
            .date_time(var_816, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_817) = &input.sort_by {
        object.key("SortBy").string(var_817.as_str());
    }
    if let Some(var_818) = &input.sort_order {
        object.key("SortOrder").string(var_818.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_apps_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAppsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_819) = &input.next_token {
        object.key("NextToken").string(var_819.as_str());
    }
    if let Some(var_820) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_820).into()),
        );
    }
    if let Some(var_821) = &input.sort_order {
        object.key("SortOrder").string(var_821.as_str());
    }
    if let Some(var_822) = &input.sort_by {
        object.key("SortBy").string(var_822.as_str());
    }
    if let Some(var_823) = &input.domain_id_equals {
        object.key("DomainIdEquals").string(var_823.as_str());
    }
    if let Some(var_824) = &input.user_profile_name_equals {
        object.key("UserProfileNameEquals").string(var_824.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_artifacts_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListArtifactsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_825) = &input.source_uri {
        object.key("SourceUri").string(var_825.as_str());
    }
    if let Some(var_826) = &input.artifact_type {
        object.key("ArtifactType").string(var_826.as_str());
    }
    if let Some(var_827) = &input.created_after {
        object
            .key("CreatedAfter")
            .date_time(var_827, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_828) = &input.created_before {
        object
            .key("CreatedBefore")
            .date_time(var_828, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_829) = &input.sort_by {
        object.key("SortBy").string(var_829.as_str());
    }
    if let Some(var_830) = &input.sort_order {
        object.key("SortOrder").string(var_830.as_str());
    }
    if let Some(var_831) = &input.next_token {
        object.key("NextToken").string(var_831.as_str());
    }
    if let Some(var_832) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_832).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_associations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAssociationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_833) = &input.source_arn {
        object.key("SourceArn").string(var_833.as_str());
    }
    if let Some(var_834) = &input.destination_arn {
        object.key("DestinationArn").string(var_834.as_str());
    }
    if let Some(var_835) = &input.source_type {
        object.key("SourceType").string(var_835.as_str());
    }
    if let Some(var_836) = &input.destination_type {
        object.key("DestinationType").string(var_836.as_str());
    }
    if let Some(var_837) = &input.association_type {
        object.key("AssociationType").string(var_837.as_str());
    }
    if let Some(var_838) = &input.created_after {
        object
            .key("CreatedAfter")
            .date_time(var_838, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_839) = &input.created_before {
        object
            .key("CreatedBefore")
            .date_time(var_839, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_840) = &input.sort_by {
        object.key("SortBy").string(var_840.as_str());
    }
    if let Some(var_841) = &input.sort_order {
        object.key("SortOrder").string(var_841.as_str());
    }
    if let Some(var_842) = &input.next_token {
        object.key("NextToken").string(var_842.as_str());
    }
    if let Some(var_843) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_843).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_auto_ml_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAutoMlJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_844) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_844, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_845) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_845, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_846) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_846, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_847) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_847, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_848) = &input.name_contains {
        object.key("NameContains").string(var_848.as_str());
    }
    if let Some(var_849) = &input.status_equals {
        object.key("StatusEquals").string(var_849.as_str());
    }
    if let Some(var_850) = &input.sort_order {
        object.key("SortOrder").string(var_850.as_str());
    }
    if let Some(var_851) = &input.sort_by {
        object.key("SortBy").string(var_851.as_str());
    }
    if let Some(var_852) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_852).into()),
        );
    }
    if let Some(var_853) = &input.next_token {
        object.key("NextToken").string(var_853.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_candidates_for_auto_ml_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCandidatesForAutoMlJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_854) = &input.auto_ml_job_name {
        object.key("AutoMLJobName").string(var_854.as_str());
    }
    if let Some(var_855) = &input.status_equals {
        object.key("StatusEquals").string(var_855.as_str());
    }
    if let Some(var_856) = &input.candidate_name_equals {
        object.key("CandidateNameEquals").string(var_856.as_str());
    }
    if let Some(var_857) = &input.sort_order {
        object.key("SortOrder").string(var_857.as_str());
    }
    if let Some(var_858) = &input.sort_by {
        object.key("SortBy").string(var_858.as_str());
    }
    if let Some(var_859) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_859).into()),
        );
    }
    if let Some(var_860) = &input.next_token {
        object.key("NextToken").string(var_860.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_code_repositories_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCodeRepositoriesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_861) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_861, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_862) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_862, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_863) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_863, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_864) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_864, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_865) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_865).into()),
        );
    }
    if let Some(var_866) = &input.name_contains {
        object.key("NameContains").string(var_866.as_str());
    }
    if let Some(var_867) = &input.next_token {
        object.key("NextToken").string(var_867.as_str());
    }
    if let Some(var_868) = &input.sort_by {
        object.key("SortBy").string(var_868.as_str());
    }
    if let Some(var_869) = &input.sort_order {
        object.key("SortOrder").string(var_869.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_compilation_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCompilationJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_870) = &input.next_token {
        object.key("NextToken").string(var_870.as_str());
    }
    if let Some(var_871) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_871).into()),
        );
    }
    if let Some(var_872) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_872, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_873) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_873, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_874) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_874, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_875) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_875, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_876) = &input.name_contains {
        object.key("NameContains").string(var_876.as_str());
    }
    if let Some(var_877) = &input.status_equals {
        object.key("StatusEquals").string(var_877.as_str());
    }
    if let Some(var_878) = &input.sort_by {
        object.key("SortBy").string(var_878.as_str());
    }
    if let Some(var_879) = &input.sort_order {
        object.key("SortOrder").string(var_879.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_contexts_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListContextsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_880) = &input.source_uri {
        object.key("SourceUri").string(var_880.as_str());
    }
    if let Some(var_881) = &input.context_type {
        object.key("ContextType").string(var_881.as_str());
    }
    if let Some(var_882) = &input.created_after {
        object
            .key("CreatedAfter")
            .date_time(var_882, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_883) = &input.created_before {
        object
            .key("CreatedBefore")
            .date_time(var_883, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_884) = &input.sort_by {
        object.key("SortBy").string(var_884.as_str());
    }
    if let Some(var_885) = &input.sort_order {
        object.key("SortOrder").string(var_885.as_str());
    }
    if let Some(var_886) = &input.next_token {
        object.key("NextToken").string(var_886.as_str());
    }
    if let Some(var_887) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_887).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_data_quality_job_definitions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDataQualityJobDefinitionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_888) = &input.endpoint_name {
        object.key("EndpointName").string(var_888.as_str());
    }
    if let Some(var_889) = &input.sort_by {
        object.key("SortBy").string(var_889.as_str());
    }
    if let Some(var_890) = &input.sort_order {
        object.key("SortOrder").string(var_890.as_str());
    }
    if let Some(var_891) = &input.next_token {
        object.key("NextToken").string(var_891.as_str());
    }
    if let Some(var_892) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_892).into()),
        );
    }
    if let Some(var_893) = &input.name_contains {
        object.key("NameContains").string(var_893.as_str());
    }
    if let Some(var_894) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_894, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_895) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_895, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_device_fleets_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDeviceFleetsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_896) = &input.next_token {
        object.key("NextToken").string(var_896.as_str());
    }
    if let Some(var_897) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_897).into()),
        );
    }
    if let Some(var_898) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_898, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_899) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_899, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_900) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_900, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_901) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_901, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_902) = &input.name_contains {
        object.key("NameContains").string(var_902.as_str());
    }
    if let Some(var_903) = &input.sort_by {
        object.key("SortBy").string(var_903.as_str());
    }
    if let Some(var_904) = &input.sort_order {
        object.key("SortOrder").string(var_904.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_devices_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDevicesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_905) = &input.next_token {
        object.key("NextToken").string(var_905.as_str());
    }
    if let Some(var_906) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_906).into()),
        );
    }
    if let Some(var_907) = &input.latest_heartbeat_after {
        object
            .key("LatestHeartbeatAfter")
            .date_time(var_907, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_908) = &input.model_name {
        object.key("ModelName").string(var_908.as_str());
    }
    if let Some(var_909) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_909.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_domains_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDomainsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_910) = &input.next_token {
        object.key("NextToken").string(var_910.as_str());
    }
    if let Some(var_911) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_911).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_edge_packaging_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEdgePackagingJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_912) = &input.next_token {
        object.key("NextToken").string(var_912.as_str());
    }
    if let Some(var_913) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_913).into()),
        );
    }
    if let Some(var_914) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_914, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_915) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_915, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_916) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_916, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_917) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_917, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_918) = &input.name_contains {
        object.key("NameContains").string(var_918.as_str());
    }
    if let Some(var_919) = &input.model_name_contains {
        object.key("ModelNameContains").string(var_919.as_str());
    }
    if let Some(var_920) = &input.status_equals {
        object.key("StatusEquals").string(var_920.as_str());
    }
    if let Some(var_921) = &input.sort_by {
        object.key("SortBy").string(var_921.as_str());
    }
    if let Some(var_922) = &input.sort_order {
        object.key("SortOrder").string(var_922.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_endpoint_configs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEndpointConfigsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_923) = &input.sort_by {
        object.key("SortBy").string(var_923.as_str());
    }
    if let Some(var_924) = &input.sort_order {
        object.key("SortOrder").string(var_924.as_str());
    }
    if let Some(var_925) = &input.next_token {
        object.key("NextToken").string(var_925.as_str());
    }
    if let Some(var_926) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_926).into()),
        );
    }
    if let Some(var_927) = &input.name_contains {
        object.key("NameContains").string(var_927.as_str());
    }
    if let Some(var_928) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_928, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_929) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_929, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_endpoints_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEndpointsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_930) = &input.sort_by {
        object.key("SortBy").string(var_930.as_str());
    }
    if let Some(var_931) = &input.sort_order {
        object.key("SortOrder").string(var_931.as_str());
    }
    if let Some(var_932) = &input.next_token {
        object.key("NextToken").string(var_932.as_str());
    }
    if let Some(var_933) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_933).into()),
        );
    }
    if let Some(var_934) = &input.name_contains {
        object.key("NameContains").string(var_934.as_str());
    }
    if let Some(var_935) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_935, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_936) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_936, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_937) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_937, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_938) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_938, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_939) = &input.status_equals {
        object.key("StatusEquals").string(var_939.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_experiments_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListExperimentsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_940) = &input.created_after {
        object
            .key("CreatedAfter")
            .date_time(var_940, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_941) = &input.created_before {
        object
            .key("CreatedBefore")
            .date_time(var_941, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_942) = &input.sort_by {
        object.key("SortBy").string(var_942.as_str());
    }
    if let Some(var_943) = &input.sort_order {
        object.key("SortOrder").string(var_943.as_str());
    }
    if let Some(var_944) = &input.next_token {
        object.key("NextToken").string(var_944.as_str());
    }
    if let Some(var_945) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_945).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_feature_groups_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListFeatureGroupsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_946) = &input.name_contains {
        object.key("NameContains").string(var_946.as_str());
    }
    if let Some(var_947) = &input.feature_group_status_equals {
        object
            .key("FeatureGroupStatusEquals")
            .string(var_947.as_str());
    }
    if let Some(var_948) = &input.offline_store_status_equals {
        object
            .key("OfflineStoreStatusEquals")
            .string(var_948.as_str());
    }
    if let Some(var_949) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_949, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_950) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_950, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_951) = &input.sort_order {
        object.key("SortOrder").string(var_951.as_str());
    }
    if let Some(var_952) = &input.sort_by {
        object.key("SortBy").string(var_952.as_str());
    }
    if let Some(var_953) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_953).into()),
        );
    }
    if let Some(var_954) = &input.next_token {
        object.key("NextToken").string(var_954.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_flow_definitions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListFlowDefinitionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_955) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_955, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_956) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_956, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_957) = &input.sort_order {
        object.key("SortOrder").string(var_957.as_str());
    }
    if let Some(var_958) = &input.next_token {
        object.key("NextToken").string(var_958.as_str());
    }
    if let Some(var_959) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_959).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_human_task_uis_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListHumanTaskUisInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_960) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_960, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_961) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_961, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_962) = &input.sort_order {
        object.key("SortOrder").string(var_962.as_str());
    }
    if let Some(var_963) = &input.next_token {
        object.key("NextToken").string(var_963.as_str());
    }
    if let Some(var_964) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_964).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_hyper_parameter_tuning_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListHyperParameterTuningJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_965) = &input.next_token {
        object.key("NextToken").string(var_965.as_str());
    }
    if let Some(var_966) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_966).into()),
        );
    }
    if let Some(var_967) = &input.sort_by {
        object.key("SortBy").string(var_967.as_str());
    }
    if let Some(var_968) = &input.sort_order {
        object.key("SortOrder").string(var_968.as_str());
    }
    if let Some(var_969) = &input.name_contains {
        object.key("NameContains").string(var_969.as_str());
    }
    if let Some(var_970) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_970, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_971) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_971, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_972) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_972, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_973) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_973, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_974) = &input.status_equals {
        object.key("StatusEquals").string(var_974.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_images_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListImagesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_975) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_975, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_976) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_976, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_977) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_977, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_978) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_978, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_979) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_979).into()),
        );
    }
    if let Some(var_980) = &input.name_contains {
        object.key("NameContains").string(var_980.as_str());
    }
    if let Some(var_981) = &input.next_token {
        object.key("NextToken").string(var_981.as_str());
    }
    if let Some(var_982) = &input.sort_by {
        object.key("SortBy").string(var_982.as_str());
    }
    if let Some(var_983) = &input.sort_order {
        object.key("SortOrder").string(var_983.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_image_versions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListImageVersionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_984) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_984, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_985) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_985, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_986) = &input.image_name {
        object.key("ImageName").string(var_986.as_str());
    }
    if let Some(var_987) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_987, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_988) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_988, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_989) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_989).into()),
        );
    }
    if let Some(var_990) = &input.next_token {
        object.key("NextToken").string(var_990.as_str());
    }
    if let Some(var_991) = &input.sort_by {
        object.key("SortBy").string(var_991.as_str());
    }
    if let Some(var_992) = &input.sort_order {
        object.key("SortOrder").string(var_992.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_inference_recommendations_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListInferenceRecommendationsJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_993) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_993, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_994) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_994, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_995) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_995, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_996) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_996, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_997) = &input.name_contains {
        object.key("NameContains").string(var_997.as_str());
    }
    if let Some(var_998) = &input.status_equals {
        object.key("StatusEquals").string(var_998.as_str());
    }
    if let Some(var_999) = &input.sort_by {
        object.key("SortBy").string(var_999.as_str());
    }
    if let Some(var_1000) = &input.sort_order {
        object.key("SortOrder").string(var_1000.as_str());
    }
    if let Some(var_1001) = &input.next_token {
        object.key("NextToken").string(var_1001.as_str());
    }
    if let Some(var_1002) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1002).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_labeling_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListLabelingJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1003) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1003, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1004) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1004, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1005) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_1005, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1006) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_1006, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1007) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1007).into()),
        );
    }
    if let Some(var_1008) = &input.next_token {
        object.key("NextToken").string(var_1008.as_str());
    }
    if let Some(var_1009) = &input.name_contains {
        object.key("NameContains").string(var_1009.as_str());
    }
    if let Some(var_1010) = &input.sort_by {
        object.key("SortBy").string(var_1010.as_str());
    }
    if let Some(var_1011) = &input.sort_order {
        object.key("SortOrder").string(var_1011.as_str());
    }
    if let Some(var_1012) = &input.status_equals {
        object.key("StatusEquals").string(var_1012.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_labeling_jobs_for_workteam_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListLabelingJobsForWorkteamInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1013) = &input.workteam_arn {
        object.key("WorkteamArn").string(var_1013.as_str());
    }
    if let Some(var_1014) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1014).into()),
        );
    }
    if let Some(var_1015) = &input.next_token {
        object.key("NextToken").string(var_1015.as_str());
    }
    if let Some(var_1016) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1016, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1017) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1017, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1018) = &input.job_reference_code_contains {
        object
            .key("JobReferenceCodeContains")
            .string(var_1018.as_str());
    }
    if let Some(var_1019) = &input.sort_by {
        object.key("SortBy").string(var_1019.as_str());
    }
    if let Some(var_1020) = &input.sort_order {
        object.key("SortOrder").string(var_1020.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_lineage_groups_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListLineageGroupsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1021) = &input.created_after {
        object
            .key("CreatedAfter")
            .date_time(var_1021, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1022) = &input.created_before {
        object
            .key("CreatedBefore")
            .date_time(var_1022, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1023) = &input.sort_by {
        object.key("SortBy").string(var_1023.as_str());
    }
    if let Some(var_1024) = &input.sort_order {
        object.key("SortOrder").string(var_1024.as_str());
    }
    if let Some(var_1025) = &input.next_token {
        object.key("NextToken").string(var_1025.as_str());
    }
    if let Some(var_1026) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1026).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_model_bias_job_definitions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelBiasJobDefinitionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1027) = &input.endpoint_name {
        object.key("EndpointName").string(var_1027.as_str());
    }
    if let Some(var_1028) = &input.sort_by {
        object.key("SortBy").string(var_1028.as_str());
    }
    if let Some(var_1029) = &input.sort_order {
        object.key("SortOrder").string(var_1029.as_str());
    }
    if let Some(var_1030) = &input.next_token {
        object.key("NextToken").string(var_1030.as_str());
    }
    if let Some(var_1031) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1031).into()),
        );
    }
    if let Some(var_1032) = &input.name_contains {
        object.key("NameContains").string(var_1032.as_str());
    }
    if let Some(var_1033) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1033, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1034) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1034, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_model_explainability_job_definitions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelExplainabilityJobDefinitionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1035) = &input.endpoint_name {
        object.key("EndpointName").string(var_1035.as_str());
    }
    if let Some(var_1036) = &input.sort_by {
        object.key("SortBy").string(var_1036.as_str());
    }
    if let Some(var_1037) = &input.sort_order {
        object.key("SortOrder").string(var_1037.as_str());
    }
    if let Some(var_1038) = &input.next_token {
        object.key("NextToken").string(var_1038.as_str());
    }
    if let Some(var_1039) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1039).into()),
        );
    }
    if let Some(var_1040) = &input.name_contains {
        object.key("NameContains").string(var_1040.as_str());
    }
    if let Some(var_1041) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1041, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1042) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1042, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_model_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1043) = &input.search_expression {
        let mut object_1044 = object.key("SearchExpression").start_object();
        crate::json_ser::serialize_structure_crate_model_model_metadata_search_expression(
            &mut object_1044,
            var_1043,
        )?;
        object_1044.finish();
    }
    if let Some(var_1045) = &input.next_token {
        object.key("NextToken").string(var_1045.as_str());
    }
    if let Some(var_1046) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1046).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_model_package_groups_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelPackageGroupsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1047) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1047, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1048) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1048, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1049) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1049).into()),
        );
    }
    if let Some(var_1050) = &input.name_contains {
        object.key("NameContains").string(var_1050.as_str());
    }
    if let Some(var_1051) = &input.next_token {
        object.key("NextToken").string(var_1051.as_str());
    }
    if let Some(var_1052) = &input.sort_by {
        object.key("SortBy").string(var_1052.as_str());
    }
    if let Some(var_1053) = &input.sort_order {
        object.key("SortOrder").string(var_1053.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_model_packages_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelPackagesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1054) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1054, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1055) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1055, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1056) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1056).into()),
        );
    }
    if let Some(var_1057) = &input.name_contains {
        object.key("NameContains").string(var_1057.as_str());
    }
    if let Some(var_1058) = &input.model_approval_status {
        object.key("ModelApprovalStatus").string(var_1058.as_str());
    }
    if let Some(var_1059) = &input.model_package_group_name {
        object
            .key("ModelPackageGroupName")
            .string(var_1059.as_str());
    }
    if let Some(var_1060) = &input.model_package_type {
        object.key("ModelPackageType").string(var_1060.as_str());
    }
    if let Some(var_1061) = &input.next_token {
        object.key("NextToken").string(var_1061.as_str());
    }
    if let Some(var_1062) = &input.sort_by {
        object.key("SortBy").string(var_1062.as_str());
    }
    if let Some(var_1063) = &input.sort_order {
        object.key("SortOrder").string(var_1063.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_model_quality_job_definitions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelQualityJobDefinitionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1064) = &input.endpoint_name {
        object.key("EndpointName").string(var_1064.as_str());
    }
    if let Some(var_1065) = &input.sort_by {
        object.key("SortBy").string(var_1065.as_str());
    }
    if let Some(var_1066) = &input.sort_order {
        object.key("SortOrder").string(var_1066.as_str());
    }
    if let Some(var_1067) = &input.next_token {
        object.key("NextToken").string(var_1067.as_str());
    }
    if let Some(var_1068) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1068).into()),
        );
    }
    if let Some(var_1069) = &input.name_contains {
        object.key("NameContains").string(var_1069.as_str());
    }
    if let Some(var_1070) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1070, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1071) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1071, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_models_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1072) = &input.sort_by {
        object.key("SortBy").string(var_1072.as_str());
    }
    if let Some(var_1073) = &input.sort_order {
        object.key("SortOrder").string(var_1073.as_str());
    }
    if let Some(var_1074) = &input.next_token {
        object.key("NextToken").string(var_1074.as_str());
    }
    if let Some(var_1075) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1075).into()),
        );
    }
    if let Some(var_1076) = &input.name_contains {
        object.key("NameContains").string(var_1076.as_str());
    }
    if let Some(var_1077) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1077, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1078) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1078, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_monitoring_executions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListMonitoringExecutionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1079) = &input.monitoring_schedule_name {
        object
            .key("MonitoringScheduleName")
            .string(var_1079.as_str());
    }
    if let Some(var_1080) = &input.endpoint_name {
        object.key("EndpointName").string(var_1080.as_str());
    }
    if let Some(var_1081) = &input.sort_by {
        object.key("SortBy").string(var_1081.as_str());
    }
    if let Some(var_1082) = &input.sort_order {
        object.key("SortOrder").string(var_1082.as_str());
    }
    if let Some(var_1083) = &input.next_token {
        object.key("NextToken").string(var_1083.as_str());
    }
    if let Some(var_1084) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1084).into()),
        );
    }
    if let Some(var_1085) = &input.scheduled_time_before {
        object
            .key("ScheduledTimeBefore")
            .date_time(var_1085, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1086) = &input.scheduled_time_after {
        object
            .key("ScheduledTimeAfter")
            .date_time(var_1086, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1087) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1087, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1088) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1088, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1089) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_1089, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1090) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_1090, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1091) = &input.status_equals {
        object.key("StatusEquals").string(var_1091.as_str());
    }
    if let Some(var_1092) = &input.monitoring_job_definition_name {
        object
            .key("MonitoringJobDefinitionName")
            .string(var_1092.as_str());
    }
    if let Some(var_1093) = &input.monitoring_type_equals {
        object.key("MonitoringTypeEquals").string(var_1093.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_monitoring_schedules_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListMonitoringSchedulesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1094) = &input.endpoint_name {
        object.key("EndpointName").string(var_1094.as_str());
    }
    if let Some(var_1095) = &input.sort_by {
        object.key("SortBy").string(var_1095.as_str());
    }
    if let Some(var_1096) = &input.sort_order {
        object.key("SortOrder").string(var_1096.as_str());
    }
    if let Some(var_1097) = &input.next_token {
        object.key("NextToken").string(var_1097.as_str());
    }
    if let Some(var_1098) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1098).into()),
        );
    }
    if let Some(var_1099) = &input.name_contains {
        object.key("NameContains").string(var_1099.as_str());
    }
    if let Some(var_1100) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1100, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1101) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1101, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1102) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_1102, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1103) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_1103, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1104) = &input.status_equals {
        object.key("StatusEquals").string(var_1104.as_str());
    }
    if let Some(var_1105) = &input.monitoring_job_definition_name {
        object
            .key("MonitoringJobDefinitionName")
            .string(var_1105.as_str());
    }
    if let Some(var_1106) = &input.monitoring_type_equals {
        object.key("MonitoringTypeEquals").string(var_1106.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_notebook_instance_lifecycle_configs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListNotebookInstanceLifecycleConfigsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1107) = &input.next_token {
        object.key("NextToken").string(var_1107.as_str());
    }
    if let Some(var_1108) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1108).into()),
        );
    }
    if let Some(var_1109) = &input.sort_by {
        object.key("SortBy").string(var_1109.as_str());
    }
    if let Some(var_1110) = &input.sort_order {
        object.key("SortOrder").string(var_1110.as_str());
    }
    if let Some(var_1111) = &input.name_contains {
        object.key("NameContains").string(var_1111.as_str());
    }
    if let Some(var_1112) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1112, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1113) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1113, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1114) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_1114, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1115) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_1115, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_notebook_instances_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListNotebookInstancesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1116) = &input.next_token {
        object.key("NextToken").string(var_1116.as_str());
    }
    if let Some(var_1117) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1117).into()),
        );
    }
    if let Some(var_1118) = &input.sort_by {
        object.key("SortBy").string(var_1118.as_str());
    }
    if let Some(var_1119) = &input.sort_order {
        object.key("SortOrder").string(var_1119.as_str());
    }
    if let Some(var_1120) = &input.name_contains {
        object.key("NameContains").string(var_1120.as_str());
    }
    if let Some(var_1121) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1121, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1122) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1122, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1123) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_1123, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1124) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_1124, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1125) = &input.status_equals {
        object.key("StatusEquals").string(var_1125.as_str());
    }
    if let Some(var_1126) = &input.notebook_instance_lifecycle_config_name_contains {
        object
            .key("NotebookInstanceLifecycleConfigNameContains")
            .string(var_1126.as_str());
    }
    if let Some(var_1127) = &input.default_code_repository_contains {
        object
            .key("DefaultCodeRepositoryContains")
            .string(var_1127.as_str());
    }
    if let Some(var_1128) = &input.additional_code_repository_equals {
        object
            .key("AdditionalCodeRepositoryEquals")
            .string(var_1128.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_pipeline_executions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPipelineExecutionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1129) = &input.pipeline_name {
        object.key("PipelineName").string(var_1129.as_str());
    }
    if let Some(var_1130) = &input.created_after {
        object
            .key("CreatedAfter")
            .date_time(var_1130, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1131) = &input.created_before {
        object
            .key("CreatedBefore")
            .date_time(var_1131, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1132) = &input.sort_by {
        object.key("SortBy").string(var_1132.as_str());
    }
    if let Some(var_1133) = &input.sort_order {
        object.key("SortOrder").string(var_1133.as_str());
    }
    if let Some(var_1134) = &input.next_token {
        object.key("NextToken").string(var_1134.as_str());
    }
    if let Some(var_1135) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1135).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_pipeline_execution_steps_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPipelineExecutionStepsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1136) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_1136.as_str());
    }
    if let Some(var_1137) = &input.next_token {
        object.key("NextToken").string(var_1137.as_str());
    }
    if let Some(var_1138) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1138).into()),
        );
    }
    if let Some(var_1139) = &input.sort_order {
        object.key("SortOrder").string(var_1139.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_pipeline_parameters_for_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPipelineParametersForExecutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1140) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_1140.as_str());
    }
    if let Some(var_1141) = &input.next_token {
        object.key("NextToken").string(var_1141.as_str());
    }
    if let Some(var_1142) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1142).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_pipelines_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPipelinesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1143) = &input.pipeline_name_prefix {
        object.key("PipelineNamePrefix").string(var_1143.as_str());
    }
    if let Some(var_1144) = &input.created_after {
        object
            .key("CreatedAfter")
            .date_time(var_1144, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1145) = &input.created_before {
        object
            .key("CreatedBefore")
            .date_time(var_1145, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1146) = &input.sort_by {
        object.key("SortBy").string(var_1146.as_str());
    }
    if let Some(var_1147) = &input.sort_order {
        object.key("SortOrder").string(var_1147.as_str());
    }
    if let Some(var_1148) = &input.next_token {
        object.key("NextToken").string(var_1148.as_str());
    }
    if let Some(var_1149) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1149).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_processing_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListProcessingJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1150) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1150, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1151) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1151, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1152) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_1152, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1153) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_1153, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1154) = &input.name_contains {
        object.key("NameContains").string(var_1154.as_str());
    }
    if let Some(var_1155) = &input.status_equals {
        object.key("StatusEquals").string(var_1155.as_str());
    }
    if let Some(var_1156) = &input.sort_by {
        object.key("SortBy").string(var_1156.as_str());
    }
    if let Some(var_1157) = &input.sort_order {
        object.key("SortOrder").string(var_1157.as_str());
    }
    if let Some(var_1158) = &input.next_token {
        object.key("NextToken").string(var_1158.as_str());
    }
    if let Some(var_1159) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1159).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_projects_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListProjectsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1160) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1160, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1161) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1161, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1162) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1162).into()),
        );
    }
    if let Some(var_1163) = &input.name_contains {
        object.key("NameContains").string(var_1163.as_str());
    }
    if let Some(var_1164) = &input.next_token {
        object.key("NextToken").string(var_1164.as_str());
    }
    if let Some(var_1165) = &input.sort_by {
        object.key("SortBy").string(var_1165.as_str());
    }
    if let Some(var_1166) = &input.sort_order {
        object.key("SortOrder").string(var_1166.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_studio_lifecycle_configs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListStudioLifecycleConfigsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1167) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1167).into()),
        );
    }
    if let Some(var_1168) = &input.next_token {
        object.key("NextToken").string(var_1168.as_str());
    }
    if let Some(var_1169) = &input.name_contains {
        object.key("NameContains").string(var_1169.as_str());
    }
    if let Some(var_1170) = &input.app_type_equals {
        object.key("AppTypeEquals").string(var_1170.as_str());
    }
    if let Some(var_1171) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1171, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1172) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1172, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1173) = &input.modified_time_before {
        object
            .key("ModifiedTimeBefore")
            .date_time(var_1173, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1174) = &input.modified_time_after {
        object
            .key("ModifiedTimeAfter")
            .date_time(var_1174, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1175) = &input.sort_by {
        object.key("SortBy").string(var_1175.as_str());
    }
    if let Some(var_1176) = &input.sort_order {
        object.key("SortOrder").string(var_1176.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_subscribed_workteams_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSubscribedWorkteamsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1177) = &input.name_contains {
        object.key("NameContains").string(var_1177.as_str());
    }
    if let Some(var_1178) = &input.next_token {
        object.key("NextToken").string(var_1178.as_str());
    }
    if let Some(var_1179) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1179).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1180) = &input.resource_arn {
        object.key("ResourceArn").string(var_1180.as_str());
    }
    if let Some(var_1181) = &input.next_token {
        object.key("NextToken").string(var_1181.as_str());
    }
    if let Some(var_1182) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1182).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_training_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTrainingJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1183) = &input.next_token {
        object.key("NextToken").string(var_1183.as_str());
    }
    if let Some(var_1184) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1184).into()),
        );
    }
    if let Some(var_1185) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1185, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1186) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1186, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1187) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_1187, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1188) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_1188, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1189) = &input.name_contains {
        object.key("NameContains").string(var_1189.as_str());
    }
    if let Some(var_1190) = &input.status_equals {
        object.key("StatusEquals").string(var_1190.as_str());
    }
    if let Some(var_1191) = &input.sort_by {
        object.key("SortBy").string(var_1191.as_str());
    }
    if let Some(var_1192) = &input.sort_order {
        object.key("SortOrder").string(var_1192.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_training_jobs_for_hyper_parameter_tuning_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTrainingJobsForHyperParameterTuningJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1193) = &input.hyper_parameter_tuning_job_name {
        object
            .key("HyperParameterTuningJobName")
            .string(var_1193.as_str());
    }
    if let Some(var_1194) = &input.next_token {
        object.key("NextToken").string(var_1194.as_str());
    }
    if let Some(var_1195) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1195).into()),
        );
    }
    if let Some(var_1196) = &input.status_equals {
        object.key("StatusEquals").string(var_1196.as_str());
    }
    if let Some(var_1197) = &input.sort_by {
        object.key("SortBy").string(var_1197.as_str());
    }
    if let Some(var_1198) = &input.sort_order {
        object.key("SortOrder").string(var_1198.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_transform_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTransformJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1199) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1199, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1200) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1200, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1201) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_1201, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1202) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_1202, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1203) = &input.name_contains {
        object.key("NameContains").string(var_1203.as_str());
    }
    if let Some(var_1204) = &input.status_equals {
        object.key("StatusEquals").string(var_1204.as_str());
    }
    if let Some(var_1205) = &input.sort_by {
        object.key("SortBy").string(var_1205.as_str());
    }
    if let Some(var_1206) = &input.sort_order {
        object.key("SortOrder").string(var_1206.as_str());
    }
    if let Some(var_1207) = &input.next_token {
        object.key("NextToken").string(var_1207.as_str());
    }
    if let Some(var_1208) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1208).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_trial_components_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTrialComponentsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1209) = &input.experiment_name {
        object.key("ExperimentName").string(var_1209.as_str());
    }
    if let Some(var_1210) = &input.trial_name {
        object.key("TrialName").string(var_1210.as_str());
    }
    if let Some(var_1211) = &input.source_arn {
        object.key("SourceArn").string(var_1211.as_str());
    }
    if let Some(var_1212) = &input.created_after {
        object
            .key("CreatedAfter")
            .date_time(var_1212, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1213) = &input.created_before {
        object
            .key("CreatedBefore")
            .date_time(var_1213, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1214) = &input.sort_by {
        object.key("SortBy").string(var_1214.as_str());
    }
    if let Some(var_1215) = &input.sort_order {
        object.key("SortOrder").string(var_1215.as_str());
    }
    if let Some(var_1216) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1216).into()),
        );
    }
    if let Some(var_1217) = &input.next_token {
        object.key("NextToken").string(var_1217.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_trials_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTrialsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1218) = &input.experiment_name {
        object.key("ExperimentName").string(var_1218.as_str());
    }
    if let Some(var_1219) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_1219.as_str());
    }
    if let Some(var_1220) = &input.created_after {
        object
            .key("CreatedAfter")
            .date_time(var_1220, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1221) = &input.created_before {
        object
            .key("CreatedBefore")
            .date_time(var_1221, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1222) = &input.sort_by {
        object.key("SortBy").string(var_1222.as_str());
    }
    if let Some(var_1223) = &input.sort_order {
        object.key("SortOrder").string(var_1223.as_str());
    }
    if let Some(var_1224) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1224).into()),
        );
    }
    if let Some(var_1225) = &input.next_token {
        object.key("NextToken").string(var_1225.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_user_profiles_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListUserProfilesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1226) = &input.next_token {
        object.key("NextToken").string(var_1226.as_str());
    }
    if let Some(var_1227) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1227).into()),
        );
    }
    if let Some(var_1228) = &input.sort_order {
        object.key("SortOrder").string(var_1228.as_str());
    }
    if let Some(var_1229) = &input.sort_by {
        object.key("SortBy").string(var_1229.as_str());
    }
    if let Some(var_1230) = &input.domain_id_equals {
        object.key("DomainIdEquals").string(var_1230.as_str());
    }
    if let Some(var_1231) = &input.user_profile_name_contains {
        object
            .key("UserProfileNameContains")
            .string(var_1231.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_workforces_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListWorkforcesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1232) = &input.sort_by {
        object.key("SortBy").string(var_1232.as_str());
    }
    if let Some(var_1233) = &input.sort_order {
        object.key("SortOrder").string(var_1233.as_str());
    }
    if let Some(var_1234) = &input.name_contains {
        object.key("NameContains").string(var_1234.as_str());
    }
    if let Some(var_1235) = &input.next_token {
        object.key("NextToken").string(var_1235.as_str());
    }
    if let Some(var_1236) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1236).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_workteams_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListWorkteamsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1237) = &input.sort_by {
        object.key("SortBy").string(var_1237.as_str());
    }
    if let Some(var_1238) = &input.sort_order {
        object.key("SortOrder").string(var_1238.as_str());
    }
    if let Some(var_1239) = &input.name_contains {
        object.key("NameContains").string(var_1239.as_str());
    }
    if let Some(var_1240) = &input.next_token {
        object.key("NextToken").string(var_1240.as_str());
    }
    if let Some(var_1241) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1241).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_model_package_group_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutModelPackageGroupPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1242) = &input.model_package_group_name {
        object
            .key("ModelPackageGroupName")
            .string(var_1242.as_str());
    }
    if let Some(var_1243) = &input.resource_policy {
        object.key("ResourcePolicy").string(var_1243.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_query_lineage_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::QueryLineageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1244) = &input.start_arns {
        let mut array_1245 = object.key("StartArns").start_array();
        for item_1246 in var_1244 {
            {
                array_1245.value().string(item_1246.as_str());
            }
        }
        array_1245.finish();
    }
    if let Some(var_1247) = &input.direction {
        object.key("Direction").string(var_1247.as_str());
    }
    if input.include_edges {
        object.key("IncludeEdges").boolean(input.include_edges);
    }
    if let Some(var_1248) = &input.filters {
        let mut object_1249 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_query_filters(&mut object_1249, var_1248)?;
        object_1249.finish();
    }
    if let Some(var_1250) = &input.max_depth {
        object.key("MaxDepth").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1250).into()),
        );
    }
    if let Some(var_1251) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1251).into()),
        );
    }
    if let Some(var_1252) = &input.next_token {
        object.key("NextToken").string(var_1252.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_devices_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterDevicesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1253) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_1253.as_str());
    }
    if let Some(var_1254) = &input.devices {
        let mut array_1255 = object.key("Devices").start_array();
        for item_1256 in var_1254 {
            {
                let mut object_1257 = array_1255.value().start_object();
                crate::json_ser::serialize_structure_crate_model_device(
                    &mut object_1257,
                    item_1256,
                )?;
                object_1257.finish();
            }
        }
        array_1255.finish();
    }
    if let Some(var_1258) = &input.tags {
        let mut array_1259 = object.key("Tags").start_array();
        for item_1260 in var_1258 {
            {
                let mut object_1261 = array_1259.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_1261, item_1260)?;
                object_1261.finish();
            }
        }
        array_1259.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_render_ui_template_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RenderUiTemplateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1262) = &input.ui_template {
        let mut object_1263 = object.key("UiTemplate").start_object();
        crate::json_ser::serialize_structure_crate_model_ui_template(&mut object_1263, var_1262)?;
        object_1263.finish();
    }
    if let Some(var_1264) = &input.task {
        let mut object_1265 = object.key("Task").start_object();
        crate::json_ser::serialize_structure_crate_model_renderable_task(
            &mut object_1265,
            var_1264,
        )?;
        object_1265.finish();
    }
    if let Some(var_1266) = &input.role_arn {
        object.key("RoleArn").string(var_1266.as_str());
    }
    if let Some(var_1267) = &input.human_task_ui_arn {
        object.key("HumanTaskUiArn").string(var_1267.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_retry_pipeline_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RetryPipelineExecutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1268) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_1268.as_str());
    }
    if let Some(var_1269) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1269.as_str());
    }
    if let Some(var_1270) = &input.parallelism_configuration {
        let mut object_1271 = object.key("ParallelismConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_parallelism_configuration(
            &mut object_1271,
            var_1270,
        )?;
        object_1271.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1272) = &input.resource {
        object.key("Resource").string(var_1272.as_str());
    }
    if let Some(var_1273) = &input.search_expression {
        let mut object_1274 = object.key("SearchExpression").start_object();
        crate::json_ser::serialize_structure_crate_model_search_expression(
            &mut object_1274,
            var_1273,
        )?;
        object_1274.finish();
    }
    if let Some(var_1275) = &input.sort_by {
        object.key("SortBy").string(var_1275.as_str());
    }
    if let Some(var_1276) = &input.sort_order {
        object.key("SortOrder").string(var_1276.as_str());
    }
    if let Some(var_1277) = &input.next_token {
        object.key("NextToken").string(var_1277.as_str());
    }
    if let Some(var_1278) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1278).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_send_pipeline_execution_step_failure_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SendPipelineExecutionStepFailureInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1279) = &input.callback_token {
        object.key("CallbackToken").string(var_1279.as_str());
    }
    if let Some(var_1280) = &input.failure_reason {
        object.key("FailureReason").string(var_1280.as_str());
    }
    if let Some(var_1281) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1281.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_send_pipeline_execution_step_success_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SendPipelineExecutionStepSuccessInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1282) = &input.callback_token {
        object.key("CallbackToken").string(var_1282.as_str());
    }
    if let Some(var_1283) = &input.output_parameters {
        let mut array_1284 = object.key("OutputParameters").start_array();
        for item_1285 in var_1283 {
            {
                let mut object_1286 = array_1284.value().start_object();
                crate::json_ser::serialize_structure_crate_model_output_parameter(
                    &mut object_1286,
                    item_1285,
                )?;
                object_1286.finish();
            }
        }
        array_1284.finish();
    }
    if let Some(var_1287) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1287.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_monitoring_schedule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartMonitoringScheduleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1288) = &input.monitoring_schedule_name {
        object
            .key("MonitoringScheduleName")
            .string(var_1288.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_notebook_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartNotebookInstanceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1289) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_1289.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_pipeline_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartPipelineExecutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1290) = &input.pipeline_name {
        object.key("PipelineName").string(var_1290.as_str());
    }
    if let Some(var_1291) = &input.pipeline_execution_display_name {
        object
            .key("PipelineExecutionDisplayName")
            .string(var_1291.as_str());
    }
    if let Some(var_1292) = &input.pipeline_parameters {
        let mut array_1293 = object.key("PipelineParameters").start_array();
        for item_1294 in var_1292 {
            {
                let mut object_1295 = array_1293.value().start_object();
                crate::json_ser::serialize_structure_crate_model_parameter(
                    &mut object_1295,
                    item_1294,
                )?;
                object_1295.finish();
            }
        }
        array_1293.finish();
    }
    if let Some(var_1296) = &input.pipeline_execution_description {
        object
            .key("PipelineExecutionDescription")
            .string(var_1296.as_str());
    }
    if let Some(var_1297) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1297.as_str());
    }
    if let Some(var_1298) = &input.parallelism_configuration {
        let mut object_1299 = object.key("ParallelismConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_parallelism_configuration(
            &mut object_1299,
            var_1298,
        )?;
        object_1299.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_auto_ml_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopAutoMlJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1300) = &input.auto_ml_job_name {
        object.key("AutoMLJobName").string(var_1300.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_compilation_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopCompilationJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1301) = &input.compilation_job_name {
        object.key("CompilationJobName").string(var_1301.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_edge_packaging_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopEdgePackagingJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1302) = &input.edge_packaging_job_name {
        object.key("EdgePackagingJobName").string(var_1302.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_hyper_parameter_tuning_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopHyperParameterTuningJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1303) = &input.hyper_parameter_tuning_job_name {
        object
            .key("HyperParameterTuningJobName")
            .string(var_1303.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_inference_recommendations_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopInferenceRecommendationsJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1304) = &input.job_name {
        object.key("JobName").string(var_1304.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_labeling_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopLabelingJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1305) = &input.labeling_job_name {
        object.key("LabelingJobName").string(var_1305.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_monitoring_schedule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopMonitoringScheduleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1306) = &input.monitoring_schedule_name {
        object
            .key("MonitoringScheduleName")
            .string(var_1306.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_notebook_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopNotebookInstanceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1307) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_1307.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_pipeline_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopPipelineExecutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1308) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_1308.as_str());
    }
    if let Some(var_1309) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1309.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_processing_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopProcessingJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1310) = &input.processing_job_name {
        object.key("ProcessingJobName").string(var_1310.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_training_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopTrainingJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1311) = &input.training_job_name {
        object.key("TrainingJobName").string(var_1311.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_transform_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopTransformJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1312) = &input.transform_job_name {
        object.key("TransformJobName").string(var_1312.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_action_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateActionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1313) = &input.action_name {
        object.key("ActionName").string(var_1313.as_str());
    }
    if let Some(var_1314) = &input.description {
        object.key("Description").string(var_1314.as_str());
    }
    if let Some(var_1315) = &input.status {
        object.key("Status").string(var_1315.as_str());
    }
    if let Some(var_1316) = &input.properties {
        let mut object_1317 = object.key("Properties").start_object();
        for (key_1318, value_1319) in var_1316 {
            {
                object_1317.key(key_1318).string(value_1319.as_str());
            }
        }
        object_1317.finish();
    }
    if let Some(var_1320) = &input.properties_to_remove {
        let mut array_1321 = object.key("PropertiesToRemove").start_array();
        for item_1322 in var_1320 {
            {
                array_1321.value().string(item_1322.as_str());
            }
        }
        array_1321.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_app_image_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAppImageConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1323) = &input.app_image_config_name {
        object.key("AppImageConfigName").string(var_1323.as_str());
    }
    if let Some(var_1324) = &input.kernel_gateway_image_config {
        let mut object_1325 = object.key("KernelGatewayImageConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_kernel_gateway_image_config(
            &mut object_1325,
            var_1324,
        )?;
        object_1325.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_artifact_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateArtifactInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1326) = &input.artifact_arn {
        object.key("ArtifactArn").string(var_1326.as_str());
    }
    if let Some(var_1327) = &input.artifact_name {
        object.key("ArtifactName").string(var_1327.as_str());
    }
    if let Some(var_1328) = &input.properties {
        let mut object_1329 = object.key("Properties").start_object();
        for (key_1330, value_1331) in var_1328 {
            {
                object_1329.key(key_1330).string(value_1331.as_str());
            }
        }
        object_1329.finish();
    }
    if let Some(var_1332) = &input.properties_to_remove {
        let mut array_1333 = object.key("PropertiesToRemove").start_array();
        for item_1334 in var_1332 {
            {
                array_1333.value().string(item_1334.as_str());
            }
        }
        array_1333.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_code_repository_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateCodeRepositoryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1335) = &input.code_repository_name {
        object.key("CodeRepositoryName").string(var_1335.as_str());
    }
    if let Some(var_1336) = &input.git_config {
        let mut object_1337 = object.key("GitConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_git_config_for_update(
            &mut object_1337,
            var_1336,
        )?;
        object_1337.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_context_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateContextInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1338) = &input.context_name {
        object.key("ContextName").string(var_1338.as_str());
    }
    if let Some(var_1339) = &input.description {
        object.key("Description").string(var_1339.as_str());
    }
    if let Some(var_1340) = &input.properties {
        let mut object_1341 = object.key("Properties").start_object();
        for (key_1342, value_1343) in var_1340 {
            {
                object_1341.key(key_1342).string(value_1343.as_str());
            }
        }
        object_1341.finish();
    }
    if let Some(var_1344) = &input.properties_to_remove {
        let mut array_1345 = object.key("PropertiesToRemove").start_array();
        for item_1346 in var_1344 {
            {
                array_1345.value().string(item_1346.as_str());
            }
        }
        array_1345.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_device_fleet_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDeviceFleetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1347) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_1347.as_str());
    }
    if let Some(var_1348) = &input.role_arn {
        object.key("RoleArn").string(var_1348.as_str());
    }
    if let Some(var_1349) = &input.description {
        object.key("Description").string(var_1349.as_str());
    }
    if let Some(var_1350) = &input.output_config {
        let mut object_1351 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_edge_output_config(
            &mut object_1351,
            var_1350,
        )?;
        object_1351.finish();
    }
    if let Some(var_1352) = &input.enable_iot_role_alias {
        object.key("EnableIotRoleAlias").boolean(*var_1352);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_devices_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDevicesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1353) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_1353.as_str());
    }
    if let Some(var_1354) = &input.devices {
        let mut array_1355 = object.key("Devices").start_array();
        for item_1356 in var_1354 {
            {
                let mut object_1357 = array_1355.value().start_object();
                crate::json_ser::serialize_structure_crate_model_device(
                    &mut object_1357,
                    item_1356,
                )?;
                object_1357.finish();
            }
        }
        array_1355.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_domain_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDomainInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1358) = &input.domain_id {
        object.key("DomainId").string(var_1358.as_str());
    }
    if let Some(var_1359) = &input.default_user_settings {
        let mut object_1360 = object.key("DefaultUserSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_user_settings(&mut object_1360, var_1359)?;
        object_1360.finish();
    }
    if let Some(var_1361) = &input.domain_settings_for_update {
        let mut object_1362 = object.key("DomainSettingsForUpdate").start_object();
        crate::json_ser::serialize_structure_crate_model_domain_settings_for_update(
            &mut object_1362,
            var_1361,
        )?;
        object_1362.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateEndpointInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1363) = &input.endpoint_name {
        object.key("EndpointName").string(var_1363.as_str());
    }
    if let Some(var_1364) = &input.endpoint_config_name {
        object.key("EndpointConfigName").string(var_1364.as_str());
    }
    if input.retain_all_variant_properties {
        object
            .key("RetainAllVariantProperties")
            .boolean(input.retain_all_variant_properties);
    }
    if let Some(var_1365) = &input.exclude_retained_variant_properties {
        let mut array_1366 = object.key("ExcludeRetainedVariantProperties").start_array();
        for item_1367 in var_1365 {
            {
                let mut object_1368 = array_1366.value().start_object();
                crate::json_ser::serialize_structure_crate_model_variant_property(
                    &mut object_1368,
                    item_1367,
                )?;
                object_1368.finish();
            }
        }
        array_1366.finish();
    }
    if let Some(var_1369) = &input.deployment_config {
        let mut object_1370 = object.key("DeploymentConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_deployment_config(
            &mut object_1370,
            var_1369,
        )?;
        object_1370.finish();
    }
    if input.retain_deployment_config {
        object
            .key("RetainDeploymentConfig")
            .boolean(input.retain_deployment_config);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_endpoint_weights_and_capacities_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateEndpointWeightsAndCapacitiesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1371) = &input.endpoint_name {
        object.key("EndpointName").string(var_1371.as_str());
    }
    if let Some(var_1372) = &input.desired_weights_and_capacities {
        let mut array_1373 = object.key("DesiredWeightsAndCapacities").start_array();
        for item_1374 in var_1372 {
            {
                let mut object_1375 = array_1373.value().start_object();
                crate::json_ser::serialize_structure_crate_model_desired_weight_and_capacity(
                    &mut object_1375,
                    item_1374,
                )?;
                object_1375.finish();
            }
        }
        array_1373.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_experiment_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateExperimentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1376) = &input.experiment_name {
        object.key("ExperimentName").string(var_1376.as_str());
    }
    if let Some(var_1377) = &input.display_name {
        object.key("DisplayName").string(var_1377.as_str());
    }
    if let Some(var_1378) = &input.description {
        object.key("Description").string(var_1378.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_image_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateImageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1379) = &input.delete_properties {
        let mut array_1380 = object.key("DeleteProperties").start_array();
        for item_1381 in var_1379 {
            {
                array_1380.value().string(item_1381.as_str());
            }
        }
        array_1380.finish();
    }
    if let Some(var_1382) = &input.description {
        object.key("Description").string(var_1382.as_str());
    }
    if let Some(var_1383) = &input.display_name {
        object.key("DisplayName").string(var_1383.as_str());
    }
    if let Some(var_1384) = &input.image_name {
        object.key("ImageName").string(var_1384.as_str());
    }
    if let Some(var_1385) = &input.role_arn {
        object.key("RoleArn").string(var_1385.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_model_package_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateModelPackageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1386) = &input.model_package_arn {
        object.key("ModelPackageArn").string(var_1386.as_str());
    }
    if let Some(var_1387) = &input.model_approval_status {
        object.key("ModelApprovalStatus").string(var_1387.as_str());
    }
    if let Some(var_1388) = &input.approval_description {
        object.key("ApprovalDescription").string(var_1388.as_str());
    }
    if let Some(var_1389) = &input.customer_metadata_properties {
        let mut object_1390 = object.key("CustomerMetadataProperties").start_object();
        for (key_1391, value_1392) in var_1389 {
            {
                object_1390.key(key_1391).string(value_1392.as_str());
            }
        }
        object_1390.finish();
    }
    if let Some(var_1393) = &input.customer_metadata_properties_to_remove {
        let mut array_1394 = object
            .key("CustomerMetadataPropertiesToRemove")
            .start_array();
        for item_1395 in var_1393 {
            {
                array_1394.value().string(item_1395.as_str());
            }
        }
        array_1394.finish();
    }
    if let Some(var_1396) = &input.additional_inference_specifications_to_add {
        let mut array_1397 = object
            .key("AdditionalInferenceSpecificationsToAdd")
            .start_array();
        for item_1398 in var_1396 {
            {
                let mut object_1399 = array_1397.value().start_object();
                crate::json_ser::serialize_structure_crate_model_additional_inference_specification_definition(&mut object_1399, item_1398)?;
                object_1399.finish();
            }
        }
        array_1397.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_monitoring_schedule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMonitoringScheduleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1400) = &input.monitoring_schedule_name {
        object
            .key("MonitoringScheduleName")
            .string(var_1400.as_str());
    }
    if let Some(var_1401) = &input.monitoring_schedule_config {
        let mut object_1402 = object.key("MonitoringScheduleConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_schedule_config(
            &mut object_1402,
            var_1401,
        )?;
        object_1402.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_notebook_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateNotebookInstanceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1403) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_1403.as_str());
    }
    if let Some(var_1404) = &input.instance_type {
        object.key("InstanceType").string(var_1404.as_str());
    }
    if let Some(var_1405) = &input.role_arn {
        object.key("RoleArn").string(var_1405.as_str());
    }
    if let Some(var_1406) = &input.lifecycle_config_name {
        object.key("LifecycleConfigName").string(var_1406.as_str());
    }
    if input.disassociate_lifecycle_config {
        object
            .key("DisassociateLifecycleConfig")
            .boolean(input.disassociate_lifecycle_config);
    }
    if let Some(var_1407) = &input.volume_size_in_gb {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1407).into()),
        );
    }
    if let Some(var_1408) = &input.default_code_repository {
        object
            .key("DefaultCodeRepository")
            .string(var_1408.as_str());
    }
    if let Some(var_1409) = &input.additional_code_repositories {
        let mut array_1410 = object.key("AdditionalCodeRepositories").start_array();
        for item_1411 in var_1409 {
            {
                array_1410.value().string(item_1411.as_str());
            }
        }
        array_1410.finish();
    }
    if let Some(var_1412) = &input.accelerator_types {
        let mut array_1413 = object.key("AcceleratorTypes").start_array();
        for item_1414 in var_1412 {
            {
                array_1413.value().string(item_1414.as_str());
            }
        }
        array_1413.finish();
    }
    if input.disassociate_accelerator_types {
        object
            .key("DisassociateAcceleratorTypes")
            .boolean(input.disassociate_accelerator_types);
    }
    if input.disassociate_default_code_repository {
        object
            .key("DisassociateDefaultCodeRepository")
            .boolean(input.disassociate_default_code_repository);
    }
    if input.disassociate_additional_code_repositories {
        object
            .key("DisassociateAdditionalCodeRepositories")
            .boolean(input.disassociate_additional_code_repositories);
    }
    if let Some(var_1415) = &input.root_access {
        object.key("RootAccess").string(var_1415.as_str());
    }
    if let Some(var_1416) = &input.instance_metadata_service_configuration {
        let mut object_1417 = object
            .key("InstanceMetadataServiceConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_instance_metadata_service_configuration(
            &mut object_1417,
            var_1416,
        )?;
        object_1417.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_notebook_instance_lifecycle_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateNotebookInstanceLifecycleConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1418) = &input.notebook_instance_lifecycle_config_name {
        object
            .key("NotebookInstanceLifecycleConfigName")
            .string(var_1418.as_str());
    }
    if let Some(var_1419) = &input.on_create {
        let mut array_1420 = object.key("OnCreate").start_array();
        for item_1421 in var_1419 {
            {
                let mut object_1422 = array_1420.value().start_object();
                crate::json_ser::serialize_structure_crate_model_notebook_instance_lifecycle_hook(
                    &mut object_1422,
                    item_1421,
                )?;
                object_1422.finish();
            }
        }
        array_1420.finish();
    }
    if let Some(var_1423) = &input.on_start {
        let mut array_1424 = object.key("OnStart").start_array();
        for item_1425 in var_1423 {
            {
                let mut object_1426 = array_1424.value().start_object();
                crate::json_ser::serialize_structure_crate_model_notebook_instance_lifecycle_hook(
                    &mut object_1426,
                    item_1425,
                )?;
                object_1426.finish();
            }
        }
        array_1424.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_pipeline_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePipelineInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1427) = &input.pipeline_name {
        object.key("PipelineName").string(var_1427.as_str());
    }
    if let Some(var_1428) = &input.pipeline_display_name {
        object.key("PipelineDisplayName").string(var_1428.as_str());
    }
    if let Some(var_1429) = &input.pipeline_definition {
        object.key("PipelineDefinition").string(var_1429.as_str());
    }
    if let Some(var_1430) = &input.pipeline_definition_s3_location {
        let mut object_1431 = object.key("PipelineDefinitionS3Location").start_object();
        crate::json_ser::serialize_structure_crate_model_pipeline_definition_s3_location(
            &mut object_1431,
            var_1430,
        )?;
        object_1431.finish();
    }
    if let Some(var_1432) = &input.pipeline_description {
        object.key("PipelineDescription").string(var_1432.as_str());
    }
    if let Some(var_1433) = &input.role_arn {
        object.key("RoleArn").string(var_1433.as_str());
    }
    if let Some(var_1434) = &input.parallelism_configuration {
        let mut object_1435 = object.key("ParallelismConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_parallelism_configuration(
            &mut object_1435,
            var_1434,
        )?;
        object_1435.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_pipeline_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePipelineExecutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1436) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_1436.as_str());
    }
    if let Some(var_1437) = &input.pipeline_execution_description {
        object
            .key("PipelineExecutionDescription")
            .string(var_1437.as_str());
    }
    if let Some(var_1438) = &input.pipeline_execution_display_name {
        object
            .key("PipelineExecutionDisplayName")
            .string(var_1438.as_str());
    }
    if let Some(var_1439) = &input.parallelism_configuration {
        let mut object_1440 = object.key("ParallelismConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_parallelism_configuration(
            &mut object_1440,
            var_1439,
        )?;
        object_1440.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_project_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateProjectInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1441) = &input.project_name {
        object.key("ProjectName").string(var_1441.as_str());
    }
    if let Some(var_1442) = &input.project_description {
        object.key("ProjectDescription").string(var_1442.as_str());
    }
    if let Some(var_1443) = &input.service_catalog_provisioning_update_details {
        let mut object_1444 = object
            .key("ServiceCatalogProvisioningUpdateDetails")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_service_catalog_provisioning_update_details(&mut object_1444, var_1443)?;
        object_1444.finish();
    }
    if let Some(var_1445) = &input.tags {
        let mut array_1446 = object.key("Tags").start_array();
        for item_1447 in var_1445 {
            {
                let mut object_1448 = array_1446.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_1448, item_1447)?;
                object_1448.finish();
            }
        }
        array_1446.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_training_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTrainingJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1449) = &input.training_job_name {
        object.key("TrainingJobName").string(var_1449.as_str());
    }
    if let Some(var_1450) = &input.profiler_config {
        let mut object_1451 = object.key("ProfilerConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_profiler_config_for_update(
            &mut object_1451,
            var_1450,
        )?;
        object_1451.finish();
    }
    if let Some(var_1452) = &input.profiler_rule_configurations {
        let mut array_1453 = object.key("ProfilerRuleConfigurations").start_array();
        for item_1454 in var_1452 {
            {
                let mut object_1455 = array_1453.value().start_object();
                crate::json_ser::serialize_structure_crate_model_profiler_rule_configuration(
                    &mut object_1455,
                    item_1454,
                )?;
                object_1455.finish();
            }
        }
        array_1453.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_trial_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTrialInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1456) = &input.trial_name {
        object.key("TrialName").string(var_1456.as_str());
    }
    if let Some(var_1457) = &input.display_name {
        object.key("DisplayName").string(var_1457.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_trial_component_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTrialComponentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1458) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_1458.as_str());
    }
    if let Some(var_1459) = &input.display_name {
        object.key("DisplayName").string(var_1459.as_str());
    }
    if let Some(var_1460) = &input.status {
        let mut object_1461 = object.key("Status").start_object();
        crate::json_ser::serialize_structure_crate_model_trial_component_status(
            &mut object_1461,
            var_1460,
        )?;
        object_1461.finish();
    }
    if let Some(var_1462) = &input.start_time {
        object
            .key("StartTime")
            .date_time(var_1462, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1463) = &input.end_time {
        object
            .key("EndTime")
            .date_time(var_1463, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1464) = &input.parameters {
        let mut object_1465 = object.key("Parameters").start_object();
        for (key_1466, value_1467) in var_1464 {
            {
                let mut object_1468 = object_1465.key(key_1466).start_object();
                crate::json_ser::serialize_union_crate_model_trial_component_parameter_value(
                    &mut object_1468,
                    value_1467,
                )?;
                object_1468.finish();
            }
        }
        object_1465.finish();
    }
    if let Some(var_1469) = &input.parameters_to_remove {
        let mut array_1470 = object.key("ParametersToRemove").start_array();
        for item_1471 in var_1469 {
            {
                array_1470.value().string(item_1471.as_str());
            }
        }
        array_1470.finish();
    }
    if let Some(var_1472) = &input.input_artifacts {
        let mut object_1473 = object.key("InputArtifacts").start_object();
        for (key_1474, value_1475) in var_1472 {
            {
                let mut object_1476 = object_1473.key(key_1474).start_object();
                crate::json_ser::serialize_structure_crate_model_trial_component_artifact(
                    &mut object_1476,
                    value_1475,
                )?;
                object_1476.finish();
            }
        }
        object_1473.finish();
    }
    if let Some(var_1477) = &input.input_artifacts_to_remove {
        let mut array_1478 = object.key("InputArtifactsToRemove").start_array();
        for item_1479 in var_1477 {
            {
                array_1478.value().string(item_1479.as_str());
            }
        }
        array_1478.finish();
    }
    if let Some(var_1480) = &input.output_artifacts {
        let mut object_1481 = object.key("OutputArtifacts").start_object();
        for (key_1482, value_1483) in var_1480 {
            {
                let mut object_1484 = object_1481.key(key_1482).start_object();
                crate::json_ser::serialize_structure_crate_model_trial_component_artifact(
                    &mut object_1484,
                    value_1483,
                )?;
                object_1484.finish();
            }
        }
        object_1481.finish();
    }
    if let Some(var_1485) = &input.output_artifacts_to_remove {
        let mut array_1486 = object.key("OutputArtifactsToRemove").start_array();
        for item_1487 in var_1485 {
            {
                array_1486.value().string(item_1487.as_str());
            }
        }
        array_1486.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_profile_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserProfileInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1488) = &input.domain_id {
        object.key("DomainId").string(var_1488.as_str());
    }
    if let Some(var_1489) = &input.user_profile_name {
        object.key("UserProfileName").string(var_1489.as_str());
    }
    if let Some(var_1490) = &input.user_settings {
        let mut object_1491 = object.key("UserSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_user_settings(&mut object_1491, var_1490)?;
        object_1491.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_workforce_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateWorkforceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1492) = &input.workforce_name {
        object.key("WorkforceName").string(var_1492.as_str());
    }
    if let Some(var_1493) = &input.source_ip_config {
        let mut object_1494 = object.key("SourceIpConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_source_ip_config(
            &mut object_1494,
            var_1493,
        )?;
        object_1494.finish();
    }
    if let Some(var_1495) = &input.oidc_config {
        let mut object_1496 = object.key("OidcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_oidc_config(&mut object_1496, var_1495)?;
        object_1496.finish();
    }
    if let Some(var_1497) = &input.workforce_vpc_config {
        let mut object_1498 = object.key("WorkforceVpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_workforce_vpc_config_request(
            &mut object_1498,
            var_1497,
        )?;
        object_1498.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_workteam_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateWorkteamInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1499) = &input.workteam_name {
        object.key("WorkteamName").string(var_1499.as_str());
    }
    if let Some(var_1500) = &input.member_definitions {
        let mut array_1501 = object.key("MemberDefinitions").start_array();
        for item_1502 in var_1500 {
            {
                let mut object_1503 = array_1501.value().start_object();
                crate::json_ser::serialize_structure_crate_model_member_definition(
                    &mut object_1503,
                    item_1502,
                )?;
                object_1503.finish();
            }
        }
        array_1501.finish();
    }
    if let Some(var_1504) = &input.description {
        object.key("Description").string(var_1504.as_str());
    }
    if let Some(var_1505) = &input.notification_configuration {
        let mut object_1506 = object.key("NotificationConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_configuration(
            &mut object_1506,
            var_1505,
        )?;
        object_1506.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1507) = &input.key {
        object.key("Key").string(var_1507.as_str());
    }
    if let Some(var_1508) = &input.value {
        object.key("Value").string(var_1508.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_action_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ActionSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1509) = &input.source_uri {
        object.key("SourceUri").string(var_1509.as_str());
    }
    if let Some(var_1510) = &input.source_type {
        object.key("SourceType").string(var_1510.as_str());
    }
    if let Some(var_1511) = &input.source_id {
        object.key("SourceId").string(var_1511.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_metadata_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetadataProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1512) = &input.commit_id {
        object.key("CommitId").string(var_1512.as_str());
    }
    if let Some(var_1513) = &input.repository {
        object.key("Repository").string(var_1513.as_str());
    }
    if let Some(var_1514) = &input.generated_by {
        object.key("GeneratedBy").string(var_1514.as_str());
    }
    if let Some(var_1515) = &input.project_id {
        object.key("ProjectId").string(var_1515.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_training_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrainingSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1516) = &input.training_image {
        object.key("TrainingImage").string(var_1516.as_str());
    }
    if let Some(var_1517) = &input.training_image_digest {
        object.key("TrainingImageDigest").string(var_1517.as_str());
    }
    if let Some(var_1518) = &input.supported_hyper_parameters {
        let mut array_1519 = object.key("SupportedHyperParameters").start_array();
        for item_1520 in var_1518 {
            {
                let mut object_1521 = array_1519.value().start_object();
                crate::json_ser::serialize_structure_crate_model_hyper_parameter_specification(
                    &mut object_1521,
                    item_1520,
                )?;
                object_1521.finish();
            }
        }
        array_1519.finish();
    }
    if let Some(var_1522) = &input.supported_training_instance_types {
        let mut array_1523 = object.key("SupportedTrainingInstanceTypes").start_array();
        for item_1524 in var_1522 {
            {
                array_1523.value().string(item_1524.as_str());
            }
        }
        array_1523.finish();
    }
    if input.supports_distributed_training {
        object
            .key("SupportsDistributedTraining")
            .boolean(input.supports_distributed_training);
    }
    if let Some(var_1525) = &input.metric_definitions {
        let mut array_1526 = object.key("MetricDefinitions").start_array();
        for item_1527 in var_1525 {
            {
                let mut object_1528 = array_1526.value().start_object();
                crate::json_ser::serialize_structure_crate_model_metric_definition(
                    &mut object_1528,
                    item_1527,
                )?;
                object_1528.finish();
            }
        }
        array_1526.finish();
    }
    if let Some(var_1529) = &input.training_channels {
        let mut array_1530 = object.key("TrainingChannels").start_array();
        for item_1531 in var_1529 {
            {
                let mut object_1532 = array_1530.value().start_object();
                crate::json_ser::serialize_structure_crate_model_channel_specification(
                    &mut object_1532,
                    item_1531,
                )?;
                object_1532.finish();
            }
        }
        array_1530.finish();
    }
    if let Some(var_1533) = &input.supported_tuning_job_objective_metrics {
        let mut array_1534 = object
            .key("SupportedTuningJobObjectiveMetrics")
            .start_array();
        for item_1535 in var_1533 {
            {
                let mut object_1536 = array_1534.value().start_object();
                crate::json_ser::serialize_structure_crate_model_hyper_parameter_tuning_job_objective(&mut object_1536, item_1535)?;
                object_1536.finish();
            }
        }
        array_1534.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_inference_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InferenceSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1537) = &input.containers {
        let mut array_1538 = object.key("Containers").start_array();
        for item_1539 in var_1537 {
            {
                let mut object_1540 = array_1538.value().start_object();
                crate::json_ser::serialize_structure_crate_model_model_package_container_definition(&mut object_1540, item_1539)?;
                object_1540.finish();
            }
        }
        array_1538.finish();
    }
    if let Some(var_1541) = &input.supported_transform_instance_types {
        let mut array_1542 = object.key("SupportedTransformInstanceTypes").start_array();
        for item_1543 in var_1541 {
            {
                array_1542.value().string(item_1543.as_str());
            }
        }
        array_1542.finish();
    }
    if let Some(var_1544) = &input.supported_realtime_inference_instance_types {
        let mut array_1545 = object
            .key("SupportedRealtimeInferenceInstanceTypes")
            .start_array();
        for item_1546 in var_1544 {
            {
                array_1545.value().string(item_1546.as_str());
            }
        }
        array_1545.finish();
    }
    if let Some(var_1547) = &input.supported_content_types {
        let mut array_1548 = object.key("SupportedContentTypes").start_array();
        for item_1549 in var_1547 {
            {
                array_1548.value().string(item_1549.as_str());
            }
        }
        array_1548.finish();
    }
    if let Some(var_1550) = &input.supported_response_mime_types {
        let mut array_1551 = object.key("SupportedResponseMIMETypes").start_array();
        for item_1552 in var_1550 {
            {
                array_1551.value().string(item_1552.as_str());
            }
        }
        array_1551.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_algorithm_validation_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AlgorithmValidationSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1553) = &input.validation_role {
        object.key("ValidationRole").string(var_1553.as_str());
    }
    if let Some(var_1554) = &input.validation_profiles {
        let mut array_1555 = object.key("ValidationProfiles").start_array();
        for item_1556 in var_1554 {
            {
                let mut object_1557 = array_1555.value().start_object();
                crate::json_ser::serialize_structure_crate_model_algorithm_validation_profile(
                    &mut object_1557,
                    item_1556,
                )?;
                object_1557.finish();
            }
        }
        array_1555.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_spec(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceSpec,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1558) = &input.sage_maker_image_arn {
        object.key("SageMakerImageArn").string(var_1558.as_str());
    }
    if let Some(var_1559) = &input.sage_maker_image_version_arn {
        object
            .key("SageMakerImageVersionArn")
            .string(var_1559.as_str());
    }
    if let Some(var_1560) = &input.instance_type {
        object.key("InstanceType").string(var_1560.as_str());
    }
    if let Some(var_1561) = &input.lifecycle_config_arn {
        object.key("LifecycleConfigArn").string(var_1561.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kernel_gateway_image_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KernelGatewayImageConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1562) = &input.kernel_specs {
        let mut array_1563 = object.key("KernelSpecs").start_array();
        for item_1564 in var_1562 {
            {
                let mut object_1565 = array_1563.value().start_object();
                crate::json_ser::serialize_structure_crate_model_kernel_spec(
                    &mut object_1565,
                    item_1564,
                )?;
                object_1565.finish();
            }
        }
        array_1563.finish();
    }
    if let Some(var_1566) = &input.file_system_config {
        let mut object_1567 = object.key("FileSystemConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_file_system_config(
            &mut object_1567,
            var_1566,
        )?;
        object_1567.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_artifact_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ArtifactSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1568) = &input.source_uri {
        object.key("SourceUri").string(var_1568.as_str());
    }
    if let Some(var_1569) = &input.source_types {
        let mut array_1570 = object.key("SourceTypes").start_array();
        for item_1571 in var_1569 {
            {
                let mut object_1572 = array_1570.value().start_object();
                crate::json_ser::serialize_structure_crate_model_artifact_source_type(
                    &mut object_1572,
                    item_1571,
                )?;
                object_1572.finish();
            }
        }
        array_1570.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_ml_channel(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMlChannel,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1573) = &input.data_source {
        let mut object_1574 = object.key("DataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_ml_data_source(
            &mut object_1574,
            var_1573,
        )?;
        object_1574.finish();
    }
    if let Some(var_1575) = &input.compression_type {
        object.key("CompressionType").string(var_1575.as_str());
    }
    if let Some(var_1576) = &input.target_attribute_name {
        object.key("TargetAttributeName").string(var_1576.as_str());
    }
    if let Some(var_1577) = &input.content_type {
        object.key("ContentType").string(var_1577.as_str());
    }
    if let Some(var_1578) = &input.channel_type {
        object.key("ChannelType").string(var_1578.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_ml_output_data_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMlOutputDataConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1579) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1579.as_str());
    }
    if let Some(var_1580) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1580.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_ml_job_objective(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMlJobObjective,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1581) = &input.metric_name {
        object.key("MetricName").string(var_1581.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_ml_job_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMlJobConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1582) = &input.completion_criteria {
        let mut object_1583 = object.key("CompletionCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_ml_job_completion_criteria(
            &mut object_1583,
            var_1582,
        )?;
        object_1583.finish();
    }
    if let Some(var_1584) = &input.security_config {
        let mut object_1585 = object.key("SecurityConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_ml_security_config(
            &mut object_1585,
            var_1584,
        )?;
        object_1585.finish();
    }
    if let Some(var_1586) = &input.data_split_config {
        let mut object_1587 = object.key("DataSplitConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_ml_data_split_config(
            &mut object_1587,
            var_1586,
        )?;
        object_1587.finish();
    }
    if let Some(var_1588) = &input.candidate_generation_config {
        let mut object_1589 = object.key("CandidateGenerationConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_ml_candidate_generation_config(
            &mut object_1589,
            var_1588,
        )?;
        object_1589.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_deploy_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelDeployConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.auto_generate_endpoint_name {
        object
            .key("AutoGenerateEndpointName")
            .boolean(input.auto_generate_endpoint_name);
    }
    if let Some(var_1590) = &input.endpoint_name {
        object.key("EndpointName").string(var_1590.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_git_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GitConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1591) = &input.repository_url {
        object.key("RepositoryUrl").string(var_1591.as_str());
    }
    if let Some(var_1592) = &input.branch {
        object.key("Branch").string(var_1592.as_str());
    }
    if let Some(var_1593) = &input.secret_arn {
        object.key("SecretArn").string(var_1593.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_input_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1594) = &input.s3_uri {
        object.key("S3Uri").string(var_1594.as_str());
    }
    if let Some(var_1595) = &input.data_input_config {
        object.key("DataInputConfig").string(var_1595.as_str());
    }
    if let Some(var_1596) = &input.framework {
        object.key("Framework").string(var_1596.as_str());
    }
    if let Some(var_1597) = &input.framework_version {
        object.key("FrameworkVersion").string(var_1597.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_output_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OutputConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1598) = &input.s3_output_location {
        object.key("S3OutputLocation").string(var_1598.as_str());
    }
    if let Some(var_1599) = &input.target_device {
        object.key("TargetDevice").string(var_1599.as_str());
    }
    if let Some(var_1600) = &input.target_platform {
        let mut object_1601 = object.key("TargetPlatform").start_object();
        crate::json_ser::serialize_structure_crate_model_target_platform(
            &mut object_1601,
            var_1600,
        )?;
        object_1601.finish();
    }
    if let Some(var_1602) = &input.compiler_options {
        object.key("CompilerOptions").string(var_1602.as_str());
    }
    if let Some(var_1603) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1603.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_neo_vpc_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NeoVpcConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1604) = &input.security_group_ids {
        let mut array_1605 = object.key("SecurityGroupIds").start_array();
        for item_1606 in var_1604 {
            {
                array_1605.value().string(item_1606.as_str());
            }
        }
        array_1605.finish();
    }
    if let Some(var_1607) = &input.subnets {
        let mut array_1608 = object.key("Subnets").start_array();
        for item_1609 in var_1607 {
            {
                array_1608.value().string(item_1609.as_str());
            }
        }
        array_1608.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stopping_condition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StoppingCondition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.max_runtime_in_seconds != 0 {
        object.key("MaxRuntimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_runtime_in_seconds).into()),
        );
    }
    if let Some(var_1610) = &input.max_wait_time_in_seconds {
        object.key("MaxWaitTimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1610).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_context_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContextSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1611) = &input.source_uri {
        object.key("SourceUri").string(var_1611.as_str());
    }
    if let Some(var_1612) = &input.source_type {
        object.key("SourceType").string(var_1612.as_str());
    }
    if let Some(var_1613) = &input.source_id {
        object.key("SourceId").string(var_1613.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_quality_baseline_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataQualityBaselineConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1614) = &input.baselining_job_name {
        object.key("BaseliningJobName").string(var_1614.as_str());
    }
    if let Some(var_1615) = &input.constraints_resource {
        let mut object_1616 = object.key("ConstraintsResource").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_constraints_resource(
            &mut object_1616,
            var_1615,
        )?;
        object_1616.finish();
    }
    if let Some(var_1617) = &input.statistics_resource {
        let mut object_1618 = object.key("StatisticsResource").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_statistics_resource(
            &mut object_1618,
            var_1617,
        )?;
        object_1618.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_quality_app_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataQualityAppSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1619) = &input.image_uri {
        object.key("ImageUri").string(var_1619.as_str());
    }
    if let Some(var_1620) = &input.container_entrypoint {
        let mut array_1621 = object.key("ContainerEntrypoint").start_array();
        for item_1622 in var_1620 {
            {
                array_1621.value().string(item_1622.as_str());
            }
        }
        array_1621.finish();
    }
    if let Some(var_1623) = &input.container_arguments {
        let mut array_1624 = object.key("ContainerArguments").start_array();
        for item_1625 in var_1623 {
            {
                array_1624.value().string(item_1625.as_str());
            }
        }
        array_1624.finish();
    }
    if let Some(var_1626) = &input.record_preprocessor_source_uri {
        object
            .key("RecordPreprocessorSourceUri")
            .string(var_1626.as_str());
    }
    if let Some(var_1627) = &input.post_analytics_processor_source_uri {
        object
            .key("PostAnalyticsProcessorSourceUri")
            .string(var_1627.as_str());
    }
    if let Some(var_1628) = &input.environment {
        let mut object_1629 = object.key("Environment").start_object();
        for (key_1630, value_1631) in var_1628 {
            {
                object_1629.key(key_1630).string(value_1631.as_str());
            }
        }
        object_1629.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_quality_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataQualityJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1632) = &input.endpoint_input {
        let mut object_1633 = object.key("EndpointInput").start_object();
        crate::json_ser::serialize_structure_crate_model_endpoint_input(
            &mut object_1633,
            var_1632,
        )?;
        object_1633.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_output_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringOutputConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1634) = &input.monitoring_outputs {
        let mut array_1635 = object.key("MonitoringOutputs").start_array();
        for item_1636 in var_1634 {
            {
                let mut object_1637 = array_1635.value().start_object();
                crate::json_ser::serialize_structure_crate_model_monitoring_output(
                    &mut object_1637,
                    item_1636,
                )?;
                object_1637.finish();
            }
        }
        array_1635.finish();
    }
    if let Some(var_1638) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1638.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_resources(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringResources,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1639) = &input.cluster_config {
        let mut object_1640 = object.key("ClusterConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_cluster_config(
            &mut object_1640,
            var_1639,
        )?;
        object_1640.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_network_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringNetworkConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enable_inter_container_traffic_encryption {
        object
            .key("EnableInterContainerTrafficEncryption")
            .boolean(input.enable_inter_container_traffic_encryption);
    }
    if input.enable_network_isolation {
        object
            .key("EnableNetworkIsolation")
            .boolean(input.enable_network_isolation);
    }
    if let Some(var_1641) = &input.vpc_config {
        let mut object_1642 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config(&mut object_1642, var_1641)?;
        object_1642.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_stopping_condition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringStoppingCondition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("MaxRuntimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_runtime_in_seconds).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_edge_output_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EdgeOutputConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1643) = &input.s3_output_location {
        object.key("S3OutputLocation").string(var_1643.as_str());
    }
    if let Some(var_1644) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1644.as_str());
    }
    if let Some(var_1645) = &input.preset_deployment_type {
        object.key("PresetDeploymentType").string(var_1645.as_str());
    }
    if let Some(var_1646) = &input.preset_deployment_config {
        object
            .key("PresetDeploymentConfig")
            .string(var_1646.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1647) = &input.execution_role {
        object.key("ExecutionRole").string(var_1647.as_str());
    }
    if let Some(var_1648) = &input.security_groups {
        let mut array_1649 = object.key("SecurityGroups").start_array();
        for item_1650 in var_1648 {
            {
                array_1649.value().string(item_1650.as_str());
            }
        }
        array_1649.finish();
    }
    if let Some(var_1651) = &input.sharing_settings {
        let mut object_1652 = object.key("SharingSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_sharing_settings(
            &mut object_1652,
            var_1651,
        )?;
        object_1652.finish();
    }
    if let Some(var_1653) = &input.jupyter_server_app_settings {
        let mut object_1654 = object.key("JupyterServerAppSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_jupyter_server_app_settings(
            &mut object_1654,
            var_1653,
        )?;
        object_1654.finish();
    }
    if let Some(var_1655) = &input.kernel_gateway_app_settings {
        let mut object_1656 = object.key("KernelGatewayAppSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_kernel_gateway_app_settings(
            &mut object_1656,
            var_1655,
        )?;
        object_1656.finish();
    }
    if let Some(var_1657) = &input.tensor_board_app_settings {
        let mut object_1658 = object.key("TensorBoardAppSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_tensor_board_app_settings(
            &mut object_1658,
            var_1657,
        )?;
        object_1658.finish();
    }
    if let Some(var_1659) = &input.r_studio_server_pro_app_settings {
        let mut object_1660 = object.key("RStudioServerProAppSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_r_studio_server_pro_app_settings(
            &mut object_1660,
            var_1659,
        )?;
        object_1660.finish();
    }
    if let Some(var_1661) = &input.r_session_app_settings {
        let mut object_1662 = object.key("RSessionAppSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_r_session_app_settings(
            &mut object_1662,
            var_1661,
        )?;
        object_1662.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_domain_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DomainSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1663) = &input.security_group_ids {
        let mut array_1664 = object.key("SecurityGroupIds").start_array();
        for item_1665 in var_1663 {
            {
                array_1664.value().string(item_1665.as_str());
            }
        }
        array_1664.finish();
    }
    if let Some(var_1666) = &input.r_studio_server_pro_domain_settings {
        let mut object_1667 = object.key("RStudioServerProDomainSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_r_studio_server_pro_domain_settings(
            &mut object_1667,
            var_1666,
        )?;
        object_1667.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_deployment_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeploymentConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1668) = &input.blue_green_update_policy {
        let mut object_1669 = object.key("BlueGreenUpdatePolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_blue_green_update_policy(
            &mut object_1669,
            var_1668,
        )?;
        object_1669.finish();
    }
    if let Some(var_1670) = &input.auto_rollback_configuration {
        let mut object_1671 = object.key("AutoRollbackConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_rollback_config(
            &mut object_1671,
            var_1670,
        )?;
        object_1671.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_production_variant(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProductionVariant,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1672) = &input.variant_name {
        object.key("VariantName").string(var_1672.as_str());
    }
    if let Some(var_1673) = &input.model_name {
        object.key("ModelName").string(var_1673.as_str());
    }
    if let Some(var_1674) = &input.initial_instance_count {
        object.key("InitialInstanceCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1674).into()),
        );
    }
    if let Some(var_1675) = &input.instance_type {
        object.key("InstanceType").string(var_1675.as_str());
    }
    if let Some(var_1676) = &input.initial_variant_weight {
        object.key("InitialVariantWeight").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1676).into()),
        );
    }
    if let Some(var_1677) = &input.accelerator_type {
        object.key("AcceleratorType").string(var_1677.as_str());
    }
    if let Some(var_1678) = &input.core_dump_config {
        let mut object_1679 = object.key("CoreDumpConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_production_variant_core_dump_config(
            &mut object_1679,
            var_1678,
        )?;
        object_1679.finish();
    }
    if let Some(var_1680) = &input.serverless_config {
        let mut object_1681 = object.key("ServerlessConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_production_variant_serverless_config(
            &mut object_1681,
            var_1680,
        )?;
        object_1681.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_capture_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataCaptureConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enable_capture {
        object.key("EnableCapture").boolean(input.enable_capture);
    }
    if let Some(var_1682) = &input.initial_sampling_percentage {
        object.key("InitialSamplingPercentage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1682).into()),
        );
    }
    if let Some(var_1683) = &input.destination_s3_uri {
        object.key("DestinationS3Uri").string(var_1683.as_str());
    }
    if let Some(var_1684) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1684.as_str());
    }
    if let Some(var_1685) = &input.capture_options {
        let mut array_1686 = object.key("CaptureOptions").start_array();
        for item_1687 in var_1685 {
            {
                let mut object_1688 = array_1686.value().start_object();
                crate::json_ser::serialize_structure_crate_model_capture_option(
                    &mut object_1688,
                    item_1687,
                )?;
                object_1688.finish();
            }
        }
        array_1686.finish();
    }
    if let Some(var_1689) = &input.capture_content_type_header {
        let mut object_1690 = object.key("CaptureContentTypeHeader").start_object();
        crate::json_ser::serialize_structure_crate_model_capture_content_type_header(
            &mut object_1690,
            var_1689,
        )?;
        object_1690.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_async_inference_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AsyncInferenceConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1691) = &input.client_config {
        let mut object_1692 = object.key("ClientConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_async_inference_client_config(
            &mut object_1692,
            var_1691,
        )?;
        object_1692.finish();
    }
    if let Some(var_1693) = &input.output_config {
        let mut object_1694 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_async_inference_output_config(
            &mut object_1694,
            var_1693,
        )?;
        object_1694.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_feature_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FeatureDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1695) = &input.feature_name {
        object.key("FeatureName").string(var_1695.as_str());
    }
    if let Some(var_1696) = &input.feature_type {
        object.key("FeatureType").string(var_1696.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_online_store_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OnlineStoreConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1697) = &input.security_config {
        let mut object_1698 = object.key("SecurityConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_online_store_security_config(
            &mut object_1698,
            var_1697,
        )?;
        object_1698.finish();
    }
    if input.enable_online_store {
        object
            .key("EnableOnlineStore")
            .boolean(input.enable_online_store);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_offline_store_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OfflineStoreConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1699) = &input.s3_storage_config {
        let mut object_1700 = object.key("S3StorageConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_storage_config(
            &mut object_1700,
            var_1699,
        )?;
        object_1700.finish();
    }
    if input.disable_glue_table_creation {
        object
            .key("DisableGlueTableCreation")
            .boolean(input.disable_glue_table_creation);
    }
    if let Some(var_1701) = &input.data_catalog_config {
        let mut object_1702 = object.key("DataCatalogConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_data_catalog_config(
            &mut object_1702,
            var_1701,
        )?;
        object_1702.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_human_loop_request_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HumanLoopRequestSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1703) = &input.aws_managed_human_loop_request_source {
        object
            .key("AwsManagedHumanLoopRequestSource")
            .string(var_1703.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_human_loop_activation_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HumanLoopActivationConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1704) = &input.human_loop_activation_conditions_config {
        let mut object_1705 = object
            .key("HumanLoopActivationConditionsConfig")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_human_loop_activation_conditions_config(
            &mut object_1705,
            var_1704,
        )?;
        object_1705.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_human_loop_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HumanLoopConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1706) = &input.workteam_arn {
        object.key("WorkteamArn").string(var_1706.as_str());
    }
    if let Some(var_1707) = &input.human_task_ui_arn {
        object.key("HumanTaskUiArn").string(var_1707.as_str());
    }
    if let Some(var_1708) = &input.task_title {
        object.key("TaskTitle").string(var_1708.as_str());
    }
    if let Some(var_1709) = &input.task_description {
        object.key("TaskDescription").string(var_1709.as_str());
    }
    if let Some(var_1710) = &input.task_count {
        object.key("TaskCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1710).into()),
        );
    }
    if let Some(var_1711) = &input.task_availability_lifetime_in_seconds {
        object.key("TaskAvailabilityLifetimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1711).into()),
        );
    }
    if let Some(var_1712) = &input.task_time_limit_in_seconds {
        object.key("TaskTimeLimitInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1712).into()),
        );
    }
    if let Some(var_1713) = &input.task_keywords {
        let mut array_1714 = object.key("TaskKeywords").start_array();
        for item_1715 in var_1713 {
            {
                array_1714.value().string(item_1715.as_str());
            }
        }
        array_1714.finish();
    }
    if let Some(var_1716) = &input.public_workforce_task_price {
        let mut object_1717 = object.key("PublicWorkforceTaskPrice").start_object();
        crate::json_ser::serialize_structure_crate_model_public_workforce_task_price(
            &mut object_1717,
            var_1716,
        )?;
        object_1717.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_flow_definition_output_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FlowDefinitionOutputConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1718) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1718.as_str());
    }
    if let Some(var_1719) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1719.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ui_template(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UiTemplate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1720) = &input.content {
        object.key("Content").string(var_1720.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hyper_parameter_tuning_job_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterTuningJobConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1721) = &input.strategy {
        object.key("Strategy").string(var_1721.as_str());
    }
    if let Some(var_1722) = &input.hyper_parameter_tuning_job_objective {
        let mut object_1723 = object
            .key("HyperParameterTuningJobObjective")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_hyper_parameter_tuning_job_objective(
            &mut object_1723,
            var_1722,
        )?;
        object_1723.finish();
    }
    if let Some(var_1724) = &input.resource_limits {
        let mut object_1725 = object.key("ResourceLimits").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_limits(
            &mut object_1725,
            var_1724,
        )?;
        object_1725.finish();
    }
    if let Some(var_1726) = &input.parameter_ranges {
        let mut object_1727 = object.key("ParameterRanges").start_object();
        crate::json_ser::serialize_structure_crate_model_parameter_ranges(
            &mut object_1727,
            var_1726,
        )?;
        object_1727.finish();
    }
    if let Some(var_1728) = &input.training_job_early_stopping_type {
        object
            .key("TrainingJobEarlyStoppingType")
            .string(var_1728.as_str());
    }
    if let Some(var_1729) = &input.tuning_job_completion_criteria {
        let mut object_1730 = object.key("TuningJobCompletionCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_tuning_job_completion_criteria(
            &mut object_1730,
            var_1729,
        )?;
        object_1730.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hyper_parameter_training_job_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterTrainingJobDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1731) = &input.definition_name {
        object.key("DefinitionName").string(var_1731.as_str());
    }
    if let Some(var_1732) = &input.tuning_objective {
        let mut object_1733 = object.key("TuningObjective").start_object();
        crate::json_ser::serialize_structure_crate_model_hyper_parameter_tuning_job_objective(
            &mut object_1733,
            var_1732,
        )?;
        object_1733.finish();
    }
    if let Some(var_1734) = &input.hyper_parameter_ranges {
        let mut object_1735 = object.key("HyperParameterRanges").start_object();
        crate::json_ser::serialize_structure_crate_model_parameter_ranges(
            &mut object_1735,
            var_1734,
        )?;
        object_1735.finish();
    }
    if let Some(var_1736) = &input.static_hyper_parameters {
        let mut object_1737 = object.key("StaticHyperParameters").start_object();
        for (key_1738, value_1739) in var_1736 {
            {
                object_1737.key(key_1738).string(value_1739.as_str());
            }
        }
        object_1737.finish();
    }
    if let Some(var_1740) = &input.algorithm_specification {
        let mut object_1741 = object.key("AlgorithmSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_hyper_parameter_algorithm_specification(
            &mut object_1741,
            var_1740,
        )?;
        object_1741.finish();
    }
    if let Some(var_1742) = &input.role_arn {
        object.key("RoleArn").string(var_1742.as_str());
    }
    if let Some(var_1743) = &input.input_data_config {
        let mut array_1744 = object.key("InputDataConfig").start_array();
        for item_1745 in var_1743 {
            {
                let mut object_1746 = array_1744.value().start_object();
                crate::json_ser::serialize_structure_crate_model_channel(
                    &mut object_1746,
                    item_1745,
                )?;
                object_1746.finish();
            }
        }
        array_1744.finish();
    }
    if let Some(var_1747) = &input.vpc_config {
        let mut object_1748 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config(&mut object_1748, var_1747)?;
        object_1748.finish();
    }
    if let Some(var_1749) = &input.output_data_config {
        let mut object_1750 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_output_data_config(
            &mut object_1750,
            var_1749,
        )?;
        object_1750.finish();
    }
    if let Some(var_1751) = &input.resource_config {
        let mut object_1752 = object.key("ResourceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_config(
            &mut object_1752,
            var_1751,
        )?;
        object_1752.finish();
    }
    if let Some(var_1753) = &input.stopping_condition {
        let mut object_1754 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_stopping_condition(
            &mut object_1754,
            var_1753,
        )?;
        object_1754.finish();
    }
    if input.enable_network_isolation {
        object
            .key("EnableNetworkIsolation")
            .boolean(input.enable_network_isolation);
    }
    if input.enable_inter_container_traffic_encryption {
        object
            .key("EnableInterContainerTrafficEncryption")
            .boolean(input.enable_inter_container_traffic_encryption);
    }
    if input.enable_managed_spot_training {
        object
            .key("EnableManagedSpotTraining")
            .boolean(input.enable_managed_spot_training);
    }
    if let Some(var_1755) = &input.checkpoint_config {
        let mut object_1756 = object.key("CheckpointConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_checkpoint_config(
            &mut object_1756,
            var_1755,
        )?;
        object_1756.finish();
    }
    if let Some(var_1757) = &input.retry_strategy {
        let mut object_1758 = object.key("RetryStrategy").start_object();
        crate::json_ser::serialize_structure_crate_model_retry_strategy(
            &mut object_1758,
            var_1757,
        )?;
        object_1758.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hyper_parameter_tuning_job_warm_start_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterTuningJobWarmStartConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1759) = &input.parent_hyper_parameter_tuning_jobs {
        let mut array_1760 = object.key("ParentHyperParameterTuningJobs").start_array();
        for item_1761 in var_1759 {
            {
                let mut object_1762 = array_1760.value().start_object();
                crate::json_ser::serialize_structure_crate_model_parent_hyper_parameter_tuning_job(
                    &mut object_1762,
                    item_1761,
                )?;
                object_1762.finish();
            }
        }
        array_1760.finish();
    }
    if let Some(var_1763) = &input.warm_start_type {
        object.key("WarmStartType").string(var_1763.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_recommendation_job_input_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RecommendationJobInputConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1764) = &input.model_package_version_arn {
        object
            .key("ModelPackageVersionArn")
            .string(var_1764.as_str());
    }
    if let Some(var_1765) = &input.job_duration_in_seconds {
        object.key("JobDurationInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1765).into()),
        );
    }
    if let Some(var_1766) = &input.traffic_pattern {
        let mut object_1767 = object.key("TrafficPattern").start_object();
        crate::json_ser::serialize_structure_crate_model_traffic_pattern(
            &mut object_1767,
            var_1766,
        )?;
        object_1767.finish();
    }
    if let Some(var_1768) = &input.resource_limit {
        let mut object_1769 = object.key("ResourceLimit").start_object();
        crate::json_ser::serialize_structure_crate_model_recommendation_job_resource_limit(
            &mut object_1769,
            var_1768,
        )?;
        object_1769.finish();
    }
    if let Some(var_1770) = &input.endpoint_configurations {
        let mut array_1771 = object.key("EndpointConfigurations").start_array();
        for item_1772 in var_1770 {
            {
                let mut object_1773 = array_1771.value().start_object();
                crate::json_ser::serialize_structure_crate_model_endpoint_input_configuration(
                    &mut object_1773,
                    item_1772,
                )?;
                object_1773.finish();
            }
        }
        array_1771.finish();
    }
    if let Some(var_1774) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_1774.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_recommendation_job_stopping_conditions(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RecommendationJobStoppingConditions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.max_invocations != 0 {
        object.key("MaxInvocations").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_invocations).into()),
        );
    }
    if let Some(var_1775) = &input.model_latency_thresholds {
        let mut array_1776 = object.key("ModelLatencyThresholds").start_array();
        for item_1777 in var_1775 {
            {
                let mut object_1778 = array_1776.value().start_object();
                crate::json_ser::serialize_structure_crate_model_model_latency_threshold(
                    &mut object_1778,
                    item_1777,
                )?;
                object_1778.finish();
            }
        }
        array_1776.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_recommendation_job_output_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RecommendationJobOutputConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1779) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1779.as_str());
    }
    if let Some(var_1780) = &input.compiled_output_config {
        let mut object_1781 = object.key("CompiledOutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_recommendation_job_compiled_output_config(
            &mut object_1781,
            var_1780,
        )?;
        object_1781.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_labeling_job_input_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobInputConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1782) = &input.data_source {
        let mut object_1783 = object.key("DataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_labeling_job_data_source(
            &mut object_1783,
            var_1782,
        )?;
        object_1783.finish();
    }
    if let Some(var_1784) = &input.data_attributes {
        let mut object_1785 = object.key("DataAttributes").start_object();
        crate::json_ser::serialize_structure_crate_model_labeling_job_data_attributes(
            &mut object_1785,
            var_1784,
        )?;
        object_1785.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_labeling_job_output_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobOutputConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1786) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1786.as_str());
    }
    if let Some(var_1787) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1787.as_str());
    }
    if let Some(var_1788) = &input.sns_topic_arn {
        object.key("SnsTopicArn").string(var_1788.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_labeling_job_stopping_conditions(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobStoppingConditions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1789) = &input.max_human_labeled_object_count {
        object.key("MaxHumanLabeledObjectCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1789).into()),
        );
    }
    if let Some(var_1790) = &input.max_percentage_of_input_dataset_labeled {
        object.key("MaxPercentageOfInputDatasetLabeled").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1790).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_labeling_job_algorithms_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobAlgorithmsConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1791) = &input.labeling_job_algorithm_specification_arn {
        object
            .key("LabelingJobAlgorithmSpecificationArn")
            .string(var_1791.as_str());
    }
    if let Some(var_1792) = &input.initial_active_learning_model_arn {
        object
            .key("InitialActiveLearningModelArn")
            .string(var_1792.as_str());
    }
    if let Some(var_1793) = &input.labeling_job_resource_config {
        let mut object_1794 = object.key("LabelingJobResourceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_labeling_job_resource_config(
            &mut object_1794,
            var_1793,
        )?;
        object_1794.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_human_task_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HumanTaskConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1795) = &input.workteam_arn {
        object.key("WorkteamArn").string(var_1795.as_str());
    }
    if let Some(var_1796) = &input.ui_config {
        let mut object_1797 = object.key("UiConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_ui_config(&mut object_1797, var_1796)?;
        object_1797.finish();
    }
    if let Some(var_1798) = &input.pre_human_task_lambda_arn {
        object
            .key("PreHumanTaskLambdaArn")
            .string(var_1798.as_str());
    }
    if let Some(var_1799) = &input.task_keywords {
        let mut array_1800 = object.key("TaskKeywords").start_array();
        for item_1801 in var_1799 {
            {
                array_1800.value().string(item_1801.as_str());
            }
        }
        array_1800.finish();
    }
    if let Some(var_1802) = &input.task_title {
        object.key("TaskTitle").string(var_1802.as_str());
    }
    if let Some(var_1803) = &input.task_description {
        object.key("TaskDescription").string(var_1803.as_str());
    }
    if let Some(var_1804) = &input.number_of_human_workers_per_data_object {
        object.key("NumberOfHumanWorkersPerDataObject").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1804).into()),
        );
    }
    if let Some(var_1805) = &input.task_time_limit_in_seconds {
        object.key("TaskTimeLimitInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1805).into()),
        );
    }
    if let Some(var_1806) = &input.task_availability_lifetime_in_seconds {
        object.key("TaskAvailabilityLifetimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1806).into()),
        );
    }
    if let Some(var_1807) = &input.max_concurrent_task_count {
        object.key("MaxConcurrentTaskCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1807).into()),
        );
    }
    if let Some(var_1808) = &input.annotation_consolidation_config {
        let mut object_1809 = object.key("AnnotationConsolidationConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_annotation_consolidation_config(
            &mut object_1809,
            var_1808,
        )?;
        object_1809.finish();
    }
    if let Some(var_1810) = &input.public_workforce_task_price {
        let mut object_1811 = object.key("PublicWorkforceTaskPrice").start_object();
        crate::json_ser::serialize_structure_crate_model_public_workforce_task_price(
            &mut object_1811,
            var_1810,
        )?;
        object_1811.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_container_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContainerDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1812) = &input.container_hostname {
        object.key("ContainerHostname").string(var_1812.as_str());
    }
    if let Some(var_1813) = &input.image {
        object.key("Image").string(var_1813.as_str());
    }
    if let Some(var_1814) = &input.image_config {
        let mut object_1815 = object.key("ImageConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_image_config(&mut object_1815, var_1814)?;
        object_1815.finish();
    }
    if let Some(var_1816) = &input.mode {
        object.key("Mode").string(var_1816.as_str());
    }
    if let Some(var_1817) = &input.model_data_url {
        object.key("ModelDataUrl").string(var_1817.as_str());
    }
    if let Some(var_1818) = &input.environment {
        let mut object_1819 = object.key("Environment").start_object();
        for (key_1820, value_1821) in var_1818 {
            {
                object_1819.key(key_1820).string(value_1821.as_str());
            }
        }
        object_1819.finish();
    }
    if let Some(var_1822) = &input.model_package_name {
        object.key("ModelPackageName").string(var_1822.as_str());
    }
    if let Some(var_1823) = &input.inference_specification_name {
        object
            .key("InferenceSpecificationName")
            .string(var_1823.as_str());
    }
    if let Some(var_1824) = &input.multi_model_config {
        let mut object_1825 = object.key("MultiModelConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_multi_model_config(
            &mut object_1825,
            var_1824,
        )?;
        object_1825.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_inference_execution_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InferenceExecutionConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1826) = &input.mode {
        object.key("Mode").string(var_1826.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_vpc_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VpcConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1827) = &input.security_group_ids {
        let mut array_1828 = object.key("SecurityGroupIds").start_array();
        for item_1829 in var_1827 {
            {
                array_1828.value().string(item_1829.as_str());
            }
        }
        array_1828.finish();
    }
    if let Some(var_1830) = &input.subnets {
        let mut array_1831 = object.key("Subnets").start_array();
        for item_1832 in var_1830 {
            {
                array_1831.value().string(item_1832.as_str());
            }
        }
        array_1831.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_bias_baseline_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelBiasBaselineConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1833) = &input.baselining_job_name {
        object.key("BaseliningJobName").string(var_1833.as_str());
    }
    if let Some(var_1834) = &input.constraints_resource {
        let mut object_1835 = object.key("ConstraintsResource").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_constraints_resource(
            &mut object_1835,
            var_1834,
        )?;
        object_1835.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_bias_app_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelBiasAppSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1836) = &input.image_uri {
        object.key("ImageUri").string(var_1836.as_str());
    }
    if let Some(var_1837) = &input.config_uri {
        object.key("ConfigUri").string(var_1837.as_str());
    }
    if let Some(var_1838) = &input.environment {
        let mut object_1839 = object.key("Environment").start_object();
        for (key_1840, value_1841) in var_1838 {
            {
                object_1839.key(key_1840).string(value_1841.as_str());
            }
        }
        object_1839.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_bias_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelBiasJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1842) = &input.endpoint_input {
        let mut object_1843 = object.key("EndpointInput").start_object();
        crate::json_ser::serialize_structure_crate_model_endpoint_input(
            &mut object_1843,
            var_1842,
        )?;
        object_1843.finish();
    }
    if let Some(var_1844) = &input.ground_truth_s3_input {
        let mut object_1845 = object.key("GroundTruthS3Input").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_ground_truth_s3_input(
            &mut object_1845,
            var_1844,
        )?;
        object_1845.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_explainability_baseline_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelExplainabilityBaselineConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1846) = &input.baselining_job_name {
        object.key("BaseliningJobName").string(var_1846.as_str());
    }
    if let Some(var_1847) = &input.constraints_resource {
        let mut object_1848 = object.key("ConstraintsResource").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_constraints_resource(
            &mut object_1848,
            var_1847,
        )?;
        object_1848.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_explainability_app_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelExplainabilityAppSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1849) = &input.image_uri {
        object.key("ImageUri").string(var_1849.as_str());
    }
    if let Some(var_1850) = &input.config_uri {
        object.key("ConfigUri").string(var_1850.as_str());
    }
    if let Some(var_1851) = &input.environment {
        let mut object_1852 = object.key("Environment").start_object();
        for (key_1853, value_1854) in var_1851 {
            {
                object_1852.key(key_1853).string(value_1854.as_str());
            }
        }
        object_1852.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_explainability_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelExplainabilityJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1855) = &input.endpoint_input {
        let mut object_1856 = object.key("EndpointInput").start_object();
        crate::json_ser::serialize_structure_crate_model_endpoint_input(
            &mut object_1856,
            var_1855,
        )?;
        object_1856.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_package_validation_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelPackageValidationSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1857) = &input.validation_role {
        object.key("ValidationRole").string(var_1857.as_str());
    }
    if let Some(var_1858) = &input.validation_profiles {
        let mut array_1859 = object.key("ValidationProfiles").start_array();
        for item_1860 in var_1858 {
            {
                let mut object_1861 = array_1859.value().start_object();
                crate::json_ser::serialize_structure_crate_model_model_package_validation_profile(
                    &mut object_1861,
                    item_1860,
                )?;
                object_1861.finish();
            }
        }
        array_1859.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_source_algorithm_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SourceAlgorithmSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1862) = &input.source_algorithms {
        let mut array_1863 = object.key("SourceAlgorithms").start_array();
        for item_1864 in var_1862 {
            {
                let mut object_1865 = array_1863.value().start_object();
                crate::json_ser::serialize_structure_crate_model_source_algorithm(
                    &mut object_1865,
                    item_1864,
                )?;
                object_1865.finish();
            }
        }
        array_1863.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_metrics(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelMetrics,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1866) = &input.model_quality {
        let mut object_1867 = object.key("ModelQuality").start_object();
        crate::json_ser::serialize_structure_crate_model_model_quality(&mut object_1867, var_1866)?;
        object_1867.finish();
    }
    if let Some(var_1868) = &input.model_data_quality {
        let mut object_1869 = object.key("ModelDataQuality").start_object();
        crate::json_ser::serialize_structure_crate_model_model_data_quality(
            &mut object_1869,
            var_1868,
        )?;
        object_1869.finish();
    }
    if let Some(var_1870) = &input.bias {
        let mut object_1871 = object.key("Bias").start_object();
        crate::json_ser::serialize_structure_crate_model_bias(&mut object_1871, var_1870)?;
        object_1871.finish();
    }
    if let Some(var_1872) = &input.explainability {
        let mut object_1873 = object.key("Explainability").start_object();
        crate::json_ser::serialize_structure_crate_model_explainability(
            &mut object_1873,
            var_1872,
        )?;
        object_1873.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_drift_check_baselines(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DriftCheckBaselines,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1874) = &input.bias {
        let mut object_1875 = object.key("Bias").start_object();
        crate::json_ser::serialize_structure_crate_model_drift_check_bias(
            &mut object_1875,
            var_1874,
        )?;
        object_1875.finish();
    }
    if let Some(var_1876) = &input.explainability {
        let mut object_1877 = object.key("Explainability").start_object();
        crate::json_ser::serialize_structure_crate_model_drift_check_explainability(
            &mut object_1877,
            var_1876,
        )?;
        object_1877.finish();
    }
    if let Some(var_1878) = &input.model_quality {
        let mut object_1879 = object.key("ModelQuality").start_object();
        crate::json_ser::serialize_structure_crate_model_drift_check_model_quality(
            &mut object_1879,
            var_1878,
        )?;
        object_1879.finish();
    }
    if let Some(var_1880) = &input.model_data_quality {
        let mut object_1881 = object.key("ModelDataQuality").start_object();
        crate::json_ser::serialize_structure_crate_model_drift_check_model_data_quality(
            &mut object_1881,
            var_1880,
        )?;
        object_1881.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_additional_inference_specification_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AdditionalInferenceSpecificationDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1882) = &input.name {
        object.key("Name").string(var_1882.as_str());
    }
    if let Some(var_1883) = &input.description {
        object.key("Description").string(var_1883.as_str());
    }
    if let Some(var_1884) = &input.containers {
        let mut array_1885 = object.key("Containers").start_array();
        for item_1886 in var_1884 {
            {
                let mut object_1887 = array_1885.value().start_object();
                crate::json_ser::serialize_structure_crate_model_model_package_container_definition(&mut object_1887, item_1886)?;
                object_1887.finish();
            }
        }
        array_1885.finish();
    }
    if let Some(var_1888) = &input.supported_transform_instance_types {
        let mut array_1889 = object.key("SupportedTransformInstanceTypes").start_array();
        for item_1890 in var_1888 {
            {
                array_1889.value().string(item_1890.as_str());
            }
        }
        array_1889.finish();
    }
    if let Some(var_1891) = &input.supported_realtime_inference_instance_types {
        let mut array_1892 = object
            .key("SupportedRealtimeInferenceInstanceTypes")
            .start_array();
        for item_1893 in var_1891 {
            {
                array_1892.value().string(item_1893.as_str());
            }
        }
        array_1892.finish();
    }
    if let Some(var_1894) = &input.supported_content_types {
        let mut array_1895 = object.key("SupportedContentTypes").start_array();
        for item_1896 in var_1894 {
            {
                array_1895.value().string(item_1896.as_str());
            }
        }
        array_1895.finish();
    }
    if let Some(var_1897) = &input.supported_response_mime_types {
        let mut array_1898 = object.key("SupportedResponseMIMETypes").start_array();
        for item_1899 in var_1897 {
            {
                array_1898.value().string(item_1899.as_str());
            }
        }
        array_1898.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_quality_baseline_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelQualityBaselineConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1900) = &input.baselining_job_name {
        object.key("BaseliningJobName").string(var_1900.as_str());
    }
    if let Some(var_1901) = &input.constraints_resource {
        let mut object_1902 = object.key("ConstraintsResource").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_constraints_resource(
            &mut object_1902,
            var_1901,
        )?;
        object_1902.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_quality_app_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelQualityAppSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1903) = &input.image_uri {
        object.key("ImageUri").string(var_1903.as_str());
    }
    if let Some(var_1904) = &input.container_entrypoint {
        let mut array_1905 = object.key("ContainerEntrypoint").start_array();
        for item_1906 in var_1904 {
            {
                array_1905.value().string(item_1906.as_str());
            }
        }
        array_1905.finish();
    }
    if let Some(var_1907) = &input.container_arguments {
        let mut array_1908 = object.key("ContainerArguments").start_array();
        for item_1909 in var_1907 {
            {
                array_1908.value().string(item_1909.as_str());
            }
        }
        array_1908.finish();
    }
    if let Some(var_1910) = &input.record_preprocessor_source_uri {
        object
            .key("RecordPreprocessorSourceUri")
            .string(var_1910.as_str());
    }
    if let Some(var_1911) = &input.post_analytics_processor_source_uri {
        object
            .key("PostAnalyticsProcessorSourceUri")
            .string(var_1911.as_str());
    }
    if let Some(var_1912) = &input.problem_type {
        object.key("ProblemType").string(var_1912.as_str());
    }
    if let Some(var_1913) = &input.environment {
        let mut object_1914 = object.key("Environment").start_object();
        for (key_1915, value_1916) in var_1913 {
            {
                object_1914.key(key_1915).string(value_1916.as_str());
            }
        }
        object_1914.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_quality_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelQualityJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1917) = &input.endpoint_input {
        let mut object_1918 = object.key("EndpointInput").start_object();
        crate::json_ser::serialize_structure_crate_model_endpoint_input(
            &mut object_1918,
            var_1917,
        )?;
        object_1918.finish();
    }
    if let Some(var_1919) = &input.ground_truth_s3_input {
        let mut object_1920 = object.key("GroundTruthS3Input").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_ground_truth_s3_input(
            &mut object_1920,
            var_1919,
        )?;
        object_1920.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_schedule_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringScheduleConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1921) = &input.schedule_config {
        let mut object_1922 = object.key("ScheduleConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_schedule_config(
            &mut object_1922,
            var_1921,
        )?;
        object_1922.finish();
    }
    if let Some(var_1923) = &input.monitoring_job_definition {
        let mut object_1924 = object.key("MonitoringJobDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_job_definition(
            &mut object_1924,
            var_1923,
        )?;
        object_1924.finish();
    }
    if let Some(var_1925) = &input.monitoring_job_definition_name {
        object
            .key("MonitoringJobDefinitionName")
            .string(var_1925.as_str());
    }
    if let Some(var_1926) = &input.monitoring_type {
        object.key("MonitoringType").string(var_1926.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_instance_metadata_service_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceMetadataServiceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1927) = &input.minimum_instance_metadata_service_version {
        object
            .key("MinimumInstanceMetadataServiceVersion")
            .string(var_1927.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_notebook_instance_lifecycle_hook(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NotebookInstanceLifecycleHook,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1928) = &input.content {
        object.key("Content").string(var_1928.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_pipeline_definition_s3_location(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PipelineDefinitionS3Location,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1929) = &input.bucket {
        object.key("Bucket").string(var_1929.as_str());
    }
    if let Some(var_1930) = &input.object_key {
        object.key("ObjectKey").string(var_1930.as_str());
    }
    if let Some(var_1931) = &input.version_id {
        object.key("VersionId").string(var_1931.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_parallelism_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ParallelismConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("MaxParallelExecutionSteps").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_parallel_execution_steps).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_processing_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1932) = &input.input_name {
        object.key("InputName").string(var_1932.as_str());
    }
    if input.app_managed {
        object.key("AppManaged").boolean(input.app_managed);
    }
    if let Some(var_1933) = &input.s3_input {
        let mut object_1934 = object.key("S3Input").start_object();
        crate::json_ser::serialize_structure_crate_model_processing_s3_input(
            &mut object_1934,
            var_1933,
        )?;
        object_1934.finish();
    }
    if let Some(var_1935) = &input.dataset_definition {
        let mut object_1936 = object.key("DatasetDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_dataset_definition(
            &mut object_1936,
            var_1935,
        )?;
        object_1936.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_processing_output_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingOutputConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1937) = &input.outputs {
        let mut array_1938 = object.key("Outputs").start_array();
        for item_1939 in var_1937 {
            {
                let mut object_1940 = array_1938.value().start_object();
                crate::json_ser::serialize_structure_crate_model_processing_output(
                    &mut object_1940,
                    item_1939,
                )?;
                object_1940.finish();
            }
        }
        array_1938.finish();
    }
    if let Some(var_1941) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1941.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_processing_resources(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingResources,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1942) = &input.cluster_config {
        let mut object_1943 = object.key("ClusterConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_processing_cluster_config(
            &mut object_1943,
            var_1942,
        )?;
        object_1943.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_processing_stopping_condition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingStoppingCondition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("MaxRuntimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_runtime_in_seconds).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_app_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AppSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1944) = &input.image_uri {
        object.key("ImageUri").string(var_1944.as_str());
    }
    if let Some(var_1945) = &input.container_entrypoint {
        let mut array_1946 = object.key("ContainerEntrypoint").start_array();
        for item_1947 in var_1945 {
            {
                array_1946.value().string(item_1947.as_str());
            }
        }
        array_1946.finish();
    }
    if let Some(var_1948) = &input.container_arguments {
        let mut array_1949 = object.key("ContainerArguments").start_array();
        for item_1950 in var_1948 {
            {
                array_1949.value().string(item_1950.as_str());
            }
        }
        array_1949.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_network_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NetworkConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enable_inter_container_traffic_encryption {
        object
            .key("EnableInterContainerTrafficEncryption")
            .boolean(input.enable_inter_container_traffic_encryption);
    }
    if input.enable_network_isolation {
        object
            .key("EnableNetworkIsolation")
            .boolean(input.enable_network_isolation);
    }
    if let Some(var_1951) = &input.vpc_config {
        let mut object_1952 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config(&mut object_1952, var_1951)?;
        object_1952.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_experiment_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExperimentConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1953) = &input.experiment_name {
        object.key("ExperimentName").string(var_1953.as_str());
    }
    if let Some(var_1954) = &input.trial_name {
        object.key("TrialName").string(var_1954.as_str());
    }
    if let Some(var_1955) = &input.trial_component_display_name {
        object
            .key("TrialComponentDisplayName")
            .string(var_1955.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_service_catalog_provisioning_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceCatalogProvisioningDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1956) = &input.product_id {
        object.key("ProductId").string(var_1956.as_str());
    }
    if let Some(var_1957) = &input.provisioning_artifact_id {
        object
            .key("ProvisioningArtifactId")
            .string(var_1957.as_str());
    }
    if let Some(var_1958) = &input.path_id {
        object.key("PathId").string(var_1958.as_str());
    }
    if let Some(var_1959) = &input.provisioning_parameters {
        let mut array_1960 = object.key("ProvisioningParameters").start_array();
        for item_1961 in var_1959 {
            {
                let mut object_1962 = array_1960.value().start_object();
                crate::json_ser::serialize_structure_crate_model_provisioning_parameter(
                    &mut object_1962,
                    item_1961,
                )?;
                object_1962.finish();
            }
        }
        array_1960.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_algorithm_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AlgorithmSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1963) = &input.training_image {
        object.key("TrainingImage").string(var_1963.as_str());
    }
    if let Some(var_1964) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_1964.as_str());
    }
    if let Some(var_1965) = &input.training_input_mode {
        object.key("TrainingInputMode").string(var_1965.as_str());
    }
    if let Some(var_1966) = &input.metric_definitions {
        let mut array_1967 = object.key("MetricDefinitions").start_array();
        for item_1968 in var_1966 {
            {
                let mut object_1969 = array_1967.value().start_object();
                crate::json_ser::serialize_structure_crate_model_metric_definition(
                    &mut object_1969,
                    item_1968,
                )?;
                object_1969.finish();
            }
        }
        array_1967.finish();
    }
    if input.enable_sage_maker_metrics_time_series {
        object
            .key("EnableSageMakerMetricsTimeSeries")
            .boolean(input.enable_sage_maker_metrics_time_series);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_channel(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Channel,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1970) = &input.channel_name {
        object.key("ChannelName").string(var_1970.as_str());
    }
    if let Some(var_1971) = &input.data_source {
        let mut object_1972 = object.key("DataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source(&mut object_1972, var_1971)?;
        object_1972.finish();
    }
    if let Some(var_1973) = &input.content_type {
        object.key("ContentType").string(var_1973.as_str());
    }
    if let Some(var_1974) = &input.compression_type {
        object.key("CompressionType").string(var_1974.as_str());
    }
    if let Some(var_1975) = &input.record_wrapper_type {
        object.key("RecordWrapperType").string(var_1975.as_str());
    }
    if let Some(var_1976) = &input.input_mode {
        object.key("InputMode").string(var_1976.as_str());
    }
    if let Some(var_1977) = &input.shuffle_config {
        let mut object_1978 = object.key("ShuffleConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_shuffle_config(
            &mut object_1978,
            var_1977,
        )?;
        object_1978.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_output_data_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OutputDataConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1979) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1979.as_str());
    }
    if let Some(var_1980) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1980.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1981) = &input.instance_type {
        object.key("InstanceType").string(var_1981.as_str());
    }
    {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.instance_count).into()),
        );
    }
    {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.volume_size_in_gb).into()),
        );
    }
    if let Some(var_1982) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_1982.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_checkpoint_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CheckpointConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1983) = &input.s3_uri {
        object.key("S3Uri").string(var_1983.as_str());
    }
    if let Some(var_1984) = &input.local_path {
        object.key("LocalPath").string(var_1984.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_debug_hook_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DebugHookConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1985) = &input.local_path {
        object.key("LocalPath").string(var_1985.as_str());
    }
    if let Some(var_1986) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1986.as_str());
    }
    if let Some(var_1987) = &input.hook_parameters {
        let mut object_1988 = object.key("HookParameters").start_object();
        for (key_1989, value_1990) in var_1987 {
            {
                object_1988.key(key_1989).string(value_1990.as_str());
            }
        }
        object_1988.finish();
    }
    if let Some(var_1991) = &input.collection_configurations {
        let mut array_1992 = object.key("CollectionConfigurations").start_array();
        for item_1993 in var_1991 {
            {
                let mut object_1994 = array_1992.value().start_object();
                crate::json_ser::serialize_structure_crate_model_collection_configuration(
                    &mut object_1994,
                    item_1993,
                )?;
                object_1994.finish();
            }
        }
        array_1992.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_debug_rule_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DebugRuleConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1995) = &input.rule_configuration_name {
        object
            .key("RuleConfigurationName")
            .string(var_1995.as_str());
    }
    if let Some(var_1996) = &input.local_path {
        object.key("LocalPath").string(var_1996.as_str());
    }
    if let Some(var_1997) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1997.as_str());
    }
    if let Some(var_1998) = &input.rule_evaluator_image {
        object.key("RuleEvaluatorImage").string(var_1998.as_str());
    }
    if let Some(var_1999) = &input.instance_type {
        object.key("InstanceType").string(var_1999.as_str());
    }
    if input.volume_size_in_gb != 0 {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.volume_size_in_gb).into()),
        );
    }
    if let Some(var_2000) = &input.rule_parameters {
        let mut object_2001 = object.key("RuleParameters").start_object();
        for (key_2002, value_2003) in var_2000 {
            {
                object_2001.key(key_2002).string(value_2003.as_str());
            }
        }
        object_2001.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tensor_board_output_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TensorBoardOutputConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2004) = &input.local_path {
        object.key("LocalPath").string(var_2004.as_str());
    }
    if let Some(var_2005) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_2005.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_profiler_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProfilerConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2006) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_2006.as_str());
    }
    if let Some(var_2007) = &input.profiling_interval_in_milliseconds {
        object.key("ProfilingIntervalInMilliseconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2007).into()),
        );
    }
    if let Some(var_2008) = &input.profiling_parameters {
        let mut object_2009 = object.key("ProfilingParameters").start_object();
        for (key_2010, value_2011) in var_2008 {
            {
                object_2009.key(key_2010).string(value_2011.as_str());
            }
        }
        object_2009.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_profiler_rule_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProfilerRuleConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2012) = &input.rule_configuration_name {
        object
            .key("RuleConfigurationName")
            .string(var_2012.as_str());
    }
    if let Some(var_2013) = &input.local_path {
        object.key("LocalPath").string(var_2013.as_str());
    }
    if let Some(var_2014) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_2014.as_str());
    }
    if let Some(var_2015) = &input.rule_evaluator_image {
        object.key("RuleEvaluatorImage").string(var_2015.as_str());
    }
    if let Some(var_2016) = &input.instance_type {
        object.key("InstanceType").string(var_2016.as_str());
    }
    if input.volume_size_in_gb != 0 {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.volume_size_in_gb).into()),
        );
    }
    if let Some(var_2017) = &input.rule_parameters {
        let mut object_2018 = object.key("RuleParameters").start_object();
        for (key_2019, value_2020) in var_2017 {
            {
                object_2018.key(key_2019).string(value_2020.as_str());
            }
        }
        object_2018.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_retry_strategy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RetryStrategy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("MaximumRetryAttempts").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.maximum_retry_attempts).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_client_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelClientConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2021) = &input.invocations_timeout_in_seconds {
        object.key("InvocationsTimeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2021).into()),
        );
    }
    if let Some(var_2022) = &input.invocations_max_retries {
        object.key("InvocationsMaxRetries").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2022).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2023) = &input.data_source {
        let mut object_2024 = object.key("DataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_data_source(
            &mut object_2024,
            var_2023,
        )?;
        object_2024.finish();
    }
    if let Some(var_2025) = &input.content_type {
        object.key("ContentType").string(var_2025.as_str());
    }
    if let Some(var_2026) = &input.compression_type {
        object.key("CompressionType").string(var_2026.as_str());
    }
    if let Some(var_2027) = &input.split_type {
        object.key("SplitType").string(var_2027.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_output(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformOutput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2028) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_2028.as_str());
    }
    if let Some(var_2029) = &input.accept {
        object.key("Accept").string(var_2029.as_str());
    }
    if let Some(var_2030) = &input.assemble_with {
        object.key("AssembleWith").string(var_2030.as_str());
    }
    if let Some(var_2031) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2031.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_resources(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformResources,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2032) = &input.instance_type {
        object.key("InstanceType").string(var_2032.as_str());
    }
    if let Some(var_2033) = &input.instance_count {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2033).into()),
        );
    }
    if let Some(var_2034) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_2034.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_processing(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataProcessing,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2035) = &input.input_filter {
        object.key("InputFilter").string(var_2035.as_str());
    }
    if let Some(var_2036) = &input.output_filter {
        object.key("OutputFilter").string(var_2036.as_str());
    }
    if let Some(var_2037) = &input.join_source {
        object.key("JoinSource").string(var_2037.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_trial_component_status(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrialComponentStatus,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2038) = &input.primary_status {
        object.key("PrimaryStatus").string(var_2038.as_str());
    }
    if let Some(var_2039) = &input.message {
        object.key("Message").string(var_2039.as_str());
    }
    Ok(())
}

pub fn serialize_union_crate_model_trial_component_parameter_value(
    object_621: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrialComponentParameterValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    match input {
        crate::model::TrialComponentParameterValue::StringValue(inner) => {
            object_621.key("StringValue").string(inner.as_str());
        }
        crate::model::TrialComponentParameterValue::NumberValue(inner) => {
            object_621.key("NumberValue").number(
                #[allow(clippy::useless_conversion)]
                aws_smithy_types::Number::Float((*inner).into()),
            );
        }
        crate::model::TrialComponentParameterValue::Unknown => {
            return Err(
                aws_smithy_http::operation::SerializationError::unknown_variant(
                    "TrialComponentParameterValue",
                ),
            )
        }
    }
    Ok(())
}

pub fn serialize_structure_crate_model_trial_component_artifact(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrialComponentArtifact,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2040) = &input.media_type {
        object.key("MediaType").string(var_2040.as_str());
    }
    if let Some(var_2041) = &input.value {
        object.key("Value").string(var_2041.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cognito_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CognitoConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2042) = &input.user_pool {
        object.key("UserPool").string(var_2042.as_str());
    }
    if let Some(var_2043) = &input.client_id {
        object.key("ClientId").string(var_2043.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_oidc_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OidcConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2044) = &input.client_id {
        object.key("ClientId").string(var_2044.as_str());
    }
    if let Some(var_2045) = &input.client_secret {
        object.key("ClientSecret").string(var_2045.as_str());
    }
    if let Some(var_2046) = &input.issuer {
        object.key("Issuer").string(var_2046.as_str());
    }
    if let Some(var_2047) = &input.authorization_endpoint {
        object
            .key("AuthorizationEndpoint")
            .string(var_2047.as_str());
    }
    if let Some(var_2048) = &input.token_endpoint {
        object.key("TokenEndpoint").string(var_2048.as_str());
    }
    if let Some(var_2049) = &input.user_info_endpoint {
        object.key("UserInfoEndpoint").string(var_2049.as_str());
    }
    if let Some(var_2050) = &input.logout_endpoint {
        object.key("LogoutEndpoint").string(var_2050.as_str());
    }
    if let Some(var_2051) = &input.jwks_uri {
        object.key("JwksUri").string(var_2051.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_source_ip_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SourceIpConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2052) = &input.cidrs {
        let mut array_2053 = object.key("Cidrs").start_array();
        for item_2054 in var_2052 {
            {
                array_2053.value().string(item_2054.as_str());
            }
        }
        array_2053.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_workforce_vpc_config_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WorkforceVpcConfigRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2055) = &input.vpc_id {
        object.key("VpcId").string(var_2055.as_str());
    }
    if let Some(var_2056) = &input.security_group_ids {
        let mut array_2057 = object.key("SecurityGroupIds").start_array();
        for item_2058 in var_2056 {
            {
                array_2057.value().string(item_2058.as_str());
            }
        }
        array_2057.finish();
    }
    if let Some(var_2059) = &input.subnets {
        let mut array_2060 = object.key("Subnets").start_array();
        for item_2061 in var_2059 {
            {
                array_2060.value().string(item_2061.as_str());
            }
        }
        array_2060.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_member_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MemberDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2062) = &input.cognito_member_definition {
        let mut object_2063 = object.key("CognitoMemberDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_cognito_member_definition(
            &mut object_2063,
            var_2062,
        )?;
        object_2063.finish();
    }
    if let Some(var_2064) = &input.oidc_member_definition {
        let mut object_2065 = object.key("OidcMemberDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_oidc_member_definition(
            &mut object_2065,
            var_2064,
        )?;
        object_2065.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_notification_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NotificationConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2066) = &input.notification_topic_arn {
        object.key("NotificationTopicArn").string(var_2066.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_retention_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RetentionPolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2067) = &input.home_efs_file_system {
        object.key("HomeEfsFileSystem").string(var_2067.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_suggestion_query(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SuggestionQuery,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2068) = &input.property_name_query {
        let mut object_2069 = object.key("PropertyNameQuery").start_object();
        crate::json_ser::serialize_structure_crate_model_property_name_query(
            &mut object_2069,
            var_2068,
        )?;
        object_2069.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_metadata_search_expression(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelMetadataSearchExpression,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2070) = &input.filters {
        let mut array_2071 = object.key("Filters").start_array();
        for item_2072 in var_2070 {
            {
                let mut object_2073 = array_2071.value().start_object();
                crate::json_ser::serialize_structure_crate_model_model_metadata_filter(
                    &mut object_2073,
                    item_2072,
                )?;
                object_2073.finish();
            }
        }
        array_2071.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_query_filters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::QueryFilters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2074) = &input.types {
        let mut array_2075 = object.key("Types").start_array();
        for item_2076 in var_2074 {
            {
                array_2075.value().string(item_2076.as_str());
            }
        }
        array_2075.finish();
    }
    if let Some(var_2077) = &input.lineage_types {
        let mut array_2078 = object.key("LineageTypes").start_array();
        for item_2079 in var_2077 {
            {
                array_2078.value().string(item_2079.as_str());
            }
        }
        array_2078.finish();
    }
    if let Some(var_2080) = &input.created_before {
        object
            .key("CreatedBefore")
            .date_time(var_2080, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_2081) = &input.created_after {
        object
            .key("CreatedAfter")
            .date_time(var_2081, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_2082) = &input.modified_before {
        object
            .key("ModifiedBefore")
            .date_time(var_2082, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_2083) = &input.modified_after {
        object
            .key("ModifiedAfter")
            .date_time(var_2083, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_2084) = &input.properties {
        let mut object_2085 = object.key("Properties").start_object();
        for (key_2086, value_2087) in var_2084 {
            {
                object_2085.key(key_2086).string(value_2087.as_str());
            }
        }
        object_2085.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_device(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Device,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2088) = &input.device_name {
        object.key("DeviceName").string(var_2088.as_str());
    }
    if let Some(var_2089) = &input.description {
        object.key("Description").string(var_2089.as_str());
    }
    if let Some(var_2090) = &input.iot_thing_name {
        object.key("IotThingName").string(var_2090.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_renderable_task(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RenderableTask,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2091) = &input.input {
        object.key("Input").string(var_2091.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_search_expression(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SearchExpression,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2092) = &input.filters {
        let mut array_2093 = object.key("Filters").start_array();
        for item_2094 in var_2092 {
            {
                let mut object_2095 = array_2093.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(
                    &mut object_2095,
                    item_2094,
                )?;
                object_2095.finish();
            }
        }
        array_2093.finish();
    }
    if let Some(var_2096) = &input.nested_filters {
        let mut array_2097 = object.key("NestedFilters").start_array();
        for item_2098 in var_2096 {
            {
                let mut object_2099 = array_2097.value().start_object();
                crate::json_ser::serialize_structure_crate_model_nested_filters(
                    &mut object_2099,
                    item_2098,
                )?;
                object_2099.finish();
            }
        }
        array_2097.finish();
    }
    if let Some(var_2100) = &input.sub_expressions {
        let mut array_2101 = object.key("SubExpressions").start_array();
        for item_2102 in var_2100 {
            {
                let mut object_2103 = array_2101.value().start_object();
                crate::json_ser::serialize_structure_crate_model_search_expression(
                    &mut object_2103,
                    item_2102,
                )?;
                object_2103.finish();
            }
        }
        array_2101.finish();
    }
    if let Some(var_2104) = &input.operator {
        object.key("Operator").string(var_2104.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_output_parameter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OutputParameter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2105) = &input.name {
        object.key("Name").string(var_2105.as_str());
    }
    if let Some(var_2106) = &input.value {
        object.key("Value").string(var_2106.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_parameter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Parameter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2107) = &input.name {
        object.key("Name").string(var_2107.as_str());
    }
    if let Some(var_2108) = &input.value {
        object.key("Value").string(var_2108.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_git_config_for_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GitConfigForUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2109) = &input.secret_arn {
        object.key("SecretArn").string(var_2109.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_domain_settings_for_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DomainSettingsForUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2110) = &input.r_studio_server_pro_domain_settings_for_update {
        let mut object_2111 = object
            .key("RStudioServerProDomainSettingsForUpdate")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_r_studio_server_pro_domain_settings_for_update(&mut object_2111, var_2110)?;
        object_2111.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_variant_property(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VariantProperty,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2112) = &input.variant_property_type {
        object.key("VariantPropertyType").string(var_2112.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_desired_weight_and_capacity(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DesiredWeightAndCapacity,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2113) = &input.variant_name {
        object.key("VariantName").string(var_2113.as_str());
    }
    if let Some(var_2114) = &input.desired_weight {
        object.key("DesiredWeight").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_2114).into()),
        );
    }
    if let Some(var_2115) = &input.desired_instance_count {
        object.key("DesiredInstanceCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2115).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_service_catalog_provisioning_update_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceCatalogProvisioningUpdateDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2116) = &input.provisioning_artifact_id {
        object
            .key("ProvisioningArtifactId")
            .string(var_2116.as_str());
    }
    if let Some(var_2117) = &input.provisioning_parameters {
        let mut array_2118 = object.key("ProvisioningParameters").start_array();
        for item_2119 in var_2117 {
            {
                let mut object_2120 = array_2118.value().start_object();
                crate::json_ser::serialize_structure_crate_model_provisioning_parameter(
                    &mut object_2120,
                    item_2119,
                )?;
                object_2120.finish();
            }
        }
        array_2118.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_profiler_config_for_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProfilerConfigForUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2121) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_2121.as_str());
    }
    if let Some(var_2122) = &input.profiling_interval_in_milliseconds {
        object.key("ProfilingIntervalInMilliseconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2122).into()),
        );
    }
    if let Some(var_2123) = &input.profiling_parameters {
        let mut object_2124 = object.key("ProfilingParameters").start_object();
        for (key_2125, value_2126) in var_2123 {
            {
                object_2124.key(key_2125).string(value_2126.as_str());
            }
        }
        object_2124.finish();
    }
    if input.disable_profiler {
        object
            .key("DisableProfiler")
            .boolean(input.disable_profiler);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hyper_parameter_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2127) = &input.name {
        object.key("Name").string(var_2127.as_str());
    }
    if let Some(var_2128) = &input.description {
        object.key("Description").string(var_2128.as_str());
    }
    if let Some(var_2129) = &input.r#type {
        object.key("Type").string(var_2129.as_str());
    }
    if let Some(var_2130) = &input.range {
        let mut object_2131 = object.key("Range").start_object();
        crate::json_ser::serialize_structure_crate_model_parameter_range(
            &mut object_2131,
            var_2130,
        )?;
        object_2131.finish();
    }
    if input.is_tunable {
        object.key("IsTunable").boolean(input.is_tunable);
    }
    if input.is_required {
        object.key("IsRequired").boolean(input.is_required);
    }
    if let Some(var_2132) = &input.default_value {
        object.key("DefaultValue").string(var_2132.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_metric_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetricDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2133) = &input.name {
        object.key("Name").string(var_2133.as_str());
    }
    if let Some(var_2134) = &input.regex {
        object.key("Regex").string(var_2134.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_channel_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ChannelSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2135) = &input.name {
        object.key("Name").string(var_2135.as_str());
    }
    if let Some(var_2136) = &input.description {
        object.key("Description").string(var_2136.as_str());
    }
    if input.is_required {
        object.key("IsRequired").boolean(input.is_required);
    }
    if let Some(var_2137) = &input.supported_content_types {
        let mut array_2138 = object.key("SupportedContentTypes").start_array();
        for item_2139 in var_2137 {
            {
                array_2138.value().string(item_2139.as_str());
            }
        }
        array_2138.finish();
    }
    if let Some(var_2140) = &input.supported_compression_types {
        let mut array_2141 = object.key("SupportedCompressionTypes").start_array();
        for item_2142 in var_2140 {
            {
                array_2141.value().string(item_2142.as_str());
            }
        }
        array_2141.finish();
    }
    if let Some(var_2143) = &input.supported_input_modes {
        let mut array_2144 = object.key("SupportedInputModes").start_array();
        for item_2145 in var_2143 {
            {
                array_2144.value().string(item_2145.as_str());
            }
        }
        array_2144.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hyper_parameter_tuning_job_objective(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterTuningJobObjective,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2146) = &input.r#type {
        object.key("Type").string(var_2146.as_str());
    }
    if let Some(var_2147) = &input.metric_name {
        object.key("MetricName").string(var_2147.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_package_container_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelPackageContainerDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2148) = &input.container_hostname {
        object.key("ContainerHostname").string(var_2148.as_str());
    }
    if let Some(var_2149) = &input.image {
        object.key("Image").string(var_2149.as_str());
    }
    if let Some(var_2150) = &input.image_digest {
        object.key("ImageDigest").string(var_2150.as_str());
    }
    if let Some(var_2151) = &input.model_data_url {
        object.key("ModelDataUrl").string(var_2151.as_str());
    }
    if let Some(var_2152) = &input.product_id {
        object.key("ProductId").string(var_2152.as_str());
    }
    if let Some(var_2153) = &input.environment {
        let mut object_2154 = object.key("Environment").start_object();
        for (key_2155, value_2156) in var_2153 {
            {
                object_2154.key(key_2155).string(value_2156.as_str());
            }
        }
        object_2154.finish();
    }
    if let Some(var_2157) = &input.model_input {
        let mut object_2158 = object.key("ModelInput").start_object();
        crate::json_ser::serialize_structure_crate_model_model_input(&mut object_2158, var_2157)?;
        object_2158.finish();
    }
    if let Some(var_2159) = &input.framework {
        object.key("Framework").string(var_2159.as_str());
    }
    if let Some(var_2160) = &input.framework_version {
        object.key("FrameworkVersion").string(var_2160.as_str());
    }
    if let Some(var_2161) = &input.nearest_model_name {
        object.key("NearestModelName").string(var_2161.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_algorithm_validation_profile(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AlgorithmValidationProfile,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2162) = &input.profile_name {
        object.key("ProfileName").string(var_2162.as_str());
    }
    if let Some(var_2163) = &input.training_job_definition {
        let mut object_2164 = object.key("TrainingJobDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_training_job_definition(
            &mut object_2164,
            var_2163,
        )?;
        object_2164.finish();
    }
    if let Some(var_2165) = &input.transform_job_definition {
        let mut object_2166 = object.key("TransformJobDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_job_definition(
            &mut object_2166,
            var_2165,
        )?;
        object_2166.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kernel_spec(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KernelSpec,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2167) = &input.name {
        object.key("Name").string(var_2167.as_str());
    }
    if let Some(var_2168) = &input.display_name {
        object.key("DisplayName").string(var_2168.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_file_system_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FileSystemConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2169) = &input.mount_path {
        object.key("MountPath").string(var_2169.as_str());
    }
    if let Some(var_2170) = &input.default_uid {
        object.key("DefaultUid").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2170).into()),
        );
    }
    if let Some(var_2171) = &input.default_gid {
        object.key("DefaultGid").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2171).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_artifact_source_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ArtifactSourceType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2172) = &input.source_id_type {
        object.key("SourceIdType").string(var_2172.as_str());
    }
    if let Some(var_2173) = &input.value {
        object.key("Value").string(var_2173.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_ml_data_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMlDataSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2174) = &input.s3_data_source {
        let mut object_2175 = object.key("S3DataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_mls3_data_source(
            &mut object_2175,
            var_2174,
        )?;
        object_2175.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_ml_job_completion_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMlJobCompletionCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2176) = &input.max_candidates {
        object.key("MaxCandidates").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2176).into()),
        );
    }
    if let Some(var_2177) = &input.max_runtime_per_training_job_in_seconds {
        object.key("MaxRuntimePerTrainingJobInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2177).into()),
        );
    }
    if let Some(var_2178) = &input.max_auto_ml_job_runtime_in_seconds {
        object.key("MaxAutoMLJobRuntimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2178).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_ml_security_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMlSecurityConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2179) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_2179.as_str());
    }
    if input.enable_inter_container_traffic_encryption {
        object
            .key("EnableInterContainerTrafficEncryption")
            .boolean(input.enable_inter_container_traffic_encryption);
    }
    if let Some(var_2180) = &input.vpc_config {
        let mut object_2181 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config(&mut object_2181, var_2180)?;
        object_2181.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_ml_data_split_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMlDataSplitConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2182) = &input.validation_fraction {
        object.key("ValidationFraction").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_2182).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_ml_candidate_generation_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMlCandidateGenerationConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2183) = &input.feature_specification_s3_uri {
        object
            .key("FeatureSpecificationS3Uri")
            .string(var_2183.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_target_platform(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TargetPlatform,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2184) = &input.os {
        object.key("Os").string(var_2184.as_str());
    }
    if let Some(var_2185) = &input.arch {
        object.key("Arch").string(var_2185.as_str());
    }
    if let Some(var_2186) = &input.accelerator {
        object.key("Accelerator").string(var_2186.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_constraints_resource(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringConstraintsResource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2187) = &input.s3_uri {
        object.key("S3Uri").string(var_2187.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_statistics_resource(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringStatisticsResource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2188) = &input.s3_uri {
        object.key("S3Uri").string(var_2188.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EndpointInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2189) = &input.endpoint_name {
        object.key("EndpointName").string(var_2189.as_str());
    }
    if let Some(var_2190) = &input.local_path {
        object.key("LocalPath").string(var_2190.as_str());
    }
    if let Some(var_2191) = &input.s3_input_mode {
        object.key("S3InputMode").string(var_2191.as_str());
    }
    if let Some(var_2192) = &input.s3_data_distribution_type {
        object
            .key("S3DataDistributionType")
            .string(var_2192.as_str());
    }
    if let Some(var_2193) = &input.features_attribute {
        object.key("FeaturesAttribute").string(var_2193.as_str());
    }
    if let Some(var_2194) = &input.inference_attribute {
        object.key("InferenceAttribute").string(var_2194.as_str());
    }
    if let Some(var_2195) = &input.probability_attribute {
        object.key("ProbabilityAttribute").string(var_2195.as_str());
    }
    if let Some(var_2196) = &input.probability_threshold_attribute {
        object.key("ProbabilityThresholdAttribute").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_2196).into()),
        );
    }
    if let Some(var_2197) = &input.start_time_offset {
        object.key("StartTimeOffset").string(var_2197.as_str());
    }
    if let Some(var_2198) = &input.end_time_offset {
        object.key("EndTimeOffset").string(var_2198.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_output(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringOutput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2199) = &input.s3_output {
        let mut object_2200 = object.key("S3Output").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_s3_output(
            &mut object_2200,
            var_2199,
        )?;
        object_2200.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_cluster_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringClusterConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2201) = &input.instance_count {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2201).into()),
        );
    }
    if let Some(var_2202) = &input.instance_type {
        object.key("InstanceType").string(var_2202.as_str());
    }
    if let Some(var_2203) = &input.volume_size_in_gb {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2203).into()),
        );
    }
    if let Some(var_2204) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_2204.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sharing_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SharingSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2205) = &input.notebook_output_option {
        object.key("NotebookOutputOption").string(var_2205.as_str());
    }
    if let Some(var_2206) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_2206.as_str());
    }
    if let Some(var_2207) = &input.s3_kms_key_id {
        object.key("S3KmsKeyId").string(var_2207.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_jupyter_server_app_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JupyterServerAppSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2208) = &input.default_resource_spec {
        let mut object_2209 = object.key("DefaultResourceSpec").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_spec(&mut object_2209, var_2208)?;
        object_2209.finish();
    }
    if let Some(var_2210) = &input.lifecycle_config_arns {
        let mut array_2211 = object.key("LifecycleConfigArns").start_array();
        for item_2212 in var_2210 {
            {
                array_2211.value().string(item_2212.as_str());
            }
        }
        array_2211.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kernel_gateway_app_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KernelGatewayAppSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2213) = &input.default_resource_spec {
        let mut object_2214 = object.key("DefaultResourceSpec").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_spec(&mut object_2214, var_2213)?;
        object_2214.finish();
    }
    if let Some(var_2215) = &input.custom_images {
        let mut array_2216 = object.key("CustomImages").start_array();
        for item_2217 in var_2215 {
            {
                let mut object_2218 = array_2216.value().start_object();
                crate::json_ser::serialize_structure_crate_model_custom_image(
                    &mut object_2218,
                    item_2217,
                )?;
                object_2218.finish();
            }
        }
        array_2216.finish();
    }
    if let Some(var_2219) = &input.lifecycle_config_arns {
        let mut array_2220 = object.key("LifecycleConfigArns").start_array();
        for item_2221 in var_2219 {
            {
                array_2220.value().string(item_2221.as_str());
            }
        }
        array_2220.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tensor_board_app_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TensorBoardAppSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2222) = &input.default_resource_spec {
        let mut object_2223 = object.key("DefaultResourceSpec").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_spec(&mut object_2223, var_2222)?;
        object_2223.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_r_studio_server_pro_app_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RStudioServerProAppSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2224) = &input.access_status {
        object.key("AccessStatus").string(var_2224.as_str());
    }
    if let Some(var_2225) = &input.user_group {
        object.key("UserGroup").string(var_2225.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_r_session_app_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RSessionAppSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2226) = &input.default_resource_spec {
        let mut object_2227 = object.key("DefaultResourceSpec").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_spec(&mut object_2227, var_2226)?;
        object_2227.finish();
    }
    if let Some(var_2228) = &input.custom_images {
        let mut array_2229 = object.key("CustomImages").start_array();
        for item_2230 in var_2228 {
            {
                let mut object_2231 = array_2229.value().start_object();
                crate::json_ser::serialize_structure_crate_model_custom_image(
                    &mut object_2231,
                    item_2230,
                )?;
                object_2231.finish();
            }
        }
        array_2229.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_r_studio_server_pro_domain_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RStudioServerProDomainSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2232) = &input.domain_execution_role_arn {
        object
            .key("DomainExecutionRoleArn")
            .string(var_2232.as_str());
    }
    if let Some(var_2233) = &input.r_studio_connect_url {
        object.key("RStudioConnectUrl").string(var_2233.as_str());
    }
    if let Some(var_2234) = &input.r_studio_package_manager_url {
        object
            .key("RStudioPackageManagerUrl")
            .string(var_2234.as_str());
    }
    if let Some(var_2235) = &input.default_resource_spec {
        let mut object_2236 = object.key("DefaultResourceSpec").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_spec(&mut object_2236, var_2235)?;
        object_2236.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_blue_green_update_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BlueGreenUpdatePolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2237) = &input.traffic_routing_configuration {
        let mut object_2238 = object.key("TrafficRoutingConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_traffic_routing_config(
            &mut object_2238,
            var_2237,
        )?;
        object_2238.finish();
    }
    if let Some(var_2239) = &input.termination_wait_in_seconds {
        object.key("TerminationWaitInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2239).into()),
        );
    }
    if let Some(var_2240) = &input.maximum_execution_timeout_in_seconds {
        object.key("MaximumExecutionTimeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2240).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_rollback_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoRollbackConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2241) = &input.alarms {
        let mut array_2242 = object.key("Alarms").start_array();
        for item_2243 in var_2241 {
            {
                let mut object_2244 = array_2242.value().start_object();
                crate::json_ser::serialize_structure_crate_model_alarm(
                    &mut object_2244,
                    item_2243,
                )?;
                object_2244.finish();
            }
        }
        array_2242.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_production_variant_core_dump_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProductionVariantCoreDumpConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2245) = &input.destination_s3_uri {
        object.key("DestinationS3Uri").string(var_2245.as_str());
    }
    if let Some(var_2246) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2246.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_production_variant_serverless_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProductionVariantServerlessConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2247) = &input.memory_size_in_mb {
        object.key("MemorySizeInMB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2247).into()),
        );
    }
    if let Some(var_2248) = &input.max_concurrency {
        object.key("MaxConcurrency").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2248).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_capture_option(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CaptureOption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2249) = &input.capture_mode {
        object.key("CaptureMode").string(var_2249.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_capture_content_type_header(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CaptureContentTypeHeader,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2250) = &input.csv_content_types {
        let mut array_2251 = object.key("CsvContentTypes").start_array();
        for item_2252 in var_2250 {
            {
                array_2251.value().string(item_2252.as_str());
            }
        }
        array_2251.finish();
    }
    if let Some(var_2253) = &input.json_content_types {
        let mut array_2254 = object.key("JsonContentTypes").start_array();
        for item_2255 in var_2253 {
            {
                array_2254.value().string(item_2255.as_str());
            }
        }
        array_2254.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_async_inference_client_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AsyncInferenceClientConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2256) = &input.max_concurrent_invocations_per_instance {
        object.key("MaxConcurrentInvocationsPerInstance").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2256).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_async_inference_output_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AsyncInferenceOutputConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2257) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2257.as_str());
    }
    if let Some(var_2258) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_2258.as_str());
    }
    if let Some(var_2259) = &input.notification_config {
        let mut object_2260 = object.key("NotificationConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_async_inference_notification_config(
            &mut object_2260,
            var_2259,
        )?;
        object_2260.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_online_store_security_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OnlineStoreSecurityConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2261) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2261.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_storage_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3StorageConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2262) = &input.s3_uri {
        object.key("S3Uri").string(var_2262.as_str());
    }
    if let Some(var_2263) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2263.as_str());
    }
    if let Some(var_2264) = &input.resolved_output_s3_uri {
        object.key("ResolvedOutputS3Uri").string(var_2264.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_catalog_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataCatalogConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2265) = &input.table_name {
        object.key("TableName").string(var_2265.as_str());
    }
    if let Some(var_2266) = &input.catalog {
        object.key("Catalog").string(var_2266.as_str());
    }
    if let Some(var_2267) = &input.database {
        object.key("Database").string(var_2267.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_human_loop_activation_conditions_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HumanLoopActivationConditionsConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2268) = &input.human_loop_activation_conditions {
        object
            .key("HumanLoopActivationConditions")
            .string(var_2268.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_public_workforce_task_price(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PublicWorkforceTaskPrice,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2269) = &input.amount_in_usd {
        let mut object_2270 = object.key("AmountInUsd").start_object();
        crate::json_ser::serialize_structure_crate_model_usd(&mut object_2270, var_2269)?;
        object_2270.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_limits(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceLimits,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("MaxNumberOfTrainingJobs").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_number_of_training_jobs).into()),
        );
    }
    {
        object.key("MaxParallelTrainingJobs").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_parallel_training_jobs).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_parameter_ranges(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ParameterRanges,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2271) = &input.integer_parameter_ranges {
        let mut array_2272 = object.key("IntegerParameterRanges").start_array();
        for item_2273 in var_2271 {
            {
                let mut object_2274 = array_2272.value().start_object();
                crate::json_ser::serialize_structure_crate_model_integer_parameter_range(
                    &mut object_2274,
                    item_2273,
                )?;
                object_2274.finish();
            }
        }
        array_2272.finish();
    }
    if let Some(var_2275) = &input.continuous_parameter_ranges {
        let mut array_2276 = object.key("ContinuousParameterRanges").start_array();
        for item_2277 in var_2275 {
            {
                let mut object_2278 = array_2276.value().start_object();
                crate::json_ser::serialize_structure_crate_model_continuous_parameter_range(
                    &mut object_2278,
                    item_2277,
                )?;
                object_2278.finish();
            }
        }
        array_2276.finish();
    }
    if let Some(var_2279) = &input.categorical_parameter_ranges {
        let mut array_2280 = object.key("CategoricalParameterRanges").start_array();
        for item_2281 in var_2279 {
            {
                let mut object_2282 = array_2280.value().start_object();
                crate::json_ser::serialize_structure_crate_model_categorical_parameter_range(
                    &mut object_2282,
                    item_2281,
                )?;
                object_2282.finish();
            }
        }
        array_2280.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tuning_job_completion_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TuningJobCompletionCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2283) = &input.target_objective_metric_value {
        object.key("TargetObjectiveMetricValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_2283).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hyper_parameter_algorithm_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterAlgorithmSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2284) = &input.training_image {
        object.key("TrainingImage").string(var_2284.as_str());
    }
    if let Some(var_2285) = &input.training_input_mode {
        object.key("TrainingInputMode").string(var_2285.as_str());
    }
    if let Some(var_2286) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_2286.as_str());
    }
    if let Some(var_2287) = &input.metric_definitions {
        let mut array_2288 = object.key("MetricDefinitions").start_array();
        for item_2289 in var_2287 {
            {
                let mut object_2290 = array_2288.value().start_object();
                crate::json_ser::serialize_structure_crate_model_metric_definition(
                    &mut object_2290,
                    item_2289,
                )?;
                object_2290.finish();
            }
        }
        array_2288.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_parent_hyper_parameter_tuning_job(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ParentHyperParameterTuningJob,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2291) = &input.hyper_parameter_tuning_job_name {
        object
            .key("HyperParameterTuningJobName")
            .string(var_2291.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_traffic_pattern(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrafficPattern,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2292) = &input.traffic_type {
        object.key("TrafficType").string(var_2292.as_str());
    }
    if let Some(var_2293) = &input.phases {
        let mut array_2294 = object.key("Phases").start_array();
        for item_2295 in var_2293 {
            {
                let mut object_2296 = array_2294.value().start_object();
                crate::json_ser::serialize_structure_crate_model_phase(
                    &mut object_2296,
                    item_2295,
                )?;
                object_2296.finish();
            }
        }
        array_2294.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_recommendation_job_resource_limit(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RecommendationJobResourceLimit,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2297) = &input.max_number_of_tests {
        object.key("MaxNumberOfTests").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2297).into()),
        );
    }
    if let Some(var_2298) = &input.max_parallel_of_tests {
        object.key("MaxParallelOfTests").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2298).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_endpoint_input_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EndpointInputConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2299) = &input.instance_type {
        object.key("InstanceType").string(var_2299.as_str());
    }
    if let Some(var_2300) = &input.inference_specification_name {
        object
            .key("InferenceSpecificationName")
            .string(var_2300.as_str());
    }
    if let Some(var_2301) = &input.environment_parameter_ranges {
        let mut object_2302 = object.key("EnvironmentParameterRanges").start_object();
        crate::json_ser::serialize_structure_crate_model_environment_parameter_ranges(
            &mut object_2302,
            var_2301,
        )?;
        object_2302.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_latency_threshold(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelLatencyThreshold,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2303) = &input.percentile {
        object.key("Percentile").string(var_2303.as_str());
    }
    if input.value_in_milliseconds != 0 {
        object.key("ValueInMilliseconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.value_in_milliseconds).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_recommendation_job_compiled_output_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RecommendationJobCompiledOutputConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2304) = &input.s3_output_uri {
        object.key("S3OutputUri").string(var_2304.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_labeling_job_data_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobDataSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2305) = &input.s3_data_source {
        let mut object_2306 = object.key("S3DataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_labeling_job_s3_data_source(
            &mut object_2306,
            var_2305,
        )?;
        object_2306.finish();
    }
    if let Some(var_2307) = &input.sns_data_source {
        let mut object_2308 = object.key("SnsDataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_labeling_job_sns_data_source(
            &mut object_2308,
            var_2307,
        )?;
        object_2308.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_labeling_job_data_attributes(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobDataAttributes,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2309) = &input.content_classifiers {
        let mut array_2310 = object.key("ContentClassifiers").start_array();
        for item_2311 in var_2309 {
            {
                array_2310.value().string(item_2311.as_str());
            }
        }
        array_2310.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_labeling_job_resource_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobResourceConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2312) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_2312.as_str());
    }
    if let Some(var_2313) = &input.vpc_config {
        let mut object_2314 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config(&mut object_2314, var_2313)?;
        object_2314.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ui_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UiConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2315) = &input.ui_template_s3_uri {
        object.key("UiTemplateS3Uri").string(var_2315.as_str());
    }
    if let Some(var_2316) = &input.human_task_ui_arn {
        object.key("HumanTaskUiArn").string(var_2316.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_annotation_consolidation_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnnotationConsolidationConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2317) = &input.annotation_consolidation_lambda_arn {
        object
            .key("AnnotationConsolidationLambdaArn")
            .string(var_2317.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_image_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImageConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2318) = &input.repository_access_mode {
        object.key("RepositoryAccessMode").string(var_2318.as_str());
    }
    if let Some(var_2319) = &input.repository_auth_config {
        let mut object_2320 = object.key("RepositoryAuthConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_repository_auth_config(
            &mut object_2320,
            var_2319,
        )?;
        object_2320.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_multi_model_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MultiModelConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2321) = &input.model_cache_setting {
        object.key("ModelCacheSetting").string(var_2321.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_ground_truth_s3_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringGroundTruthS3Input,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2322) = &input.s3_uri {
        object.key("S3Uri").string(var_2322.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_package_validation_profile(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelPackageValidationProfile,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2323) = &input.profile_name {
        object.key("ProfileName").string(var_2323.as_str());
    }
    if let Some(var_2324) = &input.transform_job_definition {
        let mut object_2325 = object.key("TransformJobDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_job_definition(
            &mut object_2325,
            var_2324,
        )?;
        object_2325.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_source_algorithm(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SourceAlgorithm,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2326) = &input.model_data_url {
        object.key("ModelDataUrl").string(var_2326.as_str());
    }
    if let Some(var_2327) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_2327.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_quality(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelQuality,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2328) = &input.statistics {
        let mut object_2329 = object.key("Statistics").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(
            &mut object_2329,
            var_2328,
        )?;
        object_2329.finish();
    }
    if let Some(var_2330) = &input.constraints {
        let mut object_2331 = object.key("Constraints").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(
            &mut object_2331,
            var_2330,
        )?;
        object_2331.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_data_quality(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelDataQuality,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2332) = &input.statistics {
        let mut object_2333 = object.key("Statistics").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(
            &mut object_2333,
            var_2332,
        )?;
        object_2333.finish();
    }
    if let Some(var_2334) = &input.constraints {
        let mut object_2335 = object.key("Constraints").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(
            &mut object_2335,
            var_2334,
        )?;
        object_2335.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bias(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Bias,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2336) = &input.report {
        let mut object_2337 = object.key("Report").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(
            &mut object_2337,
            var_2336,
        )?;
        object_2337.finish();
    }
    if let Some(var_2338) = &input.pre_training_report {
        let mut object_2339 = object.key("PreTrainingReport").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(
            &mut object_2339,
            var_2338,
        )?;
        object_2339.finish();
    }
    if let Some(var_2340) = &input.post_training_report {
        let mut object_2341 = object.key("PostTrainingReport").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(
            &mut object_2341,
            var_2340,
        )?;
        object_2341.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_explainability(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Explainability,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2342) = &input.report {
        let mut object_2343 = object.key("Report").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(
            &mut object_2343,
            var_2342,
        )?;
        object_2343.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_drift_check_bias(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DriftCheckBias,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2344) = &input.config_file {
        let mut object_2345 = object.key("ConfigFile").start_object();
        crate::json_ser::serialize_structure_crate_model_file_source(&mut object_2345, var_2344)?;
        object_2345.finish();
    }
    if let Some(var_2346) = &input.pre_training_constraints {
        let mut object_2347 = object.key("PreTrainingConstraints").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(
            &mut object_2347,
            var_2346,
        )?;
        object_2347.finish();
    }
    if let Some(var_2348) = &input.post_training_constraints {
        let mut object_2349 = object.key("PostTrainingConstraints").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(
            &mut object_2349,
            var_2348,
        )?;
        object_2349.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_drift_check_explainability(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DriftCheckExplainability,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2350) = &input.constraints {
        let mut object_2351 = object.key("Constraints").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(
            &mut object_2351,
            var_2350,
        )?;
        object_2351.finish();
    }
    if let Some(var_2352) = &input.config_file {
        let mut object_2353 = object.key("ConfigFile").start_object();
        crate::json_ser::serialize_structure_crate_model_file_source(&mut object_2353, var_2352)?;
        object_2353.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_drift_check_model_quality(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DriftCheckModelQuality,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2354) = &input.statistics {
        let mut object_2355 = object.key("Statistics").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(
            &mut object_2355,
            var_2354,
        )?;
        object_2355.finish();
    }
    if let Some(var_2356) = &input.constraints {
        let mut object_2357 = object.key("Constraints").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(
            &mut object_2357,
            var_2356,
        )?;
        object_2357.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_drift_check_model_data_quality(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DriftCheckModelDataQuality,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2358) = &input.statistics {
        let mut object_2359 = object.key("Statistics").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(
            &mut object_2359,
            var_2358,
        )?;
        object_2359.finish();
    }
    if let Some(var_2360) = &input.constraints {
        let mut object_2361 = object.key("Constraints").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(
            &mut object_2361,
            var_2360,
        )?;
        object_2361.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schedule_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ScheduleConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2362) = &input.schedule_expression {
        object.key("ScheduleExpression").string(var_2362.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_job_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringJobDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2363) = &input.baseline_config {
        let mut object_2364 = object.key("BaselineConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_baseline_config(
            &mut object_2364,
            var_2363,
        )?;
        object_2364.finish();
    }
    if let Some(var_2365) = &input.monitoring_inputs {
        let mut array_2366 = object.key("MonitoringInputs").start_array();
        for item_2367 in var_2365 {
            {
                let mut object_2368 = array_2366.value().start_object();
                crate::json_ser::serialize_structure_crate_model_monitoring_input(
                    &mut object_2368,
                    item_2367,
                )?;
                object_2368.finish();
            }
        }
        array_2366.finish();
    }
    if let Some(var_2369) = &input.monitoring_output_config {
        let mut object_2370 = object.key("MonitoringOutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_output_config(
            &mut object_2370,
            var_2369,
        )?;
        object_2370.finish();
    }
    if let Some(var_2371) = &input.monitoring_resources {
        let mut object_2372 = object.key("MonitoringResources").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_resources(
            &mut object_2372,
            var_2371,
        )?;
        object_2372.finish();
    }
    if let Some(var_2373) = &input.monitoring_app_specification {
        let mut object_2374 = object.key("MonitoringAppSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_app_specification(
            &mut object_2374,
            var_2373,
        )?;
        object_2374.finish();
    }
    if let Some(var_2375) = &input.stopping_condition {
        let mut object_2376 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_stopping_condition(
            &mut object_2376,
            var_2375,
        )?;
        object_2376.finish();
    }
    if let Some(var_2377) = &input.environment {
        let mut object_2378 = object.key("Environment").start_object();
        for (key_2379, value_2380) in var_2377 {
            {
                object_2378.key(key_2379).string(value_2380.as_str());
            }
        }
        object_2378.finish();
    }
    if let Some(var_2381) = &input.network_config {
        let mut object_2382 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_network_config(
            &mut object_2382,
            var_2381,
        )?;
        object_2382.finish();
    }
    if let Some(var_2383) = &input.role_arn {
        object.key("RoleArn").string(var_2383.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_processing_s3_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingS3Input,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2384) = &input.s3_uri {
        object.key("S3Uri").string(var_2384.as_str());
    }
    if let Some(var_2385) = &input.local_path {
        object.key("LocalPath").string(var_2385.as_str());
    }
    if let Some(var_2386) = &input.s3_data_type {
        object.key("S3DataType").string(var_2386.as_str());
    }
    if let Some(var_2387) = &input.s3_input_mode {
        object.key("S3InputMode").string(var_2387.as_str());
    }
    if let Some(var_2388) = &input.s3_data_distribution_type {
        object
            .key("S3DataDistributionType")
            .string(var_2388.as_str());
    }
    if let Some(var_2389) = &input.s3_compression_type {
        object.key("S3CompressionType").string(var_2389.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dataset_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DatasetDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2390) = &input.athena_dataset_definition {
        let mut object_2391 = object.key("AthenaDatasetDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_athena_dataset_definition(
            &mut object_2391,
            var_2390,
        )?;
        object_2391.finish();
    }
    if let Some(var_2392) = &input.redshift_dataset_definition {
        let mut object_2393 = object.key("RedshiftDatasetDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_redshift_dataset_definition(
            &mut object_2393,
            var_2392,
        )?;
        object_2393.finish();
    }
    if let Some(var_2394) = &input.local_path {
        object.key("LocalPath").string(var_2394.as_str());
    }
    if let Some(var_2395) = &input.data_distribution_type {
        object.key("DataDistributionType").string(var_2395.as_str());
    }
    if let Some(var_2396) = &input.input_mode {
        object.key("InputMode").string(var_2396.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_processing_output(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingOutput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2397) = &input.output_name {
        object.key("OutputName").string(var_2397.as_str());
    }
    if let Some(var_2398) = &input.s3_output {
        let mut object_2399 = object.key("S3Output").start_object();
        crate::json_ser::serialize_structure_crate_model_processing_s3_output(
            &mut object_2399,
            var_2398,
        )?;
        object_2399.finish();
    }
    if let Some(var_2400) = &input.feature_store_output {
        let mut object_2401 = object.key("FeatureStoreOutput").start_object();
        crate::json_ser::serialize_structure_crate_model_processing_feature_store_output(
            &mut object_2401,
            var_2400,
        )?;
        object_2401.finish();
    }
    if input.app_managed {
        object.key("AppManaged").boolean(input.app_managed);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_processing_cluster_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingClusterConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2402) = &input.instance_count {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2402).into()),
        );
    }
    if let Some(var_2403) = &input.instance_type {
        object.key("InstanceType").string(var_2403.as_str());
    }
    if let Some(var_2404) = &input.volume_size_in_gb {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2404).into()),
        );
    }
    if let Some(var_2405) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_2405.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_provisioning_parameter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProvisioningParameter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2406) = &input.key {
        object.key("Key").string(var_2406.as_str());
    }
    if let Some(var_2407) = &input.value {
        object.key("Value").string(var_2407.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2408) = &input.s3_data_source {
        let mut object_2409 = object.key("S3DataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_data_source(
            &mut object_2409,
            var_2408,
        )?;
        object_2409.finish();
    }
    if let Some(var_2410) = &input.file_system_data_source {
        let mut object_2411 = object.key("FileSystemDataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_file_system_data_source(
            &mut object_2411,
            var_2410,
        )?;
        object_2411.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_shuffle_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ShuffleConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("Seed").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.seed).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_collection_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CollectionConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2412) = &input.collection_name {
        object.key("CollectionName").string(var_2412.as_str());
    }
    if let Some(var_2413) = &input.collection_parameters {
        let mut object_2414 = object.key("CollectionParameters").start_object();
        for (key_2415, value_2416) in var_2413 {
            {
                object_2414.key(key_2415).string(value_2416.as_str());
            }
        }
        object_2414.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_data_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformDataSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2417) = &input.s3_data_source {
        let mut object_2418 = object.key("S3DataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_s3_data_source(
            &mut object_2418,
            var_2417,
        )?;
        object_2418.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cognito_member_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CognitoMemberDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2419) = &input.user_pool {
        object.key("UserPool").string(var_2419.as_str());
    }
    if let Some(var_2420) = &input.user_group {
        object.key("UserGroup").string(var_2420.as_str());
    }
    if let Some(var_2421) = &input.client_id {
        object.key("ClientId").string(var_2421.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_oidc_member_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OidcMemberDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2422) = &input.groups {
        let mut array_2423 = object.key("Groups").start_array();
        for item_2424 in var_2422 {
            {
                array_2423.value().string(item_2424.as_str());
            }
        }
        array_2423.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_property_name_query(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PropertyNameQuery,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2425) = &input.property_name_hint {
        object.key("PropertyNameHint").string(var_2425.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_metadata_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelMetadataFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2426) = &input.name {
        object.key("Name").string(var_2426.as_str());
    }
    if let Some(var_2427) = &input.value {
        object.key("Value").string(var_2427.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Filter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2428) = &input.name {
        object.key("Name").string(var_2428.as_str());
    }
    if let Some(var_2429) = &input.operator {
        object.key("Operator").string(var_2429.as_str());
    }
    if let Some(var_2430) = &input.value {
        object.key("Value").string(var_2430.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_nested_filters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NestedFilters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2431) = &input.nested_property_name {
        object.key("NestedPropertyName").string(var_2431.as_str());
    }
    if let Some(var_2432) = &input.filters {
        let mut array_2433 = object.key("Filters").start_array();
        for item_2434 in var_2432 {
            {
                let mut object_2435 = array_2433.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(
                    &mut object_2435,
                    item_2434,
                )?;
                object_2435.finish();
            }
        }
        array_2433.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_r_studio_server_pro_domain_settings_for_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RStudioServerProDomainSettingsForUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2436) = &input.domain_execution_role_arn {
        object
            .key("DomainExecutionRoleArn")
            .string(var_2436.as_str());
    }
    if let Some(var_2437) = &input.default_resource_spec {
        let mut object_2438 = object.key("DefaultResourceSpec").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_spec(&mut object_2438, var_2437)?;
        object_2438.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_parameter_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ParameterRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2439) = &input.integer_parameter_range_specification {
        let mut object_2440 = object
            .key("IntegerParameterRangeSpecification")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_integer_parameter_range_specification(
            &mut object_2440,
            var_2439,
        )?;
        object_2440.finish();
    }
    if let Some(var_2441) = &input.continuous_parameter_range_specification {
        let mut object_2442 = object
            .key("ContinuousParameterRangeSpecification")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_continuous_parameter_range_specification(
            &mut object_2442,
            var_2441,
        )?;
        object_2442.finish();
    }
    if let Some(var_2443) = &input.categorical_parameter_range_specification {
        let mut object_2444 = object
            .key("CategoricalParameterRangeSpecification")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_categorical_parameter_range_specification(
            &mut object_2444,
            var_2443,
        )?;
        object_2444.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2445) = &input.data_input_config {
        object.key("DataInputConfig").string(var_2445.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_training_job_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrainingJobDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2446) = &input.training_input_mode {
        object.key("TrainingInputMode").string(var_2446.as_str());
    }
    if let Some(var_2447) = &input.hyper_parameters {
        let mut object_2448 = object.key("HyperParameters").start_object();
        for (key_2449, value_2450) in var_2447 {
            {
                object_2448.key(key_2449).string(value_2450.as_str());
            }
        }
        object_2448.finish();
    }
    if let Some(var_2451) = &input.input_data_config {
        let mut array_2452 = object.key("InputDataConfig").start_array();
        for item_2453 in var_2451 {
            {
                let mut object_2454 = array_2452.value().start_object();
                crate::json_ser::serialize_structure_crate_model_channel(
                    &mut object_2454,
                    item_2453,
                )?;
                object_2454.finish();
            }
        }
        array_2452.finish();
    }
    if let Some(var_2455) = &input.output_data_config {
        let mut object_2456 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_output_data_config(
            &mut object_2456,
            var_2455,
        )?;
        object_2456.finish();
    }
    if let Some(var_2457) = &input.resource_config {
        let mut object_2458 = object.key("ResourceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_config(
            &mut object_2458,
            var_2457,
        )?;
        object_2458.finish();
    }
    if let Some(var_2459) = &input.stopping_condition {
        let mut object_2460 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_stopping_condition(
            &mut object_2460,
            var_2459,
        )?;
        object_2460.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_job_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformJobDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2461) = &input.max_concurrent_transforms {
        object.key("MaxConcurrentTransforms").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2461).into()),
        );
    }
    if let Some(var_2462) = &input.max_payload_in_mb {
        object.key("MaxPayloadInMB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2462).into()),
        );
    }
    if let Some(var_2463) = &input.batch_strategy {
        object.key("BatchStrategy").string(var_2463.as_str());
    }
    if let Some(var_2464) = &input.environment {
        let mut object_2465 = object.key("Environment").start_object();
        for (key_2466, value_2467) in var_2464 {
            {
                object_2465.key(key_2466).string(value_2467.as_str());
            }
        }
        object_2465.finish();
    }
    if let Some(var_2468) = &input.transform_input {
        let mut object_2469 = object.key("TransformInput").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_input(
            &mut object_2469,
            var_2468,
        )?;
        object_2469.finish();
    }
    if let Some(var_2470) = &input.transform_output {
        let mut object_2471 = object.key("TransformOutput").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_output(
            &mut object_2471,
            var_2470,
        )?;
        object_2471.finish();
    }
    if let Some(var_2472) = &input.transform_resources {
        let mut object_2473 = object.key("TransformResources").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_resources(
            &mut object_2473,
            var_2472,
        )?;
        object_2473.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_mls3_data_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMls3DataSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2474) = &input.s3_data_type {
        object.key("S3DataType").string(var_2474.as_str());
    }
    if let Some(var_2475) = &input.s3_uri {
        object.key("S3Uri").string(var_2475.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_s3_output(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringS3Output,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2476) = &input.s3_uri {
        object.key("S3Uri").string(var_2476.as_str());
    }
    if let Some(var_2477) = &input.local_path {
        object.key("LocalPath").string(var_2477.as_str());
    }
    if let Some(var_2478) = &input.s3_upload_mode {
        object.key("S3UploadMode").string(var_2478.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_image(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomImage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2479) = &input.image_name {
        object.key("ImageName").string(var_2479.as_str());
    }
    if let Some(var_2480) = &input.image_version_number {
        object.key("ImageVersionNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2480).into()),
        );
    }
    if let Some(var_2481) = &input.app_image_config_name {
        object.key("AppImageConfigName").string(var_2481.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_traffic_routing_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrafficRoutingConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2482) = &input.r#type {
        object.key("Type").string(var_2482.as_str());
    }
    if let Some(var_2483) = &input.wait_interval_in_seconds {
        object.key("WaitIntervalInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2483).into()),
        );
    }
    if let Some(var_2484) = &input.canary_size {
        let mut object_2485 = object.key("CanarySize").start_object();
        crate::json_ser::serialize_structure_crate_model_capacity_size(&mut object_2485, var_2484)?;
        object_2485.finish();
    }
    if let Some(var_2486) = &input.linear_step_size {
        let mut object_2487 = object.key("LinearStepSize").start_object();
        crate::json_ser::serialize_structure_crate_model_capacity_size(&mut object_2487, var_2486)?;
        object_2487.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_alarm(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Alarm,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2488) = &input.alarm_name {
        object.key("AlarmName").string(var_2488.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_async_inference_notification_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AsyncInferenceNotificationConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2489) = &input.success_topic {
        object.key("SuccessTopic").string(var_2489.as_str());
    }
    if let Some(var_2490) = &input.error_topic {
        object.key("ErrorTopic").string(var_2490.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_usd(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Usd,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.dollars != 0 {
        object.key("Dollars").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.dollars).into()),
        );
    }
    if input.cents != 0 {
        object.key("Cents").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.cents).into()),
        );
    }
    if input.tenth_fractions_of_a_cent != 0 {
        object.key("TenthFractionsOfACent").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.tenth_fractions_of_a_cent).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_integer_parameter_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IntegerParameterRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2491) = &input.name {
        object.key("Name").string(var_2491.as_str());
    }
    if let Some(var_2492) = &input.min_value {
        object.key("MinValue").string(var_2492.as_str());
    }
    if let Some(var_2493) = &input.max_value {
        object.key("MaxValue").string(var_2493.as_str());
    }
    if let Some(var_2494) = &input.scaling_type {
        object.key("ScalingType").string(var_2494.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_continuous_parameter_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContinuousParameterRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2495) = &input.name {
        object.key("Name").string(var_2495.as_str());
    }
    if let Some(var_2496) = &input.min_value {
        object.key("MinValue").string(var_2496.as_str());
    }
    if let Some(var_2497) = &input.max_value {
        object.key("MaxValue").string(var_2497.as_str());
    }
    if let Some(var_2498) = &input.scaling_type {
        object.key("ScalingType").string(var_2498.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_categorical_parameter_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CategoricalParameterRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2499) = &input.name {
        object.key("Name").string(var_2499.as_str());
    }
    if let Some(var_2500) = &input.values {
        let mut array_2501 = object.key("Values").start_array();
        for item_2502 in var_2500 {
            {
                array_2501.value().string(item_2502.as_str());
            }
        }
        array_2501.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_phase(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Phase,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2503) = &input.initial_number_of_users {
        object.key("InitialNumberOfUsers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2503).into()),
        );
    }
    if let Some(var_2504) = &input.spawn_rate {
        object.key("SpawnRate").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2504).into()),
        );
    }
    if let Some(var_2505) = &input.duration_in_seconds {
        object.key("DurationInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2505).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_environment_parameter_ranges(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EnvironmentParameterRanges,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2506) = &input.categorical_parameter_ranges {
        let mut array_2507 = object.key("CategoricalParameterRanges").start_array();
        for item_2508 in var_2506 {
            {
                let mut object_2509 = array_2507.value().start_object();
                crate::json_ser::serialize_structure_crate_model_categorical_parameter(
                    &mut object_2509,
                    item_2508,
                )?;
                object_2509.finish();
            }
        }
        array_2507.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_labeling_job_s3_data_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobS3DataSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2510) = &input.manifest_s3_uri {
        object.key("ManifestS3Uri").string(var_2510.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_labeling_job_sns_data_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobSnsDataSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2511) = &input.sns_topic_arn {
        object.key("SnsTopicArn").string(var_2511.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_repository_auth_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RepositoryAuthConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2512) = &input.repository_credentials_provider_arn {
        object
            .key("RepositoryCredentialsProviderArn")
            .string(var_2512.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_metrics_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetricsSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2513) = &input.content_type {
        object.key("ContentType").string(var_2513.as_str());
    }
    if let Some(var_2514) = &input.content_digest {
        object.key("ContentDigest").string(var_2514.as_str());
    }
    if let Some(var_2515) = &input.s3_uri {
        object.key("S3Uri").string(var_2515.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_file_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FileSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2516) = &input.content_type {
        object.key("ContentType").string(var_2516.as_str());
    }
    if let Some(var_2517) = &input.content_digest {
        object.key("ContentDigest").string(var_2517.as_str());
    }
    if let Some(var_2518) = &input.s3_uri {
        object.key("S3Uri").string(var_2518.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_baseline_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringBaselineConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2519) = &input.baselining_job_name {
        object.key("BaseliningJobName").string(var_2519.as_str());
    }
    if let Some(var_2520) = &input.constraints_resource {
        let mut object_2521 = object.key("ConstraintsResource").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_constraints_resource(
            &mut object_2521,
            var_2520,
        )?;
        object_2521.finish();
    }
    if let Some(var_2522) = &input.statistics_resource {
        let mut object_2523 = object.key("StatisticsResource").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_statistics_resource(
            &mut object_2523,
            var_2522,
        )?;
        object_2523.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2524) = &input.endpoint_input {
        let mut object_2525 = object.key("EndpointInput").start_object();
        crate::json_ser::serialize_structure_crate_model_endpoint_input(
            &mut object_2525,
            var_2524,
        )?;
        object_2525.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_app_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringAppSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2526) = &input.image_uri {
        object.key("ImageUri").string(var_2526.as_str());
    }
    if let Some(var_2527) = &input.container_entrypoint {
        let mut array_2528 = object.key("ContainerEntrypoint").start_array();
        for item_2529 in var_2527 {
            {
                array_2528.value().string(item_2529.as_str());
            }
        }
        array_2528.finish();
    }
    if let Some(var_2530) = &input.container_arguments {
        let mut array_2531 = object.key("ContainerArguments").start_array();
        for item_2532 in var_2530 {
            {
                array_2531.value().string(item_2532.as_str());
            }
        }
        array_2531.finish();
    }
    if let Some(var_2533) = &input.record_preprocessor_source_uri {
        object
            .key("RecordPreprocessorSourceUri")
            .string(var_2533.as_str());
    }
    if let Some(var_2534) = &input.post_analytics_processor_source_uri {
        object
            .key("PostAnalyticsProcessorSourceUri")
            .string(var_2534.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_athena_dataset_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AthenaDatasetDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2535) = &input.catalog {
        object.key("Catalog").string(var_2535.as_str());
    }
    if let Some(var_2536) = &input.database {
        object.key("Database").string(var_2536.as_str());
    }
    if let Some(var_2537) = &input.query_string {
        object.key("QueryString").string(var_2537.as_str());
    }
    if let Some(var_2538) = &input.work_group {
        object.key("WorkGroup").string(var_2538.as_str());
    }
    if let Some(var_2539) = &input.output_s3_uri {
        object.key("OutputS3Uri").string(var_2539.as_str());
    }
    if let Some(var_2540) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2540.as_str());
    }
    if let Some(var_2541) = &input.output_format {
        object.key("OutputFormat").string(var_2541.as_str());
    }
    if let Some(var_2542) = &input.output_compression {
        object.key("OutputCompression").string(var_2542.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_redshift_dataset_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RedshiftDatasetDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2543) = &input.cluster_id {
        object.key("ClusterId").string(var_2543.as_str());
    }
    if let Some(var_2544) = &input.database {
        object.key("Database").string(var_2544.as_str());
    }
    if let Some(var_2545) = &input.db_user {
        object.key("DbUser").string(var_2545.as_str());
    }
    if let Some(var_2546) = &input.query_string {
        object.key("QueryString").string(var_2546.as_str());
    }
    if let Some(var_2547) = &input.cluster_role_arn {
        object.key("ClusterRoleArn").string(var_2547.as_str());
    }
    if let Some(var_2548) = &input.output_s3_uri {
        object.key("OutputS3Uri").string(var_2548.as_str());
    }
    if let Some(var_2549) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2549.as_str());
    }
    if let Some(var_2550) = &input.output_format {
        object.key("OutputFormat").string(var_2550.as_str());
    }
    if let Some(var_2551) = &input.output_compression {
        object.key("OutputCompression").string(var_2551.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_processing_s3_output(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingS3Output,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2552) = &input.s3_uri {
        object.key("S3Uri").string(var_2552.as_str());
    }
    if let Some(var_2553) = &input.local_path {
        object.key("LocalPath").string(var_2553.as_str());
    }
    if let Some(var_2554) = &input.s3_upload_mode {
        object.key("S3UploadMode").string(var_2554.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_processing_feature_store_output(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingFeatureStoreOutput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2555) = &input.feature_group_name {
        object.key("FeatureGroupName").string(var_2555.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_data_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3DataSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2556) = &input.s3_data_type {
        object.key("S3DataType").string(var_2556.as_str());
    }
    if let Some(var_2557) = &input.s3_uri {
        object.key("S3Uri").string(var_2557.as_str());
    }
    if let Some(var_2558) = &input.s3_data_distribution_type {
        object
            .key("S3DataDistributionType")
            .string(var_2558.as_str());
    }
    if let Some(var_2559) = &input.attribute_names {
        let mut array_2560 = object.key("AttributeNames").start_array();
        for item_2561 in var_2559 {
            {
                array_2560.value().string(item_2561.as_str());
            }
        }
        array_2560.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_file_system_data_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FileSystemDataSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2562) = &input.file_system_id {
        object.key("FileSystemId").string(var_2562.as_str());
    }
    if let Some(var_2563) = &input.file_system_access_mode {
        object.key("FileSystemAccessMode").string(var_2563.as_str());
    }
    if let Some(var_2564) = &input.file_system_type {
        object.key("FileSystemType").string(var_2564.as_str());
    }
    if let Some(var_2565) = &input.directory_path {
        object.key("DirectoryPath").string(var_2565.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_s3_data_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformS3DataSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2566) = &input.s3_data_type {
        object.key("S3DataType").string(var_2566.as_str());
    }
    if let Some(var_2567) = &input.s3_uri {
        object.key("S3Uri").string(var_2567.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_integer_parameter_range_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IntegerParameterRangeSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2568) = &input.min_value {
        object.key("MinValue").string(var_2568.as_str());
    }
    if let Some(var_2569) = &input.max_value {
        object.key("MaxValue").string(var_2569.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_continuous_parameter_range_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContinuousParameterRangeSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2570) = &input.min_value {
        object.key("MinValue").string(var_2570.as_str());
    }
    if let Some(var_2571) = &input.max_value {
        object.key("MaxValue").string(var_2571.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_categorical_parameter_range_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CategoricalParameterRangeSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2572) = &input.values {
        let mut array_2573 = object.key("Values").start_array();
        for item_2574 in var_2572 {
            {
                array_2573.value().string(item_2574.as_str());
            }
        }
        array_2573.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_capacity_size(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CapacitySize,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2575) = &input.r#type {
        object.key("Type").string(var_2575.as_str());
    }
    if let Some(var_2576) = &input.value {
        object.key("Value").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2576).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_categorical_parameter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CategoricalParameter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2577) = &input.name {
        object.key("Name").string(var_2577.as_str());
    }
    if let Some(var_2578) = &input.value {
        let mut array_2579 = object.key("Value").start_array();
        for item_2580 in var_2578 {
            {
                array_2579.value().string(item_2580.as_str());
            }
        }
        array_2579.finish();
    }
    Ok(())
}
